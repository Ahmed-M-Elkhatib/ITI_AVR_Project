
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003724  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00003724  00003798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002a30  00000000  00000000  000037a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c65  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000070ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a9d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000ab30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000adbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b58b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9a 0b 	call	0x1734	; 0x1734 <main>
      7a:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e6       	ldi	r26, 0x68	; 104
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 65 1b 	jmp	0x36ca	; 0x36ca <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 65 1b 	jmp	0x36ca	; 0x36ca <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 65 1b 	jmp	0x36ca	; 0x36ca <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 65 1b 	jmp	0x36ca	; 0x36ca <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 65 1b 	jmp	0x36ca	; 0x36ca <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_VidSetPin_Direction>:




void DIO_VidSetPin_Direction(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8State)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	if (1==Copy_u8State)
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	09 f0       	breq	.+2      	; 0xb58 <DIO_VidSetPin_Direction+0x22>
     b56:	6f c0       	rjmp	.+222    	; 0xc36 <DIO_VidSetPin_Direction+0x100>
	{
		switch (Copy_u8Port)
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	3f 83       	std	Y+7, r19	; 0x07
     b60:	2e 83       	std	Y+6, r18	; 0x06
     b62:	8e 81       	ldd	r24, Y+6	; 0x06
     b64:	9f 81       	ldd	r25, Y+7	; 0x07
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	91 05       	cpc	r25, r1
     b6a:	49 f1       	breq	.+82     	; 0xbbe <DIO_VidSetPin_Direction+0x88>
     b6c:	2e 81       	ldd	r18, Y+6	; 0x06
     b6e:	3f 81       	ldd	r19, Y+7	; 0x07
     b70:	22 30       	cpi	r18, 0x02	; 2
     b72:	31 05       	cpc	r19, r1
     b74:	2c f4       	brge	.+10     	; 0xb80 <DIO_VidSetPin_Direction+0x4a>
     b76:	8e 81       	ldd	r24, Y+6	; 0x06
     b78:	9f 81       	ldd	r25, Y+7	; 0x07
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	61 f0       	breq	.+24     	; 0xb96 <DIO_VidSetPin_Direction+0x60>
     b7e:	d2 c0       	rjmp	.+420    	; 0xd24 <DIO_VidSetPin_Direction+0x1ee>
     b80:	2e 81       	ldd	r18, Y+6	; 0x06
     b82:	3f 81       	ldd	r19, Y+7	; 0x07
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	71 f1       	breq	.+92     	; 0xbe6 <DIO_VidSetPin_Direction+0xb0>
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	91 05       	cpc	r25, r1
     b92:	e9 f1       	breq	.+122    	; 0xc0e <DIO_VidSetPin_Direction+0xd8>
     b94:	c7 c0       	rjmp	.+398    	; 0xd24 <DIO_VidSetPin_Direction+0x1ee>
			{case 0:
			SET_BIT( DDRA,Copy_u8Pin); break;
     b96:	aa e3       	ldi	r26, 0x3A	; 58
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	ea e3       	ldi	r30, 0x3A	; 58
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	48 2f       	mov	r20, r24
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	02 2e       	mov	r0, r18
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <DIO_VidSetPin_Direction+0x7e>
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	0a 94       	dec	r0
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <DIO_VidSetPin_Direction+0x7a>
     bb8:	84 2b       	or	r24, r20
     bba:	8c 93       	st	X, r24
     bbc:	b3 c0       	rjmp	.+358    	; 0xd24 <DIO_VidSetPin_Direction+0x1ee>
			case 1:
			SET_BIT( DDRB,Copy_u8Pin); break;
     bbe:	a7 e3       	ldi	r26, 0x37	; 55
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e7 e3       	ldi	r30, 0x37	; 55
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	48 2f       	mov	r20, r24
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	02 2e       	mov	r0, r18
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <DIO_VidSetPin_Direction+0xa6>
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	0a 94       	dec	r0
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <DIO_VidSetPin_Direction+0xa2>
     be0:	84 2b       	or	r24, r20
     be2:	8c 93       	st	X, r24
     be4:	9f c0       	rjmp	.+318    	; 0xd24 <DIO_VidSetPin_Direction+0x1ee>
			case 2:
			SET_BIT( DDRC,Copy_u8Pin); break;
     be6:	a4 e3       	ldi	r26, 0x34	; 52
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e4 e3       	ldi	r30, 0x34	; 52
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	48 2f       	mov	r20, r24
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	02 2e       	mov	r0, r18
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <DIO_VidSetPin_Direction+0xce>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <DIO_VidSetPin_Direction+0xca>
     c08:	84 2b       	or	r24, r20
     c0a:	8c 93       	st	X, r24
     c0c:	8b c0       	rjmp	.+278    	; 0xd24 <DIO_VidSetPin_Direction+0x1ee>
			case 3:
			SET_BIT( DDRD,Copy_u8Pin); break;
     c0e:	a1 e3       	ldi	r26, 0x31	; 49
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e1 e3       	ldi	r30, 0x31	; 49
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	48 2f       	mov	r20, r24
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 2e       	mov	r0, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <DIO_VidSetPin_Direction+0xf6>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <DIO_VidSetPin_Direction+0xf2>
     c30:	84 2b       	or	r24, r20
     c32:	8c 93       	st	X, r24
     c34:	77 c0       	rjmp	.+238    	; 0xd24 <DIO_VidSetPin_Direction+0x1ee>
	}}
	else if (0==Copy_u8State)
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	88 23       	and	r24, r24
     c3a:	09 f0       	breq	.+2      	; 0xc3e <DIO_VidSetPin_Direction+0x108>
     c3c:	73 c0       	rjmp	.+230    	; 0xd24 <DIO_VidSetPin_Direction+0x1ee>
	{	switch(Copy_u8Port)
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	3d 83       	std	Y+5, r19	; 0x05
     c46:	2c 83       	std	Y+4, r18	; 0x04
     c48:	8c 81       	ldd	r24, Y+4	; 0x04
     c4a:	9d 81       	ldd	r25, Y+5	; 0x05
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	91 05       	cpc	r25, r1
     c50:	59 f1       	breq	.+86     	; 0xca8 <DIO_VidSetPin_Direction+0x172>
     c52:	2c 81       	ldd	r18, Y+4	; 0x04
     c54:	3d 81       	ldd	r19, Y+5	; 0x05
     c56:	22 30       	cpi	r18, 0x02	; 2
     c58:	31 05       	cpc	r19, r1
     c5a:	2c f4       	brge	.+10     	; 0xc66 <DIO_VidSetPin_Direction+0x130>
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	9d 81       	ldd	r25, Y+5	; 0x05
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	69 f0       	breq	.+26     	; 0xc7e <DIO_VidSetPin_Direction+0x148>
     c64:	5f c0       	rjmp	.+190    	; 0xd24 <DIO_VidSetPin_Direction+0x1ee>
     c66:	2c 81       	ldd	r18, Y+4	; 0x04
     c68:	3d 81       	ldd	r19, Y+5	; 0x05
     c6a:	22 30       	cpi	r18, 0x02	; 2
     c6c:	31 05       	cpc	r19, r1
     c6e:	89 f1       	breq	.+98     	; 0xcd2 <DIO_VidSetPin_Direction+0x19c>
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	83 30       	cpi	r24, 0x03	; 3
     c76:	91 05       	cpc	r25, r1
     c78:	09 f4       	brne	.+2      	; 0xc7c <DIO_VidSetPin_Direction+0x146>
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <DIO_VidSetPin_Direction+0x1c6>
     c7c:	53 c0       	rjmp	.+166    	; 0xd24 <DIO_VidSetPin_Direction+0x1ee>
			{case 0:
			CLR_BIT( DDRA,Copy_u8Pin); break;
     c7e:	aa e3       	ldi	r26, 0x3A	; 58
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	ea e3       	ldi	r30, 0x3A	; 58
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_VidSetPin_Direction+0x166>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_VidSetPin_Direction+0x162>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	3e c0       	rjmp	.+124    	; 0xd24 <DIO_VidSetPin_Direction+0x1ee>
			case 1:
			CLR_BIT( DDRB,Copy_u8Pin); break;
     ca8:	a7 e3       	ldi	r26, 0x37	; 55
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e7 e3       	ldi	r30, 0x37	; 55
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	48 2f       	mov	r20, r24
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	02 2e       	mov	r0, r18
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <DIO_VidSetPin_Direction+0x190>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	0a 94       	dec	r0
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <DIO_VidSetPin_Direction+0x18c>
     cca:	80 95       	com	r24
     ccc:	84 23       	and	r24, r20
     cce:	8c 93       	st	X, r24
     cd0:	29 c0       	rjmp	.+82     	; 0xd24 <DIO_VidSetPin_Direction+0x1ee>
			case 2:
			CLR_BIT( DDRC,Copy_u8Pin); break;
     cd2:	a4 e3       	ldi	r26, 0x34	; 52
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e4 e3       	ldi	r30, 0x34	; 52
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	48 2f       	mov	r20, r24
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	02 2e       	mov	r0, r18
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <DIO_VidSetPin_Direction+0x1ba>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	0a 94       	dec	r0
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <DIO_VidSetPin_Direction+0x1b6>
     cf4:	80 95       	com	r24
     cf6:	84 23       	and	r24, r20
     cf8:	8c 93       	st	X, r24
     cfa:	14 c0       	rjmp	.+40     	; 0xd24 <DIO_VidSetPin_Direction+0x1ee>
			case 3:
			CLR_BIT( DDRD,Copy_u8Pin); break;
     cfc:	a1 e3       	ldi	r26, 0x31	; 49
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e1 e3       	ldi	r30, 0x31	; 49
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <DIO_VidSetPin_Direction+0x1e4>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <DIO_VidSetPin_Direction+0x1e0>
     d1e:	80 95       	com	r24
     d20:	84 23       	and	r24, r20
     d22:	8c 93       	st	X, r24
	}}

	}
     d24:	27 96       	adiw	r28, 0x07	; 7
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <DIO_VidSetPin_Value>:
	
	
void DIO_VidSetPin_Value(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	27 97       	sbiw	r28, 0x07	; 7
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	6a 83       	std	Y+2, r22	; 0x02
     d4e:	4b 83       	std	Y+3, r20	; 0x03
	if(0==Copy_u8Value)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	88 23       	and	r24, r24
     d54:	09 f0       	breq	.+2      	; 0xd58 <DIO_VidSetPin_Value+0x22>
     d56:	74 c0       	rjmp	.+232    	; 0xe40 <DIO_VidSetPin_Value+0x10a>
	
	{switch(Copy_u8Port)
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3f 83       	std	Y+7, r19	; 0x07
     d60:	2e 83       	std	Y+6, r18	; 0x06
     d62:	8e 81       	ldd	r24, Y+6	; 0x06
     d64:	9f 81       	ldd	r25, Y+7	; 0x07
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	91 05       	cpc	r25, r1
     d6a:	59 f1       	breq	.+86     	; 0xdc2 <DIO_VidSetPin_Value+0x8c>
     d6c:	2e 81       	ldd	r18, Y+6	; 0x06
     d6e:	3f 81       	ldd	r19, Y+7	; 0x07
     d70:	22 30       	cpi	r18, 0x02	; 2
     d72:	31 05       	cpc	r19, r1
     d74:	2c f4       	brge	.+10     	; 0xd80 <DIO_VidSetPin_Value+0x4a>
     d76:	8e 81       	ldd	r24, Y+6	; 0x06
     d78:	9f 81       	ldd	r25, Y+7	; 0x07
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	69 f0       	breq	.+26     	; 0xd98 <DIO_VidSetPin_Value+0x62>
     d7e:	d2 c0       	rjmp	.+420    	; 0xf24 <DIO_VidSetPin_Value+0x1ee>
     d80:	2e 81       	ldd	r18, Y+6	; 0x06
     d82:	3f 81       	ldd	r19, Y+7	; 0x07
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	31 05       	cpc	r19, r1
     d88:	89 f1       	breq	.+98     	; 0xdec <DIO_VidSetPin_Value+0xb6>
     d8a:	8e 81       	ldd	r24, Y+6	; 0x06
     d8c:	9f 81       	ldd	r25, Y+7	; 0x07
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	91 05       	cpc	r25, r1
     d92:	09 f4       	brne	.+2      	; 0xd96 <DIO_VidSetPin_Value+0x60>
     d94:	40 c0       	rjmp	.+128    	; 0xe16 <DIO_VidSetPin_Value+0xe0>
     d96:	c6 c0       	rjmp	.+396    	; 0xf24 <DIO_VidSetPin_Value+0x1ee>
		{case 0:
		CLR_BIT( PORTA,Copy_u8Pin) ;break;
     d98:	ab e3       	ldi	r26, 0x3B	; 59
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	eb e3       	ldi	r30, 0x3B	; 59
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <DIO_VidSetPin_Value+0x80>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <DIO_VidSetPin_Value+0x7c>
     dba:	80 95       	com	r24
     dbc:	84 23       	and	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	b1 c0       	rjmp	.+354    	; 0xf24 <DIO_VidSetPin_Value+0x1ee>
		case 1:
		CLR_BIT( PORTB,Copy_u8Pin) ;break;
     dc2:	a8 e3       	ldi	r26, 0x38	; 56
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e8 e3       	ldi	r30, 0x38	; 56
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <DIO_VidSetPin_Value+0xaa>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <DIO_VidSetPin_Value+0xa6>
     de4:	80 95       	com	r24
     de6:	84 23       	and	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	9c c0       	rjmp	.+312    	; 0xf24 <DIO_VidSetPin_Value+0x1ee>
		case 2:
		CLR_BIT( PORTC,Copy_u8Pin) ;break;
     dec:	a5 e3       	ldi	r26, 0x35	; 53
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e5 e3       	ldi	r30, 0x35	; 53
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_VidSetPin_Value+0xd4>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_VidSetPin_Value+0xd0>
     e0e:	80 95       	com	r24
     e10:	84 23       	and	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	87 c0       	rjmp	.+270    	; 0xf24 <DIO_VidSetPin_Value+0x1ee>
		case 3:
		CLR_BIT( PORTD,Copy_u8Pin) ;break;
     e16:	a2 e3       	ldi	r26, 0x32	; 50
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e2 e3       	ldi	r30, 0x32	; 50
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_VidSetPin_Value+0xfe>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_VidSetPin_Value+0xfa>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	72 c0       	rjmp	.+228    	; 0xf24 <DIO_VidSetPin_Value+0x1ee>
	}}
	else if (1==Copy_u8Value)
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	09 f0       	breq	.+2      	; 0xe48 <DIO_VidSetPin_Value+0x112>
     e46:	6e c0       	rjmp	.+220    	; 0xf24 <DIO_VidSetPin_Value+0x1ee>
	{switch(Copy_u8Port)
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	3d 83       	std	Y+5, r19	; 0x05
     e50:	2c 83       	std	Y+4, r18	; 0x04
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	91 05       	cpc	r25, r1
     e5a:	49 f1       	breq	.+82     	; 0xeae <DIO_VidSetPin_Value+0x178>
     e5c:	2c 81       	ldd	r18, Y+4	; 0x04
     e5e:	3d 81       	ldd	r19, Y+5	; 0x05
     e60:	22 30       	cpi	r18, 0x02	; 2
     e62:	31 05       	cpc	r19, r1
     e64:	2c f4       	brge	.+10     	; 0xe70 <DIO_VidSetPin_Value+0x13a>
     e66:	8c 81       	ldd	r24, Y+4	; 0x04
     e68:	9d 81       	ldd	r25, Y+5	; 0x05
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	61 f0       	breq	.+24     	; 0xe86 <DIO_VidSetPin_Value+0x150>
     e6e:	5a c0       	rjmp	.+180    	; 0xf24 <DIO_VidSetPin_Value+0x1ee>
     e70:	2c 81       	ldd	r18, Y+4	; 0x04
     e72:	3d 81       	ldd	r19, Y+5	; 0x05
     e74:	22 30       	cpi	r18, 0x02	; 2
     e76:	31 05       	cpc	r19, r1
     e78:	71 f1       	breq	.+92     	; 0xed6 <DIO_VidSetPin_Value+0x1a0>
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	9d 81       	ldd	r25, Y+5	; 0x05
     e7e:	83 30       	cpi	r24, 0x03	; 3
     e80:	91 05       	cpc	r25, r1
     e82:	e9 f1       	breq	.+122    	; 0xefe <DIO_VidSetPin_Value+0x1c8>
     e84:	4f c0       	rjmp	.+158    	; 0xf24 <DIO_VidSetPin_Value+0x1ee>
		{case 0:
		SET_BIT( PORTA,Copy_u8Pin) ;break;
     e86:	ab e3       	ldi	r26, 0x3B	; 59
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	eb e3       	ldi	r30, 0x3B	; 59
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_VidSetPin_Value+0x16e>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_VidSetPin_Value+0x16a>
     ea8:	84 2b       	or	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	3b c0       	rjmp	.+118    	; 0xf24 <DIO_VidSetPin_Value+0x1ee>
		case 1:
		SET_BIT( PORTB,Copy_u8Pin) ;break;
     eae:	a8 e3       	ldi	r26, 0x38	; 56
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e8 e3       	ldi	r30, 0x38	; 56
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_VidSetPin_Value+0x196>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_VidSetPin_Value+0x192>
     ed0:	84 2b       	or	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	27 c0       	rjmp	.+78     	; 0xf24 <DIO_VidSetPin_Value+0x1ee>
		case 2:
		SET_BIT( PORTC,Copy_u8Pin) ;break;
     ed6:	a5 e3       	ldi	r26, 0x35	; 53
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e5 e3       	ldi	r30, 0x35	; 53
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_VidSetPin_Value+0x1be>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_VidSetPin_Value+0x1ba>
     ef8:	84 2b       	or	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	13 c0       	rjmp	.+38     	; 0xf24 <DIO_VidSetPin_Value+0x1ee>
		case 3:
		SET_BIT( PORTD,Copy_u8Pin) ;break;
     efe:	a2 e3       	ldi	r26, 0x32	; 50
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e2 e3       	ldi	r30, 0x32	; 50
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_VidSetPin_Value+0x1e6>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_VidSetPin_Value+0x1e2>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
	}}
		
		
}
     f24:	27 96       	adiw	r28, 0x07	; 7
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <DIO_VidGetPin>:
	
	u8 DIO_VidGetPin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{	u8 bit;
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <DIO_VidGetPin+0x6>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <DIO_VidGetPin+0x8>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	6b 83       	std	Y+3, r22	; 0x03
		switch(Copy_u8Port)
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	3d 83       	std	Y+5, r19	; 0x05
     f50:	2c 83       	std	Y+4, r18	; 0x04
     f52:	4c 81       	ldd	r20, Y+4	; 0x04
     f54:	5d 81       	ldd	r21, Y+5	; 0x05
     f56:	41 30       	cpi	r20, 0x01	; 1
     f58:	51 05       	cpc	r21, r1
     f5a:	41 f1       	breq	.+80     	; 0xfac <DIO_VidGetPin+0x76>
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	9d 81       	ldd	r25, Y+5	; 0x05
     f60:	82 30       	cpi	r24, 0x02	; 2
     f62:	91 05       	cpc	r25, r1
     f64:	34 f4       	brge	.+12     	; 0xf72 <DIO_VidGetPin+0x3c>
     f66:	2c 81       	ldd	r18, Y+4	; 0x04
     f68:	3d 81       	ldd	r19, Y+5	; 0x05
     f6a:	21 15       	cp	r18, r1
     f6c:	31 05       	cpc	r19, r1
     f6e:	61 f0       	breq	.+24     	; 0xf88 <DIO_VidGetPin+0x52>
     f70:	52 c0       	rjmp	.+164    	; 0x1016 <DIO_VidGetPin+0xe0>
     f72:	4c 81       	ldd	r20, Y+4	; 0x04
     f74:	5d 81       	ldd	r21, Y+5	; 0x05
     f76:	42 30       	cpi	r20, 0x02	; 2
     f78:	51 05       	cpc	r21, r1
     f7a:	51 f1       	breq	.+84     	; 0xfd0 <DIO_VidGetPin+0x9a>
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	9d 81       	ldd	r25, Y+5	; 0x05
     f80:	83 30       	cpi	r24, 0x03	; 3
     f82:	91 05       	cpc	r25, r1
     f84:	b9 f1       	breq	.+110    	; 0xff4 <DIO_VidGetPin+0xbe>
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <DIO_VidGetPin+0xe0>
		{case 0:
		bit=GET_BIT( PINA,Copy_u8Pin) ;break;
     f88:	e9 e3       	ldi	r30, 0x39	; 57
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_VidGetPin+0x6a>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_VidGetPin+0x66>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	35 c0       	rjmp	.+106    	; 0x1016 <DIO_VidGetPin+0xe0>
		case 1:
		bit=GET_BIT( PINB,Copy_u8Pin) ;break;
     fac:	e6 e3       	ldi	r30, 0x36	; 54
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	a9 01       	movw	r20, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_VidGetPin+0x8e>
     fc0:	55 95       	asr	r21
     fc2:	47 95       	ror	r20
     fc4:	8a 95       	dec	r24
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_VidGetPin+0x8a>
     fc8:	ca 01       	movw	r24, r20
     fca:	81 70       	andi	r24, 0x01	; 1
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	23 c0       	rjmp	.+70     	; 0x1016 <DIO_VidGetPin+0xe0>
		case 2:
		bit=GET_BIT( PINC,Copy_u8Pin) ;break;
     fd0:	e3 e3       	ldi	r30, 0x33	; 51
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	a9 01       	movw	r20, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_VidGetPin+0xb2>
     fe4:	55 95       	asr	r21
     fe6:	47 95       	ror	r20
     fe8:	8a 95       	dec	r24
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_VidGetPin+0xae>
     fec:	ca 01       	movw	r24, r20
     fee:	81 70       	andi	r24, 0x01	; 1
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	11 c0       	rjmp	.+34     	; 0x1016 <DIO_VidGetPin+0xe0>
		case 3:
		bit=GET_BIT( PIND,Copy_u8Pin) ;break;
     ff4:	e0 e3       	ldi	r30, 0x30	; 48
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a9 01       	movw	r20, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_VidGetPin+0xd6>
    1008:	55 95       	asr	r21
    100a:	47 95       	ror	r20
    100c:	8a 95       	dec	r24
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_VidGetPin+0xd2>
    1010:	ca 01       	movw	r24, r20
    1012:	81 70       	andi	r24, 0x01	; 1
    1014:	89 83       	std	Y+1, r24	; 0x01
		}
		return bit;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
				
		
	}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <DIO_VidToggelPin>:

	
	
	void DIO_VidToggelPin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <DIO_VidToggelPin+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <DIO_VidToggelPin+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	3c 83       	std	Y+4, r19	; 0x04
    1040:	2b 83       	std	Y+3, r18	; 0x03
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	9c 81       	ldd	r25, Y+4	; 0x04
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	91 05       	cpc	r25, r1
    104a:	49 f1       	breq	.+82     	; 0x109e <DIO_VidToggelPin+0x76>
    104c:	2b 81       	ldd	r18, Y+3	; 0x03
    104e:	3c 81       	ldd	r19, Y+4	; 0x04
    1050:	22 30       	cpi	r18, 0x02	; 2
    1052:	31 05       	cpc	r19, r1
    1054:	2c f4       	brge	.+10     	; 0x1060 <DIO_VidToggelPin+0x38>
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	61 f0       	breq	.+24     	; 0x1076 <DIO_VidToggelPin+0x4e>
    105e:	5a c0       	rjmp	.+180    	; 0x1114 <DIO_VidToggelPin+0xec>
    1060:	2b 81       	ldd	r18, Y+3	; 0x03
    1062:	3c 81       	ldd	r19, Y+4	; 0x04
    1064:	22 30       	cpi	r18, 0x02	; 2
    1066:	31 05       	cpc	r19, r1
    1068:	71 f1       	breq	.+92     	; 0x10c6 <DIO_VidToggelPin+0x9e>
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	83 30       	cpi	r24, 0x03	; 3
    1070:	91 05       	cpc	r25, r1
    1072:	e9 f1       	breq	.+122    	; 0x10ee <DIO_VidToggelPin+0xc6>
    1074:	4f c0       	rjmp	.+158    	; 0x1114 <DIO_VidToggelPin+0xec>
		{
			case 0:   TOGGLE_BIT( PORTA,Copy_u8Pin); break;
    1076:	ab e3       	ldi	r26, 0x3B	; 59
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	eb e3       	ldi	r30, 0x3B	; 59
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_VidToggelPin+0x6c>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_VidToggelPin+0x68>
    1098:	84 27       	eor	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	3b c0       	rjmp	.+118    	; 0x1114 <DIO_VidToggelPin+0xec>
			case 1:   TOGGLE_BIT( PORTB,Copy_u8Pin); break;
    109e:	a8 e3       	ldi	r26, 0x38	; 56
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e8 e3       	ldi	r30, 0x38	; 56
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_VidToggelPin+0x94>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_VidToggelPin+0x90>
    10c0:	84 27       	eor	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	27 c0       	rjmp	.+78     	; 0x1114 <DIO_VidToggelPin+0xec>
			case 2:   TOGGLE_BIT( PORTC,Copy_u8Pin); break;
    10c6:	a5 e3       	ldi	r26, 0x35	; 53
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e5 e3       	ldi	r30, 0x35	; 53
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_VidToggelPin+0xbc>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_VidToggelPin+0xb8>
    10e8:	84 27       	eor	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	13 c0       	rjmp	.+38     	; 0x1114 <DIO_VidToggelPin+0xec>
			case 3:   TOGGLE_BIT( PORTD,Copy_u8Pin); break;
    10ee:	a2 e3       	ldi	r26, 0x32	; 50
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e2 e3       	ldi	r30, 0x32	; 50
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_VidToggelPin+0xe4>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_VidToggelPin+0xe0>
    1110:	84 27       	eor	r24, r20
    1112:	8c 93       	st	X, r24
		}
			
		
	}
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <DIO_VidSetPort_Direction>:
	
	void DIO_VidSetPort_Direction(u8 Copy_u8Port,u8 Copy_u8State)
	{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	00 d0       	rcall	.+0      	; 0x1128 <DIO_VidSetPort_Direction+0x6>
    1128:	00 d0       	rcall	.+0      	; 0x112a <DIO_VidSetPort_Direction+0x8>
    112a:	00 d0       	rcall	.+0      	; 0x112c <DIO_VidSetPort_Direction+0xa>
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	6a 83       	std	Y+2, r22	; 0x02
		
		if (1==Copy_u8State)
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	99 f5       	brne	.+102    	; 0x11a0 <DIO_VidSetPort_Direction+0x7e>
		{
			switch(Copy_u8Port)
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3e 83       	std	Y+6, r19	; 0x06
    1142:	2d 83       	std	Y+5, r18	; 0x05
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	9e 81       	ldd	r25, Y+6	; 0x06
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	91 05       	cpc	r25, r1
    114c:	d1 f0       	breq	.+52     	; 0x1182 <DIO_VidSetPort_Direction+0x60>
    114e:	2d 81       	ldd	r18, Y+5	; 0x05
    1150:	3e 81       	ldd	r19, Y+6	; 0x06
    1152:	22 30       	cpi	r18, 0x02	; 2
    1154:	31 05       	cpc	r19, r1
    1156:	2c f4       	brge	.+10     	; 0x1162 <DIO_VidSetPort_Direction+0x40>
    1158:	8d 81       	ldd	r24, Y+5	; 0x05
    115a:	9e 81       	ldd	r25, Y+6	; 0x06
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	61 f0       	breq	.+24     	; 0x1178 <DIO_VidSetPort_Direction+0x56>
    1160:	50 c0       	rjmp	.+160    	; 0x1202 <DIO_VidSetPort_Direction+0xe0>
    1162:	2d 81       	ldd	r18, Y+5	; 0x05
    1164:	3e 81       	ldd	r19, Y+6	; 0x06
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	81 f0       	breq	.+32     	; 0x118c <DIO_VidSetPort_Direction+0x6a>
    116c:	8d 81       	ldd	r24, Y+5	; 0x05
    116e:	9e 81       	ldd	r25, Y+6	; 0x06
    1170:	83 30       	cpi	r24, 0x03	; 3
    1172:	91 05       	cpc	r25, r1
    1174:	81 f0       	breq	.+32     	; 0x1196 <DIO_VidSetPort_Direction+0x74>
    1176:	45 c0       	rjmp	.+138    	; 0x1202 <DIO_VidSetPort_Direction+0xe0>
			{
				case 0: SET_PORT(DDRA);   break;
    1178:	ea e3       	ldi	r30, 0x3A	; 58
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	80 83       	st	Z, r24
    1180:	40 c0       	rjmp	.+128    	; 0x1202 <DIO_VidSetPort_Direction+0xe0>
				case 1: SET_PORT(DDRB);   break;
    1182:	e7 e3       	ldi	r30, 0x37	; 55
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	80 83       	st	Z, r24
    118a:	3b c0       	rjmp	.+118    	; 0x1202 <DIO_VidSetPort_Direction+0xe0>
				case 2: SET_PORT(DDRC);   break;
    118c:	e4 e3       	ldi	r30, 0x34	; 52
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	80 83       	st	Z, r24
    1194:	36 c0       	rjmp	.+108    	; 0x1202 <DIO_VidSetPort_Direction+0xe0>
				case 3: SET_PORT(DDRD);   break;
    1196:	e1 e3       	ldi	r30, 0x31	; 49
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	80 83       	st	Z, r24
    119e:	31 c0       	rjmp	.+98     	; 0x1202 <DIO_VidSetPort_Direction+0xe0>
			}
			
		}
		else if(0==Copy_u8State)
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	88 23       	and	r24, r24
    11a4:	71 f5       	brne	.+92     	; 0x1202 <DIO_VidSetPort_Direction+0xe0>
		
		{
			switch(Copy_u8Port)
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	3c 83       	std	Y+4, r19	; 0x04
    11ae:	2b 83       	std	Y+3, r18	; 0x03
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	91 05       	cpc	r25, r1
    11b8:	c9 f0       	breq	.+50     	; 0x11ec <DIO_VidSetPort_Direction+0xca>
    11ba:	2b 81       	ldd	r18, Y+3	; 0x03
    11bc:	3c 81       	ldd	r19, Y+4	; 0x04
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	2c f4       	brge	.+10     	; 0x11ce <DIO_VidSetPort_Direction+0xac>
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	61 f0       	breq	.+24     	; 0x11e4 <DIO_VidSetPort_Direction+0xc2>
    11cc:	1a c0       	rjmp	.+52     	; 0x1202 <DIO_VidSetPort_Direction+0xe0>
    11ce:	2b 81       	ldd	r18, Y+3	; 0x03
    11d0:	3c 81       	ldd	r19, Y+4	; 0x04
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	71 f0       	breq	.+28     	; 0x11f4 <DIO_VidSetPort_Direction+0xd2>
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	91 05       	cpc	r25, r1
    11e0:	69 f0       	breq	.+26     	; 0x11fc <DIO_VidSetPort_Direction+0xda>
    11e2:	0f c0       	rjmp	.+30     	; 0x1202 <DIO_VidSetPort_Direction+0xe0>
			{
				case 0: CLR_PORT(DDRA);   break;
    11e4:	ea e3       	ldi	r30, 0x3A	; 58
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	10 82       	st	Z, r1
    11ea:	0b c0       	rjmp	.+22     	; 0x1202 <DIO_VidSetPort_Direction+0xe0>
				case 1: CLR_PORT(DDRB);   break;
    11ec:	e7 e3       	ldi	r30, 0x37	; 55
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	10 82       	st	Z, r1
    11f2:	07 c0       	rjmp	.+14     	; 0x1202 <DIO_VidSetPort_Direction+0xe0>
				case 2: CLR_PORT(DDRC);   break;
    11f4:	e4 e3       	ldi	r30, 0x34	; 52
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	10 82       	st	Z, r1
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <DIO_VidSetPort_Direction+0xe0>
				case 3: CLR_PORT(DDRD);   break;
    11fc:	e1 e3       	ldi	r30, 0x31	; 49
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	10 82       	st	Z, r1
			}	
		}
		
	}
    1202:	26 96       	adiw	r28, 0x06	; 6
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <DIO_VidWriteOnPort>:

	void DIO_VidWriteOnPort(u8 Copy_u8Port,u8 Copy_u8Value)
	{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <DIO_VidWriteOnPort+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <DIO_VidWriteOnPort+0x8>
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	3c 83       	std	Y+4, r19	; 0x04
    122c:	2b 83       	std	Y+3, r18	; 0x03
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	91 05       	cpc	r25, r1
    1236:	d1 f0       	breq	.+52     	; 0x126c <DIO_VidWriteOnPort+0x58>
    1238:	2b 81       	ldd	r18, Y+3	; 0x03
    123a:	3c 81       	ldd	r19, Y+4	; 0x04
    123c:	22 30       	cpi	r18, 0x02	; 2
    123e:	31 05       	cpc	r19, r1
    1240:	2c f4       	brge	.+10     	; 0x124c <DIO_VidWriteOnPort+0x38>
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	61 f0       	breq	.+24     	; 0x1262 <DIO_VidWriteOnPort+0x4e>
    124a:	1e c0       	rjmp	.+60     	; 0x1288 <DIO_VidWriteOnPort+0x74>
    124c:	2b 81       	ldd	r18, Y+3	; 0x03
    124e:	3c 81       	ldd	r19, Y+4	; 0x04
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	81 f0       	breq	.+32     	; 0x1276 <DIO_VidWriteOnPort+0x62>
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	83 30       	cpi	r24, 0x03	; 3
    125c:	91 05       	cpc	r25, r1
    125e:	81 f0       	breq	.+32     	; 0x1280 <DIO_VidWriteOnPort+0x6c>
    1260:	13 c0       	rjmp	.+38     	; 0x1288 <DIO_VidWriteOnPort+0x74>
		{
			case 0: WRITEON_PORT(PORTA,Copy_u8Value); break;
    1262:	eb e3       	ldi	r30, 0x3B	; 59
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	80 83       	st	Z, r24
    126a:	0e c0       	rjmp	.+28     	; 0x1288 <DIO_VidWriteOnPort+0x74>
			case 1: WRITEON_PORT(PORTB,Copy_u8Value); break;
    126c:	e8 e3       	ldi	r30, 0x38	; 56
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	80 83       	st	Z, r24
    1274:	09 c0       	rjmp	.+18     	; 0x1288 <DIO_VidWriteOnPort+0x74>
			case 2: WRITEON_PORT(PORTC,Copy_u8Value); break;
    1276:	e5 e3       	ldi	r30, 0x35	; 53
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	80 83       	st	Z, r24
    127e:	04 c0       	rjmp	.+8      	; 0x1288 <DIO_VidWriteOnPort+0x74>
			case 3: WRITEON_PORT(PORTD,Copy_u8Value); break;
    1280:	e2 e3       	ldi	r30, 0x32	; 50
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	80 83       	st	Z, r24
		}
		
	}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <DIO_VidPullUp_Pin>:


	
	void DIO_VidPullUp_Pin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <DIO_VidPullUp_Pin+0x6>
    129c:	00 d0       	rcall	.+0      	; 0x129e <DIO_VidPullUp_Pin+0x8>
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	3c 83       	std	Y+4, r19	; 0x04
    12ae:	2b 83       	std	Y+3, r18	; 0x03
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	91 05       	cpc	r25, r1
    12b8:	49 f1       	breq	.+82     	; 0x130c <DIO_VidPullUp_Pin+0x76>
    12ba:	2b 81       	ldd	r18, Y+3	; 0x03
    12bc:	3c 81       	ldd	r19, Y+4	; 0x04
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	31 05       	cpc	r19, r1
    12c2:	2c f4       	brge	.+10     	; 0x12ce <DIO_VidPullUp_Pin+0x38>
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	61 f0       	breq	.+24     	; 0x12e4 <DIO_VidPullUp_Pin+0x4e>
    12cc:	5a c0       	rjmp	.+180    	; 0x1382 <DIO_VidPullUp_Pin+0xec>
    12ce:	2b 81       	ldd	r18, Y+3	; 0x03
    12d0:	3c 81       	ldd	r19, Y+4	; 0x04
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	71 f1       	breq	.+92     	; 0x1334 <DIO_VidPullUp_Pin+0x9e>
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	91 05       	cpc	r25, r1
    12e0:	e9 f1       	breq	.+122    	; 0x135c <DIO_VidPullUp_Pin+0xc6>
    12e2:	4f c0       	rjmp	.+158    	; 0x1382 <DIO_VidPullUp_Pin+0xec>
		{
			case 0: SET_BIT(PORTA,Copy_u8Pin); break;
    12e4:	ab e3       	ldi	r26, 0x3B	; 59
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	eb e3       	ldi	r30, 0x3B	; 59
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_VidPullUp_Pin+0x6c>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_VidPullUp_Pin+0x68>
    1306:	84 2b       	or	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	3b c0       	rjmp	.+118    	; 0x1382 <DIO_VidPullUp_Pin+0xec>
			case 1: SET_BIT(PORTB,Copy_u8Pin); break;
    130c:	a8 e3       	ldi	r26, 0x38	; 56
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e8 e3       	ldi	r30, 0x38	; 56
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_VidPullUp_Pin+0x94>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_VidPullUp_Pin+0x90>
    132e:	84 2b       	or	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	27 c0       	rjmp	.+78     	; 0x1382 <DIO_VidPullUp_Pin+0xec>
			case 2: SET_BIT(PORTC,Copy_u8Pin); break;
    1334:	a5 e3       	ldi	r26, 0x35	; 53
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e5 e3       	ldi	r30, 0x35	; 53
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_VidPullUp_Pin+0xbc>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_VidPullUp_Pin+0xb8>
    1356:	84 2b       	or	r24, r20
    1358:	8c 93       	st	X, r24
    135a:	13 c0       	rjmp	.+38     	; 0x1382 <DIO_VidPullUp_Pin+0xec>
			case 3: SET_BIT(PORTD,Copy_u8Pin); break;
    135c:	a2 e3       	ldi	r26, 0x32	; 50
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e2 e3       	ldi	r30, 0x32	; 50
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <DIO_VidPullUp_Pin+0xe4>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <DIO_VidPullUp_Pin+0xe0>
    137e:	84 2b       	or	r24, r20
    1380:	8c 93       	st	X, r24
			
		}
		
	}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <DIO_VidPullDown_Pin>:
	
	void DIO_VidPullDown_Pin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <DIO_VidPullDown_Pin+0x6>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <DIO_VidPullDown_Pin+0x8>
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	3c 83       	std	Y+4, r19	; 0x04
    13a8:	2b 83       	std	Y+3, r18	; 0x03
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	91 05       	cpc	r25, r1
    13b2:	59 f1       	breq	.+86     	; 0x140a <DIO_VidPullDown_Pin+0x7a>
    13b4:	2b 81       	ldd	r18, Y+3	; 0x03
    13b6:	3c 81       	ldd	r19, Y+4	; 0x04
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	31 05       	cpc	r19, r1
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <DIO_VidPullDown_Pin+0x38>
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	69 f0       	breq	.+26     	; 0x13e0 <DIO_VidPullDown_Pin+0x50>
    13c6:	5f c0       	rjmp	.+190    	; 0x1486 <DIO_VidPullDown_Pin+0xf6>
    13c8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ca:	3c 81       	ldd	r19, Y+4	; 0x04
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	89 f1       	breq	.+98     	; 0x1434 <DIO_VidPullDown_Pin+0xa4>
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	83 30       	cpi	r24, 0x03	; 3
    13d8:	91 05       	cpc	r25, r1
    13da:	09 f4       	brne	.+2      	; 0x13de <DIO_VidPullDown_Pin+0x4e>
    13dc:	40 c0       	rjmp	.+128    	; 0x145e <DIO_VidPullDown_Pin+0xce>
    13de:	53 c0       	rjmp	.+166    	; 0x1486 <DIO_VidPullDown_Pin+0xf6>
		{
			case 0: CLR_BIT(PORTA,Copy_u8Pin); break;
    13e0:	ab e3       	ldi	r26, 0x3B	; 59
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	eb e3       	ldi	r30, 0x3B	; 59
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_VidPullDown_Pin+0x6e>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_VidPullDown_Pin+0x6a>
    1402:	80 95       	com	r24
    1404:	84 23       	and	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	3e c0       	rjmp	.+124    	; 0x1486 <DIO_VidPullDown_Pin+0xf6>
			case 1: CLR_BIT(PORTB,Copy_u8Pin); break;
    140a:	a8 e3       	ldi	r26, 0x38	; 56
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e8 e3       	ldi	r30, 0x38	; 56
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_VidPullDown_Pin+0x98>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_VidPullDown_Pin+0x94>
    142c:	80 95       	com	r24
    142e:	84 23       	and	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	29 c0       	rjmp	.+82     	; 0x1486 <DIO_VidPullDown_Pin+0xf6>
			case 2: CLR_BIT(PORTC,Copy_u8Pin); break;
    1434:	a5 e3       	ldi	r26, 0x35	; 53
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e5 e3       	ldi	r30, 0x35	; 53
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <DIO_VidPullDown_Pin+0xc2>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <DIO_VidPullDown_Pin+0xbe>
    1456:	80 95       	com	r24
    1458:	84 23       	and	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	14 c0       	rjmp	.+40     	; 0x1486 <DIO_VidPullDown_Pin+0xf6>
			case 3: CLR_BIT(PORTD,Copy_u8Pin); break;
    145e:	a2 e3       	ldi	r26, 0x32	; 50
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e2 e3       	ldi	r30, 0x32	; 50
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_VidPullDown_Pin+0xec>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_VidPullDown_Pin+0xe8>
    1480:	80 95       	com	r24
    1482:	84 23       	and	r24, r20
    1484:	8c 93       	st	X, r24
			
		}
	}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <DIO_VidSetPort_Value>:

	void DIO_VidSetPort_Value(u8 Copy_u8Port,u8 Copy_u8Value)

	{if (Copy_u8Value==1)
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <DIO_VidSetPort_Value+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <DIO_VidSetPort_Value+0x8>
    149c:	00 d0       	rcall	.+0      	; 0x149e <DIO_VidSetPort_Value+0xa>
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	6a 83       	std	Y+2, r22	; 0x02
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	99 f5       	brne	.+102    	; 0x1512 <DIO_VidSetPort_Value+0x7e>
		{switch(Copy_u8Port)
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	3e 83       	std	Y+6, r19	; 0x06
    14b4:	2d 83       	std	Y+5, r18	; 0x05
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	91 05       	cpc	r25, r1
    14be:	d1 f0       	breq	.+52     	; 0x14f4 <DIO_VidSetPort_Value+0x60>
    14c0:	2d 81       	ldd	r18, Y+5	; 0x05
    14c2:	3e 81       	ldd	r19, Y+6	; 0x06
    14c4:	22 30       	cpi	r18, 0x02	; 2
    14c6:	31 05       	cpc	r19, r1
    14c8:	2c f4       	brge	.+10     	; 0x14d4 <DIO_VidSetPort_Value+0x40>
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	61 f0       	breq	.+24     	; 0x14ea <DIO_VidSetPort_Value+0x56>
    14d2:	50 c0       	rjmp	.+160    	; 0x1574 <DIO_VidSetPort_Value+0xe0>
    14d4:	2d 81       	ldd	r18, Y+5	; 0x05
    14d6:	3e 81       	ldd	r19, Y+6	; 0x06
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 05       	cpc	r19, r1
    14dc:	81 f0       	breq	.+32     	; 0x14fe <DIO_VidSetPort_Value+0x6a>
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	83 30       	cpi	r24, 0x03	; 3
    14e4:	91 05       	cpc	r25, r1
    14e6:	81 f0       	breq	.+32     	; 0x1508 <DIO_VidSetPort_Value+0x74>
    14e8:	45 c0       	rjmp	.+138    	; 0x1574 <DIO_VidSetPort_Value+0xe0>
				{
					case 0: SET_PORT(PORTA); break;
    14ea:	eb e3       	ldi	r30, 0x3B	; 59
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	8f ef       	ldi	r24, 0xFF	; 255
    14f0:	80 83       	st	Z, r24
    14f2:	40 c0       	rjmp	.+128    	; 0x1574 <DIO_VidSetPort_Value+0xe0>
					case 1: SET_PORT(PORTB); break;
    14f4:	e8 e3       	ldi	r30, 0x38	; 56
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	80 83       	st	Z, r24
    14fc:	3b c0       	rjmp	.+118    	; 0x1574 <DIO_VidSetPort_Value+0xe0>
					case 2: SET_PORT(PORTC); break;
    14fe:	e5 e3       	ldi	r30, 0x35	; 53
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	80 83       	st	Z, r24
    1506:	36 c0       	rjmp	.+108    	; 0x1574 <DIO_VidSetPort_Value+0xe0>
					case 3: SET_PORT(PORTD); break;
    1508:	e2 e3       	ldi	r30, 0x32	; 50
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8f ef       	ldi	r24, 0xFF	; 255
    150e:	80 83       	st	Z, r24
    1510:	31 c0       	rjmp	.+98     	; 0x1574 <DIO_VidSetPort_Value+0xe0>

				}
		}
	else if(Copy_u8Value==0)
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	88 23       	and	r24, r24
    1516:	71 f5       	brne	.+92     	; 0x1574 <DIO_VidSetPort_Value+0xe0>
	{

		switch(Copy_u8Port)
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	3c 83       	std	Y+4, r19	; 0x04
    1520:	2b 83       	std	Y+3, r18	; 0x03
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	91 05       	cpc	r25, r1
    152a:	c9 f0       	breq	.+50     	; 0x155e <DIO_VidSetPort_Value+0xca>
    152c:	2b 81       	ldd	r18, Y+3	; 0x03
    152e:	3c 81       	ldd	r19, Y+4	; 0x04
    1530:	22 30       	cpi	r18, 0x02	; 2
    1532:	31 05       	cpc	r19, r1
    1534:	2c f4       	brge	.+10     	; 0x1540 <DIO_VidSetPort_Value+0xac>
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	61 f0       	breq	.+24     	; 0x1556 <DIO_VidSetPort_Value+0xc2>
    153e:	1a c0       	rjmp	.+52     	; 0x1574 <DIO_VidSetPort_Value+0xe0>
    1540:	2b 81       	ldd	r18, Y+3	; 0x03
    1542:	3c 81       	ldd	r19, Y+4	; 0x04
    1544:	22 30       	cpi	r18, 0x02	; 2
    1546:	31 05       	cpc	r19, r1
    1548:	71 f0       	breq	.+28     	; 0x1566 <DIO_VidSetPort_Value+0xd2>
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	9c 81       	ldd	r25, Y+4	; 0x04
    154e:	83 30       	cpi	r24, 0x03	; 3
    1550:	91 05       	cpc	r25, r1
    1552:	69 f0       	breq	.+26     	; 0x156e <DIO_VidSetPort_Value+0xda>
    1554:	0f c0       	rjmp	.+30     	; 0x1574 <DIO_VidSetPort_Value+0xe0>
						{
							case 0: CLR_PORT(PORTA); break;
    1556:	eb e3       	ldi	r30, 0x3B	; 59
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	10 82       	st	Z, r1
    155c:	0b c0       	rjmp	.+22     	; 0x1574 <DIO_VidSetPort_Value+0xe0>
							case 1: CLR_PORT(PORTB); break;
    155e:	e8 e3       	ldi	r30, 0x38	; 56
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	10 82       	st	Z, r1
    1564:	07 c0       	rjmp	.+14     	; 0x1574 <DIO_VidSetPort_Value+0xe0>
							case 2: CLR_PORT(PORTC); break;
    1566:	e5 e3       	ldi	r30, 0x35	; 53
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	10 82       	st	Z, r1
    156c:	03 c0       	rjmp	.+6      	; 0x1574 <DIO_VidSetPort_Value+0xe0>
							case 3: CLR_PORT(PORTD); break;
    156e:	e2 e3       	ldi	r30, 0x32	; 50
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	10 82       	st	Z, r1

						}
	}
	}
    1574:	26 96       	adiw	r28, 0x06	; 6
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <I2C_send_start>:
#include "DIO_Interface.h"
#include"I2C_PRIVATE.h"
#include "I2C_config.h"
#include "avr/delay.h"
 u8 I2C_send_start(void )
 {
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	0f 92       	push	r0
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
	 // start bit condition
	 TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1590:	e6 e5       	ldi	r30, 0x56	; 86
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	84 ea       	ldi	r24, 0xA4	; 164
    1596:	80 83       	st	Z, r24
	 while(GET_BIT(TWCR,TWINT)==0);  // wait the flag
    1598:	e6 e5       	ldi	r30, 0x56	; 86
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	88 23       	and	r24, r24
    15a0:	dc f7       	brge	.-10     	; 0x1598 <I2C_send_start+0x12>
	 if ((TWSR & 0xF8) != 0x08){return 0;}
    15a2:	e1 e2       	ldi	r30, 0x21	; 33
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	88 7f       	andi	r24, 0xF8	; 248
    15ae:	90 70       	andi	r25, 0x00	; 0
    15b0:	88 30       	cpi	r24, 0x08	; 8
    15b2:	91 05       	cpc	r25, r1
    15b4:	11 f0       	breq	.+4      	; 0x15ba <I2C_send_start+0x34>
    15b6:	19 82       	std	Y+1, r1	; 0x01
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <I2C_send_start+0x38>
	 else{return 1;}
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	89 81       	ldd	r24, Y+1	; 0x01
 }
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <I2C_select_slave>:
 u8 I2C_select_slave(u8 Copy_slave_add,u8 Copy_W_R)
 {u8 status=0;
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <I2C_select_slave+0x6>
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <I2C_select_slave+0x8>
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	8a 83       	std	Y+2, r24	; 0x02
    15d6:	6b 83       	std	Y+3, r22	; 0x03
    15d8:	19 82       	std	Y+1, r1	; 0x01
	 if (Copy_W_R==0)         // write
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	88 23       	and	r24, r24
    15de:	99 f4       	brne	.+38     	; 0x1606 <I2C_select_slave+0x3e>
	 {TWDR=(Copy_slave_add<<1);
    15e0:	e3 e2       	ldi	r30, 0x23	; 35
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	88 0f       	add	r24, r24
    15e8:	80 83       	st	Z, r24
	  TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    15ea:	e6 e5       	ldi	r30, 0x56	; 86
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	84 ec       	ldi	r24, 0xC4	; 196
    15f0:	80 83       	st	Z, r24
	  while(GET_BIT(TWCR,TWINT)==0);  // wait the flag
    15f2:	e6 e5       	ldi	r30, 0x56	; 86
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	88 23       	and	r24, r24
    15fa:	dc f7       	brge	.-10     	; 0x15f2 <I2C_select_slave+0x2a>
	  if ((TWSR & 0xF8) != 18) {status= 0;}   // no ACK
    15fc:	e1 e2       	ldi	r30, 0x21	; 33
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	19 82       	std	Y+1, r1	; 0x01
    1604:	23 c0       	rjmp	.+70     	; 0x164c <I2C_select_slave+0x84>
	  else {status= 1;}
	 }
	 else if(Copy_W_R==1)   // read
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	01 f5       	brne	.+64     	; 0x164c <I2C_select_slave+0x84>
	 {TWDR=(Copy_slave_add<<1)|1;
    160c:	e3 e2       	ldi	r30, 0x23	; 35
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	88 2f       	mov	r24, r24
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	81 60       	ori	r24, 0x01	; 1
    161c:	80 83       	st	Z, r24
	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    161e:	e6 e5       	ldi	r30, 0x56	; 86
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	84 ec       	ldi	r24, 0xC4	; 196
    1624:	80 83       	st	Z, r24
	 while(GET_BIT(TWCR,7)==0);  // wait the flag
    1626:	e6 e5       	ldi	r30, 0x56	; 86
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	88 23       	and	r24, r24
    162e:	dc f7       	brge	.-10     	; 0x1626 <I2C_select_slave+0x5e>
	 if ((TWSR & 0xF8) != 40) {status= 0;}   // no ACK
    1630:	e1 e2       	ldi	r30, 0x21	; 33
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	88 7f       	andi	r24, 0xF8	; 248
    163c:	90 70       	andi	r25, 0x00	; 0
    163e:	88 32       	cpi	r24, 0x28	; 40
    1640:	91 05       	cpc	r25, r1
    1642:	11 f0       	breq	.+4      	; 0x1648 <I2C_select_slave+0x80>
    1644:	19 82       	std	Y+1, r1	; 0x01
    1646:	02 c0       	rjmp	.+4      	; 0x164c <I2C_select_slave+0x84>
	 else {status= 1;}
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	89 83       	std	Y+1, r24	; 0x01
	 }
	 return status;
    164c:	89 81       	ldd	r24, Y+1	; 0x01
 }
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <I2C_send_data>:

 u8 I2C_send_data(u8 Copy_data)
 {
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	00 d0       	rcall	.+0      	; 0x1662 <I2C_send_data+0x6>
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	89 83       	std	Y+1, r24	; 0x01

	 TWDR =Copy_data;
    1668:	e3 e2       	ldi	r30, 0x23	; 35
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	80 83       	st	Z, r24
	 TWCR=(1<<TWINT)|(1<<TWEN);
    1670:	e6 e5       	ldi	r30, 0x56	; 86
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	84 e8       	ldi	r24, 0x84	; 132
    1676:	80 83       	st	Z, r24
	 while (GET_BIT(TWCR,TWINT)==0);        // wait flag
    1678:	e6 e5       	ldi	r30, 0x56	; 86
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	88 23       	and	r24, r24
    1680:	dc f7       	brge	.-10     	; 0x1678 <I2C_send_data+0x1c>
	 if ((TWSR & 0xF8) != 28){return 0;}
    1682:	e1 e2       	ldi	r30, 0x21	; 33
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	80 e0       	ldi	r24, 0x00	; 0
	 else{return 1;}

 }
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <I2C_recive_data>:

 u8 I2C_recive_data(u8 *status)
 {u8 Temp=0;
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <I2C_recive_data+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <I2C_recive_data+0x8>
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	9b 83       	std	Y+3, r25	; 0x03
    16a2:	8a 83       	std	Y+2, r24	; 0x02
    16a4:	19 82       	std	Y+1, r1	; 0x01
 	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA)  ;
    16a6:	e6 e5       	ldi	r30, 0x56	; 86
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	84 ec       	ldi	r24, 0xC4	; 196
    16ac:	80 83       	st	Z, r24
 	 //while ((TWSR&0xf8) != 0x60) ;   // status =received data
 	 while (GET_BIT(TWCR,TWINT)==0);  // wait flag
    16ae:	e6 e5       	ldi	r30, 0x56	; 86
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	88 23       	and	r24, r24
    16b6:	dc f7       	brge	.-10     	; 0x16ae <I2C_recive_data+0x1a>
	 Temp=TWDR;
    16b8:	e3 e2       	ldi	r30, 0x23	; 35
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	89 83       	std	Y+1, r24	; 0x01
	 if ((TWSR & 0xF8) != 50){*status= 0;}
    16c0:	e1 e2       	ldi	r30, 0x21	; 33
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	ea 81       	ldd	r30, Y+2	; 0x02
    16c8:	fb 81       	ldd	r31, Y+3	; 0x03
    16ca:	10 82       	st	Z, r1
	 	 else{*status= 1;}
	 return Temp;
    16cc:	89 81       	ldd	r24, Y+1	; 0x01

 }
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <I2C_stop>:
void I2C_stop(void )
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    16e4:	e6 e5       	ldi	r30, 0x56	; 86
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	84 e9       	ldi	r24, 0x94	; 148
    16ea:	80 83       	st	Z, r24
	//while(!(TWCR&(1<<TWSTO)));  // wait till slop flag
}
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <I2C_master_init>:

void I2C_master_init(void )
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
	TWSR=(0<<TWPS0)|(0<<TWPS1);     //prescaler
    16fa:	e1 e2       	ldi	r30, 0x21	; 33
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	10 82       	st	Z, r1
	TWBR=32;		  // bit rate
    1700:	e0 e2       	ldi	r30, 0x20	; 32
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 e2       	ldi	r24, 0x20	; 32
    1706:	80 83       	st	Z, r24
	TWAR=10;       /// 0000 or 1111
    1708:	e2 e2       	ldi	r30, 0x22	; 34
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	8a e0       	ldi	r24, 0x0A	; 10
    170e:	80 83       	st	Z, r24
	//TWCR=(1<<TWEN)|(1<<TWEA);
}
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <I2C_slave_init>:


void I2C_slave_init(void )
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
	TWAR=5<<1;     /// 0000 or 1111   address
    171e:	e2 e2       	ldi	r30, 0x22	; 34
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	8a e0       	ldi	r24, 0x0A	; 10
    1724:	80 83       	st	Z, r24
	TWCR=(1<<TWEN)|(1<<TWEA);
    1726:	e6 e5       	ldi	r30, 0x56	; 86
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	84 e4       	ldi	r24, 0x44	; 68
    172c:	80 83       	st	Z, r24
}
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <main>:
void LCD_I2C_send_NUM(u16 Copy_num);
void LCD_I2C_send_str(u8* Copy_str);
void LCD_I2C_send_Command(u8 Copy_com);

void main (void)
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
		LCD_I2C_init();
    173c:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_I2C_init>
		LCD_I2C_send_NUM(125);
    1740:	8d e7       	ldi	r24, 0x7D	; 125
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <LCD_I2C_send_NUM>
		LCD_I2C_send_str("/");
    1748:	80 e6       	ldi	r24, 0x60	; 96
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 84 12 	call	0x2508	; 0x2508 <LCD_I2C_send_str>
		LCD_I2C_send_str("Ahmed");
    1750:	82 e6       	ldi	r24, 0x62	; 98
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 84 12 	call	0x2508	; 0x2508 <LCD_I2C_send_str>
    1758:	ff cf       	rjmp	.-2      	; 0x1758 <main+0x24>

0000175a <LCD_I2C_init>:




void LCD_I2C_init(void)
{
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	ce 57       	subi	r28, 0x7E	; 126
    1768:	d0 40       	sbci	r29, 0x00	; 0
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	fe 01       	movw	r30, r28
    1776:	e5 58       	subi	r30, 0x85	; 133
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a0 e2       	ldi	r26, 0x20	; 32
    1780:	b2 e4       	ldi	r27, 0x42	; 66
    1782:	80 83       	st	Z, r24
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	a2 83       	std	Z+2, r26	; 0x02
    1788:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178a:	8e 01       	movw	r16, r28
    178c:	09 58       	subi	r16, 0x89	; 137
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	fe 01       	movw	r30, r28
    1792:	e5 58       	subi	r30, 0x85	; 133
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	60 81       	ld	r22, Z
    1798:	71 81       	ldd	r23, Z+1	; 0x01
    179a:	82 81       	ldd	r24, Z+2	; 0x02
    179c:	93 81       	ldd	r25, Z+3	; 0x03
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	4a ef       	ldi	r20, 0xFA	; 250
    17a4:	54 e4       	ldi	r21, 0x44	; 68
    17a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	f8 01       	movw	r30, r16
    17b0:	80 83       	st	Z, r24
    17b2:	91 83       	std	Z+1, r25	; 0x01
    17b4:	a2 83       	std	Z+2, r26	; 0x02
    17b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17b8:	fe 01       	movw	r30, r28
    17ba:	e9 58       	subi	r30, 0x89	; 137
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	60 81       	ld	r22, Z
    17c0:	71 81       	ldd	r23, Z+1	; 0x01
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e8       	ldi	r20, 0x80	; 128
    17cc:	5f e3       	ldi	r21, 0x3F	; 63
    17ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17d2:	88 23       	and	r24, r24
    17d4:	44 f4       	brge	.+16     	; 0x17e6 <LCD_I2C_init+0x8c>
		__ticks = 1;
    17d6:	fe 01       	movw	r30, r28
    17d8:	eb 58       	subi	r30, 0x8B	; 139
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	91 83       	std	Z+1, r25	; 0x01
    17e2:	80 83       	st	Z, r24
    17e4:	64 c0       	rjmp	.+200    	; 0x18ae <LCD_I2C_init+0x154>
	else if (__tmp > 65535)
    17e6:	fe 01       	movw	r30, r28
    17e8:	e9 58       	subi	r30, 0x89	; 137
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
    17f0:	82 81       	ldd	r24, Z+2	; 0x02
    17f2:	93 81       	ldd	r25, Z+3	; 0x03
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	3f ef       	ldi	r19, 0xFF	; 255
    17f8:	4f e7       	ldi	r20, 0x7F	; 127
    17fa:	57 e4       	ldi	r21, 0x47	; 71
    17fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1800:	18 16       	cp	r1, r24
    1802:	0c f0       	brlt	.+2      	; 0x1806 <LCD_I2C_init+0xac>
    1804:	43 c0       	rjmp	.+134    	; 0x188c <LCD_I2C_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1806:	fe 01       	movw	r30, r28
    1808:	e5 58       	subi	r30, 0x85	; 133
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	60 81       	ld	r22, Z
    180e:	71 81       	ldd	r23, Z+1	; 0x01
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	93 81       	ldd	r25, Z+3	; 0x03
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e2       	ldi	r20, 0x20	; 32
    181a:	51 e4       	ldi	r21, 0x41	; 65
    181c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	8e 01       	movw	r16, r28
    1826:	0b 58       	subi	r16, 0x8B	; 139
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	f8 01       	movw	r30, r16
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	80 83       	st	Z, r24
    183c:	1f c0       	rjmp	.+62     	; 0x187c <LCD_I2C_init+0x122>
    183e:	fe 01       	movw	r30, r28
    1840:	ed 58       	subi	r30, 0x8D	; 141
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	88 ec       	ldi	r24, 0xC8	; 200
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	91 83       	std	Z+1, r25	; 0x01
    184a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    184c:	fe 01       	movw	r30, r28
    184e:	ed 58       	subi	r30, 0x8D	; 141
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	80 81       	ld	r24, Z
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	f1 f7       	brne	.-4      	; 0x1856 <LCD_I2C_init+0xfc>
    185a:	fe 01       	movw	r30, r28
    185c:	ed 58       	subi	r30, 0x8D	; 141
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1864:	de 01       	movw	r26, r28
    1866:	ab 58       	subi	r26, 0x8B	; 139
    1868:	bf 4f       	sbci	r27, 0xFF	; 255
    186a:	fe 01       	movw	r30, r28
    186c:	eb 58       	subi	r30, 0x8B	; 139
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	11 96       	adiw	r26, 0x01	; 1
    1878:	9c 93       	st	X, r25
    187a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187c:	fe 01       	movw	r30, r28
    187e:	eb 58       	subi	r30, 0x8B	; 139
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	80 81       	ld	r24, Z
    1884:	91 81       	ldd	r25, Z+1	; 0x01
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	d1 f6       	brne	.-76     	; 0x183e <LCD_I2C_init+0xe4>
    188a:	27 c0       	rjmp	.+78     	; 0x18da <LCD_I2C_init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188c:	8e 01       	movw	r16, r28
    188e:	0b 58       	subi	r16, 0x8B	; 139
    1890:	1f 4f       	sbci	r17, 0xFF	; 255
    1892:	fe 01       	movw	r30, r28
    1894:	e9 58       	subi	r30, 0x89	; 137
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	60 81       	ld	r22, Z
    189a:	71 81       	ldd	r23, Z+1	; 0x01
    189c:	82 81       	ldd	r24, Z+2	; 0x02
    189e:	93 81       	ldd	r25, Z+3	; 0x03
    18a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	f8 01       	movw	r30, r16
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	80 83       	st	Z, r24
    18ae:	de 01       	movw	r26, r28
    18b0:	af 58       	subi	r26, 0x8F	; 143
    18b2:	bf 4f       	sbci	r27, 0xFF	; 255
    18b4:	fe 01       	movw	r30, r28
    18b6:	eb 58       	subi	r30, 0x8B	; 139
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 81       	ld	r24, Z
    18bc:	91 81       	ldd	r25, Z+1	; 0x01
    18be:	8d 93       	st	X+, r24
    18c0:	9c 93       	st	X, r25
    18c2:	fe 01       	movw	r30, r28
    18c4:	ef 58       	subi	r30, 0x8F	; 143
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	80 81       	ld	r24, Z
    18ca:	91 81       	ldd	r25, Z+1	; 0x01
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <LCD_I2C_init+0x172>
    18d0:	fe 01       	movw	r30, r28
    18d2:	ef 58       	subi	r30, 0x8F	; 143
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	80 83       	st	Z, r24
	_delay_ms(40);
	I2C_master_init();
    18da:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <I2C_master_init>
    18de:	fe 01       	movw	r30, r28
    18e0:	e3 59       	subi	r30, 0x93	; 147
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a0 ef       	ldi	r26, 0xF0	; 240
    18ea:	b2 e4       	ldi	r27, 0x42	; 66
    18ec:	80 83       	st	Z, r24
    18ee:	91 83       	std	Z+1, r25	; 0x01
    18f0:	a2 83       	std	Z+2, r26	; 0x02
    18f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f4:	8e 01       	movw	r16, r28
    18f6:	07 59       	subi	r16, 0x97	; 151
    18f8:	1f 4f       	sbci	r17, 0xFF	; 255
    18fa:	fe 01       	movw	r30, r28
    18fc:	e3 59       	subi	r30, 0x93	; 147
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	60 81       	ld	r22, Z
    1902:	71 81       	ldd	r23, Z+1	; 0x01
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	93 81       	ldd	r25, Z+3	; 0x03
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a ef       	ldi	r20, 0xFA	; 250
    190e:	54 e4       	ldi	r21, 0x44	; 68
    1910:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	f8 01       	movw	r30, r16
    191a:	80 83       	st	Z, r24
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	a2 83       	std	Z+2, r26	; 0x02
    1920:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1922:	fe 01       	movw	r30, r28
    1924:	e7 59       	subi	r30, 0x97	; 151
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	60 81       	ld	r22, Z
    192a:	71 81       	ldd	r23, Z+1	; 0x01
    192c:	82 81       	ldd	r24, Z+2	; 0x02
    192e:	93 81       	ldd	r25, Z+3	; 0x03
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	44 f4       	brge	.+16     	; 0x1950 <LCD_I2C_init+0x1f6>
		__ticks = 1;
    1940:	fe 01       	movw	r30, r28
    1942:	e9 59       	subi	r30, 0x99	; 153
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	80 83       	st	Z, r24
    194e:	64 c0       	rjmp	.+200    	; 0x1a18 <LCD_I2C_init+0x2be>
	else if (__tmp > 65535)
    1950:	fe 01       	movw	r30, r28
    1952:	e7 59       	subi	r30, 0x97	; 151
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	60 81       	ld	r22, Z
    1958:	71 81       	ldd	r23, Z+1	; 0x01
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	3f ef       	ldi	r19, 0xFF	; 255
    1962:	4f e7       	ldi	r20, 0x7F	; 127
    1964:	57 e4       	ldi	r21, 0x47	; 71
    1966:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    196a:	18 16       	cp	r1, r24
    196c:	0c f0       	brlt	.+2      	; 0x1970 <LCD_I2C_init+0x216>
    196e:	43 c0       	rjmp	.+134    	; 0x19f6 <LCD_I2C_init+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1970:	fe 01       	movw	r30, r28
    1972:	e3 59       	subi	r30, 0x93	; 147
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	60 81       	ld	r22, Z
    1978:	71 81       	ldd	r23, Z+1	; 0x01
    197a:	82 81       	ldd	r24, Z+2	; 0x02
    197c:	93 81       	ldd	r25, Z+3	; 0x03
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e2       	ldi	r20, 0x20	; 32
    1984:	51 e4       	ldi	r21, 0x41	; 65
    1986:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	8e 01       	movw	r16, r28
    1990:	09 59       	subi	r16, 0x99	; 153
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	f8 01       	movw	r30, r16
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	80 83       	st	Z, r24
    19a6:	1f c0       	rjmp	.+62     	; 0x19e6 <LCD_I2C_init+0x28c>
    19a8:	fe 01       	movw	r30, r28
    19aa:	eb 59       	subi	r30, 0x9B	; 155
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	88 ec       	ldi	r24, 0xC8	; 200
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	80 83       	st	Z, r24
    19b6:	fe 01       	movw	r30, r28
    19b8:	eb 59       	subi	r30, 0x9B	; 155
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	80 81       	ld	r24, Z
    19be:	91 81       	ldd	r25, Z+1	; 0x01
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <LCD_I2C_init+0x266>
    19c4:	fe 01       	movw	r30, r28
    19c6:	eb 59       	subi	r30, 0x9B	; 155
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ce:	de 01       	movw	r26, r28
    19d0:	a9 59       	subi	r26, 0x99	; 153
    19d2:	bf 4f       	sbci	r27, 0xFF	; 255
    19d4:	fe 01       	movw	r30, r28
    19d6:	e9 59       	subi	r30, 0x99	; 153
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	80 81       	ld	r24, Z
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	11 96       	adiw	r26, 0x01	; 1
    19e2:	9c 93       	st	X, r25
    19e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e6:	fe 01       	movw	r30, r28
    19e8:	e9 59       	subi	r30, 0x99	; 153
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	80 81       	ld	r24, Z
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	d1 f6       	brne	.-76     	; 0x19a8 <LCD_I2C_init+0x24e>
    19f4:	27 c0       	rjmp	.+78     	; 0x1a44 <LCD_I2C_init+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f6:	8e 01       	movw	r16, r28
    19f8:	09 59       	subi	r16, 0x99	; 153
    19fa:	1f 4f       	sbci	r17, 0xFF	; 255
    19fc:	fe 01       	movw	r30, r28
    19fe:	e7 59       	subi	r30, 0x97	; 151
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	60 81       	ld	r22, Z
    1a04:	71 81       	ldd	r23, Z+1	; 0x01
    1a06:	82 81       	ldd	r24, Z+2	; 0x02
    1a08:	93 81       	ldd	r25, Z+3	; 0x03
    1a0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	f8 01       	movw	r30, r16
    1a14:	91 83       	std	Z+1, r25	; 0x01
    1a16:	80 83       	st	Z, r24
    1a18:	de 01       	movw	r26, r28
    1a1a:	ad 59       	subi	r26, 0x9D	; 157
    1a1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e9 59       	subi	r30, 0x99	; 153
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	80 81       	ld	r24, Z
    1a26:	91 81       	ldd	r25, Z+1	; 0x01
    1a28:	8d 93       	st	X+, r24
    1a2a:	9c 93       	st	X, r25
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	ed 59       	subi	r30, 0x9D	; 157
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	80 81       	ld	r24, Z
    1a34:	91 81       	ldd	r25, Z+1	; 0x01
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <LCD_I2C_init+0x2dc>
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	ed 59       	subi	r30, 0x9D	; 157
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	80 83       	st	Z, r24
	_delay_ms(120);
	I2C_send_start();
    1a44:	0e 94 c3 0a 	call	0x1586	; 0x1586 <I2C_send_start>
	I2C_select_slave(5,0);
    1a48:	85 e0       	ldi	r24, 0x05	; 5
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <I2C_select_slave>
    1a50:	fe 01       	movw	r30, r28
    1a52:	e1 5a       	subi	r30, 0xA1	; 161
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a8 ec       	ldi	r26, 0xC8	; 200
    1a5c:	b2 e4       	ldi	r27, 0x42	; 66
    1a5e:	80 83       	st	Z, r24
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	a2 83       	std	Z+2, r26	; 0x02
    1a64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a66:	8e 01       	movw	r16, r28
    1a68:	05 5a       	subi	r16, 0xA5	; 165
    1a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e1 5a       	subi	r30, 0xA1	; 161
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	60 81       	ld	r22, Z
    1a74:	71 81       	ldd	r23, Z+1	; 0x01
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	93 81       	ldd	r25, Z+3	; 0x03
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a ef       	ldi	r20, 0xFA	; 250
    1a80:	54 e4       	ldi	r21, 0x44	; 68
    1a82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	80 83       	st	Z, r24
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	a2 83       	std	Z+2, r26	; 0x02
    1a92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a94:	fe 01       	movw	r30, r28
    1a96:	e5 5a       	subi	r30, 0xA5	; 165
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	60 81       	ld	r22, Z
    1a9c:	71 81       	ldd	r23, Z+1	; 0x01
    1a9e:	82 81       	ldd	r24, Z+2	; 0x02
    1aa0:	93 81       	ldd	r25, Z+3	; 0x03
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e8       	ldi	r20, 0x80	; 128
    1aa8:	5f e3       	ldi	r21, 0x3F	; 63
    1aaa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aae:	88 23       	and	r24, r24
    1ab0:	44 f4       	brge	.+16     	; 0x1ac2 <LCD_I2C_init+0x368>
		__ticks = 1;
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e7 5a       	subi	r30, 0xA7	; 167
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	91 83       	std	Z+1, r25	; 0x01
    1abe:	80 83       	st	Z, r24
    1ac0:	64 c0       	rjmp	.+200    	; 0x1b8a <LCD_I2C_init+0x430>
	else if (__tmp > 65535)
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e5 5a       	subi	r30, 0xA5	; 165
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	60 81       	ld	r22, Z
    1aca:	71 81       	ldd	r23, Z+1	; 0x01
    1acc:	82 81       	ldd	r24, Z+2	; 0x02
    1ace:	93 81       	ldd	r25, Z+3	; 0x03
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	3f ef       	ldi	r19, 0xFF	; 255
    1ad4:	4f e7       	ldi	r20, 0x7F	; 127
    1ad6:	57 e4       	ldi	r21, 0x47	; 71
    1ad8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	0c f0       	brlt	.+2      	; 0x1ae2 <LCD_I2C_init+0x388>
    1ae0:	43 c0       	rjmp	.+134    	; 0x1b68 <LCD_I2C_init+0x40e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	e1 5a       	subi	r30, 0xA1	; 161
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	60 81       	ld	r22, Z
    1aea:	71 81       	ldd	r23, Z+1	; 0x01
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	8e 01       	movw	r16, r28
    1b02:	07 5a       	subi	r16, 0xA7	; 167
    1b04:	1f 4f       	sbci	r17, 0xFF	; 255
    1b06:	bc 01       	movw	r22, r24
    1b08:	cd 01       	movw	r24, r26
    1b0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	f8 01       	movw	r30, r16
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	80 83       	st	Z, r24
    1b18:	1f c0       	rjmp	.+62     	; 0x1b58 <LCD_I2C_init+0x3fe>
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e9 5a       	subi	r30, 0xA9	; 169
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	88 ec       	ldi	r24, 0xC8	; 200
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	80 83       	st	Z, r24
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e9 5a       	subi	r30, 0xA9	; 169
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 81       	ld	r24, Z
    1b30:	91 81       	ldd	r25, Z+1	; 0x01
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_I2C_init+0x3d8>
    1b36:	fe 01       	movw	r30, r28
    1b38:	e9 5a       	subi	r30, 0xA9	; 169
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	91 83       	std	Z+1, r25	; 0x01
    1b3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	de 01       	movw	r26, r28
    1b42:	a7 5a       	subi	r26, 0xA7	; 167
    1b44:	bf 4f       	sbci	r27, 0xFF	; 255
    1b46:	fe 01       	movw	r30, r28
    1b48:	e7 5a       	subi	r30, 0xA7	; 167
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 81       	ld	r24, Z
    1b4e:	91 81       	ldd	r25, Z+1	; 0x01
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	11 96       	adiw	r26, 0x01	; 1
    1b54:	9c 93       	st	X, r25
    1b56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e7 5a       	subi	r30, 0xA7	; 167
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	d1 f6       	brne	.-76     	; 0x1b1a <LCD_I2C_init+0x3c0>
    1b66:	27 c0       	rjmp	.+78     	; 0x1bb6 <LCD_I2C_init+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b68:	8e 01       	movw	r16, r28
    1b6a:	07 5a       	subi	r16, 0xA7	; 167
    1b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e5 5a       	subi	r30, 0xA5	; 165
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	60 81       	ld	r22, Z
    1b76:	71 81       	ldd	r23, Z+1	; 0x01
    1b78:	82 81       	ldd	r24, Z+2	; 0x02
    1b7a:	93 81       	ldd	r25, Z+3	; 0x03
    1b7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	f8 01       	movw	r30, r16
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24
    1b8a:	de 01       	movw	r26, r28
    1b8c:	ab 5a       	subi	r26, 0xAB	; 171
    1b8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b90:	fe 01       	movw	r30, r28
    1b92:	e7 5a       	subi	r30, 0xA7	; 167
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	80 81       	ld	r24, Z
    1b98:	91 81       	ldd	r25, Z+1	; 0x01
    1b9a:	8d 93       	st	X+, r24
    1b9c:	9c 93       	st	X, r25
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	eb 5a       	subi	r30, 0xAB	; 171
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 81       	ld	r24, Z
    1ba6:	91 81       	ldd	r25, Z+1	; 0x01
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_I2C_init+0x44e>
    1bac:	fe 01       	movw	r30, r28
    1bae:	eb 5a       	subi	r30, 0xAB	; 171
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	91 83       	std	Z+1, r25	; 0x01
    1bb4:	80 83       	st	Z, r24
	_delay_ms(100);
	I2C_send_data(command);
    1bb6:	83 e0       	ldi	r24, 0x03	; 3
    1bb8:	0e 94 2e 0b 	call	0x165c	; 0x165c <I2C_send_data>
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	ef 5a       	subi	r30, 0xAF	; 175
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	a8 ec       	ldi	r26, 0xC8	; 200
    1bc8:	b2 e4       	ldi	r27, 0x42	; 66
    1bca:	80 83       	st	Z, r24
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	a2 83       	std	Z+2, r26	; 0x02
    1bd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd2:	8e 01       	movw	r16, r28
    1bd4:	03 5b       	subi	r16, 0xB3	; 179
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	fe 01       	movw	r30, r28
    1bda:	ef 5a       	subi	r30, 0xAF	; 175
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4a ef       	ldi	r20, 0xFA	; 250
    1bec:	54 e4       	ldi	r21, 0x44	; 68
    1bee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	80 83       	st	Z, r24
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	a2 83       	std	Z+2, r26	; 0x02
    1bfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c00:	fe 01       	movw	r30, r28
    1c02:	e3 5b       	subi	r30, 0xB3	; 179
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	60 81       	ld	r22, Z
    1c08:	71 81       	ldd	r23, Z+1	; 0x01
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	44 f4       	brge	.+16     	; 0x1c2e <LCD_I2C_init+0x4d4>
		__ticks = 1;
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e5 5b       	subi	r30, 0xB5	; 181
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	80 83       	st	Z, r24
    1c2c:	64 c0       	rjmp	.+200    	; 0x1cf6 <LCD_I2C_init+0x59c>
	else if (__tmp > 65535)
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e3 5b       	subi	r30, 0xB3	; 179
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	0c f0       	brlt	.+2      	; 0x1c4e <LCD_I2C_init+0x4f4>
    1c4c:	43 c0       	rjmp	.+134    	; 0x1cd4 <LCD_I2C_init+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ef 5a       	subi	r30, 0xAF	; 175
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	60 81       	ld	r22, Z
    1c56:	71 81       	ldd	r23, Z+1	; 0x01
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e2       	ldi	r20, 0x20	; 32
    1c62:	51 e4       	ldi	r21, 0x41	; 65
    1c64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	8e 01       	movw	r16, r28
    1c6e:	05 5b       	subi	r16, 0xB5	; 181
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	f8 01       	movw	r30, r16
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	80 83       	st	Z, r24
    1c84:	1f c0       	rjmp	.+62     	; 0x1cc4 <LCD_I2C_init+0x56a>
    1c86:	fe 01       	movw	r30, r28
    1c88:	e7 5b       	subi	r30, 0xB7	; 183
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	88 ec       	ldi	r24, 0xC8	; 200
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
    1c94:	fe 01       	movw	r30, r28
    1c96:	e7 5b       	subi	r30, 0xB7	; 183
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <LCD_I2C_init+0x544>
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e7 5b       	subi	r30, 0xB7	; 183
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	91 83       	std	Z+1, r25	; 0x01
    1caa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cac:	de 01       	movw	r26, r28
    1cae:	a5 5b       	subi	r26, 0xB5	; 181
    1cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	e5 5b       	subi	r30, 0xB5	; 181
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	80 81       	ld	r24, Z
    1cba:	91 81       	ldd	r25, Z+1	; 0x01
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	11 96       	adiw	r26, 0x01	; 1
    1cc0:	9c 93       	st	X, r25
    1cc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e5 5b       	subi	r30, 0xB5	; 181
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	d1 f6       	brne	.-76     	; 0x1c86 <LCD_I2C_init+0x52c>
    1cd2:	27 c0       	rjmp	.+78     	; 0x1d22 <LCD_I2C_init+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd4:	8e 01       	movw	r16, r28
    1cd6:	05 5b       	subi	r16, 0xB5	; 181
    1cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cda:	fe 01       	movw	r30, r28
    1cdc:	e3 5b       	subi	r30, 0xB3	; 179
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	60 81       	ld	r22, Z
    1ce2:	71 81       	ldd	r23, Z+1	; 0x01
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	80 83       	st	Z, r24
    1cf6:	de 01       	movw	r26, r28
    1cf8:	a9 5b       	subi	r26, 0xB9	; 185
    1cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e5 5b       	subi	r30, 0xB5	; 181
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	8d 93       	st	X+, r24
    1d08:	9c 93       	st	X, r25
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e9 5b       	subi	r30, 0xB9	; 185
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z
    1d12:	91 81       	ldd	r25, Z+1	; 0x01
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <LCD_I2C_init+0x5ba>
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e9 5b       	subi	r30, 0xB9	; 185
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	80 83       	st	Z, r24
	_delay_ms(100);
	I2C_send_data(0b00111000);
    1d22:	88 e3       	ldi	r24, 0x38	; 56
    1d24:	0e 94 2e 0b 	call	0x165c	; 0x165c <I2C_send_data>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ed 5b       	subi	r30, 0xBD	; 189
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	a8 ec       	ldi	r26, 0xC8	; 200
    1d34:	b2 e4       	ldi	r27, 0x42	; 66
    1d36:	80 83       	st	Z, r24
    1d38:	91 83       	std	Z+1, r25	; 0x01
    1d3a:	a2 83       	std	Z+2, r26	; 0x02
    1d3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3e:	8e 01       	movw	r16, r28
    1d40:	01 5c       	subi	r16, 0xC1	; 193
    1d42:	1f 4f       	sbci	r17, 0xFF	; 255
    1d44:	fe 01       	movw	r30, r28
    1d46:	ed 5b       	subi	r30, 0xBD	; 189
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	4a ef       	ldi	r20, 0xFA	; 250
    1d58:	54 e4       	ldi	r21, 0x44	; 68
    1d5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	f8 01       	movw	r30, r16
    1d64:	80 83       	st	Z, r24
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	a2 83       	std	Z+2, r26	; 0x02
    1d6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	ff 96       	adiw	r30, 0x3f	; 63
    1d70:	60 81       	ld	r22, Z
    1d72:	71 81       	ldd	r23, Z+1	; 0x01
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e8       	ldi	r20, 0x80	; 128
    1d7e:	5f e3       	ldi	r21, 0x3F	; 63
    1d80:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d84:	88 23       	and	r24, r24
    1d86:	2c f4       	brge	.+10     	; 0x1d92 <LCD_I2C_init+0x638>
		__ticks = 1;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9e af       	std	Y+62, r25	; 0x3e
    1d8e:	8d af       	std	Y+61, r24	; 0x3d
    1d90:	46 c0       	rjmp	.+140    	; 0x1e1e <LCD_I2C_init+0x6c4>
	else if (__tmp > 65535)
    1d92:	fe 01       	movw	r30, r28
    1d94:	ff 96       	adiw	r30, 0x3f	; 63
    1d96:	60 81       	ld	r22, Z
    1d98:	71 81       	ldd	r23, Z+1	; 0x01
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	3f ef       	ldi	r19, 0xFF	; 255
    1da2:	4f e7       	ldi	r20, 0x7F	; 127
    1da4:	57 e4       	ldi	r21, 0x47	; 71
    1da6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1daa:	18 16       	cp	r1, r24
    1dac:	64 f5       	brge	.+88     	; 0x1e06 <LCD_I2C_init+0x6ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dae:	fe 01       	movw	r30, r28
    1db0:	ed 5b       	subi	r30, 0xBD	; 189
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	60 81       	ld	r22, Z
    1db6:	71 81       	ldd	r23, Z+1	; 0x01
    1db8:	82 81       	ldd	r24, Z+2	; 0x02
    1dba:	93 81       	ldd	r25, Z+3	; 0x03
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e2       	ldi	r20, 0x20	; 32
    1dc2:	51 e4       	ldi	r21, 0x41	; 65
    1dc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9e af       	std	Y+62, r25	; 0x3e
    1dda:	8d af       	std	Y+61, r24	; 0x3d
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <LCD_I2C_init+0x6a2>
    1dde:	88 ec       	ldi	r24, 0xC8	; 200
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9c af       	std	Y+60, r25	; 0x3c
    1de4:	8b af       	std	Y+59, r24	; 0x3b
    1de6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1de8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_I2C_init+0x690>
    1dee:	9c af       	std	Y+60, r25	; 0x3c
    1df0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1df4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	9e af       	std	Y+62, r25	; 0x3e
    1dfa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dfe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	69 f7       	brne	.-38     	; 0x1dde <LCD_I2C_init+0x684>
    1e04:	16 c0       	rjmp	.+44     	; 0x1e32 <LCD_I2C_init+0x6d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e06:	fe 01       	movw	r30, r28
    1e08:	ff 96       	adiw	r30, 0x3f	; 63
    1e0a:	60 81       	ld	r22, Z
    1e0c:	71 81       	ldd	r23, Z+1	; 0x01
    1e0e:	82 81       	ldd	r24, Z+2	; 0x02
    1e10:	93 81       	ldd	r25, Z+3	; 0x03
    1e12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	9e af       	std	Y+62, r25	; 0x3e
    1e1c:	8d af       	std	Y+61, r24	; 0x3d
    1e1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e20:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e22:	9a af       	std	Y+58, r25	; 0x3a
    1e24:	89 af       	std	Y+57, r24	; 0x39
    1e26:	89 ad       	ldd	r24, Y+57	; 0x39
    1e28:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <LCD_I2C_init+0x6d0>
    1e2e:	9a af       	std	Y+58, r25	; 0x3a
    1e30:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);
	I2C_send_data(command);
    1e32:	83 e0       	ldi	r24, 0x03	; 3
    1e34:	0e 94 2e 0b 	call	0x165c	; 0x165c <I2C_send_data>
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a8 ec       	ldi	r26, 0xC8	; 200
    1e3e:	b2 e4       	ldi	r27, 0x42	; 66
    1e40:	8d ab       	std	Y+53, r24	; 0x35
    1e42:	9e ab       	std	Y+54, r25	; 0x36
    1e44:	af ab       	std	Y+55, r26	; 0x37
    1e46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e48:	6d a9       	ldd	r22, Y+53	; 0x35
    1e4a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e4c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e4e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	4a ef       	ldi	r20, 0xFA	; 250
    1e56:	54 e4       	ldi	r21, 0x44	; 68
    1e58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	89 ab       	std	Y+49, r24	; 0x31
    1e62:	9a ab       	std	Y+50, r25	; 0x32
    1e64:	ab ab       	std	Y+51, r26	; 0x33
    1e66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e68:	69 a9       	ldd	r22, Y+49	; 0x31
    1e6a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e6c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e6e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e8       	ldi	r20, 0x80	; 128
    1e76:	5f e3       	ldi	r21, 0x3F	; 63
    1e78:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e7c:	88 23       	and	r24, r24
    1e7e:	2c f4       	brge	.+10     	; 0x1e8a <LCD_I2C_init+0x730>
		__ticks = 1;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	98 ab       	std	Y+48, r25	; 0x30
    1e86:	8f a7       	std	Y+47, r24	; 0x2f
    1e88:	3f c0       	rjmp	.+126    	; 0x1f08 <LCD_I2C_init+0x7ae>
	else if (__tmp > 65535)
    1e8a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e8c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e90:	9c a9       	ldd	r25, Y+52	; 0x34
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	3f ef       	ldi	r19, 0xFF	; 255
    1e96:	4f e7       	ldi	r20, 0x7F	; 127
    1e98:	57 e4       	ldi	r21, 0x47	; 71
    1e9a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	4c f5       	brge	.+82     	; 0x1ef4 <LCD_I2C_init+0x79a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ea6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ea8:	98 ad       	ldd	r25, Y+56	; 0x38
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e2       	ldi	r20, 0x20	; 32
    1eb0:	51 e4       	ldi	r21, 0x41	; 65
    1eb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	98 ab       	std	Y+48, r25	; 0x30
    1ec8:	8f a7       	std	Y+47, r24	; 0x2f
    1eca:	0f c0       	rjmp	.+30     	; 0x1eea <LCD_I2C_init+0x790>
    1ecc:	88 ec       	ldi	r24, 0xC8	; 200
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9e a7       	std	Y+46, r25	; 0x2e
    1ed2:	8d a7       	std	Y+45, r24	; 0x2d
    1ed4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ed6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <LCD_I2C_init+0x77e>
    1edc:	9e a7       	std	Y+46, r25	; 0x2e
    1ede:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	98 ab       	std	Y+48, r25	; 0x30
    1ee8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eec:	98 a9       	ldd	r25, Y+48	; 0x30
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	69 f7       	brne	.-38     	; 0x1ecc <LCD_I2C_init+0x772>
    1ef2:	14 c0       	rjmp	.+40     	; 0x1f1c <LCD_I2C_init+0x7c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ef6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ef8:	8b a9       	ldd	r24, Y+51	; 0x33
    1efa:	9c a9       	ldd	r25, Y+52	; 0x34
    1efc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	98 ab       	std	Y+48, r25	; 0x30
    1f06:	8f a7       	std	Y+47, r24	; 0x2f
    1f08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0c:	9c a7       	std	Y+44, r25	; 0x2c
    1f0e:	8b a7       	std	Y+43, r24	; 0x2b
    1f10:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f12:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <LCD_I2C_init+0x7ba>
    1f18:	9c a7       	std	Y+44, r25	; 0x2c
    1f1a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	I2C_send_data(0b00001100);
    1f1c:	8c e0       	ldi	r24, 0x0C	; 12
    1f1e:	0e 94 2e 0b 	call	0x165c	; 0x165c <I2C_send_data>
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	a8 ec       	ldi	r26, 0xC8	; 200
    1f28:	b2 e4       	ldi	r27, 0x42	; 66
    1f2a:	8f a3       	std	Y+39, r24	; 0x27
    1f2c:	98 a7       	std	Y+40, r25	; 0x28
    1f2e:	a9 a7       	std	Y+41, r26	; 0x29
    1f30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f32:	6f a1       	ldd	r22, Y+39	; 0x27
    1f34:	78 a5       	ldd	r23, Y+40	; 0x28
    1f36:	89 a5       	ldd	r24, Y+41	; 0x29
    1f38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	4a ef       	ldi	r20, 0xFA	; 250
    1f40:	54 e4       	ldi	r21, 0x44	; 68
    1f42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	8b a3       	std	Y+35, r24	; 0x23
    1f4c:	9c a3       	std	Y+36, r25	; 0x24
    1f4e:	ad a3       	std	Y+37, r26	; 0x25
    1f50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f52:	6b a1       	ldd	r22, Y+35	; 0x23
    1f54:	7c a1       	ldd	r23, Y+36	; 0x24
    1f56:	8d a1       	ldd	r24, Y+37	; 0x25
    1f58:	9e a1       	ldd	r25, Y+38	; 0x26
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e8       	ldi	r20, 0x80	; 128
    1f60:	5f e3       	ldi	r21, 0x3F	; 63
    1f62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f66:	88 23       	and	r24, r24
    1f68:	2c f4       	brge	.+10     	; 0x1f74 <LCD_I2C_init+0x81a>
		__ticks = 1;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	9a a3       	std	Y+34, r25	; 0x22
    1f70:	89 a3       	std	Y+33, r24	; 0x21
    1f72:	3f c0       	rjmp	.+126    	; 0x1ff2 <LCD_I2C_init+0x898>
	else if (__tmp > 65535)
    1f74:	6b a1       	ldd	r22, Y+35	; 0x23
    1f76:	7c a1       	ldd	r23, Y+36	; 0x24
    1f78:	8d a1       	ldd	r24, Y+37	; 0x25
    1f7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	3f ef       	ldi	r19, 0xFF	; 255
    1f80:	4f e7       	ldi	r20, 0x7F	; 127
    1f82:	57 e4       	ldi	r21, 0x47	; 71
    1f84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f88:	18 16       	cp	r1, r24
    1f8a:	4c f5       	brge	.+82     	; 0x1fde <LCD_I2C_init+0x884>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f8e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f90:	89 a5       	ldd	r24, Y+41	; 0x29
    1f92:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e2       	ldi	r20, 0x20	; 32
    1f9a:	51 e4       	ldi	r21, 0x41	; 65
    1f9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	cd 01       	movw	r24, r26
    1fa8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	9a a3       	std	Y+34, r25	; 0x22
    1fb2:	89 a3       	std	Y+33, r24	; 0x21
    1fb4:	0f c0       	rjmp	.+30     	; 0x1fd4 <LCD_I2C_init+0x87a>
    1fb6:	88 ec       	ldi	r24, 0xC8	; 200
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	98 a3       	std	Y+32, r25	; 0x20
    1fbc:	8f 8f       	std	Y+31, r24	; 0x1f
    1fbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fc0:	98 a1       	ldd	r25, Y+32	; 0x20
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_I2C_init+0x868>
    1fc6:	98 a3       	std	Y+32, r25	; 0x20
    1fc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fca:	89 a1       	ldd	r24, Y+33	; 0x21
    1fcc:	9a a1       	ldd	r25, Y+34	; 0x22
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	9a a3       	std	Y+34, r25	; 0x22
    1fd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	69 f7       	brne	.-38     	; 0x1fb6 <LCD_I2C_init+0x85c>
    1fdc:	14 c0       	rjmp	.+40     	; 0x2006 <LCD_I2C_init+0x8ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fde:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9a a3       	std	Y+34, r25	; 0x22
    1ff0:	89 a3       	std	Y+33, r24	; 0x21
    1ff2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ff8:	8d 8f       	std	Y+29, r24	; 0x1d
    1ffa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ffc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <LCD_I2C_init+0x8a4>
    2002:	9e 8f       	std	Y+30, r25	; 0x1e
    2004:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	I2C_send_data(command);
    2006:	83 e0       	ldi	r24, 0x03	; 3
    2008:	0e 94 2e 0b 	call	0x165c	; 0x165c <I2C_send_data>
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	a8 ec       	ldi	r26, 0xC8	; 200
    2012:	b2 e4       	ldi	r27, 0x42	; 66
    2014:	89 8f       	std	Y+25, r24	; 0x19
    2016:	9a 8f       	std	Y+26, r25	; 0x1a
    2018:	ab 8f       	std	Y+27, r26	; 0x1b
    201a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201c:	69 8d       	ldd	r22, Y+25	; 0x19
    201e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2020:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2022:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4a ef       	ldi	r20, 0xFA	; 250
    202a:	54 e4       	ldi	r21, 0x44	; 68
    202c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	8d 8b       	std	Y+21, r24	; 0x15
    2036:	9e 8b       	std	Y+22, r25	; 0x16
    2038:	af 8b       	std	Y+23, r26	; 0x17
    203a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    203c:	6d 89       	ldd	r22, Y+21	; 0x15
    203e:	7e 89       	ldd	r23, Y+22	; 0x16
    2040:	8f 89       	ldd	r24, Y+23	; 0x17
    2042:	98 8d       	ldd	r25, Y+24	; 0x18
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e8       	ldi	r20, 0x80	; 128
    204a:	5f e3       	ldi	r21, 0x3F	; 63
    204c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2050:	88 23       	and	r24, r24
    2052:	2c f4       	brge	.+10     	; 0x205e <LCD_I2C_init+0x904>
		__ticks = 1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9c 8b       	std	Y+20, r25	; 0x14
    205a:	8b 8b       	std	Y+19, r24	; 0x13
    205c:	3f c0       	rjmp	.+126    	; 0x20dc <LCD_I2C_init+0x982>
	else if (__tmp > 65535)
    205e:	6d 89       	ldd	r22, Y+21	; 0x15
    2060:	7e 89       	ldd	r23, Y+22	; 0x16
    2062:	8f 89       	ldd	r24, Y+23	; 0x17
    2064:	98 8d       	ldd	r25, Y+24	; 0x18
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	3f ef       	ldi	r19, 0xFF	; 255
    206a:	4f e7       	ldi	r20, 0x7F	; 127
    206c:	57 e4       	ldi	r21, 0x47	; 71
    206e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2072:	18 16       	cp	r1, r24
    2074:	4c f5       	brge	.+82     	; 0x20c8 <LCD_I2C_init+0x96e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2076:	69 8d       	ldd	r22, Y+25	; 0x19
    2078:	7a 8d       	ldd	r23, Y+26	; 0x1a
    207a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    207c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e2       	ldi	r20, 0x20	; 32
    2084:	51 e4       	ldi	r21, 0x41	; 65
    2086:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9c 8b       	std	Y+20, r25	; 0x14
    209c:	8b 8b       	std	Y+19, r24	; 0x13
    209e:	0f c0       	rjmp	.+30     	; 0x20be <LCD_I2C_init+0x964>
    20a0:	88 ec       	ldi	r24, 0xC8	; 200
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9a 8b       	std	Y+18, r25	; 0x12
    20a6:	89 8b       	std	Y+17, r24	; 0x11
    20a8:	89 89       	ldd	r24, Y+17	; 0x11
    20aa:	9a 89       	ldd	r25, Y+18	; 0x12
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <LCD_I2C_init+0x952>
    20b0:	9a 8b       	std	Y+18, r25	; 0x12
    20b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b4:	8b 89       	ldd	r24, Y+19	; 0x13
    20b6:	9c 89       	ldd	r25, Y+20	; 0x14
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	9c 8b       	std	Y+20, r25	; 0x14
    20bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20be:	8b 89       	ldd	r24, Y+19	; 0x13
    20c0:	9c 89       	ldd	r25, Y+20	; 0x14
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	69 f7       	brne	.-38     	; 0x20a0 <LCD_I2C_init+0x946>
    20c6:	14 c0       	rjmp	.+40     	; 0x20f0 <LCD_I2C_init+0x996>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c8:	6d 89       	ldd	r22, Y+21	; 0x15
    20ca:	7e 89       	ldd	r23, Y+22	; 0x16
    20cc:	8f 89       	ldd	r24, Y+23	; 0x17
    20ce:	98 8d       	ldd	r25, Y+24	; 0x18
    20d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9c 8b       	std	Y+20, r25	; 0x14
    20da:	8b 8b       	std	Y+19, r24	; 0x13
    20dc:	8b 89       	ldd	r24, Y+19	; 0x13
    20de:	9c 89       	ldd	r25, Y+20	; 0x14
    20e0:	98 8b       	std	Y+16, r25	; 0x10
    20e2:	8f 87       	std	Y+15, r24	; 0x0f
    20e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e6:	98 89       	ldd	r25, Y+16	; 0x10
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <LCD_I2C_init+0x98e>
    20ec:	98 8b       	std	Y+16, r25	; 0x10
    20ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	I2C_send_data(0b00000001);
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	0e 94 2e 0b 	call	0x165c	; 0x165c <I2C_send_data>
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	a0 e2       	ldi	r26, 0x20	; 32
    20fc:	b1 e4       	ldi	r27, 0x41	; 65
    20fe:	8b 87       	std	Y+11, r24	; 0x0b
    2100:	9c 87       	std	Y+12, r25	; 0x0c
    2102:	ad 87       	std	Y+13, r26	; 0x0d
    2104:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2106:	6b 85       	ldd	r22, Y+11	; 0x0b
    2108:	7c 85       	ldd	r23, Y+12	; 0x0c
    210a:	8d 85       	ldd	r24, Y+13	; 0x0d
    210c:	9e 85       	ldd	r25, Y+14	; 0x0e
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	4a ef       	ldi	r20, 0xFA	; 250
    2114:	54 e4       	ldi	r21, 0x44	; 68
    2116:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	8f 83       	std	Y+7, r24	; 0x07
    2120:	98 87       	std	Y+8, r25	; 0x08
    2122:	a9 87       	std	Y+9, r26	; 0x09
    2124:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2126:	6f 81       	ldd	r22, Y+7	; 0x07
    2128:	78 85       	ldd	r23, Y+8	; 0x08
    212a:	89 85       	ldd	r24, Y+9	; 0x09
    212c:	9a 85       	ldd	r25, Y+10	; 0x0a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e8       	ldi	r20, 0x80	; 128
    2134:	5f e3       	ldi	r21, 0x3F	; 63
    2136:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    213a:	88 23       	and	r24, r24
    213c:	2c f4       	brge	.+10     	; 0x2148 <LCD_I2C_init+0x9ee>
		__ticks = 1;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	9e 83       	std	Y+6, r25	; 0x06
    2144:	8d 83       	std	Y+5, r24	; 0x05
    2146:	3f c0       	rjmp	.+126    	; 0x21c6 <LCD_I2C_init+0xa6c>
	else if (__tmp > 65535)
    2148:	6f 81       	ldd	r22, Y+7	; 0x07
    214a:	78 85       	ldd	r23, Y+8	; 0x08
    214c:	89 85       	ldd	r24, Y+9	; 0x09
    214e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	3f ef       	ldi	r19, 0xFF	; 255
    2154:	4f e7       	ldi	r20, 0x7F	; 127
    2156:	57 e4       	ldi	r21, 0x47	; 71
    2158:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    215c:	18 16       	cp	r1, r24
    215e:	4c f5       	brge	.+82     	; 0x21b2 <LCD_I2C_init+0xa58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2160:	6b 85       	ldd	r22, Y+11	; 0x0b
    2162:	7c 85       	ldd	r23, Y+12	; 0x0c
    2164:	8d 85       	ldd	r24, Y+13	; 0x0d
    2166:	9e 85       	ldd	r25, Y+14	; 0x0e
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e2       	ldi	r20, 0x20	; 32
    216e:	51 e4       	ldi	r21, 0x41	; 65
    2170:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	bc 01       	movw	r22, r24
    217a:	cd 01       	movw	r24, r26
    217c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	9e 83       	std	Y+6, r25	; 0x06
    2186:	8d 83       	std	Y+5, r24	; 0x05
    2188:	0f c0       	rjmp	.+30     	; 0x21a8 <LCD_I2C_init+0xa4e>
    218a:	88 ec       	ldi	r24, 0xC8	; 200
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	9c 83       	std	Y+4, r25	; 0x04
    2190:	8b 83       	std	Y+3, r24	; 0x03
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <LCD_I2C_init+0xa3c>
    219a:	9c 83       	std	Y+4, r25	; 0x04
    219c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219e:	8d 81       	ldd	r24, Y+5	; 0x05
    21a0:	9e 81       	ldd	r25, Y+6	; 0x06
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	9e 83       	std	Y+6, r25	; 0x06
    21a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a8:	8d 81       	ldd	r24, Y+5	; 0x05
    21aa:	9e 81       	ldd	r25, Y+6	; 0x06
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	69 f7       	brne	.-38     	; 0x218a <LCD_I2C_init+0xa30>
    21b0:	14 c0       	rjmp	.+40     	; 0x21da <LCD_I2C_init+0xa80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b2:	6f 81       	ldd	r22, Y+7	; 0x07
    21b4:	78 85       	ldd	r23, Y+8	; 0x08
    21b6:	89 85       	ldd	r24, Y+9	; 0x09
    21b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
    21c6:	8d 81       	ldd	r24, Y+5	; 0x05
    21c8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ca:	9a 83       	std	Y+2, r25	; 0x02
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	9a 81       	ldd	r25, Y+2	; 0x02
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <LCD_I2C_init+0xa78>
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	I2C_stop();
    21da:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <I2C_stop>
}
    21de:	c2 58       	subi	r28, 0x82	; 130
    21e0:	df 4f       	sbci	r29, 0xFF	; 255
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	08 95       	ret

000021f6 <LCD_I2C_send_NUM>:
void LCD_I2C_send_NUM(u16 Copy_num)
{ u8 LSB=(u8)Copy_num;
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	ae 97       	sbiw	r28, 0x2e	; 46
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	9e a7       	std	Y+46, r25	; 0x2e
    220c:	8d a7       	std	Y+45, r24	; 0x2d
    220e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2210:	8c a7       	std	Y+44, r24	; 0x2c
  u8 MSB= (u8)(Copy_num>>8);
    2212:	8d a5       	ldd	r24, Y+45	; 0x2d
    2214:	9e a5       	ldd	r25, Y+46	; 0x2e
    2216:	89 2f       	mov	r24, r25
    2218:	99 27       	eor	r25, r25
    221a:	8b a7       	std	Y+43, r24	; 0x2b

		I2C_send_start();
    221c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <I2C_send_start>
		I2C_select_slave(5,0);
    2220:	85 e0       	ldi	r24, 0x05	; 5
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <I2C_select_slave>
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	a8 e4       	ldi	r26, 0x48	; 72
    222e:	b3 e4       	ldi	r27, 0x43	; 67
    2230:	8f a3       	std	Y+39, r24	; 0x27
    2232:	98 a7       	std	Y+40, r25	; 0x28
    2234:	a9 a7       	std	Y+41, r26	; 0x29
    2236:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2238:	6f a1       	ldd	r22, Y+39	; 0x27
    223a:	78 a5       	ldd	r23, Y+40	; 0x28
    223c:	89 a5       	ldd	r24, Y+41	; 0x29
    223e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	4a ef       	ldi	r20, 0xFA	; 250
    2246:	54 e4       	ldi	r21, 0x44	; 68
    2248:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	8b a3       	std	Y+35, r24	; 0x23
    2252:	9c a3       	std	Y+36, r25	; 0x24
    2254:	ad a3       	std	Y+37, r26	; 0x25
    2256:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2258:	6b a1       	ldd	r22, Y+35	; 0x23
    225a:	7c a1       	ldd	r23, Y+36	; 0x24
    225c:	8d a1       	ldd	r24, Y+37	; 0x25
    225e:	9e a1       	ldd	r25, Y+38	; 0x26
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e8       	ldi	r20, 0x80	; 128
    2266:	5f e3       	ldi	r21, 0x3F	; 63
    2268:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    226c:	88 23       	and	r24, r24
    226e:	2c f4       	brge	.+10     	; 0x227a <LCD_I2C_send_NUM+0x84>
		__ticks = 1;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9a a3       	std	Y+34, r25	; 0x22
    2276:	89 a3       	std	Y+33, r24	; 0x21
    2278:	3f c0       	rjmp	.+126    	; 0x22f8 <LCD_I2C_send_NUM+0x102>
	else if (__tmp > 65535)
    227a:	6b a1       	ldd	r22, Y+35	; 0x23
    227c:	7c a1       	ldd	r23, Y+36	; 0x24
    227e:	8d a1       	ldd	r24, Y+37	; 0x25
    2280:	9e a1       	ldd	r25, Y+38	; 0x26
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	3f ef       	ldi	r19, 0xFF	; 255
    2286:	4f e7       	ldi	r20, 0x7F	; 127
    2288:	57 e4       	ldi	r21, 0x47	; 71
    228a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    228e:	18 16       	cp	r1, r24
    2290:	4c f5       	brge	.+82     	; 0x22e4 <LCD_I2C_send_NUM+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	6f a1       	ldd	r22, Y+39	; 0x27
    2294:	78 a5       	ldd	r23, Y+40	; 0x28
    2296:	89 a5       	ldd	r24, Y+41	; 0x29
    2298:	9a a5       	ldd	r25, Y+42	; 0x2a
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	9a a3       	std	Y+34, r25	; 0x22
    22b8:	89 a3       	std	Y+33, r24	; 0x21
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <LCD_I2C_send_NUM+0xe4>
    22bc:	88 ec       	ldi	r24, 0xC8	; 200
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	98 a3       	std	Y+32, r25	; 0x20
    22c2:	8f 8f       	std	Y+31, r24	; 0x1f
    22c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22c6:	98 a1       	ldd	r25, Y+32	; 0x20
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <LCD_I2C_send_NUM+0xd2>
    22cc:	98 a3       	std	Y+32, r25	; 0x20
    22ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d0:	89 a1       	ldd	r24, Y+33	; 0x21
    22d2:	9a a1       	ldd	r25, Y+34	; 0x22
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	9a a3       	std	Y+34, r25	; 0x22
    22d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22da:	89 a1       	ldd	r24, Y+33	; 0x21
    22dc:	9a a1       	ldd	r25, Y+34	; 0x22
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	69 f7       	brne	.-38     	; 0x22bc <LCD_I2C_send_NUM+0xc6>
    22e2:	14 c0       	rjmp	.+40     	; 0x230c <LCD_I2C_send_NUM+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e4:	6b a1       	ldd	r22, Y+35	; 0x23
    22e6:	7c a1       	ldd	r23, Y+36	; 0x24
    22e8:	8d a1       	ldd	r24, Y+37	; 0x25
    22ea:	9e a1       	ldd	r25, Y+38	; 0x26
    22ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9a a3       	std	Y+34, r25	; 0x22
    22f6:	89 a3       	std	Y+33, r24	; 0x21
    22f8:	89 a1       	ldd	r24, Y+33	; 0x21
    22fa:	9a a1       	ldd	r25, Y+34	; 0x22
    22fc:	9e 8f       	std	Y+30, r25	; 0x1e
    22fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2302:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <LCD_I2C_send_NUM+0x10e>
    2308:	9e 8f       	std	Y+30, r25	; 0x1e
    230a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(200);
		I2C_send_data(Num);
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	0e 94 2e 0b 	call	0x165c	; 0x165c <I2C_send_data>
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	a8 e4       	ldi	r26, 0x48	; 72
    2318:	b3 e4       	ldi	r27, 0x43	; 67
    231a:	89 8f       	std	Y+25, r24	; 0x19
    231c:	9a 8f       	std	Y+26, r25	; 0x1a
    231e:	ab 8f       	std	Y+27, r26	; 0x1b
    2320:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2322:	69 8d       	ldd	r22, Y+25	; 0x19
    2324:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2326:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2328:	9c 8d       	ldd	r25, Y+28	; 0x1c
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	4a ef       	ldi	r20, 0xFA	; 250
    2330:	54 e4       	ldi	r21, 0x44	; 68
    2332:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	8d 8b       	std	Y+21, r24	; 0x15
    233c:	9e 8b       	std	Y+22, r25	; 0x16
    233e:	af 8b       	std	Y+23, r26	; 0x17
    2340:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2342:	6d 89       	ldd	r22, Y+21	; 0x15
    2344:	7e 89       	ldd	r23, Y+22	; 0x16
    2346:	8f 89       	ldd	r24, Y+23	; 0x17
    2348:	98 8d       	ldd	r25, Y+24	; 0x18
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	5f e3       	ldi	r21, 0x3F	; 63
    2352:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2356:	88 23       	and	r24, r24
    2358:	2c f4       	brge	.+10     	; 0x2364 <LCD_I2C_send_NUM+0x16e>
		__ticks = 1;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9c 8b       	std	Y+20, r25	; 0x14
    2360:	8b 8b       	std	Y+19, r24	; 0x13
    2362:	3f c0       	rjmp	.+126    	; 0x23e2 <LCD_I2C_send_NUM+0x1ec>
	else if (__tmp > 65535)
    2364:	6d 89       	ldd	r22, Y+21	; 0x15
    2366:	7e 89       	ldd	r23, Y+22	; 0x16
    2368:	8f 89       	ldd	r24, Y+23	; 0x17
    236a:	98 8d       	ldd	r25, Y+24	; 0x18
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	4c f5       	brge	.+82     	; 0x23ce <LCD_I2C_send_NUM+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237c:	69 8d       	ldd	r22, Y+25	; 0x19
    237e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2380:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2382:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e2       	ldi	r20, 0x20	; 32
    238a:	51 e4       	ldi	r21, 0x41	; 65
    238c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	9c 8b       	std	Y+20, r25	; 0x14
    23a2:	8b 8b       	std	Y+19, r24	; 0x13
    23a4:	0f c0       	rjmp	.+30     	; 0x23c4 <LCD_I2C_send_NUM+0x1ce>
    23a6:	88 ec       	ldi	r24, 0xC8	; 200
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9a 8b       	std	Y+18, r25	; 0x12
    23ac:	89 8b       	std	Y+17, r24	; 0x11
    23ae:	89 89       	ldd	r24, Y+17	; 0x11
    23b0:	9a 89       	ldd	r25, Y+18	; 0x12
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_I2C_send_NUM+0x1bc>
    23b6:	9a 8b       	std	Y+18, r25	; 0x12
    23b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ba:	8b 89       	ldd	r24, Y+19	; 0x13
    23bc:	9c 89       	ldd	r25, Y+20	; 0x14
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	9c 8b       	std	Y+20, r25	; 0x14
    23c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c4:	8b 89       	ldd	r24, Y+19	; 0x13
    23c6:	9c 89       	ldd	r25, Y+20	; 0x14
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	69 f7       	brne	.-38     	; 0x23a6 <LCD_I2C_send_NUM+0x1b0>
    23cc:	14 c0       	rjmp	.+40     	; 0x23f6 <LCD_I2C_send_NUM+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ce:	6d 89       	ldd	r22, Y+21	; 0x15
    23d0:	7e 89       	ldd	r23, Y+22	; 0x16
    23d2:	8f 89       	ldd	r24, Y+23	; 0x17
    23d4:	98 8d       	ldd	r25, Y+24	; 0x18
    23d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9c 8b       	std	Y+20, r25	; 0x14
    23e0:	8b 8b       	std	Y+19, r24	; 0x13
    23e2:	8b 89       	ldd	r24, Y+19	; 0x13
    23e4:	9c 89       	ldd	r25, Y+20	; 0x14
    23e6:	98 8b       	std	Y+16, r25	; 0x10
    23e8:	8f 87       	std	Y+15, r24	; 0x0f
    23ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ec:	98 89       	ldd	r25, Y+16	; 0x10
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <LCD_I2C_send_NUM+0x1f8>
    23f2:	98 8b       	std	Y+16, r25	; 0x10
    23f4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		I2C_send_data(LSB);
    23f6:	8c a5       	ldd	r24, Y+44	; 0x2c
    23f8:	0e 94 2e 0b 	call	0x165c	; 0x165c <I2C_send_data>
		if (MSB==0)
    23fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    23fe:	88 23       	and	r24, r24
    2400:	19 f4       	brne	.+6      	; 0x2408 <LCD_I2C_send_NUM+0x212>
		{I2C_stop();}
    2402:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <I2C_stop>
    2406:	77 c0       	rjmp	.+238    	; 0x24f6 <LCD_I2C_send_NUM+0x300>
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a8 e4       	ldi	r26, 0x48	; 72
    240e:	b3 e4       	ldi	r27, 0x43	; 67
    2410:	8b 87       	std	Y+11, r24	; 0x0b
    2412:	9c 87       	std	Y+12, r25	; 0x0c
    2414:	ad 87       	std	Y+13, r26	; 0x0d
    2416:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	6b 85       	ldd	r22, Y+11	; 0x0b
    241a:	7c 85       	ldd	r23, Y+12	; 0x0c
    241c:	8d 85       	ldd	r24, Y+13	; 0x0d
    241e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a ef       	ldi	r20, 0xFA	; 250
    2426:	54 e4       	ldi	r21, 0x44	; 68
    2428:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	8f 83       	std	Y+7, r24	; 0x07
    2432:	98 87       	std	Y+8, r25	; 0x08
    2434:	a9 87       	std	Y+9, r26	; 0x09
    2436:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2438:	6f 81       	ldd	r22, Y+7	; 0x07
    243a:	78 85       	ldd	r23, Y+8	; 0x08
    243c:	89 85       	ldd	r24, Y+9	; 0x09
    243e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	2c f4       	brge	.+10     	; 0x245a <LCD_I2C_send_NUM+0x264>
		__ticks = 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9e 83       	std	Y+6, r25	; 0x06
    2456:	8d 83       	std	Y+5, r24	; 0x05
    2458:	3f c0       	rjmp	.+126    	; 0x24d8 <LCD_I2C_send_NUM+0x2e2>
	else if (__tmp > 65535)
    245a:	6f 81       	ldd	r22, Y+7	; 0x07
    245c:	78 85       	ldd	r23, Y+8	; 0x08
    245e:	89 85       	ldd	r24, Y+9	; 0x09
    2460:	9a 85       	ldd	r25, Y+10	; 0x0a
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	3f ef       	ldi	r19, 0xFF	; 255
    2466:	4f e7       	ldi	r20, 0x7F	; 127
    2468:	57 e4       	ldi	r21, 0x47	; 71
    246a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    246e:	18 16       	cp	r1, r24
    2470:	4c f5       	brge	.+82     	; 0x24c4 <LCD_I2C_send_NUM+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2472:	6b 85       	ldd	r22, Y+11	; 0x0b
    2474:	7c 85       	ldd	r23, Y+12	; 0x0c
    2476:	8d 85       	ldd	r24, Y+13	; 0x0d
    2478:	9e 85       	ldd	r25, Y+14	; 0x0e
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <LCD_I2C_send_NUM+0x2c4>
    249c:	88 ec       	ldi	r24, 0xC8	; 200
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9c 83       	std	Y+4, r25	; 0x04
    24a2:	8b 83       	std	Y+3, r24	; 0x03
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	9c 81       	ldd	r25, Y+4	; 0x04
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <LCD_I2C_send_NUM+0x2b2>
    24ac:	9c 83       	std	Y+4, r25	; 0x04
    24ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	9e 83       	std	Y+6, r25	; 0x06
    24b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	9e 81       	ldd	r25, Y+6	; 0x06
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	69 f7       	brne	.-38     	; 0x249c <LCD_I2C_send_NUM+0x2a6>
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <LCD_I2C_send_NUM+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	6f 81       	ldd	r22, Y+7	; 0x07
    24c6:	78 85       	ldd	r23, Y+8	; 0x08
    24c8:	89 85       	ldd	r24, Y+9	; 0x09
    24ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    24cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9e 83       	std	Y+6, r25	; 0x06
    24d6:	8d 83       	std	Y+5, r24	; 0x05
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	9a 81       	ldd	r25, Y+2	; 0x02
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <LCD_I2C_send_NUM+0x2ee>
    24e8:	9a 83       	std	Y+2, r25	; 0x02
    24ea:	89 83       	std	Y+1, r24	; 0x01
		else {_delay_ms(200);
		I2C_send_data(MSB);I2C_stop();}
    24ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ee:	0e 94 2e 0b 	call	0x165c	; 0x165c <I2C_send_data>
    24f2:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <I2C_stop>
}
    24f6:	ae 96       	adiw	r28, 0x2e	; 46
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <LCD_I2C_send_str>:


void LCD_I2C_send_str(u8* Copy_str)
{	u8 i=0;
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	ad 97       	sbiw	r28, 0x2d	; 45
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	9d a7       	std	Y+45, r25	; 0x2d
    251e:	8c a7       	std	Y+44, r24	; 0x2c
    2520:	1b a6       	std	Y+43, r1	; 0x2b
		I2C_send_start();
    2522:	0e 94 c3 0a 	call	0x1586	; 0x1586 <I2C_send_start>
		I2C_select_slave(5,0);
    2526:	85 e0       	ldi	r24, 0x05	; 5
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <I2C_select_slave>
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	a8 ec       	ldi	r26, 0xC8	; 200
    2534:	b2 e4       	ldi	r27, 0x42	; 66
    2536:	8f a3       	std	Y+39, r24	; 0x27
    2538:	98 a7       	std	Y+40, r25	; 0x28
    253a:	a9 a7       	std	Y+41, r26	; 0x29
    253c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253e:	6f a1       	ldd	r22, Y+39	; 0x27
    2540:	78 a5       	ldd	r23, Y+40	; 0x28
    2542:	89 a5       	ldd	r24, Y+41	; 0x29
    2544:	9a a5       	ldd	r25, Y+42	; 0x2a
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	4a ef       	ldi	r20, 0xFA	; 250
    254c:	54 e4       	ldi	r21, 0x44	; 68
    254e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	8b a3       	std	Y+35, r24	; 0x23
    2558:	9c a3       	std	Y+36, r25	; 0x24
    255a:	ad a3       	std	Y+37, r26	; 0x25
    255c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    255e:	6b a1       	ldd	r22, Y+35	; 0x23
    2560:	7c a1       	ldd	r23, Y+36	; 0x24
    2562:	8d a1       	ldd	r24, Y+37	; 0x25
    2564:	9e a1       	ldd	r25, Y+38	; 0x26
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e8       	ldi	r20, 0x80	; 128
    256c:	5f e3       	ldi	r21, 0x3F	; 63
    256e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2572:	88 23       	and	r24, r24
    2574:	2c f4       	brge	.+10     	; 0x2580 <LCD_I2C_send_str+0x78>
		__ticks = 1;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9a a3       	std	Y+34, r25	; 0x22
    257c:	89 a3       	std	Y+33, r24	; 0x21
    257e:	3f c0       	rjmp	.+126    	; 0x25fe <LCD_I2C_send_str+0xf6>
	else if (__tmp > 65535)
    2580:	6b a1       	ldd	r22, Y+35	; 0x23
    2582:	7c a1       	ldd	r23, Y+36	; 0x24
    2584:	8d a1       	ldd	r24, Y+37	; 0x25
    2586:	9e a1       	ldd	r25, Y+38	; 0x26
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	3f ef       	ldi	r19, 0xFF	; 255
    258c:	4f e7       	ldi	r20, 0x7F	; 127
    258e:	57 e4       	ldi	r21, 0x47	; 71
    2590:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2594:	18 16       	cp	r1, r24
    2596:	4c f5       	brge	.+82     	; 0x25ea <LCD_I2C_send_str+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2598:	6f a1       	ldd	r22, Y+39	; 0x27
    259a:	78 a5       	ldd	r23, Y+40	; 0x28
    259c:	89 a5       	ldd	r24, Y+41	; 0x29
    259e:	9a a5       	ldd	r25, Y+42	; 0x2a
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e2       	ldi	r20, 0x20	; 32
    25a6:	51 e4       	ldi	r21, 0x41	; 65
    25a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	bc 01       	movw	r22, r24
    25b2:	cd 01       	movw	r24, r26
    25b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	9a a3       	std	Y+34, r25	; 0x22
    25be:	89 a3       	std	Y+33, r24	; 0x21
    25c0:	0f c0       	rjmp	.+30     	; 0x25e0 <LCD_I2C_send_str+0xd8>
    25c2:	88 ec       	ldi	r24, 0xC8	; 200
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	98 a3       	std	Y+32, r25	; 0x20
    25c8:	8f 8f       	std	Y+31, r24	; 0x1f
    25ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25cc:	98 a1       	ldd	r25, Y+32	; 0x20
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <LCD_I2C_send_str+0xc6>
    25d2:	98 a3       	std	Y+32, r25	; 0x20
    25d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d6:	89 a1       	ldd	r24, Y+33	; 0x21
    25d8:	9a a1       	ldd	r25, Y+34	; 0x22
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	9a a3       	std	Y+34, r25	; 0x22
    25de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e0:	89 a1       	ldd	r24, Y+33	; 0x21
    25e2:	9a a1       	ldd	r25, Y+34	; 0x22
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	69 f7       	brne	.-38     	; 0x25c2 <LCD_I2C_send_str+0xba>
    25e8:	14 c0       	rjmp	.+40     	; 0x2612 <LCD_I2C_send_str+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ea:	6b a1       	ldd	r22, Y+35	; 0x23
    25ec:	7c a1       	ldd	r23, Y+36	; 0x24
    25ee:	8d a1       	ldd	r24, Y+37	; 0x25
    25f0:	9e a1       	ldd	r25, Y+38	; 0x26
    25f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9a a3       	std	Y+34, r25	; 0x22
    25fc:	89 a3       	std	Y+33, r24	; 0x21
    25fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2600:	9a a1       	ldd	r25, Y+34	; 0x22
    2602:	9e 8f       	std	Y+30, r25	; 0x1e
    2604:	8d 8f       	std	Y+29, r24	; 0x1d
    2606:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2608:	9e 8d       	ldd	r25, Y+30	; 0x1e
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <LCD_I2C_send_str+0x102>
    260e:	9e 8f       	std	Y+30, r25	; 0x1e
    2610:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		I2C_send_data(Str);
    2612:	82 e0       	ldi	r24, 0x02	; 2
    2614:	0e 94 2e 0b 	call	0x165c	; 0x165c <I2C_send_data>
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	a8 ec       	ldi	r26, 0xC8	; 200
    261e:	b2 e4       	ldi	r27, 0x42	; 66
    2620:	89 8f       	std	Y+25, r24	; 0x19
    2622:	9a 8f       	std	Y+26, r25	; 0x1a
    2624:	ab 8f       	std	Y+27, r26	; 0x1b
    2626:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2628:	69 8d       	ldd	r22, Y+25	; 0x19
    262a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    262c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    262e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a ef       	ldi	r20, 0xFA	; 250
    2636:	54 e4       	ldi	r21, 0x44	; 68
    2638:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	8d 8b       	std	Y+21, r24	; 0x15
    2642:	9e 8b       	std	Y+22, r25	; 0x16
    2644:	af 8b       	std	Y+23, r26	; 0x17
    2646:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2648:	6d 89       	ldd	r22, Y+21	; 0x15
    264a:	7e 89       	ldd	r23, Y+22	; 0x16
    264c:	8f 89       	ldd	r24, Y+23	; 0x17
    264e:	98 8d       	ldd	r25, Y+24	; 0x18
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e8       	ldi	r20, 0x80	; 128
    2656:	5f e3       	ldi	r21, 0x3F	; 63
    2658:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    265c:	88 23       	and	r24, r24
    265e:	2c f4       	brge	.+10     	; 0x266a <LCD_I2C_send_str+0x162>
		__ticks = 1;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	9c 8b       	std	Y+20, r25	; 0x14
    2666:	8b 8b       	std	Y+19, r24	; 0x13
    2668:	3f c0       	rjmp	.+126    	; 0x26e8 <LCD_I2C_send_str+0x1e0>
	else if (__tmp > 65535)
    266a:	6d 89       	ldd	r22, Y+21	; 0x15
    266c:	7e 89       	ldd	r23, Y+22	; 0x16
    266e:	8f 89       	ldd	r24, Y+23	; 0x17
    2670:	98 8d       	ldd	r25, Y+24	; 0x18
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	3f ef       	ldi	r19, 0xFF	; 255
    2676:	4f e7       	ldi	r20, 0x7F	; 127
    2678:	57 e4       	ldi	r21, 0x47	; 71
    267a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    267e:	18 16       	cp	r1, r24
    2680:	4c f5       	brge	.+82     	; 0x26d4 <LCD_I2C_send_str+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2682:	69 8d       	ldd	r22, Y+25	; 0x19
    2684:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2686:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2688:	9c 8d       	ldd	r25, Y+28	; 0x1c
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e2       	ldi	r20, 0x20	; 32
    2690:	51 e4       	ldi	r21, 0x41	; 65
    2692:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	bc 01       	movw	r22, r24
    269c:	cd 01       	movw	r24, r26
    269e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	9c 8b       	std	Y+20, r25	; 0x14
    26a8:	8b 8b       	std	Y+19, r24	; 0x13
    26aa:	0f c0       	rjmp	.+30     	; 0x26ca <LCD_I2C_send_str+0x1c2>
    26ac:	88 ec       	ldi	r24, 0xC8	; 200
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	9a 8b       	std	Y+18, r25	; 0x12
    26b2:	89 8b       	std	Y+17, r24	; 0x11
    26b4:	89 89       	ldd	r24, Y+17	; 0x11
    26b6:	9a 89       	ldd	r25, Y+18	; 0x12
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <LCD_I2C_send_str+0x1b0>
    26bc:	9a 8b       	std	Y+18, r25	; 0x12
    26be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c0:	8b 89       	ldd	r24, Y+19	; 0x13
    26c2:	9c 89       	ldd	r25, Y+20	; 0x14
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	9c 8b       	std	Y+20, r25	; 0x14
    26c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ca:	8b 89       	ldd	r24, Y+19	; 0x13
    26cc:	9c 89       	ldd	r25, Y+20	; 0x14
    26ce:	00 97       	sbiw	r24, 0x00	; 0
    26d0:	69 f7       	brne	.-38     	; 0x26ac <LCD_I2C_send_str+0x1a4>
    26d2:	95 c0       	rjmp	.+298    	; 0x27fe <LCD_I2C_send_str+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d4:	6d 89       	ldd	r22, Y+21	; 0x15
    26d6:	7e 89       	ldd	r23, Y+22	; 0x16
    26d8:	8f 89       	ldd	r24, Y+23	; 0x17
    26da:	98 8d       	ldd	r25, Y+24	; 0x18
    26dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	9c 8b       	std	Y+20, r25	; 0x14
    26e6:	8b 8b       	std	Y+19, r24	; 0x13
    26e8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ea:	9c 89       	ldd	r25, Y+20	; 0x14
    26ec:	98 8b       	std	Y+16, r25	; 0x10
    26ee:	8f 87       	std	Y+15, r24	; 0x0f
    26f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f2:	98 89       	ldd	r25, Y+16	; 0x10
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	f1 f7       	brne	.-4      	; 0x26f4 <LCD_I2C_send_str+0x1ec>
    26f8:	98 8b       	std	Y+16, r25	; 0x10
    26fa:	8f 87       	std	Y+15, r24	; 0x0f
    26fc:	80 c0       	rjmp	.+256    	; 0x27fe <LCD_I2C_send_str+0x2f6>
		_delay_ms(100);
		while(Copy_str[i]!='\0')
		{
		I2C_send_data(Copy_str[i]);
    26fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	8c a5       	ldd	r24, Y+44	; 0x2c
    2706:	9d a5       	ldd	r25, Y+45	; 0x2d
    2708:	fc 01       	movw	r30, r24
    270a:	e2 0f       	add	r30, r18
    270c:	f3 1f       	adc	r31, r19
    270e:	80 81       	ld	r24, Z
    2710:	0e 94 2e 0b 	call	0x165c	; 0x165c <I2C_send_data>
		i++;
    2714:	8b a5       	ldd	r24, Y+43	; 0x2b
    2716:	8f 5f       	subi	r24, 0xFF	; 255
    2718:	8b a7       	std	Y+43, r24	; 0x2b
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	a8 ec       	ldi	r26, 0xC8	; 200
    2720:	b2 e4       	ldi	r27, 0x42	; 66
    2722:	8b 87       	std	Y+11, r24	; 0x0b
    2724:	9c 87       	std	Y+12, r25	; 0x0c
    2726:	ad 87       	std	Y+13, r26	; 0x0d
    2728:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272a:	6b 85       	ldd	r22, Y+11	; 0x0b
    272c:	7c 85       	ldd	r23, Y+12	; 0x0c
    272e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2730:	9e 85       	ldd	r25, Y+14	; 0x0e
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	4a ef       	ldi	r20, 0xFA	; 250
    2738:	54 e4       	ldi	r21, 0x44	; 68
    273a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	8f 83       	std	Y+7, r24	; 0x07
    2744:	98 87       	std	Y+8, r25	; 0x08
    2746:	a9 87       	std	Y+9, r26	; 0x09
    2748:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    274a:	6f 81       	ldd	r22, Y+7	; 0x07
    274c:	78 85       	ldd	r23, Y+8	; 0x08
    274e:	89 85       	ldd	r24, Y+9	; 0x09
    2750:	9a 85       	ldd	r25, Y+10	; 0x0a
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e8       	ldi	r20, 0x80	; 128
    2758:	5f e3       	ldi	r21, 0x3F	; 63
    275a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    275e:	88 23       	and	r24, r24
    2760:	2c f4       	brge	.+10     	; 0x276c <LCD_I2C_send_str+0x264>
		__ticks = 1;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	9e 83       	std	Y+6, r25	; 0x06
    2768:	8d 83       	std	Y+5, r24	; 0x05
    276a:	3f c0       	rjmp	.+126    	; 0x27ea <LCD_I2C_send_str+0x2e2>
	else if (__tmp > 65535)
    276c:	6f 81       	ldd	r22, Y+7	; 0x07
    276e:	78 85       	ldd	r23, Y+8	; 0x08
    2770:	89 85       	ldd	r24, Y+9	; 0x09
    2772:	9a 85       	ldd	r25, Y+10	; 0x0a
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	3f ef       	ldi	r19, 0xFF	; 255
    2778:	4f e7       	ldi	r20, 0x7F	; 127
    277a:	57 e4       	ldi	r21, 0x47	; 71
    277c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2780:	18 16       	cp	r1, r24
    2782:	4c f5       	brge	.+82     	; 0x27d6 <LCD_I2C_send_str+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2784:	6b 85       	ldd	r22, Y+11	; 0x0b
    2786:	7c 85       	ldd	r23, Y+12	; 0x0c
    2788:	8d 85       	ldd	r24, Y+13	; 0x0d
    278a:	9e 85       	ldd	r25, Y+14	; 0x0e
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e2       	ldi	r20, 0x20	; 32
    2792:	51 e4       	ldi	r21, 0x41	; 65
    2794:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	bc 01       	movw	r22, r24
    279e:	cd 01       	movw	r24, r26
    27a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	9e 83       	std	Y+6, r25	; 0x06
    27aa:	8d 83       	std	Y+5, r24	; 0x05
    27ac:	0f c0       	rjmp	.+30     	; 0x27cc <LCD_I2C_send_str+0x2c4>
    27ae:	88 ec       	ldi	r24, 0xC8	; 200
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	9c 83       	std	Y+4, r25	; 0x04
    27b4:	8b 83       	std	Y+3, r24	; 0x03
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <LCD_I2C_send_str+0x2b2>
    27be:	9c 83       	std	Y+4, r25	; 0x04
    27c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c2:	8d 81       	ldd	r24, Y+5	; 0x05
    27c4:	9e 81       	ldd	r25, Y+6	; 0x06
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27cc:	8d 81       	ldd	r24, Y+5	; 0x05
    27ce:	9e 81       	ldd	r25, Y+6	; 0x06
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	69 f7       	brne	.-38     	; 0x27ae <LCD_I2C_send_str+0x2a6>
    27d4:	14 c0       	rjmp	.+40     	; 0x27fe <LCD_I2C_send_str+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d6:	6f 81       	ldd	r22, Y+7	; 0x07
    27d8:	78 85       	ldd	r23, Y+8	; 0x08
    27da:	89 85       	ldd	r24, Y+9	; 0x09
    27dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9e 83       	std	Y+6, r25	; 0x06
    27e8:	8d 83       	std	Y+5, r24	; 0x05
    27ea:	8d 81       	ldd	r24, Y+5	; 0x05
    27ec:	9e 81       	ldd	r25, Y+6	; 0x06
    27ee:	9a 83       	std	Y+2, r25	; 0x02
    27f0:	89 83       	std	Y+1, r24	; 0x01
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	9a 81       	ldd	r25, Y+2	; 0x02
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <LCD_I2C_send_str+0x2ee>
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	89 83       	std	Y+1, r24	; 0x01
		I2C_send_start();
		I2C_select_slave(5,0);
		_delay_ms(100);
		I2C_send_data(Str);
		_delay_ms(100);
		while(Copy_str[i]!='\0')
    27fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	8c a5       	ldd	r24, Y+44	; 0x2c
    2806:	9d a5       	ldd	r25, Y+45	; 0x2d
    2808:	fc 01       	movw	r30, r24
    280a:	e2 0f       	add	r30, r18
    280c:	f3 1f       	adc	r31, r19
    280e:	80 81       	ld	r24, Z
    2810:	88 23       	and	r24, r24
    2812:	09 f0       	breq	.+2      	; 0x2816 <LCD_I2C_send_str+0x30e>
    2814:	74 cf       	rjmp	.-280    	; 0x26fe <LCD_I2C_send_str+0x1f6>
		{
		I2C_send_data(Copy_str[i]);
		i++;
		_delay_ms(100);
		}
		I2C_send_data('\0');
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	0e 94 2e 0b 	call	0x165c	; 0x165c <I2C_send_data>
		I2C_stop();
    281c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <I2C_stop>
}
    2820:	ad 96       	adiw	r28, 0x2d	; 45
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <LCD_I2C_send_Command>:

void LCD_I2C_send_Command(u8 Copy_com)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	6d 97       	sbiw	r28, 0x1d	; 29
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	8d 8f       	std	Y+29, r24	; 0x1d
	I2C_send_start();
    2848:	0e 94 c3 0a 	call	0x1586	; 0x1586 <I2C_send_start>
	I2C_select_slave(5,0);
    284c:	85 e0       	ldi	r24, 0x05	; 5
    284e:	60 e0       	ldi	r22, 0x00	; 0
    2850:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <I2C_select_slave>
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	a8 ec       	ldi	r26, 0xC8	; 200
    285a:	b2 e4       	ldi	r27, 0x42	; 66
    285c:	89 8f       	std	Y+25, r24	; 0x19
    285e:	9a 8f       	std	Y+26, r25	; 0x1a
    2860:	ab 8f       	std	Y+27, r26	; 0x1b
    2862:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2864:	69 8d       	ldd	r22, Y+25	; 0x19
    2866:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2868:	8b 8d       	ldd	r24, Y+27	; 0x1b
    286a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	4a ef       	ldi	r20, 0xFA	; 250
    2872:	54 e4       	ldi	r21, 0x44	; 68
    2874:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	8d 8b       	std	Y+21, r24	; 0x15
    287e:	9e 8b       	std	Y+22, r25	; 0x16
    2880:	af 8b       	std	Y+23, r26	; 0x17
    2882:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2884:	6d 89       	ldd	r22, Y+21	; 0x15
    2886:	7e 89       	ldd	r23, Y+22	; 0x16
    2888:	8f 89       	ldd	r24, Y+23	; 0x17
    288a:	98 8d       	ldd	r25, Y+24	; 0x18
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e8       	ldi	r20, 0x80	; 128
    2892:	5f e3       	ldi	r21, 0x3F	; 63
    2894:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2898:	88 23       	and	r24, r24
    289a:	2c f4       	brge	.+10     	; 0x28a6 <LCD_I2C_send_Command+0x74>
		__ticks = 1;
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	9c 8b       	std	Y+20, r25	; 0x14
    28a2:	8b 8b       	std	Y+19, r24	; 0x13
    28a4:	3f c0       	rjmp	.+126    	; 0x2924 <LCD_I2C_send_Command+0xf2>
	else if (__tmp > 65535)
    28a6:	6d 89       	ldd	r22, Y+21	; 0x15
    28a8:	7e 89       	ldd	r23, Y+22	; 0x16
    28aa:	8f 89       	ldd	r24, Y+23	; 0x17
    28ac:	98 8d       	ldd	r25, Y+24	; 0x18
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	3f ef       	ldi	r19, 0xFF	; 255
    28b2:	4f e7       	ldi	r20, 0x7F	; 127
    28b4:	57 e4       	ldi	r21, 0x47	; 71
    28b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28ba:	18 16       	cp	r1, r24
    28bc:	4c f5       	brge	.+82     	; 0x2910 <LCD_I2C_send_Command+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28be:	69 8d       	ldd	r22, Y+25	; 0x19
    28c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e2       	ldi	r20, 0x20	; 32
    28cc:	51 e4       	ldi	r21, 0x41	; 65
    28ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	bc 01       	movw	r22, r24
    28d8:	cd 01       	movw	r24, r26
    28da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	9c 8b       	std	Y+20, r25	; 0x14
    28e4:	8b 8b       	std	Y+19, r24	; 0x13
    28e6:	0f c0       	rjmp	.+30     	; 0x2906 <LCD_I2C_send_Command+0xd4>
    28e8:	88 ec       	ldi	r24, 0xC8	; 200
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	9a 8b       	std	Y+18, r25	; 0x12
    28ee:	89 8b       	std	Y+17, r24	; 0x11
    28f0:	89 89       	ldd	r24, Y+17	; 0x11
    28f2:	9a 89       	ldd	r25, Y+18	; 0x12
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <LCD_I2C_send_Command+0xc2>
    28f8:	9a 8b       	std	Y+18, r25	; 0x12
    28fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fc:	8b 89       	ldd	r24, Y+19	; 0x13
    28fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	9c 8b       	std	Y+20, r25	; 0x14
    2904:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2906:	8b 89       	ldd	r24, Y+19	; 0x13
    2908:	9c 89       	ldd	r25, Y+20	; 0x14
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	69 f7       	brne	.-38     	; 0x28e8 <LCD_I2C_send_Command+0xb6>
    290e:	14 c0       	rjmp	.+40     	; 0x2938 <LCD_I2C_send_Command+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2910:	6d 89       	ldd	r22, Y+21	; 0x15
    2912:	7e 89       	ldd	r23, Y+22	; 0x16
    2914:	8f 89       	ldd	r24, Y+23	; 0x17
    2916:	98 8d       	ldd	r25, Y+24	; 0x18
    2918:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	9c 8b       	std	Y+20, r25	; 0x14
    2922:	8b 8b       	std	Y+19, r24	; 0x13
    2924:	8b 89       	ldd	r24, Y+19	; 0x13
    2926:	9c 89       	ldd	r25, Y+20	; 0x14
    2928:	98 8b       	std	Y+16, r25	; 0x10
    292a:	8f 87       	std	Y+15, r24	; 0x0f
    292c:	8f 85       	ldd	r24, Y+15	; 0x0f
    292e:	98 89       	ldd	r25, Y+16	; 0x10
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <LCD_I2C_send_Command+0xfe>
    2934:	98 8b       	std	Y+16, r25	; 0x10
    2936:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	I2C_send_data(command);
    2938:	83 e0       	ldi	r24, 0x03	; 3
    293a:	0e 94 2e 0b 	call	0x165c	; 0x165c <I2C_send_data>
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	a8 ec       	ldi	r26, 0xC8	; 200
    2944:	b2 e4       	ldi	r27, 0x42	; 66
    2946:	8b 87       	std	Y+11, r24	; 0x0b
    2948:	9c 87       	std	Y+12, r25	; 0x0c
    294a:	ad 87       	std	Y+13, r26	; 0x0d
    294c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2950:	7c 85       	ldd	r23, Y+12	; 0x0c
    2952:	8d 85       	ldd	r24, Y+13	; 0x0d
    2954:	9e 85       	ldd	r25, Y+14	; 0x0e
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	4a ef       	ldi	r20, 0xFA	; 250
    295c:	54 e4       	ldi	r21, 0x44	; 68
    295e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	8f 83       	std	Y+7, r24	; 0x07
    2968:	98 87       	std	Y+8, r25	; 0x08
    296a:	a9 87       	std	Y+9, r26	; 0x09
    296c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    296e:	6f 81       	ldd	r22, Y+7	; 0x07
    2970:	78 85       	ldd	r23, Y+8	; 0x08
    2972:	89 85       	ldd	r24, Y+9	; 0x09
    2974:	9a 85       	ldd	r25, Y+10	; 0x0a
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e8       	ldi	r20, 0x80	; 128
    297c:	5f e3       	ldi	r21, 0x3F	; 63
    297e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2982:	88 23       	and	r24, r24
    2984:	2c f4       	brge	.+10     	; 0x2990 <LCD_I2C_send_Command+0x15e>
		__ticks = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
    298e:	3f c0       	rjmp	.+126    	; 0x2a0e <LCD_I2C_send_Command+0x1dc>
	else if (__tmp > 65535)
    2990:	6f 81       	ldd	r22, Y+7	; 0x07
    2992:	78 85       	ldd	r23, Y+8	; 0x08
    2994:	89 85       	ldd	r24, Y+9	; 0x09
    2996:	9a 85       	ldd	r25, Y+10	; 0x0a
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	3f ef       	ldi	r19, 0xFF	; 255
    299c:	4f e7       	ldi	r20, 0x7F	; 127
    299e:	57 e4       	ldi	r21, 0x47	; 71
    29a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29a4:	18 16       	cp	r1, r24
    29a6:	4c f5       	brge	.+82     	; 0x29fa <LCD_I2C_send_Command+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e2       	ldi	r20, 0x20	; 32
    29b6:	51 e4       	ldi	r21, 0x41	; 65
    29b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	bc 01       	movw	r22, r24
    29c2:	cd 01       	movw	r24, r26
    29c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	9e 83       	std	Y+6, r25	; 0x06
    29ce:	8d 83       	std	Y+5, r24	; 0x05
    29d0:	0f c0       	rjmp	.+30     	; 0x29f0 <LCD_I2C_send_Command+0x1be>
    29d2:	88 ec       	ldi	r24, 0xC8	; 200
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9c 83       	std	Y+4, r25	; 0x04
    29d8:	8b 83       	std	Y+3, r24	; 0x03
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	9c 81       	ldd	r25, Y+4	; 0x04
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <LCD_I2C_send_Command+0x1ac>
    29e2:	9c 83       	std	Y+4, r25	; 0x04
    29e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e6:	8d 81       	ldd	r24, Y+5	; 0x05
    29e8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	9e 83       	std	Y+6, r25	; 0x06
    29ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f0:	8d 81       	ldd	r24, Y+5	; 0x05
    29f2:	9e 81       	ldd	r25, Y+6	; 0x06
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	69 f7       	brne	.-38     	; 0x29d2 <LCD_I2C_send_Command+0x1a0>
    29f8:	14 c0       	rjmp	.+40     	; 0x2a22 <LCD_I2C_send_Command+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fa:	6f 81       	ldd	r22, Y+7	; 0x07
    29fc:	78 85       	ldd	r23, Y+8	; 0x08
    29fe:	89 85       	ldd	r24, Y+9	; 0x09
    2a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	9e 83       	std	Y+6, r25	; 0x06
    2a0c:	8d 83       	std	Y+5, r24	; 0x05
    2a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a10:	9e 81       	ldd	r25, Y+6	; 0x06
    2a12:	9a 83       	std	Y+2, r25	; 0x02
    2a14:	89 83       	std	Y+1, r24	; 0x01
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <LCD_I2C_send_Command+0x1e8>
    2a1e:	9a 83       	std	Y+2, r25	; 0x02
    2a20:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	I2C_send_data(Copy_com);
    2a22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a24:	0e 94 2e 0b 	call	0x165c	; 0x165c <I2C_send_data>
	I2C_stop();
    2a28:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <I2C_stop>

}
    2a2c:	6d 96       	adiw	r28, 0x1d	; 29
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <LCD_VidSendData>:
#include"DIO_Interface.h"
#include"LCD_interface.h"
#include "LCD_cofig.h"

void LCD_VidSendData(u8 Copy_u8Data)
{
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	6d 97       	sbiw	r28, 0x1d	; 29
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	de bf       	out	0x3e, r29	; 62
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	cd bf       	out	0x3d, r28	; 61
    2a52:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	60 e0       	ldi	r22, 0x00	; 0
    2a58:	41 e0       	ldi	r20, 0x01	; 1
    2a5a:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	61 e0       	ldi	r22, 0x01	; 1
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPin_Value>
	DIO_VidWriteOnPort(Data_Port,Copy_u8Data);
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2a6c:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	62 e0       	ldi	r22, 0x02	; 2
    2a74:	41 e0       	ldi	r20, 0x01	; 1
    2a76:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPin_Value>
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	a0 e2       	ldi	r26, 0x20	; 32
    2a80:	b1 e4       	ldi	r27, 0x41	; 65
    2a82:	89 8f       	std	Y+25, r24	; 0x19
    2a84:	9a 8f       	std	Y+26, r25	; 0x1a
    2a86:	ab 8f       	std	Y+27, r26	; 0x1b
    2a88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	4a ef       	ldi	r20, 0xFA	; 250
    2a98:	54 e4       	ldi	r21, 0x44	; 68
    2a9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	8d 8b       	std	Y+21, r24	; 0x15
    2aa4:	9e 8b       	std	Y+22, r25	; 0x16
    2aa6:	af 8b       	std	Y+23, r26	; 0x17
    2aa8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2aac:	7e 89       	ldd	r23, Y+22	; 0x16
    2aae:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5f e3       	ldi	r21, 0x3F	; 63
    2aba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2abe:	88 23       	and	r24, r24
    2ac0:	2c f4       	brge	.+10     	; 0x2acc <LCD_VidSendData+0x8e>
		__ticks = 1;
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	9c 8b       	std	Y+20, r25	; 0x14
    2ac8:	8b 8b       	std	Y+19, r24	; 0x13
    2aca:	3f c0       	rjmp	.+126    	; 0x2b4a <LCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    2acc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ace:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	3f ef       	ldi	r19, 0xFF	; 255
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	57 e4       	ldi	r21, 0x47	; 71
    2adc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	4c f5       	brge	.+82     	; 0x2b36 <LCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e2       	ldi	r20, 0x20	; 32
    2af2:	51 e4       	ldi	r21, 0x41	; 65
    2af4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9c 8b       	std	Y+20, r25	; 0x14
    2b0a:	8b 8b       	std	Y+19, r24	; 0x13
    2b0c:	0f c0       	rjmp	.+30     	; 0x2b2c <LCD_VidSendData+0xee>
    2b0e:	88 ec       	ldi	r24, 0xC8	; 200
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	9a 8b       	std	Y+18, r25	; 0x12
    2b14:	89 8b       	std	Y+17, r24	; 0x11
    2b16:	89 89       	ldd	r24, Y+17	; 0x11
    2b18:	9a 89       	ldd	r25, Y+18	; 0x12
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <LCD_VidSendData+0xdc>
    2b1e:	9a 8b       	std	Y+18, r25	; 0x12
    2b20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b22:	8b 89       	ldd	r24, Y+19	; 0x13
    2b24:	9c 89       	ldd	r25, Y+20	; 0x14
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	9c 8b       	std	Y+20, r25	; 0x14
    2b2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	69 f7       	brne	.-38     	; 0x2b0e <LCD_VidSendData+0xd0>
    2b34:	14 c0       	rjmp	.+40     	; 0x2b5e <LCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b36:	6d 89       	ldd	r22, Y+21	; 0x15
    2b38:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	9c 8b       	std	Y+20, r25	; 0x14
    2b48:	8b 8b       	std	Y+19, r24	; 0x13
    2b4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b4e:	98 8b       	std	Y+16, r25	; 0x10
    2b50:	8f 87       	std	Y+15, r24	; 0x0f
    2b52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b54:	98 89       	ldd	r25, Y+16	; 0x10
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <LCD_VidSendData+0x118>
    2b5a:	98 8b       	std	Y+16, r25	; 0x10
    2b5c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	62 e0       	ldi	r22, 0x02	; 2
    2b62:	40 e0       	ldi	r20, 0x00	; 0
    2b64:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPin_Value>
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	a0 e2       	ldi	r26, 0x20	; 32
    2b6e:	b1 e4       	ldi	r27, 0x41	; 65
    2b70:	8b 87       	std	Y+11, r24	; 0x0b
    2b72:	9c 87       	std	Y+12, r25	; 0x0c
    2b74:	ad 87       	std	Y+13, r26	; 0x0d
    2b76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4a ef       	ldi	r20, 0xFA	; 250
    2b86:	54 e4       	ldi	r21, 0x44	; 68
    2b88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	8f 83       	std	Y+7, r24	; 0x07
    2b92:	98 87       	std	Y+8, r25	; 0x08
    2b94:	a9 87       	std	Y+9, r26	; 0x09
    2b96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b98:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9a:	78 85       	ldd	r23, Y+8	; 0x08
    2b9c:	89 85       	ldd	r24, Y+9	; 0x09
    2b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e8       	ldi	r20, 0x80	; 128
    2ba6:	5f e3       	ldi	r21, 0x3F	; 63
    2ba8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bac:	88 23       	and	r24, r24
    2bae:	2c f4       	brge	.+10     	; 0x2bba <LCD_VidSendData+0x17c>
		__ticks = 1;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	9e 83       	std	Y+6, r25	; 0x06
    2bb6:	8d 83       	std	Y+5, r24	; 0x05
    2bb8:	3f c0       	rjmp	.+126    	; 0x2c38 <LCD_VidSendData+0x1fa>
	else if (__tmp > 65535)
    2bba:	6f 81       	ldd	r22, Y+7	; 0x07
    2bbc:	78 85       	ldd	r23, Y+8	; 0x08
    2bbe:	89 85       	ldd	r24, Y+9	; 0x09
    2bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	3f ef       	ldi	r19, 0xFF	; 255
    2bc6:	4f e7       	ldi	r20, 0x7F	; 127
    2bc8:	57 e4       	ldi	r21, 0x47	; 71
    2bca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bce:	18 16       	cp	r1, r24
    2bd0:	4c f5       	brge	.+82     	; 0x2c24 <LCD_VidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e2       	ldi	r20, 0x20	; 32
    2be0:	51 e4       	ldi	r21, 0x41	; 65
    2be2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	bc 01       	movw	r22, r24
    2bec:	cd 01       	movw	r24, r26
    2bee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05
    2bfa:	0f c0       	rjmp	.+30     	; 0x2c1a <LCD_VidSendData+0x1dc>
    2bfc:	88 ec       	ldi	r24, 0xC8	; 200
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	9c 83       	std	Y+4, r25	; 0x04
    2c02:	8b 83       	std	Y+3, r24	; 0x03
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	9c 81       	ldd	r25, Y+4	; 0x04
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <LCD_VidSendData+0x1ca>
    2c0c:	9c 83       	std	Y+4, r25	; 0x04
    2c0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	9e 81       	ldd	r25, Y+6	; 0x06
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	9e 83       	std	Y+6, r25	; 0x06
    2c18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	69 f7       	brne	.-38     	; 0x2bfc <LCD_VidSendData+0x1be>
    2c22:	14 c0       	rjmp	.+40     	; 0x2c4c <LCD_VidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c24:	6f 81       	ldd	r22, Y+7	; 0x07
    2c26:	78 85       	ldd	r23, Y+8	; 0x08
    2c28:	89 85       	ldd	r24, Y+9	; 0x09
    2c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	9e 83       	std	Y+6, r25	; 0x06
    2c36:	8d 83       	std	Y+5, r24	; 0x05
    2c38:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3c:	9a 83       	std	Y+2, r25	; 0x02
    2c3e:	89 83       	std	Y+1, r24	; 0x01
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	9a 81       	ldd	r25, Y+2	; 0x02
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <LCD_VidSendData+0x206>
    2c48:	9a 83       	std	Y+2, r25	; 0x02
    2c4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    2c4c:	6d 96       	adiw	r28, 0x1d	; 29
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	cf 91       	pop	r28
    2c5a:	df 91       	pop	r29
    2c5c:	08 95       	ret

00002c5e <LCD_VidSendCommand>:
void LCD_VidSendCommand(u8 Copy_u8Data)
{
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	6d 97       	sbiw	r28, 0x1d	; 29
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPin_Value(Control_Port,RS,0);   //rs=0   data
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	60 e0       	ldi	r22, 0x00	; 0
    2c78:	40 e0       	ldi	r20, 0x00	; 0
    2c7a:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	61 e0       	ldi	r22, 0x01	; 1
    2c82:	40 e0       	ldi	r20, 0x00	; 0
    2c84:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPin_Value>
	DIO_VidWriteOnPort(Data_Port,Copy_u8Data);
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2c8c:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	62 e0       	ldi	r22, 0x02	; 2
    2c94:	41 e0       	ldi	r20, 0x01	; 1
    2c96:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPin_Value>
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	a0 e2       	ldi	r26, 0x20	; 32
    2ca0:	b1 e4       	ldi	r27, 0x41	; 65
    2ca2:	89 8f       	std	Y+25, r24	; 0x19
    2ca4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ca6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ca8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2caa:	69 8d       	ldd	r22, Y+25	; 0x19
    2cac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	4a ef       	ldi	r20, 0xFA	; 250
    2cb8:	54 e4       	ldi	r21, 0x44	; 68
    2cba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	8d 8b       	std	Y+21, r24	; 0x15
    2cc4:	9e 8b       	std	Y+22, r25	; 0x16
    2cc6:	af 8b       	std	Y+23, r26	; 0x17
    2cc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cca:	6d 89       	ldd	r22, Y+21	; 0x15
    2ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cce:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e8       	ldi	r20, 0x80	; 128
    2cd8:	5f e3       	ldi	r21, 0x3F	; 63
    2cda:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cde:	88 23       	and	r24, r24
    2ce0:	2c f4       	brge	.+10     	; 0x2cec <LCD_VidSendCommand+0x8e>
		__ticks = 1;
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	9c 8b       	std	Y+20, r25	; 0x14
    2ce8:	8b 8b       	std	Y+19, r24	; 0x13
    2cea:	3f c0       	rjmp	.+126    	; 0x2d6a <LCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    2cec:	6d 89       	ldd	r22, Y+21	; 0x15
    2cee:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	3f ef       	ldi	r19, 0xFF	; 255
    2cf8:	4f e7       	ldi	r20, 0x7F	; 127
    2cfa:	57 e4       	ldi	r21, 0x47	; 71
    2cfc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d00:	18 16       	cp	r1, r24
    2d02:	4c f5       	brge	.+82     	; 0x2d56 <LCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d04:	69 8d       	ldd	r22, Y+25	; 0x19
    2d06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e2       	ldi	r20, 0x20	; 32
    2d12:	51 e4       	ldi	r21, 0x41	; 65
    2d14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	bc 01       	movw	r22, r24
    2d1e:	cd 01       	movw	r24, r26
    2d20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	9c 8b       	std	Y+20, r25	; 0x14
    2d2a:	8b 8b       	std	Y+19, r24	; 0x13
    2d2c:	0f c0       	rjmp	.+30     	; 0x2d4c <LCD_VidSendCommand+0xee>
    2d2e:	88 ec       	ldi	r24, 0xC8	; 200
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	9a 8b       	std	Y+18, r25	; 0x12
    2d34:	89 8b       	std	Y+17, r24	; 0x11
    2d36:	89 89       	ldd	r24, Y+17	; 0x11
    2d38:	9a 89       	ldd	r25, Y+18	; 0x12
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <LCD_VidSendCommand+0xdc>
    2d3e:	9a 8b       	std	Y+18, r25	; 0x12
    2d40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d42:	8b 89       	ldd	r24, Y+19	; 0x13
    2d44:	9c 89       	ldd	r25, Y+20	; 0x14
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	9c 8b       	std	Y+20, r25	; 0x14
    2d4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	69 f7       	brne	.-38     	; 0x2d2e <LCD_VidSendCommand+0xd0>
    2d54:	14 c0       	rjmp	.+40     	; 0x2d7e <LCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d56:	6d 89       	ldd	r22, Y+21	; 0x15
    2d58:	7e 89       	ldd	r23, Y+22	; 0x16
    2d5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	9c 8b       	std	Y+20, r25	; 0x14
    2d68:	8b 8b       	std	Y+19, r24	; 0x13
    2d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d6e:	98 8b       	std	Y+16, r25	; 0x10
    2d70:	8f 87       	std	Y+15, r24	; 0x0f
    2d72:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d74:	98 89       	ldd	r25, Y+16	; 0x10
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <LCD_VidSendCommand+0x118>
    2d7a:	98 8b       	std	Y+16, r25	; 0x10
    2d7c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	62 e0       	ldi	r22, 0x02	; 2
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPin_Value>
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	a0 e2       	ldi	r26, 0x20	; 32
    2d8e:	b1 e4       	ldi	r27, 0x41	; 65
    2d90:	8b 87       	std	Y+11, r24	; 0x0b
    2d92:	9c 87       	std	Y+12, r25	; 0x0c
    2d94:	ad 87       	std	Y+13, r26	; 0x0d
    2d96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	4a ef       	ldi	r20, 0xFA	; 250
    2da6:	54 e4       	ldi	r21, 0x44	; 68
    2da8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	8f 83       	std	Y+7, r24	; 0x07
    2db2:	98 87       	std	Y+8, r25	; 0x08
    2db4:	a9 87       	std	Y+9, r26	; 0x09
    2db6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2db8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dba:	78 85       	ldd	r23, Y+8	; 0x08
    2dbc:	89 85       	ldd	r24, Y+9	; 0x09
    2dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e8       	ldi	r20, 0x80	; 128
    2dc6:	5f e3       	ldi	r21, 0x3F	; 63
    2dc8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2dcc:	88 23       	and	r24, r24
    2dce:	2c f4       	brge	.+10     	; 0x2dda <LCD_VidSendCommand+0x17c>
		__ticks = 1;
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	9e 83       	std	Y+6, r25	; 0x06
    2dd6:	8d 83       	std	Y+5, r24	; 0x05
    2dd8:	3f c0       	rjmp	.+126    	; 0x2e58 <LCD_VidSendCommand+0x1fa>
	else if (__tmp > 65535)
    2dda:	6f 81       	ldd	r22, Y+7	; 0x07
    2ddc:	78 85       	ldd	r23, Y+8	; 0x08
    2dde:	89 85       	ldd	r24, Y+9	; 0x09
    2de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	3f ef       	ldi	r19, 0xFF	; 255
    2de6:	4f e7       	ldi	r20, 0x7F	; 127
    2de8:	57 e4       	ldi	r21, 0x47	; 71
    2dea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2dee:	18 16       	cp	r1, r24
    2df0:	4c f5       	brge	.+82     	; 0x2e44 <LCD_VidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e2       	ldi	r20, 0x20	; 32
    2e00:	51 e4       	ldi	r21, 0x41	; 65
    2e02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	bc 01       	movw	r22, r24
    2e0c:	cd 01       	movw	r24, r26
    2e0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
    2e1a:	0f c0       	rjmp	.+30     	; 0x2e3a <LCD_VidSendCommand+0x1dc>
    2e1c:	88 ec       	ldi	r24, 0xC8	; 200
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	9c 83       	std	Y+4, r25	; 0x04
    2e22:	8b 83       	std	Y+3, r24	; 0x03
    2e24:	8b 81       	ldd	r24, Y+3	; 0x03
    2e26:	9c 81       	ldd	r25, Y+4	; 0x04
    2e28:	01 97       	sbiw	r24, 0x01	; 1
    2e2a:	f1 f7       	brne	.-4      	; 0x2e28 <LCD_VidSendCommand+0x1ca>
    2e2c:	9c 83       	std	Y+4, r25	; 0x04
    2e2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e30:	8d 81       	ldd	r24, Y+5	; 0x05
    2e32:	9e 81       	ldd	r25, Y+6	; 0x06
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	9e 83       	std	Y+6, r25	; 0x06
    2e38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3e:	00 97       	sbiw	r24, 0x00	; 0
    2e40:	69 f7       	brne	.-38     	; 0x2e1c <LCD_VidSendCommand+0x1be>
    2e42:	14 c0       	rjmp	.+40     	; 0x2e6c <LCD_VidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e44:	6f 81       	ldd	r22, Y+7	; 0x07
    2e46:	78 85       	ldd	r23, Y+8	; 0x08
    2e48:	89 85       	ldd	r24, Y+9	; 0x09
    2e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	9e 83       	std	Y+6, r25	; 0x06
    2e56:	8d 83       	std	Y+5, r24	; 0x05
    2e58:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5c:	9a 83       	std	Y+2, r25	; 0x02
    2e5e:	89 83       	std	Y+1, r24	; 0x01
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	9a 81       	ldd	r25, Y+2	; 0x02
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	f1 f7       	brne	.-4      	; 0x2e64 <LCD_VidSendCommand+0x206>
    2e68:	9a 83       	std	Y+2, r25	; 0x02
    2e6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    2e6c:	6d 96       	adiw	r28, 0x1d	; 29
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	f8 94       	cli
    2e72:	de bf       	out	0x3e, r29	; 62
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	cd bf       	out	0x3d, r28	; 61
    2e78:	cf 91       	pop	r28
    2e7a:	df 91       	pop	r29
    2e7c:	08 95       	ret

00002e7e <LCD_VidInt>:
void LCD_VidInt(void)
{	
    2e7e:	df 93       	push	r29
    2e80:	cf 93       	push	r28
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
    2e86:	e8 97       	sbiw	r28, 0x38	; 56
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	de bf       	out	0x3e, r29	; 62
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPort_Direction(Data_Port,1);
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	61 e0       	ldi	r22, 0x01	; 1
    2e96:	0e 94 91 08 	call	0x1122	; 0x1122 <DIO_VidSetPort_Direction>
	DIO_VidSetPin_Direction(Control_Port,RS,1);
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	60 e0       	ldi	r22, 0x00	; 0
    2e9e:	41 e0       	ldi	r20, 0x01	; 1
    2ea0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPin_Direction>
	DIO_VidSetPin_Direction(Control_Port,RW,1);
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	61 e0       	ldi	r22, 0x01	; 1
    2ea8:	41 e0       	ldi	r20, 0x01	; 1
    2eaa:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPin_Direction>
	DIO_VidSetPin_Direction(Control_Port,E,1);
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	62 e0       	ldi	r22, 0x02	; 2
    2eb2:	41 e0       	ldi	r20, 0x01	; 1
    2eb4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPin_Direction>
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	a0 e2       	ldi	r26, 0x20	; 32
    2ebe:	b2 e4       	ldi	r27, 0x42	; 66
    2ec0:	8d ab       	std	Y+53, r24	; 0x35
    2ec2:	9e ab       	std	Y+54, r25	; 0x36
    2ec4:	af ab       	std	Y+55, r26	; 0x37
    2ec6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec8:	6d a9       	ldd	r22, Y+53	; 0x35
    2eca:	7e a9       	ldd	r23, Y+54	; 0x36
    2ecc:	8f a9       	ldd	r24, Y+55	; 0x37
    2ece:	98 ad       	ldd	r25, Y+56	; 0x38
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	4a ef       	ldi	r20, 0xFA	; 250
    2ed6:	54 e4       	ldi	r21, 0x44	; 68
    2ed8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	89 ab       	std	Y+49, r24	; 0x31
    2ee2:	9a ab       	std	Y+50, r25	; 0x32
    2ee4:	ab ab       	std	Y+51, r26	; 0x33
    2ee6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ee8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eea:	7a a9       	ldd	r23, Y+50	; 0x32
    2eec:	8b a9       	ldd	r24, Y+51	; 0x33
    2eee:	9c a9       	ldd	r25, Y+52	; 0x34
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e8       	ldi	r20, 0x80	; 128
    2ef6:	5f e3       	ldi	r21, 0x3F	; 63
    2ef8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2efc:	88 23       	and	r24, r24
    2efe:	2c f4       	brge	.+10     	; 0x2f0a <LCD_VidInt+0x8c>
		__ticks = 1;
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	98 ab       	std	Y+48, r25	; 0x30
    2f06:	8f a7       	std	Y+47, r24	; 0x2f
    2f08:	3f c0       	rjmp	.+126    	; 0x2f88 <LCD_VidInt+0x10a>
	else if (__tmp > 65535)
    2f0a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f0c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f0e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f10:	9c a9       	ldd	r25, Y+52	; 0x34
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	3f ef       	ldi	r19, 0xFF	; 255
    2f16:	4f e7       	ldi	r20, 0x7F	; 127
    2f18:	57 e4       	ldi	r21, 0x47	; 71
    2f1a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f1e:	18 16       	cp	r1, r24
    2f20:	4c f5       	brge	.+82     	; 0x2f74 <LCD_VidInt+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f22:	6d a9       	ldd	r22, Y+53	; 0x35
    2f24:	7e a9       	ldd	r23, Y+54	; 0x36
    2f26:	8f a9       	ldd	r24, Y+55	; 0x37
    2f28:	98 ad       	ldd	r25, Y+56	; 0x38
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	40 e2       	ldi	r20, 0x20	; 32
    2f30:	51 e4       	ldi	r21, 0x41	; 65
    2f32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	98 ab       	std	Y+48, r25	; 0x30
    2f48:	8f a7       	std	Y+47, r24	; 0x2f
    2f4a:	0f c0       	rjmp	.+30     	; 0x2f6a <LCD_VidInt+0xec>
    2f4c:	88 ec       	ldi	r24, 0xC8	; 200
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	9e a7       	std	Y+46, r25	; 0x2e
    2f52:	8d a7       	std	Y+45, r24	; 0x2d
    2f54:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f56:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	f1 f7       	brne	.-4      	; 0x2f58 <LCD_VidInt+0xda>
    2f5c:	9e a7       	std	Y+46, r25	; 0x2e
    2f5e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f60:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f62:	98 a9       	ldd	r25, Y+48	; 0x30
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	98 ab       	std	Y+48, r25	; 0x30
    2f68:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f6c:	98 a9       	ldd	r25, Y+48	; 0x30
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	69 f7       	brne	.-38     	; 0x2f4c <LCD_VidInt+0xce>
    2f72:	14 c0       	rjmp	.+40     	; 0x2f9c <LCD_VidInt+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f74:	69 a9       	ldd	r22, Y+49	; 0x31
    2f76:	7a a9       	ldd	r23, Y+50	; 0x32
    2f78:	8b a9       	ldd	r24, Y+51	; 0x33
    2f7a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	98 ab       	std	Y+48, r25	; 0x30
    2f86:	8f a7       	std	Y+47, r24	; 0x2f
    2f88:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f8a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f8c:	9c a7       	std	Y+44, r25	; 0x2c
    2f8e:	8b a7       	std	Y+43, r24	; 0x2b
    2f90:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f92:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	f1 f7       	brne	.-4      	; 0x2f94 <LCD_VidInt+0x116>
    2f98:	9c a7       	std	Y+44, r25	; 0x2c
    2f9a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(40);
	LCD_VidSendCommand(0b00111000);
    2f9c:	88 e3       	ldi	r24, 0x38	; 56
    2f9e:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <LCD_VidSendCommand>
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	a0 e8       	ldi	r26, 0x80	; 128
    2fa8:	bf e3       	ldi	r27, 0x3F	; 63
    2faa:	8f a3       	std	Y+39, r24	; 0x27
    2fac:	98 a7       	std	Y+40, r25	; 0x28
    2fae:	a9 a7       	std	Y+41, r26	; 0x29
    2fb0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb2:	6f a1       	ldd	r22, Y+39	; 0x27
    2fb4:	78 a5       	ldd	r23, Y+40	; 0x28
    2fb6:	89 a5       	ldd	r24, Y+41	; 0x29
    2fb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	4a ef       	ldi	r20, 0xFA	; 250
    2fc0:	54 e4       	ldi	r21, 0x44	; 68
    2fc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	8b a3       	std	Y+35, r24	; 0x23
    2fcc:	9c a3       	std	Y+36, r25	; 0x24
    2fce:	ad a3       	std	Y+37, r26	; 0x25
    2fd0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fd2:	6b a1       	ldd	r22, Y+35	; 0x23
    2fd4:	7c a1       	ldd	r23, Y+36	; 0x24
    2fd6:	8d a1       	ldd	r24, Y+37	; 0x25
    2fd8:	9e a1       	ldd	r25, Y+38	; 0x26
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e8       	ldi	r20, 0x80	; 128
    2fe0:	5f e3       	ldi	r21, 0x3F	; 63
    2fe2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fe6:	88 23       	and	r24, r24
    2fe8:	2c f4       	brge	.+10     	; 0x2ff4 <LCD_VidInt+0x176>
		__ticks = 1;
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	9a a3       	std	Y+34, r25	; 0x22
    2ff0:	89 a3       	std	Y+33, r24	; 0x21
    2ff2:	3f c0       	rjmp	.+126    	; 0x3072 <LCD_VidInt+0x1f4>
	else if (__tmp > 65535)
    2ff4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ff6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ff8:	8d a1       	ldd	r24, Y+37	; 0x25
    2ffa:	9e a1       	ldd	r25, Y+38	; 0x26
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	3f ef       	ldi	r19, 0xFF	; 255
    3000:	4f e7       	ldi	r20, 0x7F	; 127
    3002:	57 e4       	ldi	r21, 0x47	; 71
    3004:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3008:	18 16       	cp	r1, r24
    300a:	4c f5       	brge	.+82     	; 0x305e <LCD_VidInt+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    300c:	6f a1       	ldd	r22, Y+39	; 0x27
    300e:	78 a5       	ldd	r23, Y+40	; 0x28
    3010:	89 a5       	ldd	r24, Y+41	; 0x29
    3012:	9a a5       	ldd	r25, Y+42	; 0x2a
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e2       	ldi	r20, 0x20	; 32
    301a:	51 e4       	ldi	r21, 0x41	; 65
    301c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	bc 01       	movw	r22, r24
    3026:	cd 01       	movw	r24, r26
    3028:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	9a a3       	std	Y+34, r25	; 0x22
    3032:	89 a3       	std	Y+33, r24	; 0x21
    3034:	0f c0       	rjmp	.+30     	; 0x3054 <LCD_VidInt+0x1d6>
    3036:	88 ec       	ldi	r24, 0xC8	; 200
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	98 a3       	std	Y+32, r25	; 0x20
    303c:	8f 8f       	std	Y+31, r24	; 0x1f
    303e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3040:	98 a1       	ldd	r25, Y+32	; 0x20
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	f1 f7       	brne	.-4      	; 0x3042 <LCD_VidInt+0x1c4>
    3046:	98 a3       	std	Y+32, r25	; 0x20
    3048:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304a:	89 a1       	ldd	r24, Y+33	; 0x21
    304c:	9a a1       	ldd	r25, Y+34	; 0x22
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	9a a3       	std	Y+34, r25	; 0x22
    3052:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3054:	89 a1       	ldd	r24, Y+33	; 0x21
    3056:	9a a1       	ldd	r25, Y+34	; 0x22
    3058:	00 97       	sbiw	r24, 0x00	; 0
    305a:	69 f7       	brne	.-38     	; 0x3036 <LCD_VidInt+0x1b8>
    305c:	14 c0       	rjmp	.+40     	; 0x3086 <LCD_VidInt+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305e:	6b a1       	ldd	r22, Y+35	; 0x23
    3060:	7c a1       	ldd	r23, Y+36	; 0x24
    3062:	8d a1       	ldd	r24, Y+37	; 0x25
    3064:	9e a1       	ldd	r25, Y+38	; 0x26
    3066:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	9a a3       	std	Y+34, r25	; 0x22
    3070:	89 a3       	std	Y+33, r24	; 0x21
    3072:	89 a1       	ldd	r24, Y+33	; 0x21
    3074:	9a a1       	ldd	r25, Y+34	; 0x22
    3076:	9e 8f       	std	Y+30, r25	; 0x1e
    3078:	8d 8f       	std	Y+29, r24	; 0x1d
    307a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    307c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	f1 f7       	brne	.-4      	; 0x307e <LCD_VidInt+0x200>
    3082:	9e 8f       	std	Y+30, r25	; 0x1e
    3084:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
	LCD_VidSendCommand(0b00001100);
    3086:	8c e0       	ldi	r24, 0x0C	; 12
    3088:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <LCD_VidSendCommand>
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	a0 e8       	ldi	r26, 0x80	; 128
    3092:	bf e3       	ldi	r27, 0x3F	; 63
    3094:	89 8f       	std	Y+25, r24	; 0x19
    3096:	9a 8f       	std	Y+26, r25	; 0x1a
    3098:	ab 8f       	std	Y+27, r26	; 0x1b
    309a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309c:	69 8d       	ldd	r22, Y+25	; 0x19
    309e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	4a ef       	ldi	r20, 0xFA	; 250
    30aa:	54 e4       	ldi	r21, 0x44	; 68
    30ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	8d 8b       	std	Y+21, r24	; 0x15
    30b6:	9e 8b       	std	Y+22, r25	; 0x16
    30b8:	af 8b       	std	Y+23, r26	; 0x17
    30ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30bc:	6d 89       	ldd	r22, Y+21	; 0x15
    30be:	7e 89       	ldd	r23, Y+22	; 0x16
    30c0:	8f 89       	ldd	r24, Y+23	; 0x17
    30c2:	98 8d       	ldd	r25, Y+24	; 0x18
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	40 e8       	ldi	r20, 0x80	; 128
    30ca:	5f e3       	ldi	r21, 0x3F	; 63
    30cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    30d0:	88 23       	and	r24, r24
    30d2:	2c f4       	brge	.+10     	; 0x30de <LCD_VidInt+0x260>
		__ticks = 1;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	9c 8b       	std	Y+20, r25	; 0x14
    30da:	8b 8b       	std	Y+19, r24	; 0x13
    30dc:	3f c0       	rjmp	.+126    	; 0x315c <LCD_VidInt+0x2de>
	else if (__tmp > 65535)
    30de:	6d 89       	ldd	r22, Y+21	; 0x15
    30e0:	7e 89       	ldd	r23, Y+22	; 0x16
    30e2:	8f 89       	ldd	r24, Y+23	; 0x17
    30e4:	98 8d       	ldd	r25, Y+24	; 0x18
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	3f ef       	ldi	r19, 0xFF	; 255
    30ea:	4f e7       	ldi	r20, 0x7F	; 127
    30ec:	57 e4       	ldi	r21, 0x47	; 71
    30ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    30f2:	18 16       	cp	r1, r24
    30f4:	4c f5       	brge	.+82     	; 0x3148 <LCD_VidInt+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f6:	69 8d       	ldd	r22, Y+25	; 0x19
    30f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	40 e2       	ldi	r20, 0x20	; 32
    3104:	51 e4       	ldi	r21, 0x41	; 65
    3106:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	bc 01       	movw	r22, r24
    3110:	cd 01       	movw	r24, r26
    3112:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	9c 8b       	std	Y+20, r25	; 0x14
    311c:	8b 8b       	std	Y+19, r24	; 0x13
    311e:	0f c0       	rjmp	.+30     	; 0x313e <LCD_VidInt+0x2c0>
    3120:	88 ec       	ldi	r24, 0xC8	; 200
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	9a 8b       	std	Y+18, r25	; 0x12
    3126:	89 8b       	std	Y+17, r24	; 0x11
    3128:	89 89       	ldd	r24, Y+17	; 0x11
    312a:	9a 89       	ldd	r25, Y+18	; 0x12
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	f1 f7       	brne	.-4      	; 0x312c <LCD_VidInt+0x2ae>
    3130:	9a 8b       	std	Y+18, r25	; 0x12
    3132:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3134:	8b 89       	ldd	r24, Y+19	; 0x13
    3136:	9c 89       	ldd	r25, Y+20	; 0x14
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	9c 8b       	std	Y+20, r25	; 0x14
    313c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313e:	8b 89       	ldd	r24, Y+19	; 0x13
    3140:	9c 89       	ldd	r25, Y+20	; 0x14
    3142:	00 97       	sbiw	r24, 0x00	; 0
    3144:	69 f7       	brne	.-38     	; 0x3120 <LCD_VidInt+0x2a2>
    3146:	14 c0       	rjmp	.+40     	; 0x3170 <LCD_VidInt+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3148:	6d 89       	ldd	r22, Y+21	; 0x15
    314a:	7e 89       	ldd	r23, Y+22	; 0x16
    314c:	8f 89       	ldd	r24, Y+23	; 0x17
    314e:	98 8d       	ldd	r25, Y+24	; 0x18
    3150:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	9c 8b       	std	Y+20, r25	; 0x14
    315a:	8b 8b       	std	Y+19, r24	; 0x13
    315c:	8b 89       	ldd	r24, Y+19	; 0x13
    315e:	9c 89       	ldd	r25, Y+20	; 0x14
    3160:	98 8b       	std	Y+16, r25	; 0x10
    3162:	8f 87       	std	Y+15, r24	; 0x0f
    3164:	8f 85       	ldd	r24, Y+15	; 0x0f
    3166:	98 89       	ldd	r25, Y+16	; 0x10
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	f1 f7       	brne	.-4      	; 0x3168 <LCD_VidInt+0x2ea>
    316c:	98 8b       	std	Y+16, r25	; 0x10
    316e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
	LCD_VidSendCommand(0b00000001);
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <LCD_VidSendCommand>
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	a0 e8       	ldi	r26, 0x80	; 128
    317c:	bf e3       	ldi	r27, 0x3F	; 63
    317e:	8b 87       	std	Y+11, r24	; 0x0b
    3180:	9c 87       	std	Y+12, r25	; 0x0c
    3182:	ad 87       	std	Y+13, r26	; 0x0d
    3184:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3186:	6b 85       	ldd	r22, Y+11	; 0x0b
    3188:	7c 85       	ldd	r23, Y+12	; 0x0c
    318a:	8d 85       	ldd	r24, Y+13	; 0x0d
    318c:	9e 85       	ldd	r25, Y+14	; 0x0e
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	4a ef       	ldi	r20, 0xFA	; 250
    3194:	54 e4       	ldi	r21, 0x44	; 68
    3196:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	8f 83       	std	Y+7, r24	; 0x07
    31a0:	98 87       	std	Y+8, r25	; 0x08
    31a2:	a9 87       	std	Y+9, r26	; 0x09
    31a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31a6:	6f 81       	ldd	r22, Y+7	; 0x07
    31a8:	78 85       	ldd	r23, Y+8	; 0x08
    31aa:	89 85       	ldd	r24, Y+9	; 0x09
    31ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	40 e8       	ldi	r20, 0x80	; 128
    31b4:	5f e3       	ldi	r21, 0x3F	; 63
    31b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    31ba:	88 23       	and	r24, r24
    31bc:	2c f4       	brge	.+10     	; 0x31c8 <LCD_VidInt+0x34a>
		__ticks = 1;
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	9e 83       	std	Y+6, r25	; 0x06
    31c4:	8d 83       	std	Y+5, r24	; 0x05
    31c6:	3f c0       	rjmp	.+126    	; 0x3246 <LCD_VidInt+0x3c8>
	else if (__tmp > 65535)
    31c8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ca:	78 85       	ldd	r23, Y+8	; 0x08
    31cc:	89 85       	ldd	r24, Y+9	; 0x09
    31ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	3f ef       	ldi	r19, 0xFF	; 255
    31d4:	4f e7       	ldi	r20, 0x7F	; 127
    31d6:	57 e4       	ldi	r21, 0x47	; 71
    31d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    31dc:	18 16       	cp	r1, r24
    31de:	4c f5       	brge	.+82     	; 0x3232 <LCD_VidInt+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 e2       	ldi	r20, 0x20	; 32
    31ee:	51 e4       	ldi	r21, 0x41	; 65
    31f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	bc 01       	movw	r22, r24
    31fa:	cd 01       	movw	r24, r26
    31fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	9e 83       	std	Y+6, r25	; 0x06
    3206:	8d 83       	std	Y+5, r24	; 0x05
    3208:	0f c0       	rjmp	.+30     	; 0x3228 <LCD_VidInt+0x3aa>
    320a:	88 ec       	ldi	r24, 0xC8	; 200
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	9c 83       	std	Y+4, r25	; 0x04
    3210:	8b 83       	std	Y+3, r24	; 0x03
    3212:	8b 81       	ldd	r24, Y+3	; 0x03
    3214:	9c 81       	ldd	r25, Y+4	; 0x04
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <LCD_VidInt+0x398>
    321a:	9c 83       	std	Y+4, r25	; 0x04
    321c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321e:	8d 81       	ldd	r24, Y+5	; 0x05
    3220:	9e 81       	ldd	r25, Y+6	; 0x06
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	9e 83       	std	Y+6, r25	; 0x06
    3226:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3228:	8d 81       	ldd	r24, Y+5	; 0x05
    322a:	9e 81       	ldd	r25, Y+6	; 0x06
    322c:	00 97       	sbiw	r24, 0x00	; 0
    322e:	69 f7       	brne	.-38     	; 0x320a <LCD_VidInt+0x38c>
    3230:	14 c0       	rjmp	.+40     	; 0x325a <LCD_VidInt+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3232:	6f 81       	ldd	r22, Y+7	; 0x07
    3234:	78 85       	ldd	r23, Y+8	; 0x08
    3236:	89 85       	ldd	r24, Y+9	; 0x09
    3238:	9a 85       	ldd	r25, Y+10	; 0x0a
    323a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	9e 83       	std	Y+6, r25	; 0x06
    3244:	8d 83       	std	Y+5, r24	; 0x05
    3246:	8d 81       	ldd	r24, Y+5	; 0x05
    3248:	9e 81       	ldd	r25, Y+6	; 0x06
    324a:	9a 83       	std	Y+2, r25	; 0x02
    324c:	89 83       	std	Y+1, r24	; 0x01
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	9a 81       	ldd	r25, Y+2	; 0x02
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	f1 f7       	brne	.-4      	; 0x3252 <LCD_VidInt+0x3d4>
    3256:	9a 83       	std	Y+2, r25	; 0x02
    3258:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

}
    325a:	e8 96       	adiw	r28, 0x38	; 56
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	de bf       	out	0x3e, r29	; 62
    3262:	0f be       	out	0x3f, r0	; 63
    3264:	cd bf       	out	0x3d, r28	; 61
    3266:	cf 91       	pop	r28
    3268:	df 91       	pop	r29
    326a:	08 95       	ret

0000326c <LCD_VidSendStr>:
void LCD_VidSendStr(u8* Copy_u8string)
{
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	6e 97       	sbiw	r28, 0x1e	; 30
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	f8 94       	cli
    327a:	de bf       	out	0x3e, r29	; 62
    327c:	0f be       	out	0x3f, r0	; 63
    327e:	cd bf       	out	0x3d, r28	; 61
    3280:	9e 8f       	std	Y+30, r25	; 0x1e
    3282:	8d 8f       	std	Y+29, r24	; 0x1d
	

	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	60 e0       	ldi	r22, 0x00	; 0
    3288:	41 e0       	ldi	r20, 0x01	; 1
    328a:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	61 e0       	ldi	r22, 0x01	; 1
    3292:	40 e0       	ldi	r20, 0x00	; 0
    3294:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPin_Value>
    3298:	fa c0       	rjmp	.+500    	; 0x348e <LCD_VidSendStr+0x222>
	while(*Copy_u8string!='\0')
	{

	DIO_VidWriteOnPort(Data_Port,*Copy_u8string);
    329a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    329c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    329e:	90 81       	ld	r25, Z
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	69 2f       	mov	r22, r25
    32a4:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	62 e0       	ldi	r22, 0x02	; 2
    32ac:	41 e0       	ldi	r20, 0x01	; 1
    32ae:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPin_Value>
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	a0 e2       	ldi	r26, 0x20	; 32
    32b8:	b1 e4       	ldi	r27, 0x41	; 65
    32ba:	89 8f       	std	Y+25, r24	; 0x19
    32bc:	9a 8f       	std	Y+26, r25	; 0x1a
    32be:	ab 8f       	std	Y+27, r26	; 0x1b
    32c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c2:	69 8d       	ldd	r22, Y+25	; 0x19
    32c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	4a ef       	ldi	r20, 0xFA	; 250
    32d0:	54 e4       	ldi	r21, 0x44	; 68
    32d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	8d 8b       	std	Y+21, r24	; 0x15
    32dc:	9e 8b       	std	Y+22, r25	; 0x16
    32de:	af 8b       	std	Y+23, r26	; 0x17
    32e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32e2:	6d 89       	ldd	r22, Y+21	; 0x15
    32e4:	7e 89       	ldd	r23, Y+22	; 0x16
    32e6:	8f 89       	ldd	r24, Y+23	; 0x17
    32e8:	98 8d       	ldd	r25, Y+24	; 0x18
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	40 e8       	ldi	r20, 0x80	; 128
    32f0:	5f e3       	ldi	r21, 0x3F	; 63
    32f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    32f6:	88 23       	and	r24, r24
    32f8:	2c f4       	brge	.+10     	; 0x3304 <LCD_VidSendStr+0x98>
		__ticks = 1;
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	9c 8b       	std	Y+20, r25	; 0x14
    3300:	8b 8b       	std	Y+19, r24	; 0x13
    3302:	3f c0       	rjmp	.+126    	; 0x3382 <LCD_VidSendStr+0x116>
	else if (__tmp > 65535)
    3304:	6d 89       	ldd	r22, Y+21	; 0x15
    3306:	7e 89       	ldd	r23, Y+22	; 0x16
    3308:	8f 89       	ldd	r24, Y+23	; 0x17
    330a:	98 8d       	ldd	r25, Y+24	; 0x18
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	3f ef       	ldi	r19, 0xFF	; 255
    3310:	4f e7       	ldi	r20, 0x7F	; 127
    3312:	57 e4       	ldi	r21, 0x47	; 71
    3314:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3318:	18 16       	cp	r1, r24
    331a:	4c f5       	brge	.+82     	; 0x336e <LCD_VidSendStr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331c:	69 8d       	ldd	r22, Y+25	; 0x19
    331e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3320:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3322:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e2       	ldi	r20, 0x20	; 32
    332a:	51 e4       	ldi	r21, 0x41	; 65
    332c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3330:	dc 01       	movw	r26, r24
    3332:	cb 01       	movw	r24, r22
    3334:	bc 01       	movw	r22, r24
    3336:	cd 01       	movw	r24, r26
    3338:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	9c 8b       	std	Y+20, r25	; 0x14
    3342:	8b 8b       	std	Y+19, r24	; 0x13
    3344:	0f c0       	rjmp	.+30     	; 0x3364 <LCD_VidSendStr+0xf8>
    3346:	88 ec       	ldi	r24, 0xC8	; 200
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	9a 8b       	std	Y+18, r25	; 0x12
    334c:	89 8b       	std	Y+17, r24	; 0x11
    334e:	89 89       	ldd	r24, Y+17	; 0x11
    3350:	9a 89       	ldd	r25, Y+18	; 0x12
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	f1 f7       	brne	.-4      	; 0x3352 <LCD_VidSendStr+0xe6>
    3356:	9a 8b       	std	Y+18, r25	; 0x12
    3358:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335a:	8b 89       	ldd	r24, Y+19	; 0x13
    335c:	9c 89       	ldd	r25, Y+20	; 0x14
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	9c 8b       	std	Y+20, r25	; 0x14
    3362:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3364:	8b 89       	ldd	r24, Y+19	; 0x13
    3366:	9c 89       	ldd	r25, Y+20	; 0x14
    3368:	00 97       	sbiw	r24, 0x00	; 0
    336a:	69 f7       	brne	.-38     	; 0x3346 <LCD_VidSendStr+0xda>
    336c:	14 c0       	rjmp	.+40     	; 0x3396 <LCD_VidSendStr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    336e:	6d 89       	ldd	r22, Y+21	; 0x15
    3370:	7e 89       	ldd	r23, Y+22	; 0x16
    3372:	8f 89       	ldd	r24, Y+23	; 0x17
    3374:	98 8d       	ldd	r25, Y+24	; 0x18
    3376:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	9c 8b       	std	Y+20, r25	; 0x14
    3380:	8b 8b       	std	Y+19, r24	; 0x13
    3382:	8b 89       	ldd	r24, Y+19	; 0x13
    3384:	9c 89       	ldd	r25, Y+20	; 0x14
    3386:	98 8b       	std	Y+16, r25	; 0x10
    3388:	8f 87       	std	Y+15, r24	; 0x0f
    338a:	8f 85       	ldd	r24, Y+15	; 0x0f
    338c:	98 89       	ldd	r25, Y+16	; 0x10
    338e:	01 97       	sbiw	r24, 0x01	; 1
    3390:	f1 f7       	brne	.-4      	; 0x338e <LCD_VidSendStr+0x122>
    3392:	98 8b       	std	Y+16, r25	; 0x10
    3394:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	62 e0       	ldi	r22, 0x02	; 2
    339a:	40 e0       	ldi	r20, 0x00	; 0
    339c:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_VidSetPin_Value>
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	a0 e2       	ldi	r26, 0x20	; 32
    33a6:	b1 e4       	ldi	r27, 0x41	; 65
    33a8:	8b 87       	std	Y+11, r24	; 0x0b
    33aa:	9c 87       	std	Y+12, r25	; 0x0c
    33ac:	ad 87       	std	Y+13, r26	; 0x0d
    33ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	4a ef       	ldi	r20, 0xFA	; 250
    33be:	54 e4       	ldi	r21, 0x44	; 68
    33c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	8f 83       	std	Y+7, r24	; 0x07
    33ca:	98 87       	std	Y+8, r25	; 0x08
    33cc:	a9 87       	std	Y+9, r26	; 0x09
    33ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d0:	6f 81       	ldd	r22, Y+7	; 0x07
    33d2:	78 85       	ldd	r23, Y+8	; 0x08
    33d4:	89 85       	ldd	r24, Y+9	; 0x09
    33d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	40 e8       	ldi	r20, 0x80	; 128
    33de:	5f e3       	ldi	r21, 0x3F	; 63
    33e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    33e4:	88 23       	and	r24, r24
    33e6:	2c f4       	brge	.+10     	; 0x33f2 <LCD_VidSendStr+0x186>
		__ticks = 1;
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	9e 83       	std	Y+6, r25	; 0x06
    33ee:	8d 83       	std	Y+5, r24	; 0x05
    33f0:	3f c0       	rjmp	.+126    	; 0x3470 <LCD_VidSendStr+0x204>
	else if (__tmp > 65535)
    33f2:	6f 81       	ldd	r22, Y+7	; 0x07
    33f4:	78 85       	ldd	r23, Y+8	; 0x08
    33f6:	89 85       	ldd	r24, Y+9	; 0x09
    33f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	3f ef       	ldi	r19, 0xFF	; 255
    33fe:	4f e7       	ldi	r20, 0x7F	; 127
    3400:	57 e4       	ldi	r21, 0x47	; 71
    3402:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3406:	18 16       	cp	r1, r24
    3408:	4c f5       	brge	.+82     	; 0x345c <LCD_VidSendStr+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340a:	6b 85       	ldd	r22, Y+11	; 0x0b
    340c:	7c 85       	ldd	r23, Y+12	; 0x0c
    340e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3410:	9e 85       	ldd	r25, Y+14	; 0x0e
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	40 e2       	ldi	r20, 0x20	; 32
    3418:	51 e4       	ldi	r21, 0x41	; 65
    341a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	bc 01       	movw	r22, r24
    3424:	cd 01       	movw	r24, r26
    3426:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	9e 83       	std	Y+6, r25	; 0x06
    3430:	8d 83       	std	Y+5, r24	; 0x05
    3432:	0f c0       	rjmp	.+30     	; 0x3452 <LCD_VidSendStr+0x1e6>
    3434:	88 ec       	ldi	r24, 0xC8	; 200
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	9c 83       	std	Y+4, r25	; 0x04
    343a:	8b 83       	std	Y+3, r24	; 0x03
    343c:	8b 81       	ldd	r24, Y+3	; 0x03
    343e:	9c 81       	ldd	r25, Y+4	; 0x04
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	f1 f7       	brne	.-4      	; 0x3440 <LCD_VidSendStr+0x1d4>
    3444:	9c 83       	std	Y+4, r25	; 0x04
    3446:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3448:	8d 81       	ldd	r24, Y+5	; 0x05
    344a:	9e 81       	ldd	r25, Y+6	; 0x06
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	9e 83       	std	Y+6, r25	; 0x06
    3450:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3452:	8d 81       	ldd	r24, Y+5	; 0x05
    3454:	9e 81       	ldd	r25, Y+6	; 0x06
    3456:	00 97       	sbiw	r24, 0x00	; 0
    3458:	69 f7       	brne	.-38     	; 0x3434 <LCD_VidSendStr+0x1c8>
    345a:	14 c0       	rjmp	.+40     	; 0x3484 <LCD_VidSendStr+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345c:	6f 81       	ldd	r22, Y+7	; 0x07
    345e:	78 85       	ldd	r23, Y+8	; 0x08
    3460:	89 85       	ldd	r24, Y+9	; 0x09
    3462:	9a 85       	ldd	r25, Y+10	; 0x0a
    3464:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	9e 83       	std	Y+6, r25	; 0x06
    346e:	8d 83       	std	Y+5, r24	; 0x05
    3470:	8d 81       	ldd	r24, Y+5	; 0x05
    3472:	9e 81       	ldd	r25, Y+6	; 0x06
    3474:	9a 83       	std	Y+2, r25	; 0x02
    3476:	89 83       	std	Y+1, r24	; 0x01
    3478:	89 81       	ldd	r24, Y+1	; 0x01
    347a:	9a 81       	ldd	r25, Y+2	; 0x02
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	f1 f7       	brne	.-4      	; 0x347c <LCD_VidSendStr+0x210>
    3480:	9a 83       	std	Y+2, r25	; 0x02
    3482:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	Copy_u8string++;
    3484:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3486:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3488:	01 96       	adiw	r24, 0x01	; 1
    348a:	9e 8f       	std	Y+30, r25	; 0x1e
    348c:	8d 8f       	std	Y+29, r24	; 0x1d
{
	

	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
	while(*Copy_u8string!='\0')
    348e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3490:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3492:	80 81       	ld	r24, Z
    3494:	88 23       	and	r24, r24
    3496:	09 f0       	breq	.+2      	; 0x349a <LCD_VidSendStr+0x22e>
    3498:	00 cf       	rjmp	.-512    	; 0x329a <LCD_VidSendStr+0x2e>
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
	_delay_ms(10);
	Copy_u8string++;
	}
}
    349a:	6e 96       	adiw	r28, 0x1e	; 30
    349c:	0f b6       	in	r0, 0x3f	; 63
    349e:	f8 94       	cli
    34a0:	de bf       	out	0x3e, r29	; 62
    34a2:	0f be       	out	0x3f, r0	; 63
    34a4:	cd bf       	out	0x3d, r28	; 61
    34a6:	cf 91       	pop	r28
    34a8:	df 91       	pop	r29
    34aa:	08 95       	ret

000034ac <LCD_VidSendNum>:
void LCD_VidSendNum(u16 Copy_u16Num)
{	u16 rev=0;
    34ac:	df 93       	push	r29
    34ae:	cf 93       	push	r28
    34b0:	00 d0       	rcall	.+0      	; 0x34b2 <LCD_VidSendNum+0x6>
    34b2:	00 d0       	rcall	.+0      	; 0x34b4 <LCD_VidSendNum+0x8>
    34b4:	00 d0       	rcall	.+0      	; 0x34b6 <LCD_VidSendNum+0xa>
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	9e 83       	std	Y+6, r25	; 0x06
    34bc:	8d 83       	std	Y+5, r24	; 0x05
    34be:	1c 82       	std	Y+4, r1	; 0x04
    34c0:	1b 82       	std	Y+3, r1	; 0x03
	u8 zeros=0;
    34c2:	1a 82       	std	Y+2, r1	; 0x02
	if (Copy_u16Num!=0)
    34c4:	8d 81       	ldd	r24, Y+5	; 0x05
    34c6:	9e 81       	ldd	r25, Y+6	; 0x06
    34c8:	00 97       	sbiw	r24, 0x00	; 0
    34ca:	09 f4       	brne	.+2      	; 0x34ce <LCD_VidSendNum+0x22>
    34cc:	53 c0       	rjmp	.+166    	; 0x3574 <LCD_VidSendNum+0xc8>
    34ce:	25 c0       	rjmp	.+74     	; 0x351a <LCD_VidSendNum+0x6e>
	{
	while(Copy_u16Num>0)
		{
		 rev=(rev*10)+(Copy_u16Num % 10);
    34d0:	8b 81       	ldd	r24, Y+3	; 0x03
    34d2:	9c 81       	ldd	r25, Y+4	; 0x04
    34d4:	9c 01       	movw	r18, r24
    34d6:	22 0f       	add	r18, r18
    34d8:	33 1f       	adc	r19, r19
    34da:	c9 01       	movw	r24, r18
    34dc:	88 0f       	add	r24, r24
    34de:	99 1f       	adc	r25, r25
    34e0:	88 0f       	add	r24, r24
    34e2:	99 1f       	adc	r25, r25
    34e4:	f9 01       	movw	r30, r18
    34e6:	e8 0f       	add	r30, r24
    34e8:	f9 1f       	adc	r31, r25
    34ea:	8d 81       	ldd	r24, Y+5	; 0x05
    34ec:	9e 81       	ldd	r25, Y+6	; 0x06
    34ee:	2a e0       	ldi	r18, 0x0A	; 10
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	b9 01       	movw	r22, r18
    34f4:	0e 94 45 1b 	call	0x368a	; 0x368a <__udivmodhi4>
    34f8:	8e 0f       	add	r24, r30
    34fa:	9f 1f       	adc	r25, r31
    34fc:	9c 83       	std	Y+4, r25	; 0x04
    34fe:	8b 83       	std	Y+3, r24	; 0x03
		Copy_u16Num/=10;
    3500:	8d 81       	ldd	r24, Y+5	; 0x05
    3502:	9e 81       	ldd	r25, Y+6	; 0x06
    3504:	2a e0       	ldi	r18, 0x0A	; 10
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	b9 01       	movw	r22, r18
    350a:	0e 94 45 1b 	call	0x368a	; 0x368a <__udivmodhi4>
    350e:	cb 01       	movw	r24, r22
    3510:	9e 83       	std	Y+6, r25	; 0x06
    3512:	8d 83       	std	Y+5, r24	; 0x05
		zeros++;
    3514:	8a 81       	ldd	r24, Y+2	; 0x02
    3516:	8f 5f       	subi	r24, 0xFF	; 255
    3518:	8a 83       	std	Y+2, r24	; 0x02
void LCD_VidSendNum(u16 Copy_u16Num)
{	u16 rev=0;
	u8 zeros=0;
	if (Copy_u16Num!=0)
	{
	while(Copy_u16Num>0)
    351a:	8d 81       	ldd	r24, Y+5	; 0x05
    351c:	9e 81       	ldd	r25, Y+6	; 0x06
    351e:	00 97       	sbiw	r24, 0x00	; 0
    3520:	b9 f6       	brne	.-82     	; 0x34d0 <LCD_VidSendNum+0x24>
    3522:	19 c0       	rjmp	.+50     	; 0x3556 <LCD_VidSendNum+0xaa>
		Copy_u16Num/=10;
		zeros++;
		};
	while(rev!=0)
	{
	u8 rem=rev%10;
    3524:	8b 81       	ldd	r24, Y+3	; 0x03
    3526:	9c 81       	ldd	r25, Y+4	; 0x04
    3528:	2a e0       	ldi	r18, 0x0A	; 10
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	b9 01       	movw	r22, r18
    352e:	0e 94 45 1b 	call	0x368a	; 0x368a <__udivmodhi4>
    3532:	89 83       	std	Y+1, r24	; 0x01
	rev/=10;
    3534:	8b 81       	ldd	r24, Y+3	; 0x03
    3536:	9c 81       	ldd	r25, Y+4	; 0x04
    3538:	2a e0       	ldi	r18, 0x0A	; 10
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	b9 01       	movw	r22, r18
    353e:	0e 94 45 1b 	call	0x368a	; 0x368a <__udivmodhi4>
    3542:	cb 01       	movw	r24, r22
    3544:	9c 83       	std	Y+4, r25	; 0x04
    3546:	8b 83       	std	Y+3, r24	; 0x03
	LCD_VidSendData((48+rem));//+48 to have aski code
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	80 5d       	subi	r24, 0xD0	; 208
    354c:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_VidSendData>
	zeros--;
    3550:	8a 81       	ldd	r24, Y+2	; 0x02
    3552:	81 50       	subi	r24, 0x01	; 1
    3554:	8a 83       	std	Y+2, r24	; 0x02
		{
		 rev=(rev*10)+(Copy_u16Num % 10);
		Copy_u16Num/=10;
		zeros++;
		};
	while(rev!=0)
    3556:	8b 81       	ldd	r24, Y+3	; 0x03
    3558:	9c 81       	ldd	r25, Y+4	; 0x04
    355a:	00 97       	sbiw	r24, 0x00	; 0
    355c:	19 f7       	brne	.-58     	; 0x3524 <LCD_VidSendNum+0x78>
    355e:	06 c0       	rjmp	.+12     	; 0x356c <LCD_VidSendNum+0xc0>
	LCD_VidSendData((48+rem));//+48 to have aski code
	zeros--;
	}
	while(zeros>0)
	{
	LCD_VidSendData((48+0));
    3560:	80 e3       	ldi	r24, 0x30	; 48
    3562:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_VidSendData>
	zeros--;
    3566:	8a 81       	ldd	r24, Y+2	; 0x02
    3568:	81 50       	subi	r24, 0x01	; 1
    356a:	8a 83       	std	Y+2, r24	; 0x02
	u8 rem=rev%10;
	rev/=10;
	LCD_VidSendData((48+rem));//+48 to have aski code
	zeros--;
	}
	while(zeros>0)
    356c:	8a 81       	ldd	r24, Y+2	; 0x02
    356e:	88 23       	and	r24, r24
    3570:	b9 f7       	brne	.-18     	; 0x3560 <LCD_VidSendNum+0xb4>
    3572:	03 c0       	rjmp	.+6      	; 0x357a <LCD_VidSendNum+0xce>
	}
	}
	else
	{

		LCD_VidSendData((48+0));
    3574:	80 e3       	ldi	r24, 0x30	; 48
    3576:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_VidSendData>
	}
}
    357a:	26 96       	adiw	r28, 0x06	; 6
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	f8 94       	cli
    3580:	de bf       	out	0x3e, r29	; 62
    3582:	0f be       	out	0x3f, r0	; 63
    3584:	cd bf       	out	0x3d, r28	; 61
    3586:	cf 91       	pop	r28
    3588:	df 91       	pop	r29
    358a:	08 95       	ret

0000358c <LCD_VidShiftDispaly>:

void LCD_VidShiftDispaly(u8 Copy_u8Line,u8 Copy_u8Column)
{u8 shift=0,offset=0;
    358c:	df 93       	push	r29
    358e:	cf 93       	push	r28
    3590:	00 d0       	rcall	.+0      	; 0x3592 <LCD_VidShiftDispaly+0x6>
    3592:	00 d0       	rcall	.+0      	; 0x3594 <LCD_VidShiftDispaly+0x8>
    3594:	00 d0       	rcall	.+0      	; 0x3596 <LCD_VidShiftDispaly+0xa>
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
    359a:	8b 83       	std	Y+3, r24	; 0x03
    359c:	6c 83       	std	Y+4, r22	; 0x04
    359e:	1a 82       	std	Y+2, r1	; 0x02
    35a0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Line)
    35a2:	8b 81       	ldd	r24, Y+3	; 0x03
    35a4:	28 2f       	mov	r18, r24
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	3e 83       	std	Y+6, r19	; 0x06
    35aa:	2d 83       	std	Y+5, r18	; 0x05
    35ac:	8d 81       	ldd	r24, Y+5	; 0x05
    35ae:	9e 81       	ldd	r25, Y+6	; 0x06
    35b0:	81 30       	cpi	r24, 0x01	; 1
    35b2:	91 05       	cpc	r25, r1
    35b4:	31 f0       	breq	.+12     	; 0x35c2 <LCD_VidShiftDispaly+0x36>
    35b6:	2d 81       	ldd	r18, Y+5	; 0x05
    35b8:	3e 81       	ldd	r19, Y+6	; 0x06
    35ba:	22 30       	cpi	r18, 0x02	; 2
    35bc:	31 05       	cpc	r19, r1
    35be:	21 f0       	breq	.+8      	; 0x35c8 <LCD_VidShiftDispaly+0x3c>
    35c0:	05 c0       	rjmp	.+10     	; 0x35cc <LCD_VidShiftDispaly+0x40>
	{case 1:
		offset=128;
    35c2:	80 e8       	ldi	r24, 0x80	; 128
    35c4:	89 83       	std	Y+1, r24	; 0x01
    35c6:	02 c0       	rjmp	.+4      	; 0x35cc <LCD_VidShiftDispaly+0x40>
	break;
	case 2:
		offset=128+64;
    35c8:	80 ec       	ldi	r24, 0xC0	; 192
    35ca:	89 83       	std	Y+1, r24	; 0x01
	}
	shift=offset+Copy_u8Column;
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	9c 81       	ldd	r25, Y+4	; 0x04
    35d0:	89 0f       	add	r24, r25
    35d2:	8a 83       	std	Y+2, r24	; 0x02
	LCD_VidSendCommand(shift);
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <LCD_VidSendCommand>
}
    35da:	26 96       	adiw	r28, 0x06	; 6
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	f8 94       	cli
    35e0:	de bf       	out	0x3e, r29	; 62
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	cd bf       	out	0x3d, r28	; 61
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <LCD_VidCLR>:


void LCD_VidCLR(void)
{
    35ec:	df 93       	push	r29
    35ee:	cf 93       	push	r28
    35f0:	cd b7       	in	r28, 0x3d	; 61
    35f2:	de b7       	in	r29, 0x3e	; 62

	LCD_VidSendCommand(0b00000001);
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <LCD_VidSendCommand>

}
    35fa:	cf 91       	pop	r28
    35fc:	df 91       	pop	r29
    35fe:	08 95       	ret

00003600 <LCD_SetCGRam>:

void LCD_SetCGRam(u8 Copy_u8location )  //start from 0:7
{	u8 offset=64+Copy_u8location;
    3600:	df 93       	push	r29
    3602:	cf 93       	push	r28
    3604:	00 d0       	rcall	.+0      	; 0x3606 <LCD_SetCGRam+0x6>
    3606:	cd b7       	in	r28, 0x3d	; 61
    3608:	de b7       	in	r29, 0x3e	; 62
    360a:	8a 83       	std	Y+2, r24	; 0x02
    360c:	8a 81       	ldd	r24, Y+2	; 0x02
    360e:	80 5c       	subi	r24, 0xC0	; 192
    3610:	89 83       	std	Y+1, r24	; 0x01

	LCD_VidSendCommand(offset);
    3612:	89 81       	ldd	r24, Y+1	; 0x01
    3614:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <LCD_VidSendCommand>

}
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	08 95       	ret

00003622 <LCD_SetDDRam>:

void LCD_SetDDRam(void)
{	u8 offset=128;
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	0f 92       	push	r0
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62
    362c:	80 e8       	ldi	r24, 0x80	; 128
    362e:	89 83       	std	Y+1, r24	; 0x01

	LCD_VidSendCommand(offset);
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <LCD_VidSendCommand>

}
    3636:	0f 90       	pop	r0
    3638:	cf 91       	pop	r28
    363a:	df 91       	pop	r29
    363c:	08 95       	ret

0000363e <LCD_VidSendCharToCGRam>:


void LCD_VidSendCharToCGRam(u8* Copy_u8Ptr)
{
    363e:	df 93       	push	r29
    3640:	cf 93       	push	r28
    3642:	00 d0       	rcall	.+0      	; 0x3644 <LCD_VidSendCharToCGRam+0x6>
    3644:	00 d0       	rcall	.+0      	; 0x3646 <LCD_VidSendCharToCGRam+0x8>
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	9c 83       	std	Y+4, r25	; 0x04
    364c:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;i<8;i++)
    364e:	1a 82       	std	Y+2, r1	; 0x02
    3650:	19 82       	std	Y+1, r1	; 0x01
    3652:	0f c0       	rjmp	.+30     	; 0x3672 <LCD_VidSendCharToCGRam+0x34>
	{
		LCD_VidSendData(*Copy_u8Ptr);
    3654:	eb 81       	ldd	r30, Y+3	; 0x03
    3656:	fc 81       	ldd	r31, Y+4	; 0x04
    3658:	80 81       	ld	r24, Z
    365a:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_VidSendData>
		Copy_u8Ptr++;
    365e:	8b 81       	ldd	r24, Y+3	; 0x03
    3660:	9c 81       	ldd	r25, Y+4	; 0x04
    3662:	01 96       	adiw	r24, 0x01	; 1
    3664:	9c 83       	std	Y+4, r25	; 0x04
    3666:	8b 83       	std	Y+3, r24	; 0x03
}


void LCD_VidSendCharToCGRam(u8* Copy_u8Ptr)
{
	for(int i=0;i<8;i++)
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	9a 81       	ldd	r25, Y+2	; 0x02
    366c:	01 96       	adiw	r24, 0x01	; 1
    366e:	9a 83       	std	Y+2, r25	; 0x02
    3670:	89 83       	std	Y+1, r24	; 0x01
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	88 30       	cpi	r24, 0x08	; 8
    3678:	91 05       	cpc	r25, r1
    367a:	64 f3       	brlt	.-40     	; 0x3654 <LCD_VidSendCharToCGRam+0x16>
		LCD_VidSendData(*Copy_u8Ptr);
		Copy_u8Ptr++;
	}


}
    367c:	0f 90       	pop	r0
    367e:	0f 90       	pop	r0
    3680:	0f 90       	pop	r0
    3682:	0f 90       	pop	r0
    3684:	cf 91       	pop	r28
    3686:	df 91       	pop	r29
    3688:	08 95       	ret

0000368a <__udivmodhi4>:
    368a:	aa 1b       	sub	r26, r26
    368c:	bb 1b       	sub	r27, r27
    368e:	51 e1       	ldi	r21, 0x11	; 17
    3690:	07 c0       	rjmp	.+14     	; 0x36a0 <__udivmodhi4_ep>

00003692 <__udivmodhi4_loop>:
    3692:	aa 1f       	adc	r26, r26
    3694:	bb 1f       	adc	r27, r27
    3696:	a6 17       	cp	r26, r22
    3698:	b7 07       	cpc	r27, r23
    369a:	10 f0       	brcs	.+4      	; 0x36a0 <__udivmodhi4_ep>
    369c:	a6 1b       	sub	r26, r22
    369e:	b7 0b       	sbc	r27, r23

000036a0 <__udivmodhi4_ep>:
    36a0:	88 1f       	adc	r24, r24
    36a2:	99 1f       	adc	r25, r25
    36a4:	5a 95       	dec	r21
    36a6:	a9 f7       	brne	.-22     	; 0x3692 <__udivmodhi4_loop>
    36a8:	80 95       	com	r24
    36aa:	90 95       	com	r25
    36ac:	bc 01       	movw	r22, r24
    36ae:	cd 01       	movw	r24, r26
    36b0:	08 95       	ret

000036b2 <__prologue_saves__>:
    36b2:	2f 92       	push	r2
    36b4:	3f 92       	push	r3
    36b6:	4f 92       	push	r4
    36b8:	5f 92       	push	r5
    36ba:	6f 92       	push	r6
    36bc:	7f 92       	push	r7
    36be:	8f 92       	push	r8
    36c0:	9f 92       	push	r9
    36c2:	af 92       	push	r10
    36c4:	bf 92       	push	r11
    36c6:	cf 92       	push	r12
    36c8:	df 92       	push	r13
    36ca:	ef 92       	push	r14
    36cc:	ff 92       	push	r15
    36ce:	0f 93       	push	r16
    36d0:	1f 93       	push	r17
    36d2:	cf 93       	push	r28
    36d4:	df 93       	push	r29
    36d6:	cd b7       	in	r28, 0x3d	; 61
    36d8:	de b7       	in	r29, 0x3e	; 62
    36da:	ca 1b       	sub	r28, r26
    36dc:	db 0b       	sbc	r29, r27
    36de:	0f b6       	in	r0, 0x3f	; 63
    36e0:	f8 94       	cli
    36e2:	de bf       	out	0x3e, r29	; 62
    36e4:	0f be       	out	0x3f, r0	; 63
    36e6:	cd bf       	out	0x3d, r28	; 61
    36e8:	09 94       	ijmp

000036ea <__epilogue_restores__>:
    36ea:	2a 88       	ldd	r2, Y+18	; 0x12
    36ec:	39 88       	ldd	r3, Y+17	; 0x11
    36ee:	48 88       	ldd	r4, Y+16	; 0x10
    36f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    36f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    36f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    36f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    36f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    36fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    36fc:	b9 84       	ldd	r11, Y+9	; 0x09
    36fe:	c8 84       	ldd	r12, Y+8	; 0x08
    3700:	df 80       	ldd	r13, Y+7	; 0x07
    3702:	ee 80       	ldd	r14, Y+6	; 0x06
    3704:	fd 80       	ldd	r15, Y+5	; 0x05
    3706:	0c 81       	ldd	r16, Y+4	; 0x04
    3708:	1b 81       	ldd	r17, Y+3	; 0x03
    370a:	aa 81       	ldd	r26, Y+2	; 0x02
    370c:	b9 81       	ldd	r27, Y+1	; 0x01
    370e:	ce 0f       	add	r28, r30
    3710:	d1 1d       	adc	r29, r1
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	f8 94       	cli
    3716:	de bf       	out	0x3e, r29	; 62
    3718:	0f be       	out	0x3f, r0	; 63
    371a:	cd bf       	out	0x3d, r28	; 61
    371c:	ed 01       	movw	r28, r26
    371e:	08 95       	ret

00003720 <_exit>:
    3720:	f8 94       	cli

00003722 <__stop_program>:
    3722:	ff cf       	rjmp	.-2      	; 0x3722 <__stop_program>
