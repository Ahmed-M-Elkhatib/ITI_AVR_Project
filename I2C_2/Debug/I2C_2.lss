
I2C_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000266c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000266c  00002700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800068  00800068  00002708  2**0
                  ALLOC
  3 .stab         00001e30  00000000  00000000  00002708  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c8c  00000000  00000000  00004538  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000051c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005474  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000070bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009145  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009913  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a9 36       	cpi	r26, 0x69	; 105
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e6       	ldi	r30, 0x6C	; 108
      78:	f6 e2       	ldi	r31, 0x26	; 38
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 21 0c 	call	0x1842	; 0x1842 <main>
      8a:	0c 94 34 13 	jmp	0x2668	; 0x2668 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 25 13 	jmp	0x264a	; 0x264a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 25 13 	jmp	0x264a	; 0x264a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 25 13 	jmp	0x264a	; 0x264a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 25 13 	jmp	0x264a	; 0x264a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 25 13 	jmp	0x264a	; 0x264a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_VidSetPin_Direction>:




void DIO_VidSetPin_Direction(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8State)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if (1==Copy_u8State)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_VidSetPin_Direction+0x22>
     b66:	6f c0       	rjmp	.+222    	; 0xc46 <DIO_VidSetPin_Direction+0x100>
	{
		switch (Copy_u8Port)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	49 f1       	breq	.+82     	; 0xbce <DIO_VidSetPin_Direction+0x88>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_VidSetPin_Direction+0x4a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_VidSetPin_Direction+0x60>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_VidSetPin_Direction+0x1ee>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	71 f1       	breq	.+92     	; 0xbf6 <DIO_VidSetPin_Direction+0xb0>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	e9 f1       	breq	.+122    	; 0xc1e <DIO_VidSetPin_Direction+0xd8>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <DIO_VidSetPin_Direction+0x1ee>
			{case 0:
			SET_BIT( DDRA,Copy_u8Pin); break;
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_VidSetPin_Direction+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_VidSetPin_Direction+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	b3 c0       	rjmp	.+358    	; 0xd34 <DIO_VidSetPin_Direction+0x1ee>
			case 1:
			SET_BIT( DDRB,Copy_u8Pin); break;
     bce:	a7 e3       	ldi	r26, 0x37	; 55
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e3       	ldi	r30, 0x37	; 55
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_VidSetPin_Direction+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_VidSetPin_Direction+0xa2>
     bf0:	84 2b       	or	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	9f c0       	rjmp	.+318    	; 0xd34 <DIO_VidSetPin_Direction+0x1ee>
			case 2:
			SET_BIT( DDRC,Copy_u8Pin); break;
     bf6:	a4 e3       	ldi	r26, 0x34	; 52
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e4 e3       	ldi	r30, 0x34	; 52
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_VidSetPin_Direction+0xce>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_VidSetPin_Direction+0xca>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	8b c0       	rjmp	.+278    	; 0xd34 <DIO_VidSetPin_Direction+0x1ee>
			case 3:
			SET_BIT( DDRD,Copy_u8Pin); break;
     c1e:	a1 e3       	ldi	r26, 0x31	; 49
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e1 e3       	ldi	r30, 0x31	; 49
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_VidSetPin_Direction+0xf6>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_VidSetPin_Direction+0xf2>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <DIO_VidSetPin_Direction+0x1ee>
	}}
	else if (0==Copy_u8State)
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <DIO_VidSetPin_Direction+0x108>
     c4c:	73 c0       	rjmp	.+230    	; 0xd34 <DIO_VidSetPin_Direction+0x1ee>
	{	switch(Copy_u8Port)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <DIO_VidSetPin_Direction+0x172>
     c62:	2c 81       	ldd	r18, Y+4	; 0x04
     c64:	3d 81       	ldd	r19, Y+5	; 0x05
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <DIO_VidSetPin_Direction+0x130>
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <DIO_VidSetPin_Direction+0x148>
     c74:	5f c0       	rjmp	.+190    	; 0xd34 <DIO_VidSetPin_Direction+0x1ee>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <DIO_VidSetPin_Direction+0x19c>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <DIO_VidSetPin_Direction+0x146>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <DIO_VidSetPin_Direction+0x1c6>
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <DIO_VidSetPin_Direction+0x1ee>
			{case 0:
			CLR_BIT( DDRA,Copy_u8Pin); break;
     c8e:	aa e3       	ldi	r26, 0x3A	; 58
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ea e3       	ldi	r30, 0x3A	; 58
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_VidSetPin_Direction+0x166>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_VidSetPin_Direction+0x162>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	3e c0       	rjmp	.+124    	; 0xd34 <DIO_VidSetPin_Direction+0x1ee>
			case 1:
			CLR_BIT( DDRB,Copy_u8Pin); break;
     cb8:	a7 e3       	ldi	r26, 0x37	; 55
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e7 e3       	ldi	r30, 0x37	; 55
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_VidSetPin_Direction+0x190>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_VidSetPin_Direction+0x18c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	29 c0       	rjmp	.+82     	; 0xd34 <DIO_VidSetPin_Direction+0x1ee>
			case 2:
			CLR_BIT( DDRC,Copy_u8Pin); break;
     ce2:	a4 e3       	ldi	r26, 0x34	; 52
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e3       	ldi	r30, 0x34	; 52
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_VidSetPin_Direction+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_VidSetPin_Direction+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	14 c0       	rjmp	.+40     	; 0xd34 <DIO_VidSetPin_Direction+0x1ee>
			case 3:
			CLR_BIT( DDRD,Copy_u8Pin); break;
     d0c:	a1 e3       	ldi	r26, 0x31	; 49
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e1 e3       	ldi	r30, 0x31	; 49
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_VidSetPin_Direction+0x1e4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_VidSetPin_Direction+0x1e0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
	}}

	}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_VidSetPin_Value>:
	
	
void DIO_VidSetPin_Value(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if(0==Copy_u8Value)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	88 23       	and	r24, r24
     d64:	09 f0       	breq	.+2      	; 0xd68 <DIO_VidSetPin_Value+0x22>
     d66:	74 c0       	rjmp	.+232    	; 0xe50 <DIO_VidSetPin_Value+0x10a>
	
	{switch(Copy_u8Port)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3f 83       	std	Y+7, r19	; 0x07
     d70:	2e 83       	std	Y+6, r18	; 0x06
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	59 f1       	breq	.+86     	; 0xdd2 <DIO_VidSetPin_Value+0x8c>
     d7c:	2e 81       	ldd	r18, Y+6	; 0x06
     d7e:	3f 81       	ldd	r19, Y+7	; 0x07
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	2c f4       	brge	.+10     	; 0xd90 <DIO_VidSetPin_Value+0x4a>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	69 f0       	breq	.+26     	; 0xda8 <DIO_VidSetPin_Value+0x62>
     d8e:	d2 c0       	rjmp	.+420    	; 0xf34 <DIO_VidSetPin_Value+0x1ee>
     d90:	2e 81       	ldd	r18, Y+6	; 0x06
     d92:	3f 81       	ldd	r19, Y+7	; 0x07
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	89 f1       	breq	.+98     	; 0xdfc <DIO_VidSetPin_Value+0xb6>
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	9f 81       	ldd	r25, Y+7	; 0x07
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	91 05       	cpc	r25, r1
     da2:	09 f4       	brne	.+2      	; 0xda6 <DIO_VidSetPin_Value+0x60>
     da4:	40 c0       	rjmp	.+128    	; 0xe26 <DIO_VidSetPin_Value+0xe0>
     da6:	c6 c0       	rjmp	.+396    	; 0xf34 <DIO_VidSetPin_Value+0x1ee>
		{case 0:
		CLR_BIT( PORTA,Copy_u8Pin) ;break;
     da8:	ab e3       	ldi	r26, 0x3B	; 59
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	eb e3       	ldi	r30, 0x3B	; 59
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_VidSetPin_Value+0x80>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_VidSetPin_Value+0x7c>
     dca:	80 95       	com	r24
     dcc:	84 23       	and	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	b1 c0       	rjmp	.+354    	; 0xf34 <DIO_VidSetPin_Value+0x1ee>
		case 1:
		CLR_BIT( PORTB,Copy_u8Pin) ;break;
     dd2:	a8 e3       	ldi	r26, 0x38	; 56
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e3       	ldi	r30, 0x38	; 56
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <DIO_VidSetPin_Value+0xaa>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <DIO_VidSetPin_Value+0xa6>
     df4:	80 95       	com	r24
     df6:	84 23       	and	r24, r20
     df8:	8c 93       	st	X, r24
     dfa:	9c c0       	rjmp	.+312    	; 0xf34 <DIO_VidSetPin_Value+0x1ee>
		case 2:
		CLR_BIT( PORTC,Copy_u8Pin) ;break;
     dfc:	a5 e3       	ldi	r26, 0x35	; 53
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e5 e3       	ldi	r30, 0x35	; 53
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_VidSetPin_Value+0xd4>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_VidSetPin_Value+0xd0>
     e1e:	80 95       	com	r24
     e20:	84 23       	and	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	87 c0       	rjmp	.+270    	; 0xf34 <DIO_VidSetPin_Value+0x1ee>
		case 3:
		CLR_BIT( PORTD,Copy_u8Pin) ;break;
     e26:	a2 e3       	ldi	r26, 0x32	; 50
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e2 e3       	ldi	r30, 0x32	; 50
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_VidSetPin_Value+0xfe>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_VidSetPin_Value+0xfa>
     e48:	80 95       	com	r24
     e4a:	84 23       	and	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	72 c0       	rjmp	.+228    	; 0xf34 <DIO_VidSetPin_Value+0x1ee>
	}}
	else if (1==Copy_u8Value)
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	09 f0       	breq	.+2      	; 0xe58 <DIO_VidSetPin_Value+0x112>
     e56:	6e c0       	rjmp	.+220    	; 0xf34 <DIO_VidSetPin_Value+0x1ee>
	{switch(Copy_u8Port)
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	3d 83       	std	Y+5, r19	; 0x05
     e60:	2c 83       	std	Y+4, r18	; 0x04
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	9d 81       	ldd	r25, Y+5	; 0x05
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	91 05       	cpc	r25, r1
     e6a:	49 f1       	breq	.+82     	; 0xebe <DIO_VidSetPin_Value+0x178>
     e6c:	2c 81       	ldd	r18, Y+4	; 0x04
     e6e:	3d 81       	ldd	r19, Y+5	; 0x05
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	2c f4       	brge	.+10     	; 0xe80 <DIO_VidSetPin_Value+0x13a>
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	9d 81       	ldd	r25, Y+5	; 0x05
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	61 f0       	breq	.+24     	; 0xe96 <DIO_VidSetPin_Value+0x150>
     e7e:	5a c0       	rjmp	.+180    	; 0xf34 <DIO_VidSetPin_Value+0x1ee>
     e80:	2c 81       	ldd	r18, Y+4	; 0x04
     e82:	3d 81       	ldd	r19, Y+5	; 0x05
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	71 f1       	breq	.+92     	; 0xee6 <DIO_VidSetPin_Value+0x1a0>
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	9d 81       	ldd	r25, Y+5	; 0x05
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	91 05       	cpc	r25, r1
     e92:	e9 f1       	breq	.+122    	; 0xf0e <DIO_VidSetPin_Value+0x1c8>
     e94:	4f c0       	rjmp	.+158    	; 0xf34 <DIO_VidSetPin_Value+0x1ee>
		{case 0:
		SET_BIT( PORTA,Copy_u8Pin) ;break;
     e96:	ab e3       	ldi	r26, 0x3B	; 59
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	eb e3       	ldi	r30, 0x3B	; 59
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 2e       	mov	r0, r18
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_VidSetPin_Value+0x16e>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_VidSetPin_Value+0x16a>
     eb8:	84 2b       	or	r24, r20
     eba:	8c 93       	st	X, r24
     ebc:	3b c0       	rjmp	.+118    	; 0xf34 <DIO_VidSetPin_Value+0x1ee>
		case 1:
		SET_BIT( PORTB,Copy_u8Pin) ;break;
     ebe:	a8 e3       	ldi	r26, 0x38	; 56
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e8 e3       	ldi	r30, 0x38	; 56
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <DIO_VidSetPin_Value+0x196>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <DIO_VidSetPin_Value+0x192>
     ee0:	84 2b       	or	r24, r20
     ee2:	8c 93       	st	X, r24
     ee4:	27 c0       	rjmp	.+78     	; 0xf34 <DIO_VidSetPin_Value+0x1ee>
		case 2:
		SET_BIT( PORTC,Copy_u8Pin) ;break;
     ee6:	a5 e3       	ldi	r26, 0x35	; 53
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e5 e3       	ldi	r30, 0x35	; 53
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_VidSetPin_Value+0x1be>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_VidSetPin_Value+0x1ba>
     f08:	84 2b       	or	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	13 c0       	rjmp	.+38     	; 0xf34 <DIO_VidSetPin_Value+0x1ee>
		case 3:
		SET_BIT( PORTD,Copy_u8Pin) ;break;
     f0e:	a2 e3       	ldi	r26, 0x32	; 50
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e2 e3       	ldi	r30, 0x32	; 50
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_VidSetPin_Value+0x1e6>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_VidSetPin_Value+0x1e2>
     f30:	84 2b       	or	r24, r20
     f32:	8c 93       	st	X, r24
	}}
		
		
}
     f34:	27 96       	adiw	r28, 0x07	; 7
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <DIO_VidGetPin>:
	
	u8 DIO_VidGetPin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{	u8 bit;
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <DIO_VidGetPin+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <DIO_VidGetPin+0x8>
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	8a 83       	std	Y+2, r24	; 0x02
     f56:	6b 83       	std	Y+3, r22	; 0x03
		switch(Copy_u8Port)
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	3d 83       	std	Y+5, r19	; 0x05
     f60:	2c 83       	std	Y+4, r18	; 0x04
     f62:	4c 81       	ldd	r20, Y+4	; 0x04
     f64:	5d 81       	ldd	r21, Y+5	; 0x05
     f66:	41 30       	cpi	r20, 0x01	; 1
     f68:	51 05       	cpc	r21, r1
     f6a:	41 f1       	breq	.+80     	; 0xfbc <DIO_VidGetPin+0x76>
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	91 05       	cpc	r25, r1
     f74:	34 f4       	brge	.+12     	; 0xf82 <DIO_VidGetPin+0x3c>
     f76:	2c 81       	ldd	r18, Y+4	; 0x04
     f78:	3d 81       	ldd	r19, Y+5	; 0x05
     f7a:	21 15       	cp	r18, r1
     f7c:	31 05       	cpc	r19, r1
     f7e:	61 f0       	breq	.+24     	; 0xf98 <DIO_VidGetPin+0x52>
     f80:	52 c0       	rjmp	.+164    	; 0x1026 <DIO_VidGetPin+0xe0>
     f82:	4c 81       	ldd	r20, Y+4	; 0x04
     f84:	5d 81       	ldd	r21, Y+5	; 0x05
     f86:	42 30       	cpi	r20, 0x02	; 2
     f88:	51 05       	cpc	r21, r1
     f8a:	51 f1       	breq	.+84     	; 0xfe0 <DIO_VidGetPin+0x9a>
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	9d 81       	ldd	r25, Y+5	; 0x05
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	91 05       	cpc	r25, r1
     f94:	b9 f1       	breq	.+110    	; 0x1004 <DIO_VidGetPin+0xbe>
     f96:	47 c0       	rjmp	.+142    	; 0x1026 <DIO_VidGetPin+0xe0>
		{case 0:
		bit=GET_BIT( PINA,Copy_u8Pin) ;break;
     f98:	e9 e3       	ldi	r30, 0x39	; 57
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	88 2f       	mov	r24, r24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a9 01       	movw	r20, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_VidGetPin+0x6a>
     fac:	55 95       	asr	r21
     fae:	47 95       	ror	r20
     fb0:	8a 95       	dec	r24
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_VidGetPin+0x66>
     fb4:	ca 01       	movw	r24, r20
     fb6:	81 70       	andi	r24, 0x01	; 1
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	35 c0       	rjmp	.+106    	; 0x1026 <DIO_VidGetPin+0xe0>
		case 1:
		bit=GET_BIT( PINB,Copy_u8Pin) ;break;
     fbc:	e6 e3       	ldi	r30, 0x36	; 54
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	a9 01       	movw	r20, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_VidGetPin+0x8e>
     fd0:	55 95       	asr	r21
     fd2:	47 95       	ror	r20
     fd4:	8a 95       	dec	r24
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_VidGetPin+0x8a>
     fd8:	ca 01       	movw	r24, r20
     fda:	81 70       	andi	r24, 0x01	; 1
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	23 c0       	rjmp	.+70     	; 0x1026 <DIO_VidGetPin+0xe0>
		case 2:
		bit=GET_BIT( PINC,Copy_u8Pin) ;break;
     fe0:	e3 e3       	ldi	r30, 0x33	; 51
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	88 2f       	mov	r24, r24
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	a9 01       	movw	r20, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_VidGetPin+0xb2>
     ff4:	55 95       	asr	r21
     ff6:	47 95       	ror	r20
     ff8:	8a 95       	dec	r24
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_VidGetPin+0xae>
     ffc:	ca 01       	movw	r24, r20
     ffe:	81 70       	andi	r24, 0x01	; 1
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	11 c0       	rjmp	.+34     	; 0x1026 <DIO_VidGetPin+0xe0>
		case 3:
		bit=GET_BIT( PIND,Copy_u8Pin) ;break;
    1004:	e0 e3       	ldi	r30, 0x30	; 48
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	a9 01       	movw	r20, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_VidGetPin+0xd6>
    1018:	55 95       	asr	r21
    101a:	47 95       	ror	r20
    101c:	8a 95       	dec	r24
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_VidGetPin+0xd2>
    1020:	ca 01       	movw	r24, r20
    1022:	81 70       	andi	r24, 0x01	; 1
    1024:	89 83       	std	Y+1, r24	; 0x01
		}
		return bit;
    1026:	89 81       	ldd	r24, Y+1	; 0x01
				
		
	}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <DIO_VidToggelPin>:

	
	
	void DIO_VidToggelPin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	00 d0       	rcall	.+0      	; 0x103e <DIO_VidToggelPin+0x6>
    103e:	00 d0       	rcall	.+0      	; 0x1040 <DIO_VidToggelPin+0x8>
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	3c 83       	std	Y+4, r19	; 0x04
    1050:	2b 83       	std	Y+3, r18	; 0x03
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	91 05       	cpc	r25, r1
    105a:	49 f1       	breq	.+82     	; 0x10ae <DIO_VidToggelPin+0x76>
    105c:	2b 81       	ldd	r18, Y+3	; 0x03
    105e:	3c 81       	ldd	r19, Y+4	; 0x04
    1060:	22 30       	cpi	r18, 0x02	; 2
    1062:	31 05       	cpc	r19, r1
    1064:	2c f4       	brge	.+10     	; 0x1070 <DIO_VidToggelPin+0x38>
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	61 f0       	breq	.+24     	; 0x1086 <DIO_VidToggelPin+0x4e>
    106e:	5a c0       	rjmp	.+180    	; 0x1124 <DIO_VidToggelPin+0xec>
    1070:	2b 81       	ldd	r18, Y+3	; 0x03
    1072:	3c 81       	ldd	r19, Y+4	; 0x04
    1074:	22 30       	cpi	r18, 0x02	; 2
    1076:	31 05       	cpc	r19, r1
    1078:	71 f1       	breq	.+92     	; 0x10d6 <DIO_VidToggelPin+0x9e>
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	9c 81       	ldd	r25, Y+4	; 0x04
    107e:	83 30       	cpi	r24, 0x03	; 3
    1080:	91 05       	cpc	r25, r1
    1082:	e9 f1       	breq	.+122    	; 0x10fe <DIO_VidToggelPin+0xc6>
    1084:	4f c0       	rjmp	.+158    	; 0x1124 <DIO_VidToggelPin+0xec>
		{
			case 0:   TOGGLE_BIT( PORTA,Copy_u8Pin); break;
    1086:	ab e3       	ldi	r26, 0x3B	; 59
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	eb e3       	ldi	r30, 0x3B	; 59
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_VidToggelPin+0x6c>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_VidToggelPin+0x68>
    10a8:	84 27       	eor	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	3b c0       	rjmp	.+118    	; 0x1124 <DIO_VidToggelPin+0xec>
			case 1:   TOGGLE_BIT( PORTB,Copy_u8Pin); break;
    10ae:	a8 e3       	ldi	r26, 0x38	; 56
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e8 e3       	ldi	r30, 0x38	; 56
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_VidToggelPin+0x94>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_VidToggelPin+0x90>
    10d0:	84 27       	eor	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	27 c0       	rjmp	.+78     	; 0x1124 <DIO_VidToggelPin+0xec>
			case 2:   TOGGLE_BIT( PORTC,Copy_u8Pin); break;
    10d6:	a5 e3       	ldi	r26, 0x35	; 53
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e3       	ldi	r30, 0x35	; 53
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_VidToggelPin+0xbc>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_VidToggelPin+0xb8>
    10f8:	84 27       	eor	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	13 c0       	rjmp	.+38     	; 0x1124 <DIO_VidToggelPin+0xec>
			case 3:   TOGGLE_BIT( PORTD,Copy_u8Pin); break;
    10fe:	a2 e3       	ldi	r26, 0x32	; 50
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e2 e3       	ldi	r30, 0x32	; 50
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_VidToggelPin+0xe4>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_VidToggelPin+0xe0>
    1120:	84 27       	eor	r24, r20
    1122:	8c 93       	st	X, r24
		}
			
		
	}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <DIO_VidSetPort_Direction>:
	
	void DIO_VidSetPort_Direction(u8 Copy_u8Port,u8 Copy_u8State)
	{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	00 d0       	rcall	.+0      	; 0x1138 <DIO_VidSetPort_Direction+0x6>
    1138:	00 d0       	rcall	.+0      	; 0x113a <DIO_VidSetPort_Direction+0x8>
    113a:	00 d0       	rcall	.+0      	; 0x113c <DIO_VidSetPort_Direction+0xa>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	6a 83       	std	Y+2, r22	; 0x02
		
		if (1==Copy_u8State)
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	99 f5       	brne	.+102    	; 0x11b0 <DIO_VidSetPort_Direction+0x7e>
		{
			switch(Copy_u8Port)
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	3e 83       	std	Y+6, r19	; 0x06
    1152:	2d 83       	std	Y+5, r18	; 0x05
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	91 05       	cpc	r25, r1
    115c:	d1 f0       	breq	.+52     	; 0x1192 <DIO_VidSetPort_Direction+0x60>
    115e:	2d 81       	ldd	r18, Y+5	; 0x05
    1160:	3e 81       	ldd	r19, Y+6	; 0x06
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	2c f4       	brge	.+10     	; 0x1172 <DIO_VidSetPort_Direction+0x40>
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	9e 81       	ldd	r25, Y+6	; 0x06
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	61 f0       	breq	.+24     	; 0x1188 <DIO_VidSetPort_Direction+0x56>
    1170:	50 c0       	rjmp	.+160    	; 0x1212 <DIO_VidSetPort_Direction+0xe0>
    1172:	2d 81       	ldd	r18, Y+5	; 0x05
    1174:	3e 81       	ldd	r19, Y+6	; 0x06
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	81 f0       	breq	.+32     	; 0x119c <DIO_VidSetPort_Direction+0x6a>
    117c:	8d 81       	ldd	r24, Y+5	; 0x05
    117e:	9e 81       	ldd	r25, Y+6	; 0x06
    1180:	83 30       	cpi	r24, 0x03	; 3
    1182:	91 05       	cpc	r25, r1
    1184:	81 f0       	breq	.+32     	; 0x11a6 <DIO_VidSetPort_Direction+0x74>
    1186:	45 c0       	rjmp	.+138    	; 0x1212 <DIO_VidSetPort_Direction+0xe0>
			{
				case 0: SET_PORT(DDRA);   break;
    1188:	ea e3       	ldi	r30, 0x3A	; 58
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	8f ef       	ldi	r24, 0xFF	; 255
    118e:	80 83       	st	Z, r24
    1190:	40 c0       	rjmp	.+128    	; 0x1212 <DIO_VidSetPort_Direction+0xe0>
				case 1: SET_PORT(DDRB);   break;
    1192:	e7 e3       	ldi	r30, 0x37	; 55
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	80 83       	st	Z, r24
    119a:	3b c0       	rjmp	.+118    	; 0x1212 <DIO_VidSetPort_Direction+0xe0>
				case 2: SET_PORT(DDRC);   break;
    119c:	e4 e3       	ldi	r30, 0x34	; 52
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	80 83       	st	Z, r24
    11a4:	36 c0       	rjmp	.+108    	; 0x1212 <DIO_VidSetPort_Direction+0xe0>
				case 3: SET_PORT(DDRD);   break;
    11a6:	e1 e3       	ldi	r30, 0x31	; 49
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	8f ef       	ldi	r24, 0xFF	; 255
    11ac:	80 83       	st	Z, r24
    11ae:	31 c0       	rjmp	.+98     	; 0x1212 <DIO_VidSetPort_Direction+0xe0>
			}
			
		}
		else if(0==Copy_u8State)
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	88 23       	and	r24, r24
    11b4:	71 f5       	brne	.+92     	; 0x1212 <DIO_VidSetPort_Direction+0xe0>
		
		{
			switch(Copy_u8Port)
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	3c 83       	std	Y+4, r19	; 0x04
    11be:	2b 83       	std	Y+3, r18	; 0x03
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	91 05       	cpc	r25, r1
    11c8:	c9 f0       	breq	.+50     	; 0x11fc <DIO_VidSetPort_Direction+0xca>
    11ca:	2b 81       	ldd	r18, Y+3	; 0x03
    11cc:	3c 81       	ldd	r19, Y+4	; 0x04
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	31 05       	cpc	r19, r1
    11d2:	2c f4       	brge	.+10     	; 0x11de <DIO_VidSetPort_Direction+0xac>
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	61 f0       	breq	.+24     	; 0x11f4 <DIO_VidSetPort_Direction+0xc2>
    11dc:	1a c0       	rjmp	.+52     	; 0x1212 <DIO_VidSetPort_Direction+0xe0>
    11de:	2b 81       	ldd	r18, Y+3	; 0x03
    11e0:	3c 81       	ldd	r19, Y+4	; 0x04
    11e2:	22 30       	cpi	r18, 0x02	; 2
    11e4:	31 05       	cpc	r19, r1
    11e6:	71 f0       	breq	.+28     	; 0x1204 <DIO_VidSetPort_Direction+0xd2>
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	83 30       	cpi	r24, 0x03	; 3
    11ee:	91 05       	cpc	r25, r1
    11f0:	69 f0       	breq	.+26     	; 0x120c <DIO_VidSetPort_Direction+0xda>
    11f2:	0f c0       	rjmp	.+30     	; 0x1212 <DIO_VidSetPort_Direction+0xe0>
			{
				case 0: CLR_PORT(DDRA);   break;
    11f4:	ea e3       	ldi	r30, 0x3A	; 58
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	10 82       	st	Z, r1
    11fa:	0b c0       	rjmp	.+22     	; 0x1212 <DIO_VidSetPort_Direction+0xe0>
				case 1: CLR_PORT(DDRB);   break;
    11fc:	e7 e3       	ldi	r30, 0x37	; 55
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	10 82       	st	Z, r1
    1202:	07 c0       	rjmp	.+14     	; 0x1212 <DIO_VidSetPort_Direction+0xe0>
				case 2: CLR_PORT(DDRC);   break;
    1204:	e4 e3       	ldi	r30, 0x34	; 52
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	10 82       	st	Z, r1
    120a:	03 c0       	rjmp	.+6      	; 0x1212 <DIO_VidSetPort_Direction+0xe0>
				case 3: CLR_PORT(DDRD);   break;
    120c:	e1 e3       	ldi	r30, 0x31	; 49
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	10 82       	st	Z, r1
			}	
		}
		
	}
    1212:	26 96       	adiw	r28, 0x06	; 6
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <DIO_VidWriteOnPort>:

	void DIO_VidWriteOnPort(u8 Copy_u8Port,u8 Copy_u8Value)
	{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <DIO_VidWriteOnPort+0x6>
    122a:	00 d0       	rcall	.+0      	; 0x122c <DIO_VidWriteOnPort+0x8>
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3c 83       	std	Y+4, r19	; 0x04
    123c:	2b 83       	std	Y+3, r18	; 0x03
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	d1 f0       	breq	.+52     	; 0x127c <DIO_VidWriteOnPort+0x58>
    1248:	2b 81       	ldd	r18, Y+3	; 0x03
    124a:	3c 81       	ldd	r19, Y+4	; 0x04
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	2c f4       	brge	.+10     	; 0x125c <DIO_VidWriteOnPort+0x38>
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	61 f0       	breq	.+24     	; 0x1272 <DIO_VidWriteOnPort+0x4e>
    125a:	1e c0       	rjmp	.+60     	; 0x1298 <DIO_VidWriteOnPort+0x74>
    125c:	2b 81       	ldd	r18, Y+3	; 0x03
    125e:	3c 81       	ldd	r19, Y+4	; 0x04
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	81 f0       	breq	.+32     	; 0x1286 <DIO_VidWriteOnPort+0x62>
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	91 05       	cpc	r25, r1
    126e:	81 f0       	breq	.+32     	; 0x1290 <DIO_VidWriteOnPort+0x6c>
    1270:	13 c0       	rjmp	.+38     	; 0x1298 <DIO_VidWriteOnPort+0x74>
		{
			case 0: WRITEON_PORT(PORTA,Copy_u8Value); break;
    1272:	eb e3       	ldi	r30, 0x3B	; 59
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	80 83       	st	Z, r24
    127a:	0e c0       	rjmp	.+28     	; 0x1298 <DIO_VidWriteOnPort+0x74>
			case 1: WRITEON_PORT(PORTB,Copy_u8Value); break;
    127c:	e8 e3       	ldi	r30, 0x38	; 56
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 83       	st	Z, r24
    1284:	09 c0       	rjmp	.+18     	; 0x1298 <DIO_VidWriteOnPort+0x74>
			case 2: WRITEON_PORT(PORTC,Copy_u8Value); break;
    1286:	e5 e3       	ldi	r30, 0x35	; 53
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	80 83       	st	Z, r24
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <DIO_VidWriteOnPort+0x74>
			case 3: WRITEON_PORT(PORTD,Copy_u8Value); break;
    1290:	e2 e3       	ldi	r30, 0x32	; 50
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	80 83       	st	Z, r24
		}
		
	}
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <DIO_VidPullUp_Pin>:


	
	void DIO_VidPullUp_Pin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <DIO_VidPullUp_Pin+0x6>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <DIO_VidPullUp_Pin+0x8>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	3c 83       	std	Y+4, r19	; 0x04
    12be:	2b 83       	std	Y+3, r18	; 0x03
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	91 05       	cpc	r25, r1
    12c8:	49 f1       	breq	.+82     	; 0x131c <DIO_VidPullUp_Pin+0x76>
    12ca:	2b 81       	ldd	r18, Y+3	; 0x03
    12cc:	3c 81       	ldd	r19, Y+4	; 0x04
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	2c f4       	brge	.+10     	; 0x12de <DIO_VidPullUp_Pin+0x38>
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	61 f0       	breq	.+24     	; 0x12f4 <DIO_VidPullUp_Pin+0x4e>
    12dc:	5a c0       	rjmp	.+180    	; 0x1392 <DIO_VidPullUp_Pin+0xec>
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	71 f1       	breq	.+92     	; 0x1344 <DIO_VidPullUp_Pin+0x9e>
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	83 30       	cpi	r24, 0x03	; 3
    12ee:	91 05       	cpc	r25, r1
    12f0:	e9 f1       	breq	.+122    	; 0x136c <DIO_VidPullUp_Pin+0xc6>
    12f2:	4f c0       	rjmp	.+158    	; 0x1392 <DIO_VidPullUp_Pin+0xec>
		{
			case 0: SET_BIT(PORTA,Copy_u8Pin); break;
    12f4:	ab e3       	ldi	r26, 0x3B	; 59
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	eb e3       	ldi	r30, 0x3B	; 59
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_VidPullUp_Pin+0x6c>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_VidPullUp_Pin+0x68>
    1316:	84 2b       	or	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	3b c0       	rjmp	.+118    	; 0x1392 <DIO_VidPullUp_Pin+0xec>
			case 1: SET_BIT(PORTB,Copy_u8Pin); break;
    131c:	a8 e3       	ldi	r26, 0x38	; 56
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e8 e3       	ldi	r30, 0x38	; 56
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_VidPullUp_Pin+0x94>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_VidPullUp_Pin+0x90>
    133e:	84 2b       	or	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	27 c0       	rjmp	.+78     	; 0x1392 <DIO_VidPullUp_Pin+0xec>
			case 2: SET_BIT(PORTC,Copy_u8Pin); break;
    1344:	a5 e3       	ldi	r26, 0x35	; 53
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e5 e3       	ldi	r30, 0x35	; 53
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_VidPullUp_Pin+0xbc>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_VidPullUp_Pin+0xb8>
    1366:	84 2b       	or	r24, r20
    1368:	8c 93       	st	X, r24
    136a:	13 c0       	rjmp	.+38     	; 0x1392 <DIO_VidPullUp_Pin+0xec>
			case 3: SET_BIT(PORTD,Copy_u8Pin); break;
    136c:	a2 e3       	ldi	r26, 0x32	; 50
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e2 e3       	ldi	r30, 0x32	; 50
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_VidPullUp_Pin+0xe4>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO_VidPullUp_Pin+0xe0>
    138e:	84 2b       	or	r24, r20
    1390:	8c 93       	st	X, r24
			
		}
		
	}
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <DIO_VidPullDown_Pin>:
	
	void DIO_VidPullDown_Pin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <DIO_VidPullDown_Pin+0x6>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <DIO_VidPullDown_Pin+0x8>
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3c 83       	std	Y+4, r19	; 0x04
    13b8:	2b 83       	std	Y+3, r18	; 0x03
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	91 05       	cpc	r25, r1
    13c2:	59 f1       	breq	.+86     	; 0x141a <DIO_VidPullDown_Pin+0x7a>
    13c4:	2b 81       	ldd	r18, Y+3	; 0x03
    13c6:	3c 81       	ldd	r19, Y+4	; 0x04
    13c8:	22 30       	cpi	r18, 0x02	; 2
    13ca:	31 05       	cpc	r19, r1
    13cc:	2c f4       	brge	.+10     	; 0x13d8 <DIO_VidPullDown_Pin+0x38>
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	69 f0       	breq	.+26     	; 0x13f0 <DIO_VidPullDown_Pin+0x50>
    13d6:	5f c0       	rjmp	.+190    	; 0x1496 <DIO_VidPullDown_Pin+0xf6>
    13d8:	2b 81       	ldd	r18, Y+3	; 0x03
    13da:	3c 81       	ldd	r19, Y+4	; 0x04
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	89 f1       	breq	.+98     	; 0x1444 <DIO_VidPullDown_Pin+0xa4>
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	91 05       	cpc	r25, r1
    13ea:	09 f4       	brne	.+2      	; 0x13ee <DIO_VidPullDown_Pin+0x4e>
    13ec:	40 c0       	rjmp	.+128    	; 0x146e <DIO_VidPullDown_Pin+0xce>
    13ee:	53 c0       	rjmp	.+166    	; 0x1496 <DIO_VidPullDown_Pin+0xf6>
		{
			case 0: CLR_BIT(PORTA,Copy_u8Pin); break;
    13f0:	ab e3       	ldi	r26, 0x3B	; 59
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	eb e3       	ldi	r30, 0x3B	; 59
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_VidPullDown_Pin+0x6e>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_VidPullDown_Pin+0x6a>
    1412:	80 95       	com	r24
    1414:	84 23       	and	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	3e c0       	rjmp	.+124    	; 0x1496 <DIO_VidPullDown_Pin+0xf6>
			case 1: CLR_BIT(PORTB,Copy_u8Pin); break;
    141a:	a8 e3       	ldi	r26, 0x38	; 56
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e8 e3       	ldi	r30, 0x38	; 56
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_VidPullDown_Pin+0x98>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_VidPullDown_Pin+0x94>
    143c:	80 95       	com	r24
    143e:	84 23       	and	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	29 c0       	rjmp	.+82     	; 0x1496 <DIO_VidPullDown_Pin+0xf6>
			case 2: CLR_BIT(PORTC,Copy_u8Pin); break;
    1444:	a5 e3       	ldi	r26, 0x35	; 53
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e5 e3       	ldi	r30, 0x35	; 53
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <DIO_VidPullDown_Pin+0xc2>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <DIO_VidPullDown_Pin+0xbe>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	14 c0       	rjmp	.+40     	; 0x1496 <DIO_VidPullDown_Pin+0xf6>
			case 3: CLR_BIT(PORTD,Copy_u8Pin); break;
    146e:	a2 e3       	ldi	r26, 0x32	; 50
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e2 e3       	ldi	r30, 0x32	; 50
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_VidPullDown_Pin+0xec>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <DIO_VidPullDown_Pin+0xe8>
    1490:	80 95       	com	r24
    1492:	84 23       	and	r24, r20
    1494:	8c 93       	st	X, r24
			
		}
	}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <DIO_VidSetPort_Value>:

	void DIO_VidSetPort_Value(u8 Copy_u8Port,u8 Copy_u8Value)

	{if (Copy_u8Value==1)
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <DIO_VidSetPort_Value+0x6>
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <DIO_VidSetPort_Value+0x8>
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <DIO_VidSetPort_Value+0xa>
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	6a 83       	std	Y+2, r22	; 0x02
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	99 f5       	brne	.+102    	; 0x1522 <DIO_VidSetPort_Value+0x7e>
		{switch(Copy_u8Port)
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	3e 83       	std	Y+6, r19	; 0x06
    14c4:	2d 83       	std	Y+5, r18	; 0x05
    14c6:	8d 81       	ldd	r24, Y+5	; 0x05
    14c8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	91 05       	cpc	r25, r1
    14ce:	d1 f0       	breq	.+52     	; 0x1504 <DIO_VidSetPort_Value+0x60>
    14d0:	2d 81       	ldd	r18, Y+5	; 0x05
    14d2:	3e 81       	ldd	r19, Y+6	; 0x06
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	2c f4       	brge	.+10     	; 0x14e4 <DIO_VidSetPort_Value+0x40>
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	61 f0       	breq	.+24     	; 0x14fa <DIO_VidSetPort_Value+0x56>
    14e2:	50 c0       	rjmp	.+160    	; 0x1584 <DIO_VidSetPort_Value+0xe0>
    14e4:	2d 81       	ldd	r18, Y+5	; 0x05
    14e6:	3e 81       	ldd	r19, Y+6	; 0x06
    14e8:	22 30       	cpi	r18, 0x02	; 2
    14ea:	31 05       	cpc	r19, r1
    14ec:	81 f0       	breq	.+32     	; 0x150e <DIO_VidSetPort_Value+0x6a>
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	83 30       	cpi	r24, 0x03	; 3
    14f4:	91 05       	cpc	r25, r1
    14f6:	81 f0       	breq	.+32     	; 0x1518 <DIO_VidSetPort_Value+0x74>
    14f8:	45 c0       	rjmp	.+138    	; 0x1584 <DIO_VidSetPort_Value+0xe0>
				{
					case 0: SET_PORT(PORTA); break;
    14fa:	eb e3       	ldi	r30, 0x3B	; 59
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	80 83       	st	Z, r24
    1502:	40 c0       	rjmp	.+128    	; 0x1584 <DIO_VidSetPort_Value+0xe0>
					case 1: SET_PORT(PORTB); break;
    1504:	e8 e3       	ldi	r30, 0x38	; 56
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	8f ef       	ldi	r24, 0xFF	; 255
    150a:	80 83       	st	Z, r24
    150c:	3b c0       	rjmp	.+118    	; 0x1584 <DIO_VidSetPort_Value+0xe0>
					case 2: SET_PORT(PORTC); break;
    150e:	e5 e3       	ldi	r30, 0x35	; 53
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	8f ef       	ldi	r24, 0xFF	; 255
    1514:	80 83       	st	Z, r24
    1516:	36 c0       	rjmp	.+108    	; 0x1584 <DIO_VidSetPort_Value+0xe0>
					case 3: SET_PORT(PORTD); break;
    1518:	e2 e3       	ldi	r30, 0x32	; 50
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	80 83       	st	Z, r24
    1520:	31 c0       	rjmp	.+98     	; 0x1584 <DIO_VidSetPort_Value+0xe0>

				}
		}
	else if(Copy_u8Value==0)
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	88 23       	and	r24, r24
    1526:	71 f5       	brne	.+92     	; 0x1584 <DIO_VidSetPort_Value+0xe0>
	{

		switch(Copy_u8Port)
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	3c 83       	std	Y+4, r19	; 0x04
    1530:	2b 83       	std	Y+3, r18	; 0x03
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	9c 81       	ldd	r25, Y+4	; 0x04
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	91 05       	cpc	r25, r1
    153a:	c9 f0       	breq	.+50     	; 0x156e <DIO_VidSetPort_Value+0xca>
    153c:	2b 81       	ldd	r18, Y+3	; 0x03
    153e:	3c 81       	ldd	r19, Y+4	; 0x04
    1540:	22 30       	cpi	r18, 0x02	; 2
    1542:	31 05       	cpc	r19, r1
    1544:	2c f4       	brge	.+10     	; 0x1550 <DIO_VidSetPort_Value+0xac>
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	61 f0       	breq	.+24     	; 0x1566 <DIO_VidSetPort_Value+0xc2>
    154e:	1a c0       	rjmp	.+52     	; 0x1584 <DIO_VidSetPort_Value+0xe0>
    1550:	2b 81       	ldd	r18, Y+3	; 0x03
    1552:	3c 81       	ldd	r19, Y+4	; 0x04
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	31 05       	cpc	r19, r1
    1558:	71 f0       	breq	.+28     	; 0x1576 <DIO_VidSetPort_Value+0xd2>
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	9c 81       	ldd	r25, Y+4	; 0x04
    155e:	83 30       	cpi	r24, 0x03	; 3
    1560:	91 05       	cpc	r25, r1
    1562:	69 f0       	breq	.+26     	; 0x157e <DIO_VidSetPort_Value+0xda>
    1564:	0f c0       	rjmp	.+30     	; 0x1584 <DIO_VidSetPort_Value+0xe0>
						{
							case 0: CLR_PORT(PORTA); break;
    1566:	eb e3       	ldi	r30, 0x3B	; 59
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	10 82       	st	Z, r1
    156c:	0b c0       	rjmp	.+22     	; 0x1584 <DIO_VidSetPort_Value+0xe0>
							case 1: CLR_PORT(PORTB); break;
    156e:	e8 e3       	ldi	r30, 0x38	; 56
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	10 82       	st	Z, r1
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <DIO_VidSetPort_Value+0xe0>
							case 2: CLR_PORT(PORTC); break;
    1576:	e5 e3       	ldi	r30, 0x35	; 53
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	10 82       	st	Z, r1
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <DIO_VidSetPort_Value+0xe0>
							case 3: CLR_PORT(PORTD); break;
    157e:	e2 e3       	ldi	r30, 0x32	; 50
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	10 82       	st	Z, r1

						}
	}
	}
    1584:	26 96       	adiw	r28, 0x06	; 6
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <I2C_send_start>:
#include"BIT_MATH.h"
#include "DIO_Interface.h"
#include"I2C_PRIVATE.h"
#include "I2C_config.h"
 u8 I2C_send_start(void )
 {
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	0f 92       	push	r0
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
	 // start bit condition
	 TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    15a0:	e6 e5       	ldi	r30, 0x56	; 86
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	84 ea       	ldi	r24, 0xA4	; 164
    15a6:	80 83       	st	Z, r24
	 while(GET_BIT(TWCR,TWINT)==0);  // wait the flag
    15a8:	e6 e5       	ldi	r30, 0x56	; 86
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	88 23       	and	r24, r24
    15b0:	dc f7       	brge	.-10     	; 0x15a8 <I2C_send_start+0x12>
	 if ((TWSR & 0xF8) != 0x08){return 0;}
    15b2:	e1 e2       	ldi	r30, 0x21	; 33
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	88 7f       	andi	r24, 0xF8	; 248
    15be:	90 70       	andi	r25, 0x00	; 0
    15c0:	88 30       	cpi	r24, 0x08	; 8
    15c2:	91 05       	cpc	r25, r1
    15c4:	11 f0       	breq	.+4      	; 0x15ca <I2C_send_start+0x34>
    15c6:	19 82       	std	Y+1, r1	; 0x01
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <I2C_send_start+0x38>
	 else{return 1;}
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
 }
    15d0:	0f 90       	pop	r0
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <I2C_select_slave>:
 u8 I2C_select_slave(u8 Copy_slave_add,u8 Copy_W_R)
 {u8 status=0;
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	00 d0       	rcall	.+0      	; 0x15de <I2C_select_slave+0x6>
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <I2C_select_slave+0x8>
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	8a 83       	std	Y+2, r24	; 0x02
    15e6:	6b 83       	std	Y+3, r22	; 0x03
    15e8:	19 82       	std	Y+1, r1	; 0x01
	 if (Copy_W_R==0)         // write
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	88 23       	and	r24, r24
    15ee:	99 f4       	brne	.+38     	; 0x1616 <I2C_select_slave+0x3e>
	 {TWDR=(Copy_slave_add<<1);
    15f0:	e3 e2       	ldi	r30, 0x23	; 35
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	88 0f       	add	r24, r24
    15f8:	80 83       	st	Z, r24
	  TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    15fa:	e6 e5       	ldi	r30, 0x56	; 86
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	84 ec       	ldi	r24, 0xC4	; 196
    1600:	80 83       	st	Z, r24
	  while(GET_BIT(TWCR,TWINT)==0);  // wait the flag
    1602:	e6 e5       	ldi	r30, 0x56	; 86
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	88 23       	and	r24, r24
    160a:	dc f7       	brge	.-10     	; 0x1602 <I2C_select_slave+0x2a>
	  if ((TWSR & 0xF8) != 18) {status= 0;}   // no ACK
    160c:	e1 e2       	ldi	r30, 0x21	; 33
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	19 82       	std	Y+1, r1	; 0x01
    1614:	23 c0       	rjmp	.+70     	; 0x165c <I2C_select_slave+0x84>
	  else {status= 1;}
	 }
	 else if(Copy_W_R==1)   // read
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	01 f5       	brne	.+64     	; 0x165c <I2C_select_slave+0x84>
	 {TWDR=(Copy_slave_add<<1)|1;
    161c:	e3 e2       	ldi	r30, 0x23	; 35
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	81 60       	ori	r24, 0x01	; 1
    162c:	80 83       	st	Z, r24
	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    162e:	e6 e5       	ldi	r30, 0x56	; 86
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	84 ec       	ldi	r24, 0xC4	; 196
    1634:	80 83       	st	Z, r24
	 while(GET_BIT(TWCR,7)==0);  // wait the flag
    1636:	e6 e5       	ldi	r30, 0x56	; 86
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	88 23       	and	r24, r24
    163e:	dc f7       	brge	.-10     	; 0x1636 <I2C_select_slave+0x5e>
	 if ((TWSR & 0xF8) != 40) {status= 0;}   // no ACK
    1640:	e1 e2       	ldi	r30, 0x21	; 33
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	88 7f       	andi	r24, 0xF8	; 248
    164c:	90 70       	andi	r25, 0x00	; 0
    164e:	88 32       	cpi	r24, 0x28	; 40
    1650:	91 05       	cpc	r25, r1
    1652:	11 f0       	breq	.+4      	; 0x1658 <I2C_select_slave+0x80>
    1654:	19 82       	std	Y+1, r1	; 0x01
    1656:	02 c0       	rjmp	.+4      	; 0x165c <I2C_select_slave+0x84>
	 else {status= 1;}
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	89 83       	std	Y+1, r24	; 0x01
	 }
	 return status;
    165c:	89 81       	ldd	r24, Y+1	; 0x01
 }
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <I2C_send_data>:

 u8 I2C_send_data(u8 Copy_data)
 {
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	00 d0       	rcall	.+0      	; 0x1672 <I2C_send_data+0x6>
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	89 83       	std	Y+1, r24	; 0x01

	 TWDR =Copy_data;
    1678:	e3 e2       	ldi	r30, 0x23	; 35
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	80 83       	st	Z, r24
	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1680:	e6 e5       	ldi	r30, 0x56	; 86
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	84 ec       	ldi	r24, 0xC4	; 196
    1686:	80 83       	st	Z, r24
	 while (GET_BIT(TWCR,TWINT)==0);  // wait flag
    1688:	e6 e5       	ldi	r30, 0x56	; 86
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	88 23       	and	r24, r24
    1690:	dc f7       	brge	.-10     	; 0x1688 <I2C_send_data+0x1c>
	 if ((TWSR & 0xF8) != 28){return 0;}
    1692:	e1 e2       	ldi	r30, 0x21	; 33
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	80 e0       	ldi	r24, 0x00	; 0
	 else{return 1;}

 }
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <I2C_recive_data>:

 u8 I2C_recive_data(u8 *status)
 {u8 Temp=0;
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <I2C_recive_data+0x6>
    16aa:	0f 92       	push	r0
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	9b 83       	std	Y+3, r25	; 0x03
    16b2:	8a 83       	std	Y+2, r24	; 0x02
    16b4:	19 82       	std	Y+1, r1	; 0x01


 	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA)  ;
    16b6:	e6 e5       	ldi	r30, 0x56	; 86
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	84 ec       	ldi	r24, 0xC4	; 196
    16bc:	80 83       	st	Z, r24
 	 while (GET_BIT(TWCR,TWINT)==0);  // wait flag
    16be:	e6 e5       	ldi	r30, 0x56	; 86
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	88 23       	and	r24, r24
    16c6:	dc f7       	brge	.-10     	; 0x16be <I2C_recive_data+0x1a>

 	 if((TWSR & 0xf8) == 0x60)   // status =received address
    16c8:	e1 e2       	ldi	r30, 0x21	; 33
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	88 7f       	andi	r24, 0xF8	; 248
    16d4:	90 70       	andi	r25, 0x00	; 0
    16d6:	80 36       	cpi	r24, 0x60	; 96
    16d8:	91 05       	cpc	r25, r1
    16da:	71 f4       	brne	.+28     	; 0x16f8 <I2C_recive_data+0x54>
 	 {
 		 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA)  ;  //start again to skip the address byte
    16dc:	e6 e5       	ldi	r30, 0x56	; 86
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	84 ec       	ldi	r24, 0xC4	; 196
    16e2:	80 83       	st	Z, r24
 		 while (GET_BIT(TWCR,TWINT)==0);  // wait flag
    16e4:	e6 e5       	ldi	r30, 0x56	; 86
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	88 23       	and	r24, r24
    16ec:	dc f7       	brge	.-10     	; 0x16e4 <I2C_recive_data+0x40>
 		 Temp=TWDR;
    16ee:	e3 e2       	ldi	r30, 0x23	; 35
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	04 c0       	rjmp	.+8      	; 0x1700 <I2C_recive_data+0x5c>
 	 }
 	 else
 	 {Temp=TWDR;}
    16f8:	e3 e2       	ldi	r30, 0x23	; 35
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	89 83       	std	Y+1, r24	; 0x01

 	if (status!= NULL)
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	9b 81       	ldd	r25, Y+3	; 0x03
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	91 f0       	breq	.+36     	; 0x172c <I2C_recive_data+0x88>
 	{if ((TWSR & 0xF8) != 80){*status= 0;}
    1708:	e1 e2       	ldi	r30, 0x21	; 33
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	88 7f       	andi	r24, 0xF8	; 248
    1714:	90 70       	andi	r25, 0x00	; 0
    1716:	80 35       	cpi	r24, 0x50	; 80
    1718:	91 05       	cpc	r25, r1
    171a:	21 f0       	breq	.+8      	; 0x1724 <I2C_recive_data+0x80>
    171c:	ea 81       	ldd	r30, Y+2	; 0x02
    171e:	fb 81       	ldd	r31, Y+3	; 0x03
    1720:	10 82       	st	Z, r1
    1722:	04 c0       	rjmp	.+8      	; 0x172c <I2C_recive_data+0x88>
 	else{*status= 1;}
    1724:	ea 81       	ldd	r30, Y+2	; 0x02
    1726:	fb 81       	ldd	r31, Y+3	; 0x03
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	80 83       	st	Z, r24
 	}
 	return Temp;
    172c:	89 81       	ldd	r24, Y+1	; 0x01
 }
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <I2C_Slave_recive_data>:
 u8 I2C_Slave_recive_data(u8 *status)
 {u8 Temp=0;
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	00 d0       	rcall	.+0      	; 0x1740 <I2C_Slave_recive_data+0x6>
    1740:	0f 92       	push	r0
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	9b 83       	std	Y+3, r25	; 0x03
    1748:	8a 83       	std	Y+2, r24	; 0x02
    174a:	19 82       	std	Y+1, r1	; 0x01


 	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA)  ;
    174c:	e6 e5       	ldi	r30, 0x56	; 86
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	84 ec       	ldi	r24, 0xC4	; 196
    1752:	80 83       	st	Z, r24
 	 while (GET_BIT(TWCR,TWINT)==0);  // wait flag
    1754:	e6 e5       	ldi	r30, 0x56	; 86
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	88 23       	and	r24, r24
    175c:	dc f7       	brge	.-10     	; 0x1754 <I2C_Slave_recive_data+0x1a>

 	 if((TWSR & 0xf8) == 0x60)   // status =received address
    175e:	e1 e2       	ldi	r30, 0x21	; 33
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	88 7f       	andi	r24, 0xF8	; 248
    176a:	90 70       	andi	r25, 0x00	; 0
    176c:	80 36       	cpi	r24, 0x60	; 96
    176e:	91 05       	cpc	r25, r1
    1770:	71 f4       	brne	.+28     	; 0x178e <I2C_Slave_recive_data+0x54>
 	 {
 		 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA)  ;  //start again to skip the address byte
    1772:	e6 e5       	ldi	r30, 0x56	; 86
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	84 ec       	ldi	r24, 0xC4	; 196
    1778:	80 83       	st	Z, r24
 		 while (GET_BIT(TWCR,TWINT)==0);  // wait flag
    177a:	e6 e5       	ldi	r30, 0x56	; 86
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	88 23       	and	r24, r24
    1782:	dc f7       	brge	.-10     	; 0x177a <I2C_Slave_recive_data+0x40>
 		 Temp=TWDR;
    1784:	e3 e2       	ldi	r30, 0x23	; 35
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	04 c0       	rjmp	.+8      	; 0x1796 <I2C_Slave_recive_data+0x5c>
 	 }
 	 else
 	 {Temp=TWDR;}
    178e:	e3 e2       	ldi	r30, 0x23	; 35
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	89 83       	std	Y+1, r24	; 0x01

 	if (status!= NULL)
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	9b 81       	ldd	r25, Y+3	; 0x03
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	91 f0       	breq	.+36     	; 0x17c2 <I2C_Slave_recive_data+0x88>
 	{if ((TWSR & 0xF8) != 80){*status= 0;}
    179e:	e1 e2       	ldi	r30, 0x21	; 33
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	88 7f       	andi	r24, 0xF8	; 248
    17aa:	90 70       	andi	r25, 0x00	; 0
    17ac:	80 35       	cpi	r24, 0x50	; 80
    17ae:	91 05       	cpc	r25, r1
    17b0:	21 f0       	breq	.+8      	; 0x17ba <I2C_Slave_recive_data+0x80>
    17b2:	ea 81       	ldd	r30, Y+2	; 0x02
    17b4:	fb 81       	ldd	r31, Y+3	; 0x03
    17b6:	10 82       	st	Z, r1
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <I2C_Slave_recive_data+0x88>
 	else{*status= 1;}
    17ba:	ea 81       	ldd	r30, Y+2	; 0x02
    17bc:	fb 81       	ldd	r31, Y+3	; 0x03
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	80 83       	st	Z, r24
 	}
 	return Temp;
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
 }
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <I2C_stop>:
void I2C_stop(void )
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    17d8:	e6 e5       	ldi	r30, 0x56	; 86
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	84 e9       	ldi	r24, 0x94	; 148
    17de:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWSTO)));  // wait till slop flag
    17e0:	e6 e5       	ldi	r30, 0x56	; 86
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	80 71       	andi	r24, 0x10	; 16
    17ec:	90 70       	andi	r25, 0x00	; 0
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	b9 f3       	breq	.-18     	; 0x17e0 <I2C_stop+0x10>
}
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <I2C_master_init>:

void I2C_master_init(void )
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
	TWBR=32;		  // bit rate
    1800:	e0 e2       	ldi	r30, 0x20	; 32
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 e2       	ldi	r24, 0x20	; 32
    1806:	80 83       	st	Z, r24
	TWSR=(0<<TWPS1)|(0<<TWPS1);     //prescaler
    1808:	e1 e2       	ldi	r30, 0x21	; 33
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	10 82       	st	Z, r1
	TWAR=10<<1;       /// 0000 or 1111
    180e:	e2 e2       	ldi	r30, 0x22	; 34
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	84 e1       	ldi	r24, 0x14	; 20
    1814:	80 83       	st	Z, r24
	TWCR=(1<<TWEN)|(1<<TWEA);
    1816:	e6 e5       	ldi	r30, 0x56	; 86
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	84 e4       	ldi	r24, 0x44	; 68
    181c:	80 83       	st	Z, r24

}
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <I2C_slave_init>:


void I2C_slave_init(void )
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
	TWAR=5<<1;                     /// 0000 or 1111   address
    182c:	e2 e2       	ldi	r30, 0x22	; 34
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	8a e0       	ldi	r24, 0x0A	; 10
    1832:	80 83       	st	Z, r24
	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1834:	e6 e5       	ldi	r30, 0x56	; 86
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	84 ec       	ldi	r24, 0xC4	; 196
    183a:	80 83       	st	Z, r24

}
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <main>:
#define command 3
u8 flag=0;
void Receive_2Byte(u8* Copy_char,u8* Copy_command);
void LCD_init(void);
void main (void)
{u8 byte1=0,byte2=0;
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	67 97       	sbiw	r28, 0x17	; 23
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	1a 82       	std	Y+2, r1	; 0x02
    1858:	1b 82       	std	Y+3, r1	; 0x03
 u8 arr[20]={0};
    185a:	84 e1       	ldi	r24, 0x14	; 20
    185c:	fe 01       	movw	r30, r28
    185e:	34 96       	adiw	r30, 0x04	; 4
    1860:	df 01       	movw	r26, r30
    1862:	98 2f       	mov	r25, r24
    1864:	1d 92       	st	X+, r1
    1866:	9a 95       	dec	r25
    1868:	e9 f7       	brne	.-6      	; 0x1864 <main+0x22>
 u8 i=0;
    186a:	19 82       	std	Y+1, r1	; 0x01
 	 LCD_init();
    186c:	0e 94 a9 0c 	call	0x1952	; 0x1952 <LCD_init>
	I2C_slave_init();
    1870:	0e 94 12 0c 	call	0x1824	; 0x1824 <I2C_slave_init>
	LCD_VidSendStr("/");
	LCD_VidSendNum(arr[2]);
	*/
while(1)
{
		Receive_2Byte(&byte1,&byte2);
    1874:	ce 01       	movw	r24, r28
    1876:	02 96       	adiw	r24, 0x02	; 2
    1878:	9e 01       	movw	r18, r28
    187a:	2d 5f       	subi	r18, 0xFD	; 253
    187c:	3f 4f       	sbci	r19, 0xFF	; 255
    187e:	b9 01       	movw	r22, r18
    1880:	0e 94 83 0c 	call	0x1906	; 0x1906 <Receive_2Byte>
		if (byte1==command){LCD_VidSendCommand(byte2);flag=0;}
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	31 f4       	brne	.+12     	; 0x1896 <main+0x54>
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidSendCommand>
    1890:	10 92 68 00 	sts	0x0068, r1
    1894:	ef cf       	rjmp	.-34     	; 0x1874 <main+0x32>
		else if (byte1==Num){LCD_VidSendNum(byte2);flag=0;}
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	41 f4       	brne	.+16     	; 0x18ac <main+0x6a>
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_VidSendNum>
    18a6:	10 92 68 00 	sts	0x0068, r1
    18aa:	e4 cf       	rjmp	.-56     	; 0x1874 <main+0x32>
		else if(byte1==Str)
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	82 30       	cpi	r24, 0x02	; 2
    18b0:	09 f7       	brne	.-62     	; 0x1874 <main+0x32>
    18b2:	15 c0       	rjmp	.+42     	; 0x18de <main+0x9c>
		{while(byte2!='\0')
			{
				arr[i]=byte2;i++;
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	4b 81       	ldd	r20, Y+3	; 0x03
    18bc:	ce 01       	movw	r24, r28
    18be:	04 96       	adiw	r24, 0x04	; 4
    18c0:	fc 01       	movw	r30, r24
    18c2:	e2 0f       	add	r30, r18
    18c4:	f3 1f       	adc	r31, r19
    18c6:	40 83       	st	Z, r20
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	8f 5f       	subi	r24, 0xFF	; 255
    18cc:	89 83       	std	Y+1, r24	; 0x01
				Receive_2Byte(&byte1,&byte2);
    18ce:	ce 01       	movw	r24, r28
    18d0:	02 96       	adiw	r24, 0x02	; 2
    18d2:	9e 01       	movw	r18, r28
    18d4:	2d 5f       	subi	r18, 0xFD	; 253
    18d6:	3f 4f       	sbci	r19, 0xFF	; 255
    18d8:	b9 01       	movw	r22, r18
    18da:	0e 94 83 0c 	call	0x1906	; 0x1906 <Receive_2Byte>
{
		Receive_2Byte(&byte1,&byte2);
		if (byte1==command){LCD_VidSendCommand(byte2);flag=0;}
		else if (byte1==Num){LCD_VidSendNum(byte2);flag=0;}
		else if(byte1==Str)
		{while(byte2!='\0')
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	88 23       	and	r24, r24
    18e2:	41 f7       	brne	.-48     	; 0x18b4 <main+0x72>
			{
				arr[i]=byte2;i++;
				Receive_2Byte(&byte1,&byte2);

			}
		arr[i]='\0';i=0;flag=0;
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	ce 01       	movw	r24, r28
    18ec:	04 96       	adiw	r24, 0x04	; 4
    18ee:	fc 01       	movw	r30, r24
    18f0:	e2 0f       	add	r30, r18
    18f2:	f3 1f       	adc	r31, r19
    18f4:	10 82       	st	Z, r1
    18f6:	19 82       	std	Y+1, r1	; 0x01
    18f8:	10 92 68 00 	sts	0x0068, r1
		LCD_VidSendStr(arr);
    18fc:	ce 01       	movw	r24, r28
    18fe:	04 96       	adiw	r24, 0x04	; 4
    1900:	0e 94 da 10 	call	0x21b4	; 0x21b4 <LCD_VidSendStr>
    1904:	b7 cf       	rjmp	.-146    	; 0x1874 <main+0x32>

00001906 <Receive_2Byte>:
//			LCD_VidCLR();
	//while(1);
}

void Receive_2Byte(u8* Copy_byte1,u8* Copy_byte2)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	00 d0       	rcall	.+0      	; 0x190c <Receive_2Byte+0x6>
    190c:	00 d0       	rcall	.+0      	; 0x190e <Receive_2Byte+0x8>
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	7c 83       	std	Y+4, r23	; 0x04
    1918:	6b 83       	std	Y+3, r22	; 0x03
	if (flag==0){*Copy_byte1=I2C_Slave_recive_data(NULL);};
    191a:	80 91 68 00 	lds	r24, 0x0068
    191e:	88 23       	and	r24, r24
    1920:	39 f4       	brne	.+14     	; 0x1930 <Receive_2Byte+0x2a>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 9d 0b 	call	0x173a	; 0x173a <I2C_Slave_recive_data>
    192a:	e9 81       	ldd	r30, Y+1	; 0x01
    192c:	fa 81       	ldd	r31, Y+2	; 0x02
    192e:	80 83       	st	Z, r24
	flag=1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	80 93 68 00 	sts	0x0068, r24
	*Copy_byte2= I2C_Slave_recive_data(NULL);
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	0e 94 9d 0b 	call	0x173a	; 0x173a <I2C_Slave_recive_data>
    193e:	eb 81       	ldd	r30, Y+3	; 0x03
    1940:	fc 81       	ldd	r31, Y+4	; 0x04
    1942:	80 83       	st	Z, r24
}
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <LCD_init>:
void LCD_init(void)
{
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPort_Direction(Data_Port,1);
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_VidSetPort_Direction>
	DIO_VidSetPin_Direction(Control_Port,RS,1);
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPin_Direction>
	DIO_VidSetPin_Direction(Control_Port,RW,1);
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	61 e0       	ldi	r22, 0x01	; 1
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPin_Direction>
	DIO_VidSetPin_Direction(Control_Port,E,1);
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	62 e0       	ldi	r22, 0x02	; 2
    197a:	41 e0       	ldi	r20, 0x01	; 1
    197c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPin_Direction>
}
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <LCD_VidSendData>:
#include"DIO_Interface.h"
#include"LCD_interface.h"
#include "LCD_cofig.h"

void LCD_VidSendData(u8 Copy_u8Data)
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	6d 97       	sbiw	r28, 0x1d	; 29
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	41 e0       	ldi	r20, 0x01	; 1
    19a2:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	61 e0       	ldi	r22, 0x01	; 1
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPin_Value>
	DIO_VidWriteOnPort(Data_Port,Copy_u8Data);
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    19b4:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	62 e0       	ldi	r22, 0x02	; 2
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPin_Value>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a0 e2       	ldi	r26, 0x20	; 32
    19c8:	b1 e4       	ldi	r27, 0x41	; 65
    19ca:	89 8f       	std	Y+25, r24	; 0x19
    19cc:	9a 8f       	std	Y+26, r25	; 0x1a
    19ce:	ab 8f       	std	Y+27, r26	; 0x1b
    19d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d2:	69 8d       	ldd	r22, Y+25	; 0x19
    19d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	4a ef       	ldi	r20, 0xFA	; 250
    19e0:	54 e4       	ldi	r21, 0x44	; 68
    19e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	8d 8b       	std	Y+21, r24	; 0x15
    19ec:	9e 8b       	std	Y+22, r25	; 0x16
    19ee:	af 8b       	std	Y+23, r26	; 0x17
    19f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19f2:	6d 89       	ldd	r22, Y+21	; 0x15
    19f4:	7e 89       	ldd	r23, Y+22	; 0x16
    19f6:	8f 89       	ldd	r24, Y+23	; 0x17
    19f8:	98 8d       	ldd	r25, Y+24	; 0x18
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e8       	ldi	r20, 0x80	; 128
    1a00:	5f e3       	ldi	r21, 0x3F	; 63
    1a02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a06:	88 23       	and	r24, r24
    1a08:	2c f4       	brge	.+10     	; 0x1a14 <LCD_VidSendData+0x8e>
		__ticks = 1;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9c 8b       	std	Y+20, r25	; 0x14
    1a10:	8b 8b       	std	Y+19, r24	; 0x13
    1a12:	3f c0       	rjmp	.+126    	; 0x1a92 <LCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    1a14:	6d 89       	ldd	r22, Y+21	; 0x15
    1a16:	7e 89       	ldd	r23, Y+22	; 0x16
    1a18:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	3f ef       	ldi	r19, 0xFF	; 255
    1a20:	4f e7       	ldi	r20, 0x7F	; 127
    1a22:	57 e4       	ldi	r21, 0x47	; 71
    1a24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a28:	18 16       	cp	r1, r24
    1a2a:	4c f5       	brge	.+82     	; 0x1a7e <LCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e2       	ldi	r20, 0x20	; 32
    1a3a:	51 e4       	ldi	r21, 0x41	; 65
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	bc 01       	movw	r22, r24
    1a46:	cd 01       	movw	r24, r26
    1a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	9c 8b       	std	Y+20, r25	; 0x14
    1a52:	8b 8b       	std	Y+19, r24	; 0x13
    1a54:	0f c0       	rjmp	.+30     	; 0x1a74 <LCD_VidSendData+0xee>
    1a56:	88 ec       	ldi	r24, 0xC8	; 200
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9a 8b       	std	Y+18, r25	; 0x12
    1a5c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a5e:	89 89       	ldd	r24, Y+17	; 0x11
    1a60:	9a 89       	ldd	r25, Y+18	; 0x12
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <LCD_VidSendData+0xdc>
    1a66:	9a 8b       	std	Y+18, r25	; 0x12
    1a68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	9c 8b       	std	Y+20, r25	; 0x14
    1a72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a74:	8b 89       	ldd	r24, Y+19	; 0x13
    1a76:	9c 89       	ldd	r25, Y+20	; 0x14
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	69 f7       	brne	.-38     	; 0x1a56 <LCD_VidSendData+0xd0>
    1a7c:	14 c0       	rjmp	.+40     	; 0x1aa6 <LCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a80:	7e 89       	ldd	r23, Y+22	; 0x16
    1a82:	8f 89       	ldd	r24, Y+23	; 0x17
    1a84:	98 8d       	ldd	r25, Y+24	; 0x18
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9c 8b       	std	Y+20, r25	; 0x14
    1a90:	8b 8b       	std	Y+19, r24	; 0x13
    1a92:	8b 89       	ldd	r24, Y+19	; 0x13
    1a94:	9c 89       	ldd	r25, Y+20	; 0x14
    1a96:	98 8b       	std	Y+16, r25	; 0x10
    1a98:	8f 87       	std	Y+15, r24	; 0x0f
    1a9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a9c:	98 89       	ldd	r25, Y+16	; 0x10
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <LCD_VidSendData+0x118>
    1aa2:	98 8b       	std	Y+16, r25	; 0x10
    1aa4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	62 e0       	ldi	r22, 0x02	; 2
    1aaa:	40 e0       	ldi	r20, 0x00	; 0
    1aac:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPin_Value>
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a0 e2       	ldi	r26, 0x20	; 32
    1ab6:	b1 e4       	ldi	r27, 0x41	; 65
    1ab8:	8b 87       	std	Y+11, r24	; 0x0b
    1aba:	9c 87       	std	Y+12, r25	; 0x0c
    1abc:	ad 87       	std	Y+13, r26	; 0x0d
    1abe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	4a ef       	ldi	r20, 0xFA	; 250
    1ace:	54 e4       	ldi	r21, 0x44	; 68
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	8f 83       	std	Y+7, r24	; 0x07
    1ada:	98 87       	std	Y+8, r25	; 0x08
    1adc:	a9 87       	std	Y+9, r26	; 0x09
    1ade:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e8       	ldi	r20, 0x80	; 128
    1aee:	5f e3       	ldi	r21, 0x3F	; 63
    1af0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af4:	88 23       	and	r24, r24
    1af6:	2c f4       	brge	.+10     	; 0x1b02 <LCD_VidSendData+0x17c>
		__ticks = 1;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
    1b00:	3f c0       	rjmp	.+126    	; 0x1b80 <LCD_VidSendData+0x1fa>
	else if (__tmp > 65535)
    1b02:	6f 81       	ldd	r22, Y+7	; 0x07
    1b04:	78 85       	ldd	r23, Y+8	; 0x08
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	3f ef       	ldi	r19, 0xFF	; 255
    1b0e:	4f e7       	ldi	r20, 0x7F	; 127
    1b10:	57 e4       	ldi	r21, 0x47	; 71
    1b12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b16:	18 16       	cp	r1, r24
    1b18:	4c f5       	brge	.+82     	; 0x1b6c <LCD_VidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e2       	ldi	r20, 0x20	; 32
    1b28:	51 e4       	ldi	r21, 0x41	; 65
    1b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	8d 83       	std	Y+5, r24	; 0x05
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <LCD_VidSendData+0x1dc>
    1b44:	88 ec       	ldi	r24, 0xC8	; 200
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9c 83       	std	Y+4, r25	; 0x04
    1b4a:	8b 83       	std	Y+3, r24	; 0x03
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <LCD_VidSendData+0x1ca>
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	69 f7       	brne	.-38     	; 0x1b44 <LCD_VidSendData+0x1be>
    1b6a:	14 c0       	rjmp	.+40     	; 0x1b94 <LCD_VidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6e:	78 85       	ldd	r23, Y+8	; 0x08
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
    1b80:	8d 81       	ldd	r24, Y+5	; 0x05
    1b82:	9e 81       	ldd	r25, Y+6	; 0x06
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <LCD_VidSendData+0x206>
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    1b94:	6d 96       	adiw	r28, 0x1d	; 29
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <LCD_VidSendCommand>:
void LCD_VidSendCommand(u8 Copy_u8Data)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	6d 97       	sbiw	r28, 0x1d	; 29
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPin_Value(Control_Port,RS,0);   //rs=0   data
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPin_Value>
	DIO_VidWriteOnPort(Data_Port,Copy_u8Data);
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1bd4:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	62 e0       	ldi	r22, 0x02	; 2
    1bdc:	41 e0       	ldi	r20, 0x01	; 1
    1bde:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPin_Value>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	a0 e2       	ldi	r26, 0x20	; 32
    1be8:	b1 e4       	ldi	r27, 0x41	; 65
    1bea:	89 8f       	std	Y+25, r24	; 0x19
    1bec:	9a 8f       	std	Y+26, r25	; 0x1a
    1bee:	ab 8f       	std	Y+27, r26	; 0x1b
    1bf0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	4a ef       	ldi	r20, 0xFA	; 250
    1c00:	54 e4       	ldi	r21, 0x44	; 68
    1c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	8d 8b       	std	Y+21, r24	; 0x15
    1c0c:	9e 8b       	std	Y+22, r25	; 0x16
    1c0e:	af 8b       	std	Y+23, r26	; 0x17
    1c10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c12:	6d 89       	ldd	r22, Y+21	; 0x15
    1c14:	7e 89       	ldd	r23, Y+22	; 0x16
    1c16:	8f 89       	ldd	r24, Y+23	; 0x17
    1c18:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e8       	ldi	r20, 0x80	; 128
    1c20:	5f e3       	ldi	r21, 0x3F	; 63
    1c22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c26:	88 23       	and	r24, r24
    1c28:	2c f4       	brge	.+10     	; 0x1c34 <LCD_VidSendCommand+0x8e>
		__ticks = 1;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9c 8b       	std	Y+20, r25	; 0x14
    1c30:	8b 8b       	std	Y+19, r24	; 0x13
    1c32:	3f c0       	rjmp	.+126    	; 0x1cb2 <LCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    1c34:	6d 89       	ldd	r22, Y+21	; 0x15
    1c36:	7e 89       	ldd	r23, Y+22	; 0x16
    1c38:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	4c f5       	brge	.+82     	; 0x1c9e <LCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e2       	ldi	r20, 0x20	; 32
    1c5a:	51 e4       	ldi	r21, 0x41	; 65
    1c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9c 8b       	std	Y+20, r25	; 0x14
    1c72:	8b 8b       	std	Y+19, r24	; 0x13
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <LCD_VidSendCommand+0xee>
    1c76:	88 ec       	ldi	r24, 0xC8	; 200
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	9a 8b       	std	Y+18, r25	; 0x12
    1c7c:	89 8b       	std	Y+17, r24	; 0x11
    1c7e:	89 89       	ldd	r24, Y+17	; 0x11
    1c80:	9a 89       	ldd	r25, Y+18	; 0x12
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <LCD_VidSendCommand+0xdc>
    1c86:	9a 8b       	std	Y+18, r25	; 0x12
    1c88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	9c 8b       	std	Y+20, r25	; 0x14
    1c92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c94:	8b 89       	ldd	r24, Y+19	; 0x13
    1c96:	9c 89       	ldd	r25, Y+20	; 0x14
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	69 f7       	brne	.-38     	; 0x1c76 <LCD_VidSendCommand+0xd0>
    1c9c:	14 c0       	rjmp	.+40     	; 0x1cc6 <LCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	9c 8b       	std	Y+20, r25	; 0x14
    1cb0:	8b 8b       	std	Y+19, r24	; 0x13
    1cb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb6:	98 8b       	std	Y+16, r25	; 0x10
    1cb8:	8f 87       	std	Y+15, r24	; 0x0f
    1cba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbc:	98 89       	ldd	r25, Y+16	; 0x10
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <LCD_VidSendCommand+0x118>
    1cc2:	98 8b       	std	Y+16, r25	; 0x10
    1cc4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	62 e0       	ldi	r22, 0x02	; 2
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPin_Value>
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a0 e2       	ldi	r26, 0x20	; 32
    1cd6:	b1 e4       	ldi	r27, 0x41	; 65
    1cd8:	8b 87       	std	Y+11, r24	; 0x0b
    1cda:	9c 87       	std	Y+12, r25	; 0x0c
    1cdc:	ad 87       	std	Y+13, r26	; 0x0d
    1cde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	4a ef       	ldi	r20, 0xFA	; 250
    1cee:	54 e4       	ldi	r21, 0x44	; 68
    1cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	8f 83       	std	Y+7, r24	; 0x07
    1cfa:	98 87       	std	Y+8, r25	; 0x08
    1cfc:	a9 87       	std	Y+9, r26	; 0x09
    1cfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d00:	6f 81       	ldd	r22, Y+7	; 0x07
    1d02:	78 85       	ldd	r23, Y+8	; 0x08
    1d04:	89 85       	ldd	r24, Y+9	; 0x09
    1d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e8       	ldi	r20, 0x80	; 128
    1d0e:	5f e3       	ldi	r21, 0x3F	; 63
    1d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d14:	88 23       	and	r24, r24
    1d16:	2c f4       	brge	.+10     	; 0x1d22 <LCD_VidSendCommand+0x17c>
		__ticks = 1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	3f c0       	rjmp	.+126    	; 0x1da0 <LCD_VidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1d22:	6f 81       	ldd	r22, Y+7	; 0x07
    1d24:	78 85       	ldd	r23, Y+8	; 0x08
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	3f ef       	ldi	r19, 0xFF	; 255
    1d2e:	4f e7       	ldi	r20, 0x7F	; 127
    1d30:	57 e4       	ldi	r21, 0x47	; 71
    1d32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d36:	18 16       	cp	r1, r24
    1d38:	4c f5       	brge	.+82     	; 0x1d8c <LCD_VidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e2       	ldi	r20, 0x20	; 32
    1d48:	51 e4       	ldi	r21, 0x41	; 65
    1d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
    1d62:	0f c0       	rjmp	.+30     	; 0x1d82 <LCD_VidSendCommand+0x1dc>
    1d64:	88 ec       	ldi	r24, 0xC8	; 200
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9c 83       	std	Y+4, r25	; 0x04
    1d6a:	8b 83       	std	Y+3, r24	; 0x03
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <LCD_VidSendCommand+0x1ca>
    1d74:	9c 83       	std	Y+4, r25	; 0x04
    1d76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	9e 83       	std	Y+6, r25	; 0x06
    1d80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	69 f7       	brne	.-38     	; 0x1d64 <LCD_VidSendCommand+0x1be>
    1d8a:	14 c0       	rjmp	.+40     	; 0x1db4 <LCD_VidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	78 85       	ldd	r23, Y+8	; 0x08
    1d90:	89 85       	ldd	r24, Y+9	; 0x09
    1d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
    1da0:	8d 81       	ldd	r24, Y+5	; 0x05
    1da2:	9e 81       	ldd	r25, Y+6	; 0x06
    1da4:	9a 83       	std	Y+2, r25	; 0x02
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <LCD_VidSendCommand+0x206>
    1db0:	9a 83       	std	Y+2, r25	; 0x02
    1db2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    1db4:	6d 96       	adiw	r28, 0x1d	; 29
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <LCD_VidInt>:
void LCD_VidInt(void)
{	
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	e8 97       	sbiw	r28, 0x38	; 56
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPort_Direction(Data_Port,1);
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	61 e0       	ldi	r22, 0x01	; 1
    1dde:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_VidSetPort_Direction>
	DIO_VidSetPin_Direction(Control_Port,RS,1);
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	41 e0       	ldi	r20, 0x01	; 1
    1de8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPin_Direction>
	DIO_VidSetPin_Direction(Control_Port,RW,1);
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	61 e0       	ldi	r22, 0x01	; 1
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPin_Direction>
	DIO_VidSetPin_Direction(Control_Port,E,1);
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	62 e0       	ldi	r22, 0x02	; 2
    1dfa:	41 e0       	ldi	r20, 0x01	; 1
    1dfc:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPin_Direction>
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a0 e2       	ldi	r26, 0x20	; 32
    1e06:	b2 e4       	ldi	r27, 0x42	; 66
    1e08:	8d ab       	std	Y+53, r24	; 0x35
    1e0a:	9e ab       	std	Y+54, r25	; 0x36
    1e0c:	af ab       	std	Y+55, r26	; 0x37
    1e0e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e10:	6d a9       	ldd	r22, Y+53	; 0x35
    1e12:	7e a9       	ldd	r23, Y+54	; 0x36
    1e14:	8f a9       	ldd	r24, Y+55	; 0x37
    1e16:	98 ad       	ldd	r25, Y+56	; 0x38
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	4a ef       	ldi	r20, 0xFA	; 250
    1e1e:	54 e4       	ldi	r21, 0x44	; 68
    1e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	89 ab       	std	Y+49, r24	; 0x31
    1e2a:	9a ab       	std	Y+50, r25	; 0x32
    1e2c:	ab ab       	std	Y+51, r26	; 0x33
    1e2e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e30:	69 a9       	ldd	r22, Y+49	; 0x31
    1e32:	7a a9       	ldd	r23, Y+50	; 0x32
    1e34:	8b a9       	ldd	r24, Y+51	; 0x33
    1e36:	9c a9       	ldd	r25, Y+52	; 0x34
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e8       	ldi	r20, 0x80	; 128
    1e3e:	5f e3       	ldi	r21, 0x3F	; 63
    1e40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e44:	88 23       	and	r24, r24
    1e46:	2c f4       	brge	.+10     	; 0x1e52 <LCD_VidInt+0x8c>
		__ticks = 1;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	98 ab       	std	Y+48, r25	; 0x30
    1e4e:	8f a7       	std	Y+47, r24	; 0x2f
    1e50:	3f c0       	rjmp	.+126    	; 0x1ed0 <LCD_VidInt+0x10a>
	else if (__tmp > 65535)
    1e52:	69 a9       	ldd	r22, Y+49	; 0x31
    1e54:	7a a9       	ldd	r23, Y+50	; 0x32
    1e56:	8b a9       	ldd	r24, Y+51	; 0x33
    1e58:	9c a9       	ldd	r25, Y+52	; 0x34
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	3f ef       	ldi	r19, 0xFF	; 255
    1e5e:	4f e7       	ldi	r20, 0x7F	; 127
    1e60:	57 e4       	ldi	r21, 0x47	; 71
    1e62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e66:	18 16       	cp	r1, r24
    1e68:	4c f5       	brge	.+82     	; 0x1ebc <LCD_VidInt+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e6c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e6e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e70:	98 ad       	ldd	r25, Y+56	; 0x38
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e2       	ldi	r20, 0x20	; 32
    1e78:	51 e4       	ldi	r21, 0x41	; 65
    1e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	bc 01       	movw	r22, r24
    1e84:	cd 01       	movw	r24, r26
    1e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	98 ab       	std	Y+48, r25	; 0x30
    1e90:	8f a7       	std	Y+47, r24	; 0x2f
    1e92:	0f c0       	rjmp	.+30     	; 0x1eb2 <LCD_VidInt+0xec>
    1e94:	88 ec       	ldi	r24, 0xC8	; 200
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9e a7       	std	Y+46, r25	; 0x2e
    1e9a:	8d a7       	std	Y+45, r24	; 0x2d
    1e9c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e9e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_VidInt+0xda>
    1ea4:	9e a7       	std	Y+46, r25	; 0x2e
    1ea6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eaa:	98 a9       	ldd	r25, Y+48	; 0x30
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	98 ab       	std	Y+48, r25	; 0x30
    1eb0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb4:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	69 f7       	brne	.-38     	; 0x1e94 <LCD_VidInt+0xce>
    1eba:	14 c0       	rjmp	.+40     	; 0x1ee4 <LCD_VidInt+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ebe:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	98 ab       	std	Y+48, r25	; 0x30
    1ece:	8f a7       	std	Y+47, r24	; 0x2f
    1ed0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ed2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ed4:	9c a7       	std	Y+44, r25	; 0x2c
    1ed6:	8b a7       	std	Y+43, r24	; 0x2b
    1ed8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eda:	9c a5       	ldd	r25, Y+44	; 0x2c
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_VidInt+0x116>
    1ee0:	9c a7       	std	Y+44, r25	; 0x2c
    1ee2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(40);
	LCD_VidSendCommand(0b00111000);
    1ee4:	88 e3       	ldi	r24, 0x38	; 56
    1ee6:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidSendCommand>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a0 e8       	ldi	r26, 0x80	; 128
    1ef0:	bf e3       	ldi	r27, 0x3F	; 63
    1ef2:	8f a3       	std	Y+39, r24	; 0x27
    1ef4:	98 a7       	std	Y+40, r25	; 0x28
    1ef6:	a9 a7       	std	Y+41, r26	; 0x29
    1ef8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efa:	6f a1       	ldd	r22, Y+39	; 0x27
    1efc:	78 a5       	ldd	r23, Y+40	; 0x28
    1efe:	89 a5       	ldd	r24, Y+41	; 0x29
    1f00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4a ef       	ldi	r20, 0xFA	; 250
    1f08:	54 e4       	ldi	r21, 0x44	; 68
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	8b a3       	std	Y+35, r24	; 0x23
    1f14:	9c a3       	std	Y+36, r25	; 0x24
    1f16:	ad a3       	std	Y+37, r26	; 0x25
    1f18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f20:	9e a1       	ldd	r25, Y+38	; 0x26
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e8       	ldi	r20, 0x80	; 128
    1f28:	5f e3       	ldi	r21, 0x3F	; 63
    1f2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <LCD_VidInt+0x176>
		__ticks = 1;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9a a3       	std	Y+34, r25	; 0x22
    1f38:	89 a3       	std	Y+33, r24	; 0x21
    1f3a:	3f c0       	rjmp	.+126    	; 0x1fba <LCD_VidInt+0x1f4>
	else if (__tmp > 65535)
    1f3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f40:	8d a1       	ldd	r24, Y+37	; 0x25
    1f42:	9e a1       	ldd	r25, Y+38	; 0x26
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	3f ef       	ldi	r19, 0xFF	; 255
    1f48:	4f e7       	ldi	r20, 0x7F	; 127
    1f4a:	57 e4       	ldi	r21, 0x47	; 71
    1f4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f50:	18 16       	cp	r1, r24
    1f52:	4c f5       	brge	.+82     	; 0x1fa6 <LCD_VidInt+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f54:	6f a1       	ldd	r22, Y+39	; 0x27
    1f56:	78 a5       	ldd	r23, Y+40	; 0x28
    1f58:	89 a5       	ldd	r24, Y+41	; 0x29
    1f5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e2       	ldi	r20, 0x20	; 32
    1f62:	51 e4       	ldi	r21, 0x41	; 65
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9a a3       	std	Y+34, r25	; 0x22
    1f7a:	89 a3       	std	Y+33, r24	; 0x21
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <LCD_VidInt+0x1d6>
    1f7e:	88 ec       	ldi	r24, 0xC8	; 200
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	98 a3       	std	Y+32, r25	; 0x20
    1f84:	8f 8f       	std	Y+31, r24	; 0x1f
    1f86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f88:	98 a1       	ldd	r25, Y+32	; 0x20
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_VidInt+0x1c4>
    1f8e:	98 a3       	std	Y+32, r25	; 0x20
    1f90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f92:	89 a1       	ldd	r24, Y+33	; 0x21
    1f94:	9a a1       	ldd	r25, Y+34	; 0x22
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	9a a3       	std	Y+34, r25	; 0x22
    1f9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	69 f7       	brne	.-38     	; 0x1f7e <LCD_VidInt+0x1b8>
    1fa4:	14 c0       	rjmp	.+40     	; 0x1fce <LCD_VidInt+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa8:	7c a1       	ldd	r23, Y+36	; 0x24
    1faa:	8d a1       	ldd	r24, Y+37	; 0x25
    1fac:	9e a1       	ldd	r25, Y+38	; 0x26
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9a a3       	std	Y+34, r25	; 0x22
    1fb8:	89 a3       	std	Y+33, r24	; 0x21
    1fba:	89 a1       	ldd	r24, Y+33	; 0x21
    1fbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1fbe:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc0:	8d 8f       	std	Y+29, r24	; 0x1d
    1fc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <LCD_VidInt+0x200>
    1fca:	9e 8f       	std	Y+30, r25	; 0x1e
    1fcc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
	LCD_VidSendCommand(0b00001100);
    1fce:	8c e0       	ldi	r24, 0x0C	; 12
    1fd0:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidSendCommand>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e8       	ldi	r26, 0x80	; 128
    1fda:	bf e3       	ldi	r27, 0x3F	; 63
    1fdc:	89 8f       	std	Y+25, r24	; 0x19
    1fde:	9a 8f       	std	Y+26, r25	; 0x1a
    1fe0:	ab 8f       	std	Y+27, r26	; 0x1b
    1fe2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fe6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4a ef       	ldi	r20, 0xFA	; 250
    1ff2:	54 e4       	ldi	r21, 0x44	; 68
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	8d 8b       	std	Y+21, r24	; 0x15
    1ffe:	9e 8b       	std	Y+22, r25	; 0x16
    2000:	af 8b       	std	Y+23, r26	; 0x17
    2002:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2004:	6d 89       	ldd	r22, Y+21	; 0x15
    2006:	7e 89       	ldd	r23, Y+22	; 0x16
    2008:	8f 89       	ldd	r24, Y+23	; 0x17
    200a:	98 8d       	ldd	r25, Y+24	; 0x18
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2018:	88 23       	and	r24, r24
    201a:	2c f4       	brge	.+10     	; 0x2026 <LCD_VidInt+0x260>
		__ticks = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9c 8b       	std	Y+20, r25	; 0x14
    2022:	8b 8b       	std	Y+19, r24	; 0x13
    2024:	3f c0       	rjmp	.+126    	; 0x20a4 <LCD_VidInt+0x2de>
	else if (__tmp > 65535)
    2026:	6d 89       	ldd	r22, Y+21	; 0x15
    2028:	7e 89       	ldd	r23, Y+22	; 0x16
    202a:	8f 89       	ldd	r24, Y+23	; 0x17
    202c:	98 8d       	ldd	r25, Y+24	; 0x18
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	4c f5       	brge	.+82     	; 0x2090 <LCD_VidInt+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203e:	69 8d       	ldd	r22, Y+25	; 0x19
    2040:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2042:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2044:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e2       	ldi	r20, 0x20	; 32
    204c:	51 e4       	ldi	r21, 0x41	; 65
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	bc 01       	movw	r22, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9c 8b       	std	Y+20, r25	; 0x14
    2064:	8b 8b       	std	Y+19, r24	; 0x13
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <LCD_VidInt+0x2c0>
    2068:	88 ec       	ldi	r24, 0xC8	; 200
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	9a 8b       	std	Y+18, r25	; 0x12
    206e:	89 8b       	std	Y+17, r24	; 0x11
    2070:	89 89       	ldd	r24, Y+17	; 0x11
    2072:	9a 89       	ldd	r25, Y+18	; 0x12
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <LCD_VidInt+0x2ae>
    2078:	9a 8b       	std	Y+18, r25	; 0x12
    207a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207c:	8b 89       	ldd	r24, Y+19	; 0x13
    207e:	9c 89       	ldd	r25, Y+20	; 0x14
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	9c 8b       	std	Y+20, r25	; 0x14
    2084:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2086:	8b 89       	ldd	r24, Y+19	; 0x13
    2088:	9c 89       	ldd	r25, Y+20	; 0x14
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	69 f7       	brne	.-38     	; 0x2068 <LCD_VidInt+0x2a2>
    208e:	14 c0       	rjmp	.+40     	; 0x20b8 <LCD_VidInt+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2090:	6d 89       	ldd	r22, Y+21	; 0x15
    2092:	7e 89       	ldd	r23, Y+22	; 0x16
    2094:	8f 89       	ldd	r24, Y+23	; 0x17
    2096:	98 8d       	ldd	r25, Y+24	; 0x18
    2098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9c 8b       	std	Y+20, r25	; 0x14
    20a2:	8b 8b       	std	Y+19, r24	; 0x13
    20a4:	8b 89       	ldd	r24, Y+19	; 0x13
    20a6:	9c 89       	ldd	r25, Y+20	; 0x14
    20a8:	98 8b       	std	Y+16, r25	; 0x10
    20aa:	8f 87       	std	Y+15, r24	; 0x0f
    20ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ae:	98 89       	ldd	r25, Y+16	; 0x10
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_VidInt+0x2ea>
    20b4:	98 8b       	std	Y+16, r25	; 0x10
    20b6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
	LCD_VidSendCommand(0b00000001);
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidSendCommand>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e8       	ldi	r26, 0x80	; 128
    20c4:	bf e3       	ldi	r27, 0x3F	; 63
    20c6:	8b 87       	std	Y+11, r24	; 0x0b
    20c8:	9c 87       	std	Y+12, r25	; 0x0c
    20ca:	ad 87       	std	Y+13, r26	; 0x0d
    20cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a ef       	ldi	r20, 0xFA	; 250
    20dc:	54 e4       	ldi	r21, 0x44	; 68
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8f 83       	std	Y+7, r24	; 0x07
    20e8:	98 87       	std	Y+8, r25	; 0x08
    20ea:	a9 87       	std	Y+9, r26	; 0x09
    20ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <LCD_VidInt+0x34a>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
    210e:	3f c0       	rjmp	.+126    	; 0x218e <LCD_VidInt+0x3c8>
	else if (__tmp > 65535)
    2110:	6f 81       	ldd	r22, Y+7	; 0x07
    2112:	78 85       	ldd	r23, Y+8	; 0x08
    2114:	89 85       	ldd	r24, Y+9	; 0x09
    2116:	9a 85       	ldd	r25, Y+10	; 0x0a
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <LCD_VidInt+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	6b 85       	ldd	r22, Y+11	; 0x0b
    212a:	7c 85       	ldd	r23, Y+12	; 0x0c
    212c:	8d 85       	ldd	r24, Y+13	; 0x0d
    212e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <LCD_VidInt+0x3aa>
    2152:	88 ec       	ldi	r24, 0xC8	; 200
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	8b 83       	std	Y+3, r24	; 0x03
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_VidInt+0x398>
    2162:	9c 83       	std	Y+4, r25	; 0x04
    2164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <LCD_VidInt+0x38c>
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <LCD_VidInt+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6f 81       	ldd	r22, Y+7	; 0x07
    217c:	78 85       	ldd	r23, Y+8	; 0x08
    217e:	89 85       	ldd	r24, Y+9	; 0x09
    2180:	9a 85       	ldd	r25, Y+10	; 0x0a
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_VidInt+0x3d4>
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

}
    21a2:	e8 96       	adiw	r28, 0x38	; 56
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <LCD_VidSendStr>:
void LCD_VidSendStr(u8* Copy_u8string)
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	6e 97       	sbiw	r28, 0x1e	; 30
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	9e 8f       	std	Y+30, r25	; 0x1e
    21ca:	8d 8f       	std	Y+29, r24	; 0x1d
	

	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	41 e0       	ldi	r20, 0x01	; 1
    21d2:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPin_Value>
    21e0:	fa c0       	rjmp	.+500    	; 0x23d6 <LCD_VidSendStr+0x222>
	while(*Copy_u8string!='\0')
	{

	DIO_VidWriteOnPort(Data_Port,*Copy_u8string);
    21e2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    21e4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    21e6:	90 81       	ld	r25, Z
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	69 2f       	mov	r22, r25
    21ec:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	62 e0       	ldi	r22, 0x02	; 2
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPin_Value>
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	a0 e2       	ldi	r26, 0x20	; 32
    2200:	b1 e4       	ldi	r27, 0x41	; 65
    2202:	89 8f       	std	Y+25, r24	; 0x19
    2204:	9a 8f       	std	Y+26, r25	; 0x1a
    2206:	ab 8f       	std	Y+27, r26	; 0x1b
    2208:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220a:	69 8d       	ldd	r22, Y+25	; 0x19
    220c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    220e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2210:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	4a ef       	ldi	r20, 0xFA	; 250
    2218:	54 e4       	ldi	r21, 0x44	; 68
    221a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	8d 8b       	std	Y+21, r24	; 0x15
    2224:	9e 8b       	std	Y+22, r25	; 0x16
    2226:	af 8b       	std	Y+23, r26	; 0x17
    2228:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    222a:	6d 89       	ldd	r22, Y+21	; 0x15
    222c:	7e 89       	ldd	r23, Y+22	; 0x16
    222e:	8f 89       	ldd	r24, Y+23	; 0x17
    2230:	98 8d       	ldd	r25, Y+24	; 0x18
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e8       	ldi	r20, 0x80	; 128
    2238:	5f e3       	ldi	r21, 0x3F	; 63
    223a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    223e:	88 23       	and	r24, r24
    2240:	2c f4       	brge	.+10     	; 0x224c <LCD_VidSendStr+0x98>
		__ticks = 1;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	9c 8b       	std	Y+20, r25	; 0x14
    2248:	8b 8b       	std	Y+19, r24	; 0x13
    224a:	3f c0       	rjmp	.+126    	; 0x22ca <LCD_VidSendStr+0x116>
	else if (__tmp > 65535)
    224c:	6d 89       	ldd	r22, Y+21	; 0x15
    224e:	7e 89       	ldd	r23, Y+22	; 0x16
    2250:	8f 89       	ldd	r24, Y+23	; 0x17
    2252:	98 8d       	ldd	r25, Y+24	; 0x18
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	3f ef       	ldi	r19, 0xFF	; 255
    2258:	4f e7       	ldi	r20, 0x7F	; 127
    225a:	57 e4       	ldi	r21, 0x47	; 71
    225c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2260:	18 16       	cp	r1, r24
    2262:	4c f5       	brge	.+82     	; 0x22b6 <LCD_VidSendStr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2264:	69 8d       	ldd	r22, Y+25	; 0x19
    2266:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2268:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e2       	ldi	r20, 0x20	; 32
    2272:	51 e4       	ldi	r21, 0x41	; 65
    2274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	9c 8b       	std	Y+20, r25	; 0x14
    228a:	8b 8b       	std	Y+19, r24	; 0x13
    228c:	0f c0       	rjmp	.+30     	; 0x22ac <LCD_VidSendStr+0xf8>
    228e:	88 ec       	ldi	r24, 0xC8	; 200
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	9a 8b       	std	Y+18, r25	; 0x12
    2294:	89 8b       	std	Y+17, r24	; 0x11
    2296:	89 89       	ldd	r24, Y+17	; 0x11
    2298:	9a 89       	ldd	r25, Y+18	; 0x12
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <LCD_VidSendStr+0xe6>
    229e:	9a 8b       	std	Y+18, r25	; 0x12
    22a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a2:	8b 89       	ldd	r24, Y+19	; 0x13
    22a4:	9c 89       	ldd	r25, Y+20	; 0x14
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	9c 8b       	std	Y+20, r25	; 0x14
    22aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ac:	8b 89       	ldd	r24, Y+19	; 0x13
    22ae:	9c 89       	ldd	r25, Y+20	; 0x14
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	69 f7       	brne	.-38     	; 0x228e <LCD_VidSendStr+0xda>
    22b4:	14 c0       	rjmp	.+40     	; 0x22de <LCD_VidSendStr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b6:	6d 89       	ldd	r22, Y+21	; 0x15
    22b8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ba:	8f 89       	ldd	r24, Y+23	; 0x17
    22bc:	98 8d       	ldd	r25, Y+24	; 0x18
    22be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9c 8b       	std	Y+20, r25	; 0x14
    22c8:	8b 8b       	std	Y+19, r24	; 0x13
    22ca:	8b 89       	ldd	r24, Y+19	; 0x13
    22cc:	9c 89       	ldd	r25, Y+20	; 0x14
    22ce:	98 8b       	std	Y+16, r25	; 0x10
    22d0:	8f 87       	std	Y+15, r24	; 0x0f
    22d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d4:	98 89       	ldd	r25, Y+16	; 0x10
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <LCD_VidSendStr+0x122>
    22da:	98 8b       	std	Y+16, r25	; 0x10
    22dc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	62 e0       	ldi	r22, 0x02	; 2
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_VidSetPin_Value>
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	a0 e2       	ldi	r26, 0x20	; 32
    22ee:	b1 e4       	ldi	r27, 0x41	; 65
    22f0:	8b 87       	std	Y+11, r24	; 0x0b
    22f2:	9c 87       	std	Y+12, r25	; 0x0c
    22f4:	ad 87       	std	Y+13, r26	; 0x0d
    22f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a ef       	ldi	r20, 0xFA	; 250
    2306:	54 e4       	ldi	r21, 0x44	; 68
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8f 83       	std	Y+7, r24	; 0x07
    2312:	98 87       	std	Y+8, r25	; 0x08
    2314:	a9 87       	std	Y+9, r26	; 0x09
    2316:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2318:	6f 81       	ldd	r22, Y+7	; 0x07
    231a:	78 85       	ldd	r23, Y+8	; 0x08
    231c:	89 85       	ldd	r24, Y+9	; 0x09
    231e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5f e3       	ldi	r21, 0x3F	; 63
    2328:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    232c:	88 23       	and	r24, r24
    232e:	2c f4       	brge	.+10     	; 0x233a <LCD_VidSendStr+0x186>
		__ticks = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9e 83       	std	Y+6, r25	; 0x06
    2336:	8d 83       	std	Y+5, r24	; 0x05
    2338:	3f c0       	rjmp	.+126    	; 0x23b8 <LCD_VidSendStr+0x204>
	else if (__tmp > 65535)
    233a:	6f 81       	ldd	r22, Y+7	; 0x07
    233c:	78 85       	ldd	r23, Y+8	; 0x08
    233e:	89 85       	ldd	r24, Y+9	; 0x09
    2340:	9a 85       	ldd	r25, Y+10	; 0x0a
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	3f ef       	ldi	r19, 0xFF	; 255
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	57 e4       	ldi	r21, 0x47	; 71
    234a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234e:	18 16       	cp	r1, r24
    2350:	4c f5       	brge	.+82     	; 0x23a4 <LCD_VidSendStr+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2352:	6b 85       	ldd	r22, Y+11	; 0x0b
    2354:	7c 85       	ldd	r23, Y+12	; 0x0c
    2356:	8d 85       	ldd	r24, Y+13	; 0x0d
    2358:	9e 85       	ldd	r25, Y+14	; 0x0e
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e2       	ldi	r20, 0x20	; 32
    2360:	51 e4       	ldi	r21, 0x41	; 65
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9e 83       	std	Y+6, r25	; 0x06
    2378:	8d 83       	std	Y+5, r24	; 0x05
    237a:	0f c0       	rjmp	.+30     	; 0x239a <LCD_VidSendStr+0x1e6>
    237c:	88 ec       	ldi	r24, 0xC8	; 200
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	9c 83       	std	Y+4, r25	; 0x04
    2382:	8b 83       	std	Y+3, r24	; 0x03
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	9c 81       	ldd	r25, Y+4	; 0x04
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <LCD_VidSendStr+0x1d4>
    238c:	9c 83       	std	Y+4, r25	; 0x04
    238e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2390:	8d 81       	ldd	r24, Y+5	; 0x05
    2392:	9e 81       	ldd	r25, Y+6	; 0x06
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	9e 83       	std	Y+6, r25	; 0x06
    2398:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	8d 81       	ldd	r24, Y+5	; 0x05
    239c:	9e 81       	ldd	r25, Y+6	; 0x06
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	69 f7       	brne	.-38     	; 0x237c <LCD_VidSendStr+0x1c8>
    23a2:	14 c0       	rjmp	.+40     	; 0x23cc <LCD_VidSendStr+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a4:	6f 81       	ldd	r22, Y+7	; 0x07
    23a6:	78 85       	ldd	r23, Y+8	; 0x08
    23a8:	89 85       	ldd	r24, Y+9	; 0x09
    23aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	9e 83       	std	Y+6, r25	; 0x06
    23b6:	8d 83       	std	Y+5, r24	; 0x05
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	9a 83       	std	Y+2, r25	; 0x02
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	9a 81       	ldd	r25, Y+2	; 0x02
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <LCD_VidSendStr+0x210>
    23c8:	9a 83       	std	Y+2, r25	; 0x02
    23ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	Copy_u8string++;
    23cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23d0:	01 96       	adiw	r24, 0x01	; 1
    23d2:	9e 8f       	std	Y+30, r25	; 0x1e
    23d4:	8d 8f       	std	Y+29, r24	; 0x1d
{
	

	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
	while(*Copy_u8string!='\0')
    23d6:	ed 8d       	ldd	r30, Y+29	; 0x1d
    23d8:	fe 8d       	ldd	r31, Y+30	; 0x1e
    23da:	80 81       	ld	r24, Z
    23dc:	88 23       	and	r24, r24
    23de:	09 f0       	breq	.+2      	; 0x23e2 <LCD_VidSendStr+0x22e>
    23e0:	00 cf       	rjmp	.-512    	; 0x21e2 <LCD_VidSendStr+0x2e>
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
	_delay_ms(10);
	Copy_u8string++;
	}
}
    23e2:	6e 96       	adiw	r28, 0x1e	; 30
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <LCD_VidSendNum>:
void LCD_VidSendNum(u16 Copy_u16Num)
{	u16 rev=0;
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <LCD_VidSendNum+0x6>
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <LCD_VidSendNum+0x8>
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <LCD_VidSendNum+0xa>
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
    2406:	1c 82       	std	Y+4, r1	; 0x04
    2408:	1b 82       	std	Y+3, r1	; 0x03
	u8 zeros=0;
    240a:	1a 82       	std	Y+2, r1	; 0x02
	if (Copy_u16Num!=0)
    240c:	8d 81       	ldd	r24, Y+5	; 0x05
    240e:	9e 81       	ldd	r25, Y+6	; 0x06
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	09 f4       	brne	.+2      	; 0x2416 <LCD_VidSendNum+0x22>
    2414:	53 c0       	rjmp	.+166    	; 0x24bc <LCD_VidSendNum+0xc8>
    2416:	25 c0       	rjmp	.+74     	; 0x2462 <LCD_VidSendNum+0x6e>
	{
	while(Copy_u16Num>0)
		{
		 rev=(rev*10)+(Copy_u16Num % 10);
    2418:	8b 81       	ldd	r24, Y+3	; 0x03
    241a:	9c 81       	ldd	r25, Y+4	; 0x04
    241c:	9c 01       	movw	r18, r24
    241e:	22 0f       	add	r18, r18
    2420:	33 1f       	adc	r19, r19
    2422:	c9 01       	movw	r24, r18
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	f9 01       	movw	r30, r18
    242e:	e8 0f       	add	r30, r24
    2430:	f9 1f       	adc	r31, r25
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	2a e0       	ldi	r18, 0x0A	; 10
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	b9 01       	movw	r22, r18
    243c:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__udivmodhi4>
    2440:	8e 0f       	add	r24, r30
    2442:	9f 1f       	adc	r25, r31
    2444:	9c 83       	std	Y+4, r25	; 0x04
    2446:	8b 83       	std	Y+3, r24	; 0x03
		Copy_u16Num/=10;
    2448:	8d 81       	ldd	r24, Y+5	; 0x05
    244a:	9e 81       	ldd	r25, Y+6	; 0x06
    244c:	2a e0       	ldi	r18, 0x0A	; 10
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	b9 01       	movw	r22, r18
    2452:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__udivmodhi4>
    2456:	cb 01       	movw	r24, r22
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
		zeros++;
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	8f 5f       	subi	r24, 0xFF	; 255
    2460:	8a 83       	std	Y+2, r24	; 0x02
void LCD_VidSendNum(u16 Copy_u16Num)
{	u16 rev=0;
	u8 zeros=0;
	if (Copy_u16Num!=0)
	{
	while(Copy_u16Num>0)
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	9e 81       	ldd	r25, Y+6	; 0x06
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	b9 f6       	brne	.-82     	; 0x2418 <LCD_VidSendNum+0x24>
    246a:	19 c0       	rjmp	.+50     	; 0x249e <LCD_VidSendNum+0xaa>
		Copy_u16Num/=10;
		zeros++;
		};
	while(rev!=0)
	{
	u8 rem=rev%10;
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	9c 81       	ldd	r25, Y+4	; 0x04
    2470:	2a e0       	ldi	r18, 0x0A	; 10
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	b9 01       	movw	r22, r18
    2476:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__udivmodhi4>
    247a:	89 83       	std	Y+1, r24	; 0x01
	rev/=10;
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	9c 81       	ldd	r25, Y+4	; 0x04
    2480:	2a e0       	ldi	r18, 0x0A	; 10
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	b9 01       	movw	r22, r18
    2486:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__udivmodhi4>
    248a:	cb 01       	movw	r24, r22
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	8b 83       	std	Y+3, r24	; 0x03
	LCD_VidSendData((48+rem));//+48 to have aski code
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	80 5d       	subi	r24, 0xD0	; 208
    2494:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_VidSendData>
	zeros--;
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	81 50       	subi	r24, 0x01	; 1
    249c:	8a 83       	std	Y+2, r24	; 0x02
		{
		 rev=(rev*10)+(Copy_u16Num % 10);
		Copy_u16Num/=10;
		zeros++;
		};
	while(rev!=0)
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	19 f7       	brne	.-58     	; 0x246c <LCD_VidSendNum+0x78>
    24a6:	06 c0       	rjmp	.+12     	; 0x24b4 <LCD_VidSendNum+0xc0>
	LCD_VidSendData((48+rem));//+48 to have aski code
	zeros--;
	}
	while(zeros>0)
	{
	LCD_VidSendData((48+0));
    24a8:	80 e3       	ldi	r24, 0x30	; 48
    24aa:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_VidSendData>
	zeros--;
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	81 50       	subi	r24, 0x01	; 1
    24b2:	8a 83       	std	Y+2, r24	; 0x02
	u8 rem=rev%10;
	rev/=10;
	LCD_VidSendData((48+rem));//+48 to have aski code
	zeros--;
	}
	while(zeros>0)
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	88 23       	and	r24, r24
    24b8:	b9 f7       	brne	.-18     	; 0x24a8 <LCD_VidSendNum+0xb4>
    24ba:	03 c0       	rjmp	.+6      	; 0x24c2 <LCD_VidSendNum+0xce>
	}
	}
	else
	{

		LCD_VidSendData((48+0));
    24bc:	80 e3       	ldi	r24, 0x30	; 48
    24be:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_VidSendData>
	}
}
    24c2:	26 96       	adiw	r28, 0x06	; 6
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <LCD_VidShiftDispaly>:

void LCD_VidShiftDispaly(u8 Copy_u8Line,u8 Copy_u8Column)
{u8 shift=0,offset=0;
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	00 d0       	rcall	.+0      	; 0x24da <LCD_VidShiftDispaly+0x6>
    24da:	00 d0       	rcall	.+0      	; 0x24dc <LCD_VidShiftDispaly+0x8>
    24dc:	00 d0       	rcall	.+0      	; 0x24de <LCD_VidShiftDispaly+0xa>
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    24e4:	6c 83       	std	Y+4, r22	; 0x04
    24e6:	1a 82       	std	Y+2, r1	; 0x02
    24e8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Line)
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	28 2f       	mov	r18, r24
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	3e 83       	std	Y+6, r19	; 0x06
    24f2:	2d 83       	std	Y+5, r18	; 0x05
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	81 30       	cpi	r24, 0x01	; 1
    24fa:	91 05       	cpc	r25, r1
    24fc:	31 f0       	breq	.+12     	; 0x250a <LCD_VidShiftDispaly+0x36>
    24fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2500:	3e 81       	ldd	r19, Y+6	; 0x06
    2502:	22 30       	cpi	r18, 0x02	; 2
    2504:	31 05       	cpc	r19, r1
    2506:	21 f0       	breq	.+8      	; 0x2510 <LCD_VidShiftDispaly+0x3c>
    2508:	05 c0       	rjmp	.+10     	; 0x2514 <LCD_VidShiftDispaly+0x40>
	{case 1:
		offset=128;
    250a:	80 e8       	ldi	r24, 0x80	; 128
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <LCD_VidShiftDispaly+0x40>
	break;
	case 2:
		offset=128+64;
    2510:	80 ec       	ldi	r24, 0xC0	; 192
    2512:	89 83       	std	Y+1, r24	; 0x01
	}
	shift=offset+Copy_u8Column;
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	9c 81       	ldd	r25, Y+4	; 0x04
    2518:	89 0f       	add	r24, r25
    251a:	8a 83       	std	Y+2, r24	; 0x02
	LCD_VidSendCommand(shift);
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidSendCommand>
}
    2522:	26 96       	adiw	r28, 0x06	; 6
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <LCD_VidCLR>:


void LCD_VidCLR(void)
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62

	LCD_VidSendCommand(0b00000001);
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidSendCommand>

}
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <LCD_SetCGRam>:

void LCD_SetCGRam(u8 Copy_u8location )  //start from 0:7
{	u8 offset=64+Copy_u8location;
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	00 d0       	rcall	.+0      	; 0x254e <LCD_SetCGRam+0x6>
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	8a 83       	std	Y+2, r24	; 0x02
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	80 5c       	subi	r24, 0xC0	; 192
    2558:	89 83       	std	Y+1, r24	; 0x01

	LCD_VidSendCommand(offset);
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidSendCommand>

}
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <LCD_SetDDRam>:

void LCD_SetDDRam(void)
{	u8 offset=128;
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	0f 92       	push	r0
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	80 e8       	ldi	r24, 0x80	; 128
    2576:	89 83       	std	Y+1, r24	; 0x01

	LCD_VidSendCommand(offset);
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidSendCommand>

}
    257e:	0f 90       	pop	r0
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <LCD_VidSendCharToCGRam>:


void LCD_VidSendCharToCGRam(u8* Copy_u8Ptr)
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	00 d0       	rcall	.+0      	; 0x258c <LCD_VidSendCharToCGRam+0x6>
    258c:	00 d0       	rcall	.+0      	; 0x258e <LCD_VidSendCharToCGRam+0x8>
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	9c 83       	std	Y+4, r25	; 0x04
    2594:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;i<8;i++)
    2596:	1a 82       	std	Y+2, r1	; 0x02
    2598:	19 82       	std	Y+1, r1	; 0x01
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <LCD_VidSendCharToCGRam+0x34>
	{
		LCD_VidSendData(*Copy_u8Ptr);
    259c:	eb 81       	ldd	r30, Y+3	; 0x03
    259e:	fc 81       	ldd	r31, Y+4	; 0x04
    25a0:	80 81       	ld	r24, Z
    25a2:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_VidSendData>
		Copy_u8Ptr++;
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	9c 81       	ldd	r25, Y+4	; 0x04
    25aa:	01 96       	adiw	r24, 0x01	; 1
    25ac:	9c 83       	std	Y+4, r25	; 0x04
    25ae:	8b 83       	std	Y+3, r24	; 0x03
}


void LCD_VidSendCharToCGRam(u8* Copy_u8Ptr)
{
	for(int i=0;i<8;i++)
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	9a 81       	ldd	r25, Y+2	; 0x02
    25b4:	01 96       	adiw	r24, 0x01	; 1
    25b6:	9a 83       	std	Y+2, r25	; 0x02
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	9a 81       	ldd	r25, Y+2	; 0x02
    25be:	88 30       	cpi	r24, 0x08	; 8
    25c0:	91 05       	cpc	r25, r1
    25c2:	64 f3       	brlt	.-40     	; 0x259c <LCD_VidSendCharToCGRam+0x16>
		LCD_VidSendData(*Copy_u8Ptr);
		Copy_u8Ptr++;
	}


}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <__udivmodhi4>:
    25d2:	aa 1b       	sub	r26, r26
    25d4:	bb 1b       	sub	r27, r27
    25d6:	51 e1       	ldi	r21, 0x11	; 17
    25d8:	07 c0       	rjmp	.+14     	; 0x25e8 <__udivmodhi4_ep>

000025da <__udivmodhi4_loop>:
    25da:	aa 1f       	adc	r26, r26
    25dc:	bb 1f       	adc	r27, r27
    25de:	a6 17       	cp	r26, r22
    25e0:	b7 07       	cpc	r27, r23
    25e2:	10 f0       	brcs	.+4      	; 0x25e8 <__udivmodhi4_ep>
    25e4:	a6 1b       	sub	r26, r22
    25e6:	b7 0b       	sbc	r27, r23

000025e8 <__udivmodhi4_ep>:
    25e8:	88 1f       	adc	r24, r24
    25ea:	99 1f       	adc	r25, r25
    25ec:	5a 95       	dec	r21
    25ee:	a9 f7       	brne	.-22     	; 0x25da <__udivmodhi4_loop>
    25f0:	80 95       	com	r24
    25f2:	90 95       	com	r25
    25f4:	bc 01       	movw	r22, r24
    25f6:	cd 01       	movw	r24, r26
    25f8:	08 95       	ret

000025fa <__prologue_saves__>:
    25fa:	2f 92       	push	r2
    25fc:	3f 92       	push	r3
    25fe:	4f 92       	push	r4
    2600:	5f 92       	push	r5
    2602:	6f 92       	push	r6
    2604:	7f 92       	push	r7
    2606:	8f 92       	push	r8
    2608:	9f 92       	push	r9
    260a:	af 92       	push	r10
    260c:	bf 92       	push	r11
    260e:	cf 92       	push	r12
    2610:	df 92       	push	r13
    2612:	ef 92       	push	r14
    2614:	ff 92       	push	r15
    2616:	0f 93       	push	r16
    2618:	1f 93       	push	r17
    261a:	cf 93       	push	r28
    261c:	df 93       	push	r29
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	ca 1b       	sub	r28, r26
    2624:	db 0b       	sbc	r29, r27
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	cd bf       	out	0x3d, r28	; 61
    2630:	09 94       	ijmp

00002632 <__epilogue_restores__>:
    2632:	2a 88       	ldd	r2, Y+18	; 0x12
    2634:	39 88       	ldd	r3, Y+17	; 0x11
    2636:	48 88       	ldd	r4, Y+16	; 0x10
    2638:	5f 84       	ldd	r5, Y+15	; 0x0f
    263a:	6e 84       	ldd	r6, Y+14	; 0x0e
    263c:	7d 84       	ldd	r7, Y+13	; 0x0d
    263e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2640:	9b 84       	ldd	r9, Y+11	; 0x0b
    2642:	aa 84       	ldd	r10, Y+10	; 0x0a
    2644:	b9 84       	ldd	r11, Y+9	; 0x09
    2646:	c8 84       	ldd	r12, Y+8	; 0x08
    2648:	df 80       	ldd	r13, Y+7	; 0x07
    264a:	ee 80       	ldd	r14, Y+6	; 0x06
    264c:	fd 80       	ldd	r15, Y+5	; 0x05
    264e:	0c 81       	ldd	r16, Y+4	; 0x04
    2650:	1b 81       	ldd	r17, Y+3	; 0x03
    2652:	aa 81       	ldd	r26, Y+2	; 0x02
    2654:	b9 81       	ldd	r27, Y+1	; 0x01
    2656:	ce 0f       	add	r28, r30
    2658:	d1 1d       	adc	r29, r1
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	f8 94       	cli
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	cd bf       	out	0x3d, r28	; 61
    2664:	ed 01       	movw	r28, r26
    2666:	08 95       	ret

00002668 <_exit>:
    2668:	f8 94       	cli

0000266a <__stop_program>:
    266a:	ff cf       	rjmp	.-2      	; 0x266a <__stop_program>
