
I2C_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ff8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00003ff8  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003360  00000000  00000000  00004180  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d8a  00000000  00000000  000074e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  0000826a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  000083ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  000085bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  0000a5cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  0000b72c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000c730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  0000c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  0000cb8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d49c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <main>
      7a:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 c3 1f 	jmp	0x3f86	; 0x3f86 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e6       	ldi	r26, 0x68	; 104
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 df 1f 	jmp	0x3fbe	; 0x3fbe <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 cf 1f 	jmp	0x3f9e	; 0x3f9e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 eb 1f 	jmp	0x3fd6	; 0x3fd6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 cf 1f 	jmp	0x3f9e	; 0x3f9e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 eb 1f 	jmp	0x3fd6	; 0x3fd6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 c3 1f 	jmp	0x3f86	; 0x3f86 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 df 1f 	jmp	0x3fbe	; 0x3fbe <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 cf 1f 	jmp	0x3f9e	; 0x3f9e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 eb 1f 	jmp	0x3fd6	; 0x3fd6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 cf 1f 	jmp	0x3f9e	; 0x3f9e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 eb 1f 	jmp	0x3fd6	; 0x3fd6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 cf 1f 	jmp	0x3f9e	; 0x3f9e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 eb 1f 	jmp	0x3fd6	; 0x3fd6 <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 cc 1f 	jmp	0x3f98	; 0x3f98 <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	e0 59       	subi	r30, 0x90	; 144
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <DIO_VidSetPin_Direction>:




void DIO_VidSetPin_Direction(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8State)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	27 97       	sbiw	r28, 0x07	; 7
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	6a 83       	std	Y+2, r22	; 0x02
     ca8:	4b 83       	std	Y+3, r20	; 0x03
	if (1==Copy_u8State)
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	09 f0       	breq	.+2      	; 0xcb2 <DIO_VidSetPin_Direction+0x22>
     cb0:	6f c0       	rjmp	.+222    	; 0xd90 <DIO_VidSetPin_Direction+0x100>
	{
		switch (Copy_u8Port)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3f 83       	std	Y+7, r19	; 0x07
     cba:	2e 83       	std	Y+6, r18	; 0x06
     cbc:	8e 81       	ldd	r24, Y+6	; 0x06
     cbe:	9f 81       	ldd	r25, Y+7	; 0x07
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	49 f1       	breq	.+82     	; 0xd18 <DIO_VidSetPin_Direction+0x88>
     cc6:	2e 81       	ldd	r18, Y+6	; 0x06
     cc8:	3f 81       	ldd	r19, Y+7	; 0x07
     cca:	22 30       	cpi	r18, 0x02	; 2
     ccc:	31 05       	cpc	r19, r1
     cce:	2c f4       	brge	.+10     	; 0xcda <DIO_VidSetPin_Direction+0x4a>
     cd0:	8e 81       	ldd	r24, Y+6	; 0x06
     cd2:	9f 81       	ldd	r25, Y+7	; 0x07
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	61 f0       	breq	.+24     	; 0xcf0 <DIO_VidSetPin_Direction+0x60>
     cd8:	d2 c0       	rjmp	.+420    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
     cda:	2e 81       	ldd	r18, Y+6	; 0x06
     cdc:	3f 81       	ldd	r19, Y+7	; 0x07
     cde:	22 30       	cpi	r18, 0x02	; 2
     ce0:	31 05       	cpc	r19, r1
     ce2:	71 f1       	breq	.+92     	; 0xd40 <DIO_VidSetPin_Direction+0xb0>
     ce4:	8e 81       	ldd	r24, Y+6	; 0x06
     ce6:	9f 81       	ldd	r25, Y+7	; 0x07
     ce8:	83 30       	cpi	r24, 0x03	; 3
     cea:	91 05       	cpc	r25, r1
     cec:	e9 f1       	breq	.+122    	; 0xd68 <DIO_VidSetPin_Direction+0xd8>
     cee:	c7 c0       	rjmp	.+398    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			{case 0:
			SET_BIT( DDRA,Copy_u8Pin); break;
     cf0:	aa e3       	ldi	r26, 0x3A	; 58
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	ea e3       	ldi	r30, 0x3A	; 58
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	48 2f       	mov	r20, r24
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	02 2e       	mov	r0, r18
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <DIO_VidSetPin_Direction+0x7e>
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	0a 94       	dec	r0
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <DIO_VidSetPin_Direction+0x7a>
     d12:	84 2b       	or	r24, r20
     d14:	8c 93       	st	X, r24
     d16:	b3 c0       	rjmp	.+358    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			case 1:
			SET_BIT( DDRB,Copy_u8Pin); break;
     d18:	a7 e3       	ldi	r26, 0x37	; 55
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e7 e3       	ldi	r30, 0x37	; 55
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	48 2f       	mov	r20, r24
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <DIO_VidSetPin_Direction+0xa6>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <DIO_VidSetPin_Direction+0xa2>
     d3a:	84 2b       	or	r24, r20
     d3c:	8c 93       	st	X, r24
     d3e:	9f c0       	rjmp	.+318    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			case 2:
			SET_BIT( DDRC,Copy_u8Pin); break;
     d40:	a4 e3       	ldi	r26, 0x34	; 52
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e4 e3       	ldi	r30, 0x34	; 52
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	48 2f       	mov	r20, r24
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	02 2e       	mov	r0, r18
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <DIO_VidSetPin_Direction+0xce>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	0a 94       	dec	r0
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <DIO_VidSetPin_Direction+0xca>
     d62:	84 2b       	or	r24, r20
     d64:	8c 93       	st	X, r24
     d66:	8b c0       	rjmp	.+278    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			case 3:
			SET_BIT( DDRD,Copy_u8Pin); break;
     d68:	a1 e3       	ldi	r26, 0x31	; 49
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e1 e3       	ldi	r30, 0x31	; 49
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	48 2f       	mov	r20, r24
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	02 2e       	mov	r0, r18
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <DIO_VidSetPin_Direction+0xf6>
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	0a 94       	dec	r0
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <DIO_VidSetPin_Direction+0xf2>
     d8a:	84 2b       	or	r24, r20
     d8c:	8c 93       	st	X, r24
     d8e:	77 c0       	rjmp	.+238    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
	}}
	else if (0==Copy_u8State)
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	88 23       	and	r24, r24
     d94:	09 f0       	breq	.+2      	; 0xd98 <DIO_VidSetPin_Direction+0x108>
     d96:	73 c0       	rjmp	.+230    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
	{	switch(Copy_u8Port)
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	3d 83       	std	Y+5, r19	; 0x05
     da0:	2c 83       	std	Y+4, r18	; 0x04
     da2:	8c 81       	ldd	r24, Y+4	; 0x04
     da4:	9d 81       	ldd	r25, Y+5	; 0x05
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	91 05       	cpc	r25, r1
     daa:	59 f1       	breq	.+86     	; 0xe02 <DIO_VidSetPin_Direction+0x172>
     dac:	2c 81       	ldd	r18, Y+4	; 0x04
     dae:	3d 81       	ldd	r19, Y+5	; 0x05
     db0:	22 30       	cpi	r18, 0x02	; 2
     db2:	31 05       	cpc	r19, r1
     db4:	2c f4       	brge	.+10     	; 0xdc0 <DIO_VidSetPin_Direction+0x130>
     db6:	8c 81       	ldd	r24, Y+4	; 0x04
     db8:	9d 81       	ldd	r25, Y+5	; 0x05
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	69 f0       	breq	.+26     	; 0xdd8 <DIO_VidSetPin_Direction+0x148>
     dbe:	5f c0       	rjmp	.+190    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
     dc0:	2c 81       	ldd	r18, Y+4	; 0x04
     dc2:	3d 81       	ldd	r19, Y+5	; 0x05
     dc4:	22 30       	cpi	r18, 0x02	; 2
     dc6:	31 05       	cpc	r19, r1
     dc8:	89 f1       	breq	.+98     	; 0xe2c <DIO_VidSetPin_Direction+0x19c>
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	91 05       	cpc	r25, r1
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <DIO_VidSetPin_Direction+0x146>
     dd4:	40 c0       	rjmp	.+128    	; 0xe56 <DIO_VidSetPin_Direction+0x1c6>
     dd6:	53 c0       	rjmp	.+166    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			{case 0:
			CLR_BIT( DDRA,Copy_u8Pin); break;
     dd8:	aa e3       	ldi	r26, 0x3A	; 58
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	ea e3       	ldi	r30, 0x3A	; 58
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_VidSetPin_Direction+0x166>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_VidSetPin_Direction+0x162>
     dfa:	80 95       	com	r24
     dfc:	84 23       	and	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	3e c0       	rjmp	.+124    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			case 1:
			CLR_BIT( DDRB,Copy_u8Pin); break;
     e02:	a7 e3       	ldi	r26, 0x37	; 55
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e7 e3       	ldi	r30, 0x37	; 55
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <DIO_VidSetPin_Direction+0x190>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <DIO_VidSetPin_Direction+0x18c>
     e24:	80 95       	com	r24
     e26:	84 23       	and	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	29 c0       	rjmp	.+82     	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			case 2:
			CLR_BIT( DDRC,Copy_u8Pin); break;
     e2c:	a4 e3       	ldi	r26, 0x34	; 52
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e4 e3       	ldi	r30, 0x34	; 52
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <DIO_VidSetPin_Direction+0x1ba>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <DIO_VidSetPin_Direction+0x1b6>
     e4e:	80 95       	com	r24
     e50:	84 23       	and	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	14 c0       	rjmp	.+40     	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			case 3:
			CLR_BIT( DDRD,Copy_u8Pin); break;
     e56:	a1 e3       	ldi	r26, 0x31	; 49
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e1 e3       	ldi	r30, 0x31	; 49
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_VidSetPin_Direction+0x1e4>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_VidSetPin_Direction+0x1e0>
     e78:	80 95       	com	r24
     e7a:	84 23       	and	r24, r20
     e7c:	8c 93       	st	X, r24
	}}

	}
     e7e:	27 96       	adiw	r28, 0x07	; 7
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <DIO_VidSetPin_Value>:
	
	
void DIO_VidSetPin_Value(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	27 97       	sbiw	r28, 0x07	; 7
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	6a 83       	std	Y+2, r22	; 0x02
     ea8:	4b 83       	std	Y+3, r20	; 0x03
	if(0==Copy_u8Value)
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	88 23       	and	r24, r24
     eae:	09 f0       	breq	.+2      	; 0xeb2 <DIO_VidSetPin_Value+0x22>
     eb0:	74 c0       	rjmp	.+232    	; 0xf9a <DIO_VidSetPin_Value+0x10a>
	
	{switch(Copy_u8Port)
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	3f 83       	std	Y+7, r19	; 0x07
     eba:	2e 83       	std	Y+6, r18	; 0x06
     ebc:	8e 81       	ldd	r24, Y+6	; 0x06
     ebe:	9f 81       	ldd	r25, Y+7	; 0x07
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	91 05       	cpc	r25, r1
     ec4:	59 f1       	breq	.+86     	; 0xf1c <DIO_VidSetPin_Value+0x8c>
     ec6:	2e 81       	ldd	r18, Y+6	; 0x06
     ec8:	3f 81       	ldd	r19, Y+7	; 0x07
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	31 05       	cpc	r19, r1
     ece:	2c f4       	brge	.+10     	; 0xeda <DIO_VidSetPin_Value+0x4a>
     ed0:	8e 81       	ldd	r24, Y+6	; 0x06
     ed2:	9f 81       	ldd	r25, Y+7	; 0x07
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	69 f0       	breq	.+26     	; 0xef2 <DIO_VidSetPin_Value+0x62>
     ed8:	d2 c0       	rjmp	.+420    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
     eda:	2e 81       	ldd	r18, Y+6	; 0x06
     edc:	3f 81       	ldd	r19, Y+7	; 0x07
     ede:	22 30       	cpi	r18, 0x02	; 2
     ee0:	31 05       	cpc	r19, r1
     ee2:	89 f1       	breq	.+98     	; 0xf46 <DIO_VidSetPin_Value+0xb6>
     ee4:	8e 81       	ldd	r24, Y+6	; 0x06
     ee6:	9f 81       	ldd	r25, Y+7	; 0x07
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	91 05       	cpc	r25, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <DIO_VidSetPin_Value+0x60>
     eee:	40 c0       	rjmp	.+128    	; 0xf70 <DIO_VidSetPin_Value+0xe0>
     ef0:	c6 c0       	rjmp	.+396    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		{case 0:
		CLR_BIT( PORTA,Copy_u8Pin) ;break;
     ef2:	ab e3       	ldi	r26, 0x3B	; 59
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	eb e3       	ldi	r30, 0x3B	; 59
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 2e       	mov	r0, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_VidSetPin_Value+0x80>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DIO_VidSetPin_Value+0x7c>
     f14:	80 95       	com	r24
     f16:	84 23       	and	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	b1 c0       	rjmp	.+354    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		case 1:
		CLR_BIT( PORTB,Copy_u8Pin) ;break;
     f1c:	a8 e3       	ldi	r26, 0x38	; 56
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e8 e3       	ldi	r30, 0x38	; 56
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_VidSetPin_Value+0xaa>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_VidSetPin_Value+0xa6>
     f3e:	80 95       	com	r24
     f40:	84 23       	and	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	9c c0       	rjmp	.+312    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		case 2:
		CLR_BIT( PORTC,Copy_u8Pin) ;break;
     f46:	a5 e3       	ldi	r26, 0x35	; 53
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e5 e3       	ldi	r30, 0x35	; 53
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_VidSetPin_Value+0xd4>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_VidSetPin_Value+0xd0>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	87 c0       	rjmp	.+270    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		case 3:
		CLR_BIT( PORTD,Copy_u8Pin) ;break;
     f70:	a2 e3       	ldi	r26, 0x32	; 50
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e2 e3       	ldi	r30, 0x32	; 50
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_VidSetPin_Value+0xfe>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_VidSetPin_Value+0xfa>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	72 c0       	rjmp	.+228    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
	}}
	else if (1==Copy_u8Value)
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <DIO_VidSetPin_Value+0x112>
     fa0:	6e c0       	rjmp	.+220    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
	{switch(Copy_u8Port)
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	3d 83       	std	Y+5, r19	; 0x05
     faa:	2c 83       	std	Y+4, r18	; 0x04
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	9d 81       	ldd	r25, Y+5	; 0x05
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	91 05       	cpc	r25, r1
     fb4:	49 f1       	breq	.+82     	; 0x1008 <DIO_VidSetPin_Value+0x178>
     fb6:	2c 81       	ldd	r18, Y+4	; 0x04
     fb8:	3d 81       	ldd	r19, Y+5	; 0x05
     fba:	22 30       	cpi	r18, 0x02	; 2
     fbc:	31 05       	cpc	r19, r1
     fbe:	2c f4       	brge	.+10     	; 0xfca <DIO_VidSetPin_Value+0x13a>
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	61 f0       	breq	.+24     	; 0xfe0 <DIO_VidSetPin_Value+0x150>
     fc8:	5a c0       	rjmp	.+180    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
     fca:	2c 81       	ldd	r18, Y+4	; 0x04
     fcc:	3d 81       	ldd	r19, Y+5	; 0x05
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	71 f1       	breq	.+92     	; 0x1030 <DIO_VidSetPin_Value+0x1a0>
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	9d 81       	ldd	r25, Y+5	; 0x05
     fd8:	83 30       	cpi	r24, 0x03	; 3
     fda:	91 05       	cpc	r25, r1
     fdc:	e9 f1       	breq	.+122    	; 0x1058 <DIO_VidSetPin_Value+0x1c8>
     fde:	4f c0       	rjmp	.+158    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		{case 0:
		SET_BIT( PORTA,Copy_u8Pin) ;break;
     fe0:	ab e3       	ldi	r26, 0x3B	; 59
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	eb e3       	ldi	r30, 0x3B	; 59
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_VidSetPin_Value+0x16e>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_VidSetPin_Value+0x16a>
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	3b c0       	rjmp	.+118    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		case 1:
		SET_BIT( PORTB,Copy_u8Pin) ;break;
    1008:	a8 e3       	ldi	r26, 0x38	; 56
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e8 e3       	ldi	r30, 0x38	; 56
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_VidSetPin_Value+0x196>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_VidSetPin_Value+0x192>
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	27 c0       	rjmp	.+78     	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		case 2:
		SET_BIT( PORTC,Copy_u8Pin) ;break;
    1030:	a5 e3       	ldi	r26, 0x35	; 53
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e5 e3       	ldi	r30, 0x35	; 53
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_VidSetPin_Value+0x1be>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_VidSetPin_Value+0x1ba>
    1052:	84 2b       	or	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	13 c0       	rjmp	.+38     	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		case 3:
		SET_BIT( PORTD,Copy_u8Pin) ;break;
    1058:	a2 e3       	ldi	r26, 0x32	; 50
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e2 e3       	ldi	r30, 0x32	; 50
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_VidSetPin_Value+0x1e6>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_VidSetPin_Value+0x1e2>
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
	}}
		
		
}
    107e:	27 96       	adiw	r28, 0x07	; 7
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <DIO_VidGetPin>:
	
	u8 DIO_VidGetPin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{	u8 bit;
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <DIO_VidGetPin+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <DIO_VidGetPin+0x8>
    1098:	0f 92       	push	r0
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	8a 83       	std	Y+2, r24	; 0x02
    10a0:	6b 83       	std	Y+3, r22	; 0x03
		switch(Copy_u8Port)
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	3d 83       	std	Y+5, r19	; 0x05
    10aa:	2c 83       	std	Y+4, r18	; 0x04
    10ac:	4c 81       	ldd	r20, Y+4	; 0x04
    10ae:	5d 81       	ldd	r21, Y+5	; 0x05
    10b0:	41 30       	cpi	r20, 0x01	; 1
    10b2:	51 05       	cpc	r21, r1
    10b4:	41 f1       	breq	.+80     	; 0x1106 <DIO_VidGetPin+0x76>
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	82 30       	cpi	r24, 0x02	; 2
    10bc:	91 05       	cpc	r25, r1
    10be:	34 f4       	brge	.+12     	; 0x10cc <DIO_VidGetPin+0x3c>
    10c0:	2c 81       	ldd	r18, Y+4	; 0x04
    10c2:	3d 81       	ldd	r19, Y+5	; 0x05
    10c4:	21 15       	cp	r18, r1
    10c6:	31 05       	cpc	r19, r1
    10c8:	61 f0       	breq	.+24     	; 0x10e2 <DIO_VidGetPin+0x52>
    10ca:	52 c0       	rjmp	.+164    	; 0x1170 <DIO_VidGetPin+0xe0>
    10cc:	4c 81       	ldd	r20, Y+4	; 0x04
    10ce:	5d 81       	ldd	r21, Y+5	; 0x05
    10d0:	42 30       	cpi	r20, 0x02	; 2
    10d2:	51 05       	cpc	r21, r1
    10d4:	51 f1       	breq	.+84     	; 0x112a <DIO_VidGetPin+0x9a>
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	91 05       	cpc	r25, r1
    10de:	b9 f1       	breq	.+110    	; 0x114e <DIO_VidGetPin+0xbe>
    10e0:	47 c0       	rjmp	.+142    	; 0x1170 <DIO_VidGetPin+0xe0>
		{case 0:
		bit=GET_BIT( PINA,Copy_u8Pin) ;break;
    10e2:	e9 e3       	ldi	r30, 0x39	; 57
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	a9 01       	movw	r20, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <DIO_VidGetPin+0x6a>
    10f6:	55 95       	asr	r21
    10f8:	47 95       	ror	r20
    10fa:	8a 95       	dec	r24
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <DIO_VidGetPin+0x66>
    10fe:	ca 01       	movw	r24, r20
    1100:	81 70       	andi	r24, 0x01	; 1
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	35 c0       	rjmp	.+106    	; 0x1170 <DIO_VidGetPin+0xe0>
		case 1:
		bit=GET_BIT( PINB,Copy_u8Pin) ;break;
    1106:	e6 e3       	ldi	r30, 0x36	; 54
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	a9 01       	movw	r20, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_VidGetPin+0x8e>
    111a:	55 95       	asr	r21
    111c:	47 95       	ror	r20
    111e:	8a 95       	dec	r24
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_VidGetPin+0x8a>
    1122:	ca 01       	movw	r24, r20
    1124:	81 70       	andi	r24, 0x01	; 1
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	23 c0       	rjmp	.+70     	; 0x1170 <DIO_VidGetPin+0xe0>
		case 2:
		bit=GET_BIT( PINC,Copy_u8Pin) ;break;
    112a:	e3 e3       	ldi	r30, 0x33	; 51
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a9 01       	movw	r20, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_VidGetPin+0xb2>
    113e:	55 95       	asr	r21
    1140:	47 95       	ror	r20
    1142:	8a 95       	dec	r24
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_VidGetPin+0xae>
    1146:	ca 01       	movw	r24, r20
    1148:	81 70       	andi	r24, 0x01	; 1
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	11 c0       	rjmp	.+34     	; 0x1170 <DIO_VidGetPin+0xe0>
		case 3:
		bit=GET_BIT( PIND,Copy_u8Pin) ;break;
    114e:	e0 e3       	ldi	r30, 0x30	; 48
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a9 01       	movw	r20, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_VidGetPin+0xd6>
    1162:	55 95       	asr	r21
    1164:	47 95       	ror	r20
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_VidGetPin+0xd2>
    116a:	ca 01       	movw	r24, r20
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	89 83       	std	Y+1, r24	; 0x01
		}
		return bit;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
				
		
	}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <DIO_VidToggelPin>:

	
	
	void DIO_VidToggelPin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <DIO_VidToggelPin+0x6>
    1188:	00 d0       	rcall	.+0      	; 0x118a <DIO_VidToggelPin+0x8>
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3c 83       	std	Y+4, r19	; 0x04
    119a:	2b 83       	std	Y+3, r18	; 0x03
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	91 05       	cpc	r25, r1
    11a4:	49 f1       	breq	.+82     	; 0x11f8 <DIO_VidToggelPin+0x76>
    11a6:	2b 81       	ldd	r18, Y+3	; 0x03
    11a8:	3c 81       	ldd	r19, Y+4	; 0x04
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	2c f4       	brge	.+10     	; 0x11ba <DIO_VidToggelPin+0x38>
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	61 f0       	breq	.+24     	; 0x11d0 <DIO_VidToggelPin+0x4e>
    11b8:	5a c0       	rjmp	.+180    	; 0x126e <DIO_VidToggelPin+0xec>
    11ba:	2b 81       	ldd	r18, Y+3	; 0x03
    11bc:	3c 81       	ldd	r19, Y+4	; 0x04
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	71 f1       	breq	.+92     	; 0x1220 <DIO_VidToggelPin+0x9e>
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	91 05       	cpc	r25, r1
    11cc:	e9 f1       	breq	.+122    	; 0x1248 <DIO_VidToggelPin+0xc6>
    11ce:	4f c0       	rjmp	.+158    	; 0x126e <DIO_VidToggelPin+0xec>
		{
			case 0:   TOGGLE_BIT( PORTA,Copy_u8Pin); break;
    11d0:	ab e3       	ldi	r26, 0x3B	; 59
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	eb e3       	ldi	r30, 0x3B	; 59
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_VidToggelPin+0x6c>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <DIO_VidToggelPin+0x68>
    11f2:	84 27       	eor	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	3b c0       	rjmp	.+118    	; 0x126e <DIO_VidToggelPin+0xec>
			case 1:   TOGGLE_BIT( PORTB,Copy_u8Pin); break;
    11f8:	a8 e3       	ldi	r26, 0x38	; 56
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e8 e3       	ldi	r30, 0x38	; 56
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO_VidToggelPin+0x94>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO_VidToggelPin+0x90>
    121a:	84 27       	eor	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	27 c0       	rjmp	.+78     	; 0x126e <DIO_VidToggelPin+0xec>
			case 2:   TOGGLE_BIT( PORTC,Copy_u8Pin); break;
    1220:	a5 e3       	ldi	r26, 0x35	; 53
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e5 e3       	ldi	r30, 0x35	; 53
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_VidToggelPin+0xbc>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_VidToggelPin+0xb8>
    1242:	84 27       	eor	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	13 c0       	rjmp	.+38     	; 0x126e <DIO_VidToggelPin+0xec>
			case 3:   TOGGLE_BIT( PORTD,Copy_u8Pin); break;
    1248:	a2 e3       	ldi	r26, 0x32	; 50
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e2 e3       	ldi	r30, 0x32	; 50
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_VidToggelPin+0xe4>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_VidToggelPin+0xe0>
    126a:	84 27       	eor	r24, r20
    126c:	8c 93       	st	X, r24
		}
			
		
	}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <DIO_VidSetPort_Direction>:
	
	void DIO_VidSetPort_Direction(u8 Copy_u8Port,u8 Copy_u8State)
	{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <DIO_VidSetPort_Direction+0x6>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <DIO_VidSetPort_Direction+0x8>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <DIO_VidSetPort_Direction+0xa>
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	6a 83       	std	Y+2, r22	; 0x02
		
		if (1==Copy_u8State)
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	99 f5       	brne	.+102    	; 0x12fa <DIO_VidSetPort_Direction+0x7e>
		{
			switch(Copy_u8Port)
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	3e 83       	std	Y+6, r19	; 0x06
    129c:	2d 83       	std	Y+5, r18	; 0x05
    129e:	8d 81       	ldd	r24, Y+5	; 0x05
    12a0:	9e 81       	ldd	r25, Y+6	; 0x06
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	91 05       	cpc	r25, r1
    12a6:	d1 f0       	breq	.+52     	; 0x12dc <DIO_VidSetPort_Direction+0x60>
    12a8:	2d 81       	ldd	r18, Y+5	; 0x05
    12aa:	3e 81       	ldd	r19, Y+6	; 0x06
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	2c f4       	brge	.+10     	; 0x12bc <DIO_VidSetPort_Direction+0x40>
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	9e 81       	ldd	r25, Y+6	; 0x06
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <DIO_VidSetPort_Direction+0x56>
    12ba:	50 c0       	rjmp	.+160    	; 0x135c <DIO_VidSetPort_Direction+0xe0>
    12bc:	2d 81       	ldd	r18, Y+5	; 0x05
    12be:	3e 81       	ldd	r19, Y+6	; 0x06
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <DIO_VidSetPort_Direction+0x6a>
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	91 05       	cpc	r25, r1
    12ce:	81 f0       	breq	.+32     	; 0x12f0 <DIO_VidSetPort_Direction+0x74>
    12d0:	45 c0       	rjmp	.+138    	; 0x135c <DIO_VidSetPort_Direction+0xe0>
			{
				case 0: SET_PORT(DDRA);   break;
    12d2:	ea e3       	ldi	r30, 0x3A	; 58
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8f ef       	ldi	r24, 0xFF	; 255
    12d8:	80 83       	st	Z, r24
    12da:	40 c0       	rjmp	.+128    	; 0x135c <DIO_VidSetPort_Direction+0xe0>
				case 1: SET_PORT(DDRB);   break;
    12dc:	e7 e3       	ldi	r30, 0x37	; 55
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	80 83       	st	Z, r24
    12e4:	3b c0       	rjmp	.+118    	; 0x135c <DIO_VidSetPort_Direction+0xe0>
				case 2: SET_PORT(DDRC);   break;
    12e6:	e4 e3       	ldi	r30, 0x34	; 52
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	80 83       	st	Z, r24
    12ee:	36 c0       	rjmp	.+108    	; 0x135c <DIO_VidSetPort_Direction+0xe0>
				case 3: SET_PORT(DDRD);   break;
    12f0:	e1 e3       	ldi	r30, 0x31	; 49
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	80 83       	st	Z, r24
    12f8:	31 c0       	rjmp	.+98     	; 0x135c <DIO_VidSetPort_Direction+0xe0>
			}
			
		}
		else if(0==Copy_u8State)
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	88 23       	and	r24, r24
    12fe:	71 f5       	brne	.+92     	; 0x135c <DIO_VidSetPort_Direction+0xe0>
		
		{
			switch(Copy_u8Port)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3c 83       	std	Y+4, r19	; 0x04
    1308:	2b 83       	std	Y+3, r18	; 0x03
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	c9 f0       	breq	.+50     	; 0x1346 <DIO_VidSetPort_Direction+0xca>
    1314:	2b 81       	ldd	r18, Y+3	; 0x03
    1316:	3c 81       	ldd	r19, Y+4	; 0x04
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <DIO_VidSetPort_Direction+0xac>
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <DIO_VidSetPort_Direction+0xc2>
    1326:	1a c0       	rjmp	.+52     	; 0x135c <DIO_VidSetPort_Direction+0xe0>
    1328:	2b 81       	ldd	r18, Y+3	; 0x03
    132a:	3c 81       	ldd	r19, Y+4	; 0x04
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	71 f0       	breq	.+28     	; 0x134e <DIO_VidSetPort_Direction+0xd2>
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	69 f0       	breq	.+26     	; 0x1356 <DIO_VidSetPort_Direction+0xda>
    133c:	0f c0       	rjmp	.+30     	; 0x135c <DIO_VidSetPort_Direction+0xe0>
			{
				case 0: CLR_PORT(DDRA);   break;
    133e:	ea e3       	ldi	r30, 0x3A	; 58
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	10 82       	st	Z, r1
    1344:	0b c0       	rjmp	.+22     	; 0x135c <DIO_VidSetPort_Direction+0xe0>
				case 1: CLR_PORT(DDRB);   break;
    1346:	e7 e3       	ldi	r30, 0x37	; 55
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	10 82       	st	Z, r1
    134c:	07 c0       	rjmp	.+14     	; 0x135c <DIO_VidSetPort_Direction+0xe0>
				case 2: CLR_PORT(DDRC);   break;
    134e:	e4 e3       	ldi	r30, 0x34	; 52
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	10 82       	st	Z, r1
    1354:	03 c0       	rjmp	.+6      	; 0x135c <DIO_VidSetPort_Direction+0xe0>
				case 3: CLR_PORT(DDRD);   break;
    1356:	e1 e3       	ldi	r30, 0x31	; 49
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	10 82       	st	Z, r1
			}	
		}
		
	}
    135c:	26 96       	adiw	r28, 0x06	; 6
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <DIO_VidWriteOnPort>:

	void DIO_VidWriteOnPort(u8 Copy_u8Port,u8 Copy_u8Value)
	{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	00 d0       	rcall	.+0      	; 0x1374 <DIO_VidWriteOnPort+0x6>
    1374:	00 d0       	rcall	.+0      	; 0x1376 <DIO_VidWriteOnPort+0x8>
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	3c 83       	std	Y+4, r19	; 0x04
    1386:	2b 83       	std	Y+3, r18	; 0x03
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	d1 f0       	breq	.+52     	; 0x13c6 <DIO_VidWriteOnPort+0x58>
    1392:	2b 81       	ldd	r18, Y+3	; 0x03
    1394:	3c 81       	ldd	r19, Y+4	; 0x04
    1396:	22 30       	cpi	r18, 0x02	; 2
    1398:	31 05       	cpc	r19, r1
    139a:	2c f4       	brge	.+10     	; 0x13a6 <DIO_VidWriteOnPort+0x38>
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	61 f0       	breq	.+24     	; 0x13bc <DIO_VidWriteOnPort+0x4e>
    13a4:	1e c0       	rjmp	.+60     	; 0x13e2 <DIO_VidWriteOnPort+0x74>
    13a6:	2b 81       	ldd	r18, Y+3	; 0x03
    13a8:	3c 81       	ldd	r19, Y+4	; 0x04
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	81 f0       	breq	.+32     	; 0x13d0 <DIO_VidWriteOnPort+0x62>
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	83 30       	cpi	r24, 0x03	; 3
    13b6:	91 05       	cpc	r25, r1
    13b8:	81 f0       	breq	.+32     	; 0x13da <DIO_VidWriteOnPort+0x6c>
    13ba:	13 c0       	rjmp	.+38     	; 0x13e2 <DIO_VidWriteOnPort+0x74>
		{
			case 0: WRITEON_PORT(PORTA,Copy_u8Value); break;
    13bc:	eb e3       	ldi	r30, 0x3B	; 59
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	80 83       	st	Z, r24
    13c4:	0e c0       	rjmp	.+28     	; 0x13e2 <DIO_VidWriteOnPort+0x74>
			case 1: WRITEON_PORT(PORTB,Copy_u8Value); break;
    13c6:	e8 e3       	ldi	r30, 0x38	; 56
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	80 83       	st	Z, r24
    13ce:	09 c0       	rjmp	.+18     	; 0x13e2 <DIO_VidWriteOnPort+0x74>
			case 2: WRITEON_PORT(PORTC,Copy_u8Value); break;
    13d0:	e5 e3       	ldi	r30, 0x35	; 53
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	80 83       	st	Z, r24
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <DIO_VidWriteOnPort+0x74>
			case 3: WRITEON_PORT(PORTD,Copy_u8Value); break;
    13da:	e2 e3       	ldi	r30, 0x32	; 50
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	80 83       	st	Z, r24
		}
		
	}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <DIO_VidPullUp_Pin>:


	
	void DIO_VidPullUp_Pin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <DIO_VidPullUp_Pin+0x6>
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <DIO_VidPullUp_Pin+0x8>
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3c 83       	std	Y+4, r19	; 0x04
    1408:	2b 83       	std	Y+3, r18	; 0x03
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	91 05       	cpc	r25, r1
    1412:	49 f1       	breq	.+82     	; 0x1466 <DIO_VidPullUp_Pin+0x76>
    1414:	2b 81       	ldd	r18, Y+3	; 0x03
    1416:	3c 81       	ldd	r19, Y+4	; 0x04
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	2c f4       	brge	.+10     	; 0x1428 <DIO_VidPullUp_Pin+0x38>
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	61 f0       	breq	.+24     	; 0x143e <DIO_VidPullUp_Pin+0x4e>
    1426:	5a c0       	rjmp	.+180    	; 0x14dc <DIO_VidPullUp_Pin+0xec>
    1428:	2b 81       	ldd	r18, Y+3	; 0x03
    142a:	3c 81       	ldd	r19, Y+4	; 0x04
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	71 f1       	breq	.+92     	; 0x148e <DIO_VidPullUp_Pin+0x9e>
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	e9 f1       	breq	.+122    	; 0x14b6 <DIO_VidPullUp_Pin+0xc6>
    143c:	4f c0       	rjmp	.+158    	; 0x14dc <DIO_VidPullUp_Pin+0xec>
		{
			case 0: SET_BIT(PORTA,Copy_u8Pin); break;
    143e:	ab e3       	ldi	r26, 0x3B	; 59
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	eb e3       	ldi	r30, 0x3B	; 59
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_VidPullUp_Pin+0x6c>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_VidPullUp_Pin+0x68>
    1460:	84 2b       	or	r24, r20
    1462:	8c 93       	st	X, r24
    1464:	3b c0       	rjmp	.+118    	; 0x14dc <DIO_VidPullUp_Pin+0xec>
			case 1: SET_BIT(PORTB,Copy_u8Pin); break;
    1466:	a8 e3       	ldi	r26, 0x38	; 56
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e8 e3       	ldi	r30, 0x38	; 56
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_VidPullUp_Pin+0x94>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_VidPullUp_Pin+0x90>
    1488:	84 2b       	or	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	27 c0       	rjmp	.+78     	; 0x14dc <DIO_VidPullUp_Pin+0xec>
			case 2: SET_BIT(PORTC,Copy_u8Pin); break;
    148e:	a5 e3       	ldi	r26, 0x35	; 53
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e5 e3       	ldi	r30, 0x35	; 53
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_VidPullUp_Pin+0xbc>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_VidPullUp_Pin+0xb8>
    14b0:	84 2b       	or	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	13 c0       	rjmp	.+38     	; 0x14dc <DIO_VidPullUp_Pin+0xec>
			case 3: SET_BIT(PORTD,Copy_u8Pin); break;
    14b6:	a2 e3       	ldi	r26, 0x32	; 50
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e2 e3       	ldi	r30, 0x32	; 50
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_VidPullUp_Pin+0xe4>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_VidPullUp_Pin+0xe0>
    14d8:	84 2b       	or	r24, r20
    14da:	8c 93       	st	X, r24
			
		}
		
	}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <DIO_VidPullDown_Pin>:
	
	void DIO_VidPullDown_Pin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <DIO_VidPullDown_Pin+0x6>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <DIO_VidPullDown_Pin+0x8>
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	3c 83       	std	Y+4, r19	; 0x04
    1502:	2b 83       	std	Y+3, r18	; 0x03
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	91 05       	cpc	r25, r1
    150c:	59 f1       	breq	.+86     	; 0x1564 <DIO_VidPullDown_Pin+0x7a>
    150e:	2b 81       	ldd	r18, Y+3	; 0x03
    1510:	3c 81       	ldd	r19, Y+4	; 0x04
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	31 05       	cpc	r19, r1
    1516:	2c f4       	brge	.+10     	; 0x1522 <DIO_VidPullDown_Pin+0x38>
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	69 f0       	breq	.+26     	; 0x153a <DIO_VidPullDown_Pin+0x50>
    1520:	5f c0       	rjmp	.+190    	; 0x15e0 <DIO_VidPullDown_Pin+0xf6>
    1522:	2b 81       	ldd	r18, Y+3	; 0x03
    1524:	3c 81       	ldd	r19, Y+4	; 0x04
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	31 05       	cpc	r19, r1
    152a:	89 f1       	breq	.+98     	; 0x158e <DIO_VidPullDown_Pin+0xa4>
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	83 30       	cpi	r24, 0x03	; 3
    1532:	91 05       	cpc	r25, r1
    1534:	09 f4       	brne	.+2      	; 0x1538 <DIO_VidPullDown_Pin+0x4e>
    1536:	40 c0       	rjmp	.+128    	; 0x15b8 <DIO_VidPullDown_Pin+0xce>
    1538:	53 c0       	rjmp	.+166    	; 0x15e0 <DIO_VidPullDown_Pin+0xf6>
		{
			case 0: CLR_BIT(PORTA,Copy_u8Pin); break;
    153a:	ab e3       	ldi	r26, 0x3B	; 59
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	eb e3       	ldi	r30, 0x3B	; 59
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_VidPullDown_Pin+0x6e>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DIO_VidPullDown_Pin+0x6a>
    155c:	80 95       	com	r24
    155e:	84 23       	and	r24, r20
    1560:	8c 93       	st	X, r24
    1562:	3e c0       	rjmp	.+124    	; 0x15e0 <DIO_VidPullDown_Pin+0xf6>
			case 1: CLR_BIT(PORTB,Copy_u8Pin); break;
    1564:	a8 e3       	ldi	r26, 0x38	; 56
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e8 e3       	ldi	r30, 0x38	; 56
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <DIO_VidPullDown_Pin+0x98>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <DIO_VidPullDown_Pin+0x94>
    1586:	80 95       	com	r24
    1588:	84 23       	and	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	29 c0       	rjmp	.+82     	; 0x15e0 <DIO_VidPullDown_Pin+0xf6>
			case 2: CLR_BIT(PORTC,Copy_u8Pin); break;
    158e:	a5 e3       	ldi	r26, 0x35	; 53
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e5 e3       	ldi	r30, 0x35	; 53
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_VidPullDown_Pin+0xc2>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DIO_VidPullDown_Pin+0xbe>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	14 c0       	rjmp	.+40     	; 0x15e0 <DIO_VidPullDown_Pin+0xf6>
			case 3: CLR_BIT(PORTD,Copy_u8Pin); break;
    15b8:	a2 e3       	ldi	r26, 0x32	; 50
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e2 e3       	ldi	r30, 0x32	; 50
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_VidPullDown_Pin+0xec>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_VidPullDown_Pin+0xe8>
    15da:	80 95       	com	r24
    15dc:	84 23       	and	r24, r20
    15de:	8c 93       	st	X, r24
			
		}
	}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <DIO_VidSetPort_Value>:

	void DIO_VidSetPort_Value(u8 Copy_u8Port,u8 Copy_u8Value)

	{if (Copy_u8Value==1)
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <DIO_VidSetPort_Value+0x6>
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <DIO_VidSetPort_Value+0x8>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <DIO_VidSetPort_Value+0xa>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	6a 83       	std	Y+2, r22	; 0x02
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	99 f5       	brne	.+102    	; 0x166c <DIO_VidSetPort_Value+0x7e>
		{switch(Copy_u8Port)
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	3e 83       	std	Y+6, r19	; 0x06
    160e:	2d 83       	std	Y+5, r18	; 0x05
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	91 05       	cpc	r25, r1
    1618:	d1 f0       	breq	.+52     	; 0x164e <DIO_VidSetPort_Value+0x60>
    161a:	2d 81       	ldd	r18, Y+5	; 0x05
    161c:	3e 81       	ldd	r19, Y+6	; 0x06
    161e:	22 30       	cpi	r18, 0x02	; 2
    1620:	31 05       	cpc	r19, r1
    1622:	2c f4       	brge	.+10     	; 0x162e <DIO_VidSetPort_Value+0x40>
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	9e 81       	ldd	r25, Y+6	; 0x06
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	61 f0       	breq	.+24     	; 0x1644 <DIO_VidSetPort_Value+0x56>
    162c:	50 c0       	rjmp	.+160    	; 0x16ce <DIO_VidSetPort_Value+0xe0>
    162e:	2d 81       	ldd	r18, Y+5	; 0x05
    1630:	3e 81       	ldd	r19, Y+6	; 0x06
    1632:	22 30       	cpi	r18, 0x02	; 2
    1634:	31 05       	cpc	r19, r1
    1636:	81 f0       	breq	.+32     	; 0x1658 <DIO_VidSetPort_Value+0x6a>
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	83 30       	cpi	r24, 0x03	; 3
    163e:	91 05       	cpc	r25, r1
    1640:	81 f0       	breq	.+32     	; 0x1662 <DIO_VidSetPort_Value+0x74>
    1642:	45 c0       	rjmp	.+138    	; 0x16ce <DIO_VidSetPort_Value+0xe0>
				{
					case 0: SET_PORT(PORTA); break;
    1644:	eb e3       	ldi	r30, 0x3B	; 59
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	80 83       	st	Z, r24
    164c:	40 c0       	rjmp	.+128    	; 0x16ce <DIO_VidSetPort_Value+0xe0>
					case 1: SET_PORT(PORTB); break;
    164e:	e8 e3       	ldi	r30, 0x38	; 56
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	8f ef       	ldi	r24, 0xFF	; 255
    1654:	80 83       	st	Z, r24
    1656:	3b c0       	rjmp	.+118    	; 0x16ce <DIO_VidSetPort_Value+0xe0>
					case 2: SET_PORT(PORTC); break;
    1658:	e5 e3       	ldi	r30, 0x35	; 53
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	8f ef       	ldi	r24, 0xFF	; 255
    165e:	80 83       	st	Z, r24
    1660:	36 c0       	rjmp	.+108    	; 0x16ce <DIO_VidSetPort_Value+0xe0>
					case 3: SET_PORT(PORTD); break;
    1662:	e2 e3       	ldi	r30, 0x32	; 50
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	8f ef       	ldi	r24, 0xFF	; 255
    1668:	80 83       	st	Z, r24
    166a:	31 c0       	rjmp	.+98     	; 0x16ce <DIO_VidSetPort_Value+0xe0>

				}
		}
	else if(Copy_u8Value==0)
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	88 23       	and	r24, r24
    1670:	71 f5       	brne	.+92     	; 0x16ce <DIO_VidSetPort_Value+0xe0>
	{

		switch(Copy_u8Port)
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	3c 83       	std	Y+4, r19	; 0x04
    167a:	2b 83       	std	Y+3, r18	; 0x03
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	91 05       	cpc	r25, r1
    1684:	c9 f0       	breq	.+50     	; 0x16b8 <DIO_VidSetPort_Value+0xca>
    1686:	2b 81       	ldd	r18, Y+3	; 0x03
    1688:	3c 81       	ldd	r19, Y+4	; 0x04
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	2c f4       	brge	.+10     	; 0x169a <DIO_VidSetPort_Value+0xac>
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	61 f0       	breq	.+24     	; 0x16b0 <DIO_VidSetPort_Value+0xc2>
    1698:	1a c0       	rjmp	.+52     	; 0x16ce <DIO_VidSetPort_Value+0xe0>
    169a:	2b 81       	ldd	r18, Y+3	; 0x03
    169c:	3c 81       	ldd	r19, Y+4	; 0x04
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	71 f0       	breq	.+28     	; 0x16c0 <DIO_VidSetPort_Value+0xd2>
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	83 30       	cpi	r24, 0x03	; 3
    16aa:	91 05       	cpc	r25, r1
    16ac:	69 f0       	breq	.+26     	; 0x16c8 <DIO_VidSetPort_Value+0xda>
    16ae:	0f c0       	rjmp	.+30     	; 0x16ce <DIO_VidSetPort_Value+0xe0>
						{
							case 0: CLR_PORT(PORTA); break;
    16b0:	eb e3       	ldi	r30, 0x3B	; 59
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	10 82       	st	Z, r1
    16b6:	0b c0       	rjmp	.+22     	; 0x16ce <DIO_VidSetPort_Value+0xe0>
							case 1: CLR_PORT(PORTB); break;
    16b8:	e8 e3       	ldi	r30, 0x38	; 56
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	10 82       	st	Z, r1
    16be:	07 c0       	rjmp	.+14     	; 0x16ce <DIO_VidSetPort_Value+0xe0>
							case 2: CLR_PORT(PORTC); break;
    16c0:	e5 e3       	ldi	r30, 0x35	; 53
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	10 82       	st	Z, r1
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <DIO_VidSetPort_Value+0xe0>
							case 3: CLR_PORT(PORTD); break;
    16c8:	e2 e3       	ldi	r30, 0x32	; 50
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	10 82       	st	Z, r1

						}
	}
	}
    16ce:	26 96       	adiw	r28, 0x06	; 6
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <I2C_send_start>:
#include "DIO_Interface.h"
#include"I2C_PRIVATE.h"
#include "I2C_config.h"
#include "avr/delay.h"
 u8 I2C_send_start(void )
 {
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	0f 92       	push	r0
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
	 // start bit condition
	 TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    16ea:	e6 e5       	ldi	r30, 0x56	; 86
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	84 ea       	ldi	r24, 0xA4	; 164
    16f0:	80 83       	st	Z, r24
	 while(GET_BIT(TWCR,TWINT)==0);  // wait the flag
    16f2:	e6 e5       	ldi	r30, 0x56	; 86
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	88 23       	and	r24, r24
    16fa:	dc f7       	brge	.-10     	; 0x16f2 <I2C_send_start+0x12>
	 if ((TWSR & 0xF8) != 0x08){return 0;}
    16fc:	e1 e2       	ldi	r30, 0x21	; 33
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	88 7f       	andi	r24, 0xF8	; 248
    1708:	90 70       	andi	r25, 0x00	; 0
    170a:	88 30       	cpi	r24, 0x08	; 8
    170c:	91 05       	cpc	r25, r1
    170e:	11 f0       	breq	.+4      	; 0x1714 <I2C_send_start+0x34>
    1710:	19 82       	std	Y+1, r1	; 0x01
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <I2C_send_start+0x38>
	 else{return 1;}
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	89 81       	ldd	r24, Y+1	; 0x01
 }
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <I2C_select_slave>:
 u8 I2C_select_slave(u8 Copy_slave_add,u8 Copy_W_R)
 {u8 status=0;
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	00 d0       	rcall	.+0      	; 0x1728 <I2C_select_slave+0x6>
    1728:	00 d0       	rcall	.+0      	; 0x172a <I2C_select_slave+0x8>
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	8a 83       	std	Y+2, r24	; 0x02
    1730:	6b 83       	std	Y+3, r22	; 0x03
    1732:	19 82       	std	Y+1, r1	; 0x01
	 if (Copy_W_R==0)         // write
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	88 23       	and	r24, r24
    1738:	99 f4       	brne	.+38     	; 0x1760 <I2C_select_slave+0x3e>
	 {TWDR=(Copy_slave_add<<1);
    173a:	e3 e2       	ldi	r30, 0x23	; 35
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	88 0f       	add	r24, r24
    1742:	80 83       	st	Z, r24
	  TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1744:	e6 e5       	ldi	r30, 0x56	; 86
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	84 ec       	ldi	r24, 0xC4	; 196
    174a:	80 83       	st	Z, r24
	  while(GET_BIT(TWCR,TWINT)==0);  // wait the flag
    174c:	e6 e5       	ldi	r30, 0x56	; 86
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	88 23       	and	r24, r24
    1754:	dc f7       	brge	.-10     	; 0x174c <I2C_select_slave+0x2a>
	  if ((TWSR & 0xF8) != 18) {status= 0;}   // no ACK
    1756:	e1 e2       	ldi	r30, 0x21	; 33
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	19 82       	std	Y+1, r1	; 0x01
    175e:	23 c0       	rjmp	.+70     	; 0x17a6 <I2C_select_slave+0x84>
	  else {status= 1;}
	 }
	 else if(Copy_W_R==1)   // read
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	81 30       	cpi	r24, 0x01	; 1
    1764:	01 f5       	brne	.+64     	; 0x17a6 <I2C_select_slave+0x84>
	 {TWDR=(Copy_slave_add<<1)|1;
    1766:	e3 e2       	ldi	r30, 0x23	; 35
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	88 2f       	mov	r24, r24
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	81 60       	ori	r24, 0x01	; 1
    1776:	80 83       	st	Z, r24
	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1778:	e6 e5       	ldi	r30, 0x56	; 86
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	84 ec       	ldi	r24, 0xC4	; 196
    177e:	80 83       	st	Z, r24
	 while(GET_BIT(TWCR,7)==0);  // wait the flag
    1780:	e6 e5       	ldi	r30, 0x56	; 86
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	88 23       	and	r24, r24
    1788:	dc f7       	brge	.-10     	; 0x1780 <I2C_select_slave+0x5e>
	 if ((TWSR & 0xF8) != 40) {status= 0;}   // no ACK
    178a:	e1 e2       	ldi	r30, 0x21	; 33
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	88 7f       	andi	r24, 0xF8	; 248
    1796:	90 70       	andi	r25, 0x00	; 0
    1798:	88 32       	cpi	r24, 0x28	; 40
    179a:	91 05       	cpc	r25, r1
    179c:	11 f0       	breq	.+4      	; 0x17a2 <I2C_select_slave+0x80>
    179e:	19 82       	std	Y+1, r1	; 0x01
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <I2C_select_slave+0x84>
	 else {status= 1;}
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	89 83       	std	Y+1, r24	; 0x01
	 }
	 return status;
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
 }
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <I2C_Master_send_data>:

 u8 I2C_Master_send_data(u8 Copy_data)
 {
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <I2C_Master_send_data+0x6>
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	89 83       	std	Y+1, r24	; 0x01

	 TWDR =Copy_data;
    17c2:	e3 e2       	ldi	r30, 0x23	; 35
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	80 83       	st	Z, r24
	 TWCR=(1<<TWINT)|(1<<TWEN);
    17ca:	e6 e5       	ldi	r30, 0x56	; 86
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	84 e8       	ldi	r24, 0x84	; 132
    17d0:	80 83       	st	Z, r24
	 while (GET_BIT(TWCR,TWINT)==0);        // wait flag
    17d2:	e6 e5       	ldi	r30, 0x56	; 86
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	88 23       	and	r24, r24
    17da:	dc f7       	brge	.-10     	; 0x17d2 <I2C_Master_send_data+0x1c>
	 if ((TWSR & 0xF8) != 28){return 0;}
    17dc:	e1 e2       	ldi	r30, 0x21	; 33
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	80 e0       	ldi	r24, 0x00	; 0
	 else{return 1;}

 }
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <I2C_Slave_recive_data>:


 u8 I2C_Slave_recive_data(u8 *status)
  {u8 Temp=0;
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <I2C_Slave_recive_data+0x6>
    17f4:	0f 92       	push	r0
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	9b 83       	std	Y+3, r25	; 0x03
    17fc:	8a 83       	std	Y+2, r24	; 0x02
    17fe:	19 82       	std	Y+1, r1	; 0x01


  	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA)  ;
    1800:	e6 e5       	ldi	r30, 0x56	; 86
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	84 ec       	ldi	r24, 0xC4	; 196
    1806:	80 83       	st	Z, r24
  	 while (GET_BIT(TWCR,TWINT)==0);  // wait flag
    1808:	e6 e5       	ldi	r30, 0x56	; 86
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	88 23       	and	r24, r24
    1810:	dc f7       	brge	.-10     	; 0x1808 <I2C_Slave_recive_data+0x1a>

  	 if((TWSR & 0xf8) == 0x60)   // status =received address
    1812:	e1 e2       	ldi	r30, 0x21	; 33
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	88 2f       	mov	r24, r24
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	88 7f       	andi	r24, 0xF8	; 248
    181e:	90 70       	andi	r25, 0x00	; 0
    1820:	80 36       	cpi	r24, 0x60	; 96
    1822:	91 05       	cpc	r25, r1
    1824:	71 f4       	brne	.+28     	; 0x1842 <I2C_Slave_recive_data+0x54>
  	 {
  		 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA)  ;  //start again to skip the address byte
    1826:	e6 e5       	ldi	r30, 0x56	; 86
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	84 ec       	ldi	r24, 0xC4	; 196
    182c:	80 83       	st	Z, r24
  		 while (GET_BIT(TWCR,TWINT)==0);  // wait flag
    182e:	e6 e5       	ldi	r30, 0x56	; 86
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	88 23       	and	r24, r24
    1836:	dc f7       	brge	.-10     	; 0x182e <I2C_Slave_recive_data+0x40>
  		 Temp=TWDR;
    1838:	e3 e2       	ldi	r30, 0x23	; 35
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	04 c0       	rjmp	.+8      	; 0x184a <I2C_Slave_recive_data+0x5c>
  	 }
  	 else
  	 {Temp=TWDR;}
    1842:	e3 e2       	ldi	r30, 0x23	; 35
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	89 83       	std	Y+1, r24	; 0x01

  	if (status!= NULL)
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	9b 81       	ldd	r25, Y+3	; 0x03
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	91 f0       	breq	.+36     	; 0x1876 <I2C_Slave_recive_data+0x88>
  	{if ((TWSR & 0xF8) != 80){*status= 0;}
    1852:	e1 e2       	ldi	r30, 0x21	; 33
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	88 7f       	andi	r24, 0xF8	; 248
    185e:	90 70       	andi	r25, 0x00	; 0
    1860:	80 35       	cpi	r24, 0x50	; 80
    1862:	91 05       	cpc	r25, r1
    1864:	21 f0       	breq	.+8      	; 0x186e <I2C_Slave_recive_data+0x80>
    1866:	ea 81       	ldd	r30, Y+2	; 0x02
    1868:	fb 81       	ldd	r31, Y+3	; 0x03
    186a:	10 82       	st	Z, r1
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <I2C_Slave_recive_data+0x88>
  	else{*status= 1;}
    186e:	ea 81       	ldd	r30, Y+2	; 0x02
    1870:	fb 81       	ldd	r31, Y+3	; 0x03
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	80 83       	st	Z, r24
  	}
  	return Temp;
    1876:	89 81       	ldd	r24, Y+1	; 0x01
  }
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <I2C_stop>:
void I2C_stop(void )
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    188c:	e6 e5       	ldi	r30, 0x56	; 86
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	84 e9       	ldi	r24, 0x94	; 148
    1892:	80 83       	st	Z, r24
}
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <I2C_master_init>:

void I2C_master_init(void )
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
	TWSR=(0<<TWPS0)|(0<<TWPS1);     //prescaler
    18a2:	e1 e2       	ldi	r30, 0x21	; 33
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	10 82       	st	Z, r1
	TWBR=32;		  // bit rate
    18a8:	e0 e2       	ldi	r30, 0x20	; 32
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 e2       	ldi	r24, 0x20	; 32
    18ae:	80 83       	st	Z, r24
	TWAR=10;       /// any address except 0000 or 1111
    18b0:	e2 e2       	ldi	r30, 0x22	; 34
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	8a e0       	ldi	r24, 0x0A	; 10
    18b6:	80 83       	st	Z, r24
}
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <I2C_slave_init>:


void I2C_slave_init(void )
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	TWAR=5<<1;                     /// 0000 or 1111   address
    18c6:	e2 e2       	ldi	r30, 0x22	; 34
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	8a e0       	ldi	r24, 0x0A	; 10
    18cc:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    18ce:	e6 e5       	ldi	r30, 0x56	; 86
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	84 ec       	ldi	r24, 0xC4	; 196
    18d4:	80 83       	st	Z, r24

}
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <main>:
#include "I2C_PRIVATE.h"
#include "LCD_interface.h"
#include "LCD_I2C_Interface.h"

void main (void)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	28 97       	sbiw	r28, 0x08	; 8
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
	u8 init_array[]= {
			0b00111000,
			0b00001100,
			0b00000001

	};
    18f0:	ce 01       	movw	r24, r28
    18f2:	01 96       	adiw	r24, 0x01	; 1
    18f4:	9d 83       	std	Y+5, r25	; 0x05
    18f6:	8c 83       	std	Y+4, r24	; 0x04
    18f8:	e0 e7       	ldi	r30, 0x70	; 112
    18fa:	f1 e0       	ldi	r31, 0x01	; 1
    18fc:	ff 83       	std	Y+7, r31	; 0x07
    18fe:	ee 83       	std	Y+6, r30	; 0x06
    1900:	f3 e0       	ldi	r31, 0x03	; 3
    1902:	f8 87       	std	Y+8, r31	; 0x08
    1904:	ee 81       	ldd	r30, Y+6	; 0x06
    1906:	ff 81       	ldd	r31, Y+7	; 0x07
    1908:	00 80       	ld	r0, Z
    190a:	8e 81       	ldd	r24, Y+6	; 0x06
    190c:	9f 81       	ldd	r25, Y+7	; 0x07
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	9f 83       	std	Y+7, r25	; 0x07
    1912:	8e 83       	std	Y+6, r24	; 0x06
    1914:	ec 81       	ldd	r30, Y+4	; 0x04
    1916:	fd 81       	ldd	r31, Y+5	; 0x05
    1918:	00 82       	st	Z, r0
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	9d 81       	ldd	r25, Y+5	; 0x05
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	9d 83       	std	Y+5, r25	; 0x05
    1922:	8c 83       	std	Y+4, r24	; 0x04
    1924:	98 85       	ldd	r25, Y+8	; 0x08
    1926:	91 50       	subi	r25, 0x01	; 1
    1928:	98 87       	std	Y+8, r25	; 0x08
    192a:	e8 85       	ldd	r30, Y+8	; 0x08
    192c:	ee 23       	and	r30, r30
    192e:	51 f7       	brne	.-44     	; 0x1904 <main+0x28>
	LCD_I2C_init(init_array,3);
    1930:	ce 01       	movw	r24, r28
    1932:	01 96       	adiw	r24, 0x01	; 1
    1934:	63 e0       	ldi	r22, 0x03	; 3
    1936:	0e 94 ac 0c 	call	0x1958	; 0x1958 <LCD_I2C_init>
	LCD_I2C_SendFloat(-12.5);
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	88 e4       	ldi	r24, 0x48	; 72
    1940:	91 ec       	ldi	r25, 0xC1	; 193
    1942:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <LCD_I2C_SendFloat>
		LCD_I2C_SendString("/");
    1946:	80 e6       	ldi	r24, 0x60	; 96
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0e 94 67 11 	call	0x22ce	; 0x22ce <LCD_I2C_SendString>
		LCD_I2C_SendString("Ahmed");
    194e:	82 e6       	ldi	r24, 0x62	; 98
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 67 11 	call	0x22ce	; 0x22ce <LCD_I2C_SendString>
    1956:	ff cf       	rjmp	.-2      	; 0x1956 <main+0x7a>

00001958 <LCD_I2C_init>:
#define LCD_I2C_Data 						6

#define LCD_I2C_CGRAMData			7

void LCD_I2C_init(u8 *Copy_u8CommandArray,u8 Copy_u8Size)
{
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	ca 54       	subi	r28, 0x4A	; 74
    1966:	d0 40       	sbci	r29, 0x00	; 0
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	fe 01       	movw	r30, r28
    1974:	e8 5b       	subi	r30, 0xB8	; 184
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	80 83       	st	Z, r24
    197c:	fe 01       	movw	r30, r28
    197e:	e6 5b       	subi	r30, 0xB6	; 182
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	60 83       	st	Z, r22
	u8 i = 0;
    1984:	fe 01       	movw	r30, r28
    1986:	e9 5b       	subi	r30, 0xB9	; 185
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	10 82       	st	Z, r1
    198c:	fe 01       	movw	r30, r28
    198e:	ed 5b       	subi	r30, 0xBD	; 189
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a0 e2       	ldi	r26, 0x20	; 32
    1998:	b2 e4       	ldi	r27, 0x42	; 66
    199a:	80 83       	st	Z, r24
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	a2 83       	std	Z+2, r26	; 0x02
    19a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a2:	8e 01       	movw	r16, r28
    19a4:	01 5c       	subi	r16, 0xC1	; 193
    19a6:	1f 4f       	sbci	r17, 0xFF	; 255
    19a8:	fe 01       	movw	r30, r28
    19aa:	ed 5b       	subi	r30, 0xBD	; 189
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a ef       	ldi	r20, 0xFA	; 250
    19bc:	54 e4       	ldi	r21, 0x44	; 68
    19be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	f8 01       	movw	r30, r16
    19c8:	80 83       	st	Z, r24
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	a2 83       	std	Z+2, r26	; 0x02
    19ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d0:	fe 01       	movw	r30, r28
    19d2:	ff 96       	adiw	r30, 0x3f	; 63
    19d4:	60 81       	ld	r22, Z
    19d6:	71 81       	ldd	r23, Z+1	; 0x01
    19d8:	82 81       	ldd	r24, Z+2	; 0x02
    19da:	93 81       	ldd	r25, Z+3	; 0x03
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e8       	ldi	r20, 0x80	; 128
    19e2:	5f e3       	ldi	r21, 0x3F	; 63
    19e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19e8:	88 23       	and	r24, r24
    19ea:	2c f4       	brge	.+10     	; 0x19f6 <LCD_I2C_init+0x9e>
		__ticks = 1;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	9e af       	std	Y+62, r25	; 0x3e
    19f2:	8d af       	std	Y+61, r24	; 0x3d
    19f4:	46 c0       	rjmp	.+140    	; 0x1a82 <LCD_I2C_init+0x12a>
	else if (__tmp > 65535)
    19f6:	fe 01       	movw	r30, r28
    19f8:	ff 96       	adiw	r30, 0x3f	; 63
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	3f ef       	ldi	r19, 0xFF	; 255
    1a06:	4f e7       	ldi	r20, 0x7F	; 127
    1a08:	57 e4       	ldi	r21, 0x47	; 71
    1a0a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a0e:	18 16       	cp	r1, r24
    1a10:	64 f5       	brge	.+88     	; 0x1a6a <LCD_I2C_init+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a12:	fe 01       	movw	r30, r28
    1a14:	ed 5b       	subi	r30, 0xBD	; 189
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e2       	ldi	r20, 0x20	; 32
    1a26:	51 e4       	ldi	r21, 0x41	; 65
    1a28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	bc 01       	movw	r22, r24
    1a32:	cd 01       	movw	r24, r26
    1a34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9e af       	std	Y+62, r25	; 0x3e
    1a3e:	8d af       	std	Y+61, r24	; 0x3d
    1a40:	0f c0       	rjmp	.+30     	; 0x1a60 <LCD_I2C_init+0x108>
    1a42:	88 ec       	ldi	r24, 0xC8	; 200
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9c af       	std	Y+60, r25	; 0x3c
    1a48:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a4a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a4c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <LCD_I2C_init+0xf6>
    1a52:	9c af       	std	Y+60, r25	; 0x3c
    1a54:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	9e af       	std	Y+62, r25	; 0x3e
    1a5e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a60:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a62:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	69 f7       	brne	.-38     	; 0x1a42 <LCD_I2C_init+0xea>
    1a68:	16 c0       	rjmp	.+44     	; 0x1a96 <LCD_I2C_init+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	ff 96       	adiw	r30, 0x3f	; 63
    1a6e:	60 81       	ld	r22, Z
    1a70:	71 81       	ldd	r23, Z+1	; 0x01
    1a72:	82 81       	ldd	r24, Z+2	; 0x02
    1a74:	93 81       	ldd	r25, Z+3	; 0x03
    1a76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	9e af       	std	Y+62, r25	; 0x3e
    1a80:	8d af       	std	Y+61, r24	; 0x3d
    1a82:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a84:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a86:	9a af       	std	Y+58, r25	; 0x3a
    1a88:	89 af       	std	Y+57, r24	; 0x39
    1a8a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a8c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_I2C_init+0x136>
    1a92:	9a af       	std	Y+58, r25	; 0x3a
    1a94:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);
	I2C_master_init();
    1a96:	0e 94 4d 0c 	call	0x189a	; 0x189a <I2C_master_init>
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a0 ef       	ldi	r26, 0xF0	; 240
    1aa0:	b2 e4       	ldi	r27, 0x42	; 66
    1aa2:	8d ab       	std	Y+53, r24	; 0x35
    1aa4:	9e ab       	std	Y+54, r25	; 0x36
    1aa6:	af ab       	std	Y+55, r26	; 0x37
    1aa8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aaa:	6d a9       	ldd	r22, Y+53	; 0x35
    1aac:	7e a9       	ldd	r23, Y+54	; 0x36
    1aae:	8f a9       	ldd	r24, Y+55	; 0x37
    1ab0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	4a ef       	ldi	r20, 0xFA	; 250
    1ab8:	54 e4       	ldi	r21, 0x44	; 68
    1aba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	89 ab       	std	Y+49, r24	; 0x31
    1ac4:	9a ab       	std	Y+50, r25	; 0x32
    1ac6:	ab ab       	std	Y+51, r26	; 0x33
    1ac8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aca:	69 a9       	ldd	r22, Y+49	; 0x31
    1acc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ace:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e8       	ldi	r20, 0x80	; 128
    1ad8:	5f e3       	ldi	r21, 0x3F	; 63
    1ada:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ade:	88 23       	and	r24, r24
    1ae0:	2c f4       	brge	.+10     	; 0x1aec <LCD_I2C_init+0x194>
		__ticks = 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	98 ab       	std	Y+48, r25	; 0x30
    1ae8:	8f a7       	std	Y+47, r24	; 0x2f
    1aea:	3f c0       	rjmp	.+126    	; 0x1b6a <LCD_I2C_init+0x212>
	else if (__tmp > 65535)
    1aec:	69 a9       	ldd	r22, Y+49	; 0x31
    1aee:	7a a9       	ldd	r23, Y+50	; 0x32
    1af0:	8b a9       	ldd	r24, Y+51	; 0x33
    1af2:	9c a9       	ldd	r25, Y+52	; 0x34
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	3f ef       	ldi	r19, 0xFF	; 255
    1af8:	4f e7       	ldi	r20, 0x7F	; 127
    1afa:	57 e4       	ldi	r21, 0x47	; 71
    1afc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b00:	18 16       	cp	r1, r24
    1b02:	4c f5       	brge	.+82     	; 0x1b56 <LCD_I2C_init+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b04:	6d a9       	ldd	r22, Y+53	; 0x35
    1b06:	7e a9       	ldd	r23, Y+54	; 0x36
    1b08:	8f a9       	ldd	r24, Y+55	; 0x37
    1b0a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e2       	ldi	r20, 0x20	; 32
    1b12:	51 e4       	ldi	r21, 0x41	; 65
    1b14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	98 ab       	std	Y+48, r25	; 0x30
    1b2a:	8f a7       	std	Y+47, r24	; 0x2f
    1b2c:	0f c0       	rjmp	.+30     	; 0x1b4c <LCD_I2C_init+0x1f4>
    1b2e:	88 ec       	ldi	r24, 0xC8	; 200
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9e a7       	std	Y+46, r25	; 0x2e
    1b34:	8d a7       	std	Y+45, r24	; 0x2d
    1b36:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b38:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <LCD_I2C_init+0x1e2>
    1b3e:	9e a7       	std	Y+46, r25	; 0x2e
    1b40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b44:	98 a9       	ldd	r25, Y+48	; 0x30
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	98 ab       	std	Y+48, r25	; 0x30
    1b4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	69 f7       	brne	.-38     	; 0x1b2e <LCD_I2C_init+0x1d6>
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <LCD_I2C_init+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b56:	69 a9       	ldd	r22, Y+49	; 0x31
    1b58:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	98 ab       	std	Y+48, r25	; 0x30
    1b68:	8f a7       	std	Y+47, r24	; 0x2f
    1b6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b6e:	9c a7       	std	Y+44, r25	; 0x2c
    1b70:	8b a7       	std	Y+43, r24	; 0x2b
    1b72:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b74:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <LCD_I2C_init+0x21e>
    1b7a:	9c a7       	std	Y+44, r25	; 0x2c
    1b7c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(120);
	I2C_send_start();
    1b7e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_send_start>
	I2C_select_slave(5,0);
    1b82:	85 e0       	ldi	r24, 0x05	; 5
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	0e 94 91 0b 	call	0x1722	; 0x1722 <I2C_select_slave>
	_delay_ms(100);
	I2C_Master_send_data(command);
	_delay_ms(100);
	I2C_Master_send_data(0b00000001);
	*/
	for(i = 0; i<Copy_u8Size;i++){
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	e9 5b       	subi	r30, 0xB9	; 185
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	10 82       	st	Z, r1
    1b92:	01 c1       	rjmp	.+514    	; 0x1d96 <LCD_I2C_init+0x43e>
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	a8 ec       	ldi	r26, 0xC8	; 200
    1b9a:	b2 e4       	ldi	r27, 0x42	; 66
    1b9c:	8f a3       	std	Y+39, r24	; 0x27
    1b9e:	98 a7       	std	Y+40, r25	; 0x28
    1ba0:	a9 a7       	std	Y+41, r26	; 0x29
    1ba2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ba8:	89 a5       	ldd	r24, Y+41	; 0x29
    1baa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	4a ef       	ldi	r20, 0xFA	; 250
    1bb2:	54 e4       	ldi	r21, 0x44	; 68
    1bb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	8b a3       	std	Y+35, r24	; 0x23
    1bbe:	9c a3       	std	Y+36, r25	; 0x24
    1bc0:	ad a3       	std	Y+37, r26	; 0x25
    1bc2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bc4:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc6:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bca:	9e a1       	ldd	r25, Y+38	; 0x26
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e8       	ldi	r20, 0x80	; 128
    1bd2:	5f e3       	ldi	r21, 0x3F	; 63
    1bd4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bd8:	88 23       	and	r24, r24
    1bda:	2c f4       	brge	.+10     	; 0x1be6 <LCD_I2C_init+0x28e>
		__ticks = 1;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9a a3       	std	Y+34, r25	; 0x22
    1be2:	89 a3       	std	Y+33, r24	; 0x21
    1be4:	3f c0       	rjmp	.+126    	; 0x1c64 <LCD_I2C_init+0x30c>
	else if (__tmp > 65535)
    1be6:	6b a1       	ldd	r22, Y+35	; 0x23
    1be8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bea:	8d a1       	ldd	r24, Y+37	; 0x25
    1bec:	9e a1       	ldd	r25, Y+38	; 0x26
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	3f ef       	ldi	r19, 0xFF	; 255
    1bf2:	4f e7       	ldi	r20, 0x7F	; 127
    1bf4:	57 e4       	ldi	r21, 0x47	; 71
    1bf6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bfa:	18 16       	cp	r1, r24
    1bfc:	4c f5       	brge	.+82     	; 0x1c50 <LCD_I2C_init+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfe:	6f a1       	ldd	r22, Y+39	; 0x27
    1c00:	78 a5       	ldd	r23, Y+40	; 0x28
    1c02:	89 a5       	ldd	r24, Y+41	; 0x29
    1c04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e2       	ldi	r20, 0x20	; 32
    1c0c:	51 e4       	ldi	r21, 0x41	; 65
    1c0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	bc 01       	movw	r22, r24
    1c18:	cd 01       	movw	r24, r26
    1c1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	9a a3       	std	Y+34, r25	; 0x22
    1c24:	89 a3       	std	Y+33, r24	; 0x21
    1c26:	0f c0       	rjmp	.+30     	; 0x1c46 <LCD_I2C_init+0x2ee>
    1c28:	88 ec       	ldi	r24, 0xC8	; 200
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	98 a3       	std	Y+32, r25	; 0x20
    1c2e:	8f 8f       	std	Y+31, r24	; 0x1f
    1c30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c32:	98 a1       	ldd	r25, Y+32	; 0x20
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <LCD_I2C_init+0x2dc>
    1c38:	98 a3       	std	Y+32, r25	; 0x20
    1c3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	9a a3       	std	Y+34, r25	; 0x22
    1c44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c46:	89 a1       	ldd	r24, Y+33	; 0x21
    1c48:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	69 f7       	brne	.-38     	; 0x1c28 <LCD_I2C_init+0x2d0>
    1c4e:	14 c0       	rjmp	.+40     	; 0x1c78 <LCD_I2C_init+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c50:	6b a1       	ldd	r22, Y+35	; 0x23
    1c52:	7c a1       	ldd	r23, Y+36	; 0x24
    1c54:	8d a1       	ldd	r24, Y+37	; 0x25
    1c56:	9e a1       	ldd	r25, Y+38	; 0x26
    1c58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9a a3       	std	Y+34, r25	; 0x22
    1c62:	89 a3       	std	Y+33, r24	; 0x21
    1c64:	89 a1       	ldd	r24, Y+33	; 0x21
    1c66:	9a a1       	ldd	r25, Y+34	; 0x22
    1c68:	9e 8f       	std	Y+30, r25	; 0x1e
    1c6a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <LCD_I2C_init+0x318>
    1c74:	9e 8f       	std	Y+30, r25	; 0x1e
    1c76:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		I2C_Master_send_data(LCD_I2C_Command);
    1c78:	85 e0       	ldi	r24, 0x05	; 5
    1c7a:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	a8 ec       	ldi	r26, 0xC8	; 200
    1c84:	b2 e4       	ldi	r27, 0x42	; 66
    1c86:	89 8f       	std	Y+25, r24	; 0x19
    1c88:	9a 8f       	std	Y+26, r25	; 0x1a
    1c8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	8d 8b       	std	Y+21, r24	; 0x15
    1ca8:	9e 8b       	std	Y+22, r25	; 0x16
    1caa:	af 8b       	std	Y+23, r26	; 0x17
    1cac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cae:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	2c f4       	brge	.+10     	; 0x1cd0 <LCD_I2C_init+0x378>
		__ticks = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9c 8b       	std	Y+20, r25	; 0x14
    1ccc:	8b 8b       	std	Y+19, r24	; 0x13
    1cce:	3f c0       	rjmp	.+126    	; 0x1d4e <LCD_I2C_init+0x3f6>
	else if (__tmp > 65535)
    1cd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	3f ef       	ldi	r19, 0xFF	; 255
    1cdc:	4f e7       	ldi	r20, 0x7F	; 127
    1cde:	57 e4       	ldi	r21, 0x47	; 71
    1ce0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	4c f5       	brge	.+82     	; 0x1d3a <LCD_I2C_init+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e2       	ldi	r20, 0x20	; 32
    1cf6:	51 e4       	ldi	r21, 0x41	; 65
    1cf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	bc 01       	movw	r22, r24
    1d02:	cd 01       	movw	r24, r26
    1d04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9c 8b       	std	Y+20, r25	; 0x14
    1d0e:	8b 8b       	std	Y+19, r24	; 0x13
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <LCD_I2C_init+0x3d8>
    1d12:	88 ec       	ldi	r24, 0xC8	; 200
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9a 8b       	std	Y+18, r25	; 0x12
    1d18:	89 8b       	std	Y+17, r24	; 0x11
    1d1a:	89 89       	ldd	r24, Y+17	; 0x11
    1d1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <LCD_I2C_init+0x3c6>
    1d22:	9a 8b       	std	Y+18, r25	; 0x12
    1d24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d26:	8b 89       	ldd	r24, Y+19	; 0x13
    1d28:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	9c 8b       	std	Y+20, r25	; 0x14
    1d2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d30:	8b 89       	ldd	r24, Y+19	; 0x13
    1d32:	9c 89       	ldd	r25, Y+20	; 0x14
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	69 f7       	brne	.-38     	; 0x1d12 <LCD_I2C_init+0x3ba>
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <LCD_I2C_init+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d40:	98 8d       	ldd	r25, Y+24	; 0x18
    1d42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9c 8b       	std	Y+20, r25	; 0x14
    1d4c:	8b 8b       	std	Y+19, r24	; 0x13
    1d4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d50:	9c 89       	ldd	r25, Y+20	; 0x14
    1d52:	98 8b       	std	Y+16, r25	; 0x10
    1d54:	8f 87       	std	Y+15, r24	; 0x0f
    1d56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d58:	98 89       	ldd	r25, Y+16	; 0x10
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <LCD_I2C_init+0x402>
    1d5e:	98 8b       	std	Y+16, r25	; 0x10
    1d60:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		I2C_Master_send_data(Copy_u8CommandArray[i]);
    1d62:	fe 01       	movw	r30, r28
    1d64:	e9 5b       	subi	r30, 0xB9	; 185
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 81       	ld	r24, Z
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e8 5b       	subi	r30, 0xB8	; 184
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 81       	ld	r24, Z
    1d76:	91 81       	ldd	r25, Z+1	; 0x01
    1d78:	fc 01       	movw	r30, r24
    1d7a:	e2 0f       	add	r30, r18
    1d7c:	f3 1f       	adc	r31, r19
    1d7e:	80 81       	ld	r24, Z
    1d80:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
	_delay_ms(100);
	I2C_Master_send_data(command);
	_delay_ms(100);
	I2C_Master_send_data(0b00000001);
	*/
	for(i = 0; i<Copy_u8Size;i++){
    1d84:	de 01       	movw	r26, r28
    1d86:	a9 5b       	subi	r26, 0xB9	; 185
    1d88:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e9 5b       	subi	r30, 0xB9	; 185
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 81       	ld	r24, Z
    1d92:	8f 5f       	subi	r24, 0xFF	; 255
    1d94:	8c 93       	st	X, r24
    1d96:	fe 01       	movw	r30, r28
    1d98:	e9 5b       	subi	r30, 0xB9	; 185
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	de 01       	movw	r26, r28
    1d9e:	a6 5b       	subi	r26, 0xB6	; 182
    1da0:	bf 4f       	sbci	r27, 0xFF	; 255
    1da2:	90 81       	ld	r25, Z
    1da4:	8c 91       	ld	r24, X
    1da6:	98 17       	cp	r25, r24
    1da8:	08 f4       	brcc	.+2      	; 0x1dac <LCD_I2C_init+0x454>
    1daa:	f4 ce       	rjmp	.-536    	; 0x1b94 <LCD_I2C_init+0x23c>
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a0 e2       	ldi	r26, 0x20	; 32
    1db2:	b1 e4       	ldi	r27, 0x41	; 65
    1db4:	8b 87       	std	Y+11, r24	; 0x0b
    1db6:	9c 87       	std	Y+12, r25	; 0x0c
    1db8:	ad 87       	std	Y+13, r26	; 0x0d
    1dba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a ef       	ldi	r20, 0xFA	; 250
    1dca:	54 e4       	ldi	r21, 0x44	; 68
    1dcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	8f 83       	std	Y+7, r24	; 0x07
    1dd6:	98 87       	std	Y+8, r25	; 0x08
    1dd8:	a9 87       	std	Y+9, r26	; 0x09
    1dda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dde:	78 85       	ldd	r23, Y+8	; 0x08
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1df0:	88 23       	and	r24, r24
    1df2:	2c f4       	brge	.+10     	; 0x1dfe <LCD_I2C_init+0x4a6>
		__ticks = 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	3f c0       	rjmp	.+126    	; 0x1e7c <LCD_I2C_init+0x524>
	else if (__tmp > 65535)
    1dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1e00:	78 85       	ldd	r23, Y+8	; 0x08
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	57 e4       	ldi	r21, 0x47	; 71
    1e0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	4c f5       	brge	.+82     	; 0x1e68 <LCD_I2C_init+0x510>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e2       	ldi	r20, 0x20	; 32
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9e 83       	std	Y+6, r25	; 0x06
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
    1e3e:	0f c0       	rjmp	.+30     	; 0x1e5e <LCD_I2C_init+0x506>
    1e40:	88 ec       	ldi	r24, 0xC8	; 200
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9c 83       	std	Y+4, r25	; 0x04
    1e46:	8b 83       	std	Y+3, r24	; 0x03
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <LCD_I2C_init+0x4f4>
    1e50:	9c 83       	std	Y+4, r25	; 0x04
    1e52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <LCD_I2C_init+0x4e8>
    1e66:	14 c0       	rjmp	.+40     	; 0x1e90 <LCD_I2C_init+0x538>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
    1e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <LCD_I2C_init+0x530>
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01
		I2C_Master_send_data(LCD_I2C_Command);
		_delay_ms(100);
		I2C_Master_send_data(Copy_u8CommandArray[i]);
	}
	_delay_ms(10);
	I2C_stop();
    1e90:	0e 94 42 0c 	call	0x1884	; 0x1884 <I2C_stop>
}
    1e94:	c6 5b       	subi	r28, 0xB6	; 182
    1e96:	df 4f       	sbci	r29, 0xFF	; 255
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	08 95       	ret

00001eac <LCD_I2C_SendNum>:
void LCD_I2C_SendNum(s16 Copy_u16num){
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	ed 97       	sbiw	r28, 0x3d	; 61
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	9d af       	std	Y+61, r25	; 0x3d
    1ec2:	8c af       	std	Y+60, r24	; 0x3c

	// For checking if the number is negative or not
	u8 signindicate = (Copy_u16num<0)? 1:0;
    1ec4:	1b ae       	std	Y+59, r1	; 0x3b
    1ec6:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ec8:	9d ad       	ldd	r25, Y+61	; 0x3d
    1eca:	99 23       	and	r25, r25
    1ecc:	14 f4       	brge	.+4      	; 0x1ed2 <LCD_I2C_SendNum+0x26>
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	8b af       	std	Y+59, r24	; 0x3b

	if(signindicate){
    1ed2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ed4:	88 23       	and	r24, r24
    1ed6:	39 f0       	breq	.+14     	; 0x1ee6 <LCD_I2C_SendNum+0x3a>
		// The number is -ve
		Copy_u16num = Copy_u16num * -1;
    1ed8:	8c ad       	ldd	r24, Y+60	; 0x3c
    1eda:	9d ad       	ldd	r25, Y+61	; 0x3d
    1edc:	90 95       	com	r25
    1ede:	81 95       	neg	r24
    1ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee2:	9d af       	std	Y+61, r25	; 0x3d
    1ee4:	8c af       	std	Y+60, r24	; 0x3c
	}
	u8 LSB=(u8)Copy_u16num;
    1ee6:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ee8:	8a af       	std	Y+58, r24	; 0x3a
	u8 MSB= (u8)(Copy_u16num>>8);
    1eea:	8c ad       	ldd	r24, Y+60	; 0x3c
    1eec:	9d ad       	ldd	r25, Y+61	; 0x3d
    1eee:	89 2f       	mov	r24, r25
    1ef0:	99 0f       	add	r25, r25
    1ef2:	99 0b       	sbc	r25, r25
    1ef4:	89 af       	std	Y+57, r24	; 0x39
	if(signindicate){
    1ef6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ef8:	88 23       	and	r24, r24
    1efa:	19 f0       	breq	.+6      	; 0x1f02 <LCD_I2C_SendNum+0x56>
		LCD_I2C_SendData('-');
    1efc:	8d e2       	ldi	r24, 0x2D	; 45
    1efe:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_I2C_SendData>

	}

	// Start the transmission
	I2C_send_start();
    1f02:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_send_start>
	I2C_select_slave(5,0);
    1f06:	85 e0       	ldi	r24, 0x05	; 5
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	0e 94 91 0b 	call	0x1722	; 0x1722 <I2C_select_slave>
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a8 e4       	ldi	r26, 0x48	; 72
    1f14:	b3 e4       	ldi	r27, 0x43	; 67
    1f16:	8d ab       	std	Y+53, r24	; 0x35
    1f18:	9e ab       	std	Y+54, r25	; 0x36
    1f1a:	af ab       	std	Y+55, r26	; 0x37
    1f1c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f20:	7e a9       	ldd	r23, Y+54	; 0x36
    1f22:	8f a9       	ldd	r24, Y+55	; 0x37
    1f24:	98 ad       	ldd	r25, Y+56	; 0x38
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4a ef       	ldi	r20, 0xFA	; 250
    1f2c:	54 e4       	ldi	r21, 0x44	; 68
    1f2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	89 ab       	std	Y+49, r24	; 0x31
    1f38:	9a ab       	std	Y+50, r25	; 0x32
    1f3a:	ab ab       	std	Y+51, r26	; 0x33
    1f3c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f40:	7a a9       	ldd	r23, Y+50	; 0x32
    1f42:	8b a9       	ldd	r24, Y+51	; 0x33
    1f44:	9c a9       	ldd	r25, Y+52	; 0x34
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e8       	ldi	r20, 0x80	; 128
    1f4c:	5f e3       	ldi	r21, 0x3F	; 63
    1f4e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f52:	88 23       	and	r24, r24
    1f54:	2c f4       	brge	.+10     	; 0x1f60 <LCD_I2C_SendNum+0xb4>
		__ticks = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	98 ab       	std	Y+48, r25	; 0x30
    1f5c:	8f a7       	std	Y+47, r24	; 0x2f
    1f5e:	3f c0       	rjmp	.+126    	; 0x1fde <LCD_I2C_SendNum+0x132>
	else if (__tmp > 65535)
    1f60:	69 a9       	ldd	r22, Y+49	; 0x31
    1f62:	7a a9       	ldd	r23, Y+50	; 0x32
    1f64:	8b a9       	ldd	r24, Y+51	; 0x33
    1f66:	9c a9       	ldd	r25, Y+52	; 0x34
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	3f ef       	ldi	r19, 0xFF	; 255
    1f6c:	4f e7       	ldi	r20, 0x7F	; 127
    1f6e:	57 e4       	ldi	r21, 0x47	; 71
    1f70:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f74:	18 16       	cp	r1, r24
    1f76:	4c f5       	brge	.+82     	; 0x1fca <LCD_I2C_SendNum+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f78:	6d a9       	ldd	r22, Y+53	; 0x35
    1f7a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f7c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f7e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e2       	ldi	r20, 0x20	; 32
    1f86:	51 e4       	ldi	r21, 0x41	; 65
    1f88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	98 ab       	std	Y+48, r25	; 0x30
    1f9e:	8f a7       	std	Y+47, r24	; 0x2f
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <LCD_I2C_SendNum+0x114>
    1fa2:	88 ec       	ldi	r24, 0xC8	; 200
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	9e a7       	std	Y+46, r25	; 0x2e
    1fa8:	8d a7       	std	Y+45, r24	; 0x2d
    1faa:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fac:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <LCD_I2C_SendNum+0x102>
    1fb2:	9e a7       	std	Y+46, r25	; 0x2e
    1fb4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	98 ab       	std	Y+48, r25	; 0x30
    1fbe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	69 f7       	brne	.-38     	; 0x1fa2 <LCD_I2C_SendNum+0xf6>
    1fc8:	14 c0       	rjmp	.+40     	; 0x1ff2 <LCD_I2C_SendNum+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fca:	69 a9       	ldd	r22, Y+49	; 0x31
    1fcc:	7a a9       	ldd	r23, Y+50	; 0x32
    1fce:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	98 ab       	std	Y+48, r25	; 0x30
    1fdc:	8f a7       	std	Y+47, r24	; 0x2f
    1fde:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe2:	9c a7       	std	Y+44, r25	; 0x2c
    1fe4:	8b a7       	std	Y+43, r24	; 0x2b
    1fe6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fe8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_I2C_SendNum+0x13e>
    1fee:	9c a7       	std	Y+44, r25	; 0x2c
    1ff0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);


	I2C_Master_send_data(LCD_I2C_UnsignedInteger);
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	a8 e4       	ldi	r26, 0x48	; 72
    1ffe:	b3 e4       	ldi	r27, 0x43	; 67
    2000:	8f a3       	std	Y+39, r24	; 0x27
    2002:	98 a7       	std	Y+40, r25	; 0x28
    2004:	a9 a7       	std	Y+41, r26	; 0x29
    2006:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2008:	6f a1       	ldd	r22, Y+39	; 0x27
    200a:	78 a5       	ldd	r23, Y+40	; 0x28
    200c:	89 a5       	ldd	r24, Y+41	; 0x29
    200e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	4a ef       	ldi	r20, 0xFA	; 250
    2016:	54 e4       	ldi	r21, 0x44	; 68
    2018:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	8b a3       	std	Y+35, r24	; 0x23
    2022:	9c a3       	std	Y+36, r25	; 0x24
    2024:	ad a3       	std	Y+37, r26	; 0x25
    2026:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2028:	6b a1       	ldd	r22, Y+35	; 0x23
    202a:	7c a1       	ldd	r23, Y+36	; 0x24
    202c:	8d a1       	ldd	r24, Y+37	; 0x25
    202e:	9e a1       	ldd	r25, Y+38	; 0x26
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e8       	ldi	r20, 0x80	; 128
    2036:	5f e3       	ldi	r21, 0x3F	; 63
    2038:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    203c:	88 23       	and	r24, r24
    203e:	2c f4       	brge	.+10     	; 0x204a <LCD_I2C_SendNum+0x19e>
		__ticks = 1;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9a a3       	std	Y+34, r25	; 0x22
    2046:	89 a3       	std	Y+33, r24	; 0x21
    2048:	3f c0       	rjmp	.+126    	; 0x20c8 <LCD_I2C_SendNum+0x21c>
	else if (__tmp > 65535)
    204a:	6b a1       	ldd	r22, Y+35	; 0x23
    204c:	7c a1       	ldd	r23, Y+36	; 0x24
    204e:	8d a1       	ldd	r24, Y+37	; 0x25
    2050:	9e a1       	ldd	r25, Y+38	; 0x26
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	3f ef       	ldi	r19, 0xFF	; 255
    2056:	4f e7       	ldi	r20, 0x7F	; 127
    2058:	57 e4       	ldi	r21, 0x47	; 71
    205a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    205e:	18 16       	cp	r1, r24
    2060:	4c f5       	brge	.+82     	; 0x20b4 <LCD_I2C_SendNum+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2062:	6f a1       	ldd	r22, Y+39	; 0x27
    2064:	78 a5       	ldd	r23, Y+40	; 0x28
    2066:	89 a5       	ldd	r24, Y+41	; 0x29
    2068:	9a a5       	ldd	r25, Y+42	; 0x2a
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e2       	ldi	r20, 0x20	; 32
    2070:	51 e4       	ldi	r21, 0x41	; 65
    2072:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9a a3       	std	Y+34, r25	; 0x22
    2088:	89 a3       	std	Y+33, r24	; 0x21
    208a:	0f c0       	rjmp	.+30     	; 0x20aa <LCD_I2C_SendNum+0x1fe>
    208c:	88 ec       	ldi	r24, 0xC8	; 200
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	98 a3       	std	Y+32, r25	; 0x20
    2092:	8f 8f       	std	Y+31, r24	; 0x1f
    2094:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2096:	98 a1       	ldd	r25, Y+32	; 0x20
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <LCD_I2C_SendNum+0x1ec>
    209c:	98 a3       	std	Y+32, r25	; 0x20
    209e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a0:	89 a1       	ldd	r24, Y+33	; 0x21
    20a2:	9a a1       	ldd	r25, Y+34	; 0x22
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	9a a3       	std	Y+34, r25	; 0x22
    20a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20aa:	89 a1       	ldd	r24, Y+33	; 0x21
    20ac:	9a a1       	ldd	r25, Y+34	; 0x22
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	69 f7       	brne	.-38     	; 0x208c <LCD_I2C_SendNum+0x1e0>
    20b2:	14 c0       	rjmp	.+40     	; 0x20dc <LCD_I2C_SendNum+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b4:	6b a1       	ldd	r22, Y+35	; 0x23
    20b6:	7c a1       	ldd	r23, Y+36	; 0x24
    20b8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ba:	9e a1       	ldd	r25, Y+38	; 0x26
    20bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	9a a3       	std	Y+34, r25	; 0x22
    20c6:	89 a3       	std	Y+33, r24	; 0x21
    20c8:	89 a1       	ldd	r24, Y+33	; 0x21
    20ca:	9a a1       	ldd	r25, Y+34	; 0x22
    20cc:	9e 8f       	std	Y+30, r25	; 0x1e
    20ce:	8d 8f       	std	Y+29, r24	; 0x1d
    20d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <LCD_I2C_SendNum+0x228>
    20d8:	9e 8f       	std	Y+30, r25	; 0x1e
    20da:	8d 8f       	std	Y+29, r24	; 0x1d


	_delay_ms(200);
	I2C_Master_send_data(LSB);
    20dc:	8a ad       	ldd	r24, Y+58	; 0x3a
    20de:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
	if (MSB==0)
    20e2:	89 ad       	ldd	r24, Y+57	; 0x39
    20e4:	88 23       	and	r24, r24
    20e6:	09 f4       	brne	.+2      	; 0x20ea <LCD_I2C_SendNum+0x23e>
    20e8:	75 c0       	rjmp	.+234    	; 0x21d4 <LCD_I2C_SendNum+0x328>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a8 e4       	ldi	r26, 0x48	; 72
    20f0:	b3 e4       	ldi	r27, 0x43	; 67
    20f2:	89 8f       	std	Y+25, r24	; 0x19
    20f4:	9a 8f       	std	Y+26, r25	; 0x1a
    20f6:	ab 8f       	std	Y+27, r26	; 0x1b
    20f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fa:	69 8d       	ldd	r22, Y+25	; 0x19
    20fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2100:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	4a ef       	ldi	r20, 0xFA	; 250
    2108:	54 e4       	ldi	r21, 0x44	; 68
    210a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	8d 8b       	std	Y+21, r24	; 0x15
    2114:	9e 8b       	std	Y+22, r25	; 0x16
    2116:	af 8b       	std	Y+23, r26	; 0x17
    2118:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    211a:	6d 89       	ldd	r22, Y+21	; 0x15
    211c:	7e 89       	ldd	r23, Y+22	; 0x16
    211e:	8f 89       	ldd	r24, Y+23	; 0x17
    2120:	98 8d       	ldd	r25, Y+24	; 0x18
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e8       	ldi	r20, 0x80	; 128
    2128:	5f e3       	ldi	r21, 0x3F	; 63
    212a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    212e:	88 23       	and	r24, r24
    2130:	2c f4       	brge	.+10     	; 0x213c <LCD_I2C_SendNum+0x290>
		__ticks = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9c 8b       	std	Y+20, r25	; 0x14
    2138:	8b 8b       	std	Y+19, r24	; 0x13
    213a:	3f c0       	rjmp	.+126    	; 0x21ba <LCD_I2C_SendNum+0x30e>
	else if (__tmp > 65535)
    213c:	6d 89       	ldd	r22, Y+21	; 0x15
    213e:	7e 89       	ldd	r23, Y+22	; 0x16
    2140:	8f 89       	ldd	r24, Y+23	; 0x17
    2142:	98 8d       	ldd	r25, Y+24	; 0x18
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	57 e4       	ldi	r21, 0x47	; 71
    214c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2150:	18 16       	cp	r1, r24
    2152:	4c f5       	brge	.+82     	; 0x21a6 <LCD_I2C_SendNum+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2154:	69 8d       	ldd	r22, Y+25	; 0x19
    2156:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2158:	8b 8d       	ldd	r24, Y+27	; 0x1b
    215a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e2       	ldi	r20, 0x20	; 32
    2162:	51 e4       	ldi	r21, 0x41	; 65
    2164:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9c 8b       	std	Y+20, r25	; 0x14
    217a:	8b 8b       	std	Y+19, r24	; 0x13
    217c:	0f c0       	rjmp	.+30     	; 0x219c <LCD_I2C_SendNum+0x2f0>
    217e:	88 ec       	ldi	r24, 0xC8	; 200
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9a 8b       	std	Y+18, r25	; 0x12
    2184:	89 8b       	std	Y+17, r24	; 0x11
    2186:	89 89       	ldd	r24, Y+17	; 0x11
    2188:	9a 89       	ldd	r25, Y+18	; 0x12
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_I2C_SendNum+0x2de>
    218e:	9a 8b       	std	Y+18, r25	; 0x12
    2190:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2192:	8b 89       	ldd	r24, Y+19	; 0x13
    2194:	9c 89       	ldd	r25, Y+20	; 0x14
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	9c 8b       	std	Y+20, r25	; 0x14
    219a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219c:	8b 89       	ldd	r24, Y+19	; 0x13
    219e:	9c 89       	ldd	r25, Y+20	; 0x14
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	69 f7       	brne	.-38     	; 0x217e <LCD_I2C_SendNum+0x2d2>
    21a4:	14 c0       	rjmp	.+40     	; 0x21ce <LCD_I2C_SendNum+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a6:	6d 89       	ldd	r22, Y+21	; 0x15
    21a8:	7e 89       	ldd	r23, Y+22	; 0x16
    21aa:	8f 89       	ldd	r24, Y+23	; 0x17
    21ac:	98 8d       	ldd	r25, Y+24	; 0x18
    21ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9c 8b       	std	Y+20, r25	; 0x14
    21b8:	8b 8b       	std	Y+19, r24	; 0x13
    21ba:	8b 89       	ldd	r24, Y+19	; 0x13
    21bc:	9c 89       	ldd	r25, Y+20	; 0x14
    21be:	98 8b       	std	Y+16, r25	; 0x10
    21c0:	8f 87       	std	Y+15, r24	; 0x0f
    21c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c4:	98 89       	ldd	r25, Y+16	; 0x10
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <LCD_I2C_SendNum+0x31a>
    21ca:	98 8b       	std	Y+16, r25	; 0x10
    21cc:	8f 87       	std	Y+15, r24	; 0x0f

	}
	else
	{
		_delay_ms(200);
		I2C_Master_send_data(MSB);
    21ce:	89 ad       	ldd	r24, Y+57	; 0x39
    21d0:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	a0 e2       	ldi	r26, 0x20	; 32
    21da:	b1 e4       	ldi	r27, 0x41	; 65
    21dc:	8b 87       	std	Y+11, r24	; 0x0b
    21de:	9c 87       	std	Y+12, r25	; 0x0c
    21e0:	ad 87       	std	Y+13, r26	; 0x0d
    21e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4a ef       	ldi	r20, 0xFA	; 250
    21f2:	54 e4       	ldi	r21, 0x44	; 68
    21f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	8f 83       	std	Y+7, r24	; 0x07
    21fe:	98 87       	std	Y+8, r25	; 0x08
    2200:	a9 87       	std	Y+9, r26	; 0x09
    2202:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2204:	6f 81       	ldd	r22, Y+7	; 0x07
    2206:	78 85       	ldd	r23, Y+8	; 0x08
    2208:	89 85       	ldd	r24, Y+9	; 0x09
    220a:	9a 85       	ldd	r25, Y+10	; 0x0a
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e8       	ldi	r20, 0x80	; 128
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2218:	88 23       	and	r24, r24
    221a:	2c f4       	brge	.+10     	; 0x2226 <LCD_I2C_SendNum+0x37a>
		__ticks = 1;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9e 83       	std	Y+6, r25	; 0x06
    2222:	8d 83       	std	Y+5, r24	; 0x05
    2224:	3f c0       	rjmp	.+126    	; 0x22a4 <LCD_I2C_SendNum+0x3f8>
	else if (__tmp > 65535)
    2226:	6f 81       	ldd	r22, Y+7	; 0x07
    2228:	78 85       	ldd	r23, Y+8	; 0x08
    222a:	89 85       	ldd	r24, Y+9	; 0x09
    222c:	9a 85       	ldd	r25, Y+10	; 0x0a
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	3f ef       	ldi	r19, 0xFF	; 255
    2232:	4f e7       	ldi	r20, 0x7F	; 127
    2234:	57 e4       	ldi	r21, 0x47	; 71
    2236:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    223a:	18 16       	cp	r1, r24
    223c:	4c f5       	brge	.+82     	; 0x2290 <LCD_I2C_SendNum+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2240:	7c 85       	ldd	r23, Y+12	; 0x0c
    2242:	8d 85       	ldd	r24, Y+13	; 0x0d
    2244:	9e 85       	ldd	r25, Y+14	; 0x0e
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e2       	ldi	r20, 0x20	; 32
    224c:	51 e4       	ldi	r21, 0x41	; 65
    224e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9e 83       	std	Y+6, r25	; 0x06
    2264:	8d 83       	std	Y+5, r24	; 0x05
    2266:	0f c0       	rjmp	.+30     	; 0x2286 <LCD_I2C_SendNum+0x3da>
    2268:	88 ec       	ldi	r24, 0xC8	; 200
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9c 83       	std	Y+4, r25	; 0x04
    226e:	8b 83       	std	Y+3, r24	; 0x03
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <LCD_I2C_SendNum+0x3c8>
    2278:	9c 83       	std	Y+4, r25	; 0x04
    227a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	9e 81       	ldd	r25, Y+6	; 0x06
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2286:	8d 81       	ldd	r24, Y+5	; 0x05
    2288:	9e 81       	ldd	r25, Y+6	; 0x06
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	69 f7       	brne	.-38     	; 0x2268 <LCD_I2C_SendNum+0x3bc>
    228e:	14 c0       	rjmp	.+40     	; 0x22b8 <LCD_I2C_SendNum+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2290:	6f 81       	ldd	r22, Y+7	; 0x07
    2292:	78 85       	ldd	r23, Y+8	; 0x08
    2294:	89 85       	ldd	r24, Y+9	; 0x09
    2296:	9a 85       	ldd	r25, Y+10	; 0x0a
    2298:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9e 83       	std	Y+6, r25	; 0x06
    22a2:	8d 83       	std	Y+5, r24	; 0x05
    22a4:	8d 81       	ldd	r24, Y+5	; 0x05
    22a6:	9e 81       	ldd	r25, Y+6	; 0x06
    22a8:	9a 83       	std	Y+2, r25	; 0x02
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	9a 81       	ldd	r25, Y+2	; 0x02
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_I2C_SendNum+0x404>
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	89 83       	std	Y+1, r24	; 0x01

	}
	_delay_ms(10);
	I2C_stop();
    22b8:	0e 94 42 0c 	call	0x1884	; 0x1884 <I2C_stop>
}
    22bc:	ed 96       	adiw	r28, 0x3d	; 61
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <LCD_I2C_SendString>:
void LCD_I2C_SendString(u8* Copy_u8str)
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	eb 97       	sbiw	r28, 0x3b	; 59
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	9b af       	std	Y+59, r25	; 0x3b
    22e4:	8a af       	std	Y+58, r24	; 0x3a

	u8 i=0;
    22e6:	19 ae       	std	Y+57, r1	; 0x39
	I2C_send_start();
    22e8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_send_start>
	I2C_select_slave(5,0);
    22ec:	85 e0       	ldi	r24, 0x05	; 5
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	0e 94 91 0b 	call	0x1722	; 0x1722 <I2C_select_slave>
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	a8 ec       	ldi	r26, 0xC8	; 200
    22fa:	b2 e4       	ldi	r27, 0x42	; 66
    22fc:	8d ab       	std	Y+53, r24	; 0x35
    22fe:	9e ab       	std	Y+54, r25	; 0x36
    2300:	af ab       	std	Y+55, r26	; 0x37
    2302:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2304:	6d a9       	ldd	r22, Y+53	; 0x35
    2306:	7e a9       	ldd	r23, Y+54	; 0x36
    2308:	8f a9       	ldd	r24, Y+55	; 0x37
    230a:	98 ad       	ldd	r25, Y+56	; 0x38
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	4a ef       	ldi	r20, 0xFA	; 250
    2312:	54 e4       	ldi	r21, 0x44	; 68
    2314:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	89 ab       	std	Y+49, r24	; 0x31
    231e:	9a ab       	std	Y+50, r25	; 0x32
    2320:	ab ab       	std	Y+51, r26	; 0x33
    2322:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2324:	69 a9       	ldd	r22, Y+49	; 0x31
    2326:	7a a9       	ldd	r23, Y+50	; 0x32
    2328:	8b a9       	ldd	r24, Y+51	; 0x33
    232a:	9c a9       	ldd	r25, Y+52	; 0x34
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e8       	ldi	r20, 0x80	; 128
    2332:	5f e3       	ldi	r21, 0x3F	; 63
    2334:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2338:	88 23       	and	r24, r24
    233a:	2c f4       	brge	.+10     	; 0x2346 <LCD_I2C_SendString+0x78>
		__ticks = 1;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	98 ab       	std	Y+48, r25	; 0x30
    2342:	8f a7       	std	Y+47, r24	; 0x2f
    2344:	3f c0       	rjmp	.+126    	; 0x23c4 <LCD_I2C_SendString+0xf6>
	else if (__tmp > 65535)
    2346:	69 a9       	ldd	r22, Y+49	; 0x31
    2348:	7a a9       	ldd	r23, Y+50	; 0x32
    234a:	8b a9       	ldd	r24, Y+51	; 0x33
    234c:	9c a9       	ldd	r25, Y+52	; 0x34
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	3f ef       	ldi	r19, 0xFF	; 255
    2352:	4f e7       	ldi	r20, 0x7F	; 127
    2354:	57 e4       	ldi	r21, 0x47	; 71
    2356:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    235a:	18 16       	cp	r1, r24
    235c:	4c f5       	brge	.+82     	; 0x23b0 <LCD_I2C_SendString+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235e:	6d a9       	ldd	r22, Y+53	; 0x35
    2360:	7e a9       	ldd	r23, Y+54	; 0x36
    2362:	8f a9       	ldd	r24, Y+55	; 0x37
    2364:	98 ad       	ldd	r25, Y+56	; 0x38
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e2       	ldi	r20, 0x20	; 32
    236c:	51 e4       	ldi	r21, 0x41	; 65
    236e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	bc 01       	movw	r22, r24
    2378:	cd 01       	movw	r24, r26
    237a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	98 ab       	std	Y+48, r25	; 0x30
    2384:	8f a7       	std	Y+47, r24	; 0x2f
    2386:	0f c0       	rjmp	.+30     	; 0x23a6 <LCD_I2C_SendString+0xd8>
    2388:	88 ec       	ldi	r24, 0xC8	; 200
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	9e a7       	std	Y+46, r25	; 0x2e
    238e:	8d a7       	std	Y+45, r24	; 0x2d
    2390:	8d a5       	ldd	r24, Y+45	; 0x2d
    2392:	9e a5       	ldd	r25, Y+46	; 0x2e
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <LCD_I2C_SendString+0xc6>
    2398:	9e a7       	std	Y+46, r25	; 0x2e
    239a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239c:	8f a5       	ldd	r24, Y+47	; 0x2f
    239e:	98 a9       	ldd	r25, Y+48	; 0x30
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	98 ab       	std	Y+48, r25	; 0x30
    23a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a8:	98 a9       	ldd	r25, Y+48	; 0x30
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	69 f7       	brne	.-38     	; 0x2388 <LCD_I2C_SendString+0xba>
    23ae:	14 c0       	rjmp	.+40     	; 0x23d8 <LCD_I2C_SendString+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b0:	69 a9       	ldd	r22, Y+49	; 0x31
    23b2:	7a a9       	ldd	r23, Y+50	; 0x32
    23b4:	8b a9       	ldd	r24, Y+51	; 0x33
    23b6:	9c a9       	ldd	r25, Y+52	; 0x34
    23b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	98 ab       	std	Y+48, r25	; 0x30
    23c2:	8f a7       	std	Y+47, r24	; 0x2f
    23c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23c6:	98 a9       	ldd	r25, Y+48	; 0x30
    23c8:	9c a7       	std	Y+44, r25	; 0x2c
    23ca:	8b a7       	std	Y+43, r24	; 0x2b
    23cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <LCD_I2C_SendString+0x102>
    23d4:	9c a7       	std	Y+44, r25	; 0x2c
    23d6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);

	I2C_Master_send_data(LCD_I2C_String);
    23d8:	84 e0       	ldi	r24, 0x04	; 4
    23da:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	a8 ec       	ldi	r26, 0xC8	; 200
    23e4:	b2 e4       	ldi	r27, 0x42	; 66
    23e6:	8f a3       	std	Y+39, r24	; 0x27
    23e8:	98 a7       	std	Y+40, r25	; 0x28
    23ea:	a9 a7       	std	Y+41, r26	; 0x29
    23ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ee:	6f a1       	ldd	r22, Y+39	; 0x27
    23f0:	78 a5       	ldd	r23, Y+40	; 0x28
    23f2:	89 a5       	ldd	r24, Y+41	; 0x29
    23f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	4a ef       	ldi	r20, 0xFA	; 250
    23fc:	54 e4       	ldi	r21, 0x44	; 68
    23fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	8b a3       	std	Y+35, r24	; 0x23
    2408:	9c a3       	std	Y+36, r25	; 0x24
    240a:	ad a3       	std	Y+37, r26	; 0x25
    240c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    240e:	6b a1       	ldd	r22, Y+35	; 0x23
    2410:	7c a1       	ldd	r23, Y+36	; 0x24
    2412:	8d a1       	ldd	r24, Y+37	; 0x25
    2414:	9e a1       	ldd	r25, Y+38	; 0x26
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e8       	ldi	r20, 0x80	; 128
    241c:	5f e3       	ldi	r21, 0x3F	; 63
    241e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2422:	88 23       	and	r24, r24
    2424:	2c f4       	brge	.+10     	; 0x2430 <LCD_I2C_SendString+0x162>
		__ticks = 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9a a3       	std	Y+34, r25	; 0x22
    242c:	89 a3       	std	Y+33, r24	; 0x21
    242e:	3f c0       	rjmp	.+126    	; 0x24ae <LCD_I2C_SendString+0x1e0>
	else if (__tmp > 65535)
    2430:	6b a1       	ldd	r22, Y+35	; 0x23
    2432:	7c a1       	ldd	r23, Y+36	; 0x24
    2434:	8d a1       	ldd	r24, Y+37	; 0x25
    2436:	9e a1       	ldd	r25, Y+38	; 0x26
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	3f ef       	ldi	r19, 0xFF	; 255
    243c:	4f e7       	ldi	r20, 0x7F	; 127
    243e:	57 e4       	ldi	r21, 0x47	; 71
    2440:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2444:	18 16       	cp	r1, r24
    2446:	4c f5       	brge	.+82     	; 0x249a <LCD_I2C_SendString+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2448:	6f a1       	ldd	r22, Y+39	; 0x27
    244a:	78 a5       	ldd	r23, Y+40	; 0x28
    244c:	89 a5       	ldd	r24, Y+41	; 0x29
    244e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e2       	ldi	r20, 0x20	; 32
    2456:	51 e4       	ldi	r21, 0x41	; 65
    2458:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	9a a3       	std	Y+34, r25	; 0x22
    246e:	89 a3       	std	Y+33, r24	; 0x21
    2470:	0f c0       	rjmp	.+30     	; 0x2490 <LCD_I2C_SendString+0x1c2>
    2472:	88 ec       	ldi	r24, 0xC8	; 200
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	98 a3       	std	Y+32, r25	; 0x20
    2478:	8f 8f       	std	Y+31, r24	; 0x1f
    247a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    247c:	98 a1       	ldd	r25, Y+32	; 0x20
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <LCD_I2C_SendString+0x1b0>
    2482:	98 a3       	std	Y+32, r25	; 0x20
    2484:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2486:	89 a1       	ldd	r24, Y+33	; 0x21
    2488:	9a a1       	ldd	r25, Y+34	; 0x22
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	9a a3       	std	Y+34, r25	; 0x22
    248e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2490:	89 a1       	ldd	r24, Y+33	; 0x21
    2492:	9a a1       	ldd	r25, Y+34	; 0x22
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	69 f7       	brne	.-38     	; 0x2472 <LCD_I2C_SendString+0x1a4>
    2498:	96 c0       	rjmp	.+300    	; 0x25c6 <LCD_I2C_SendString+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249a:	6b a1       	ldd	r22, Y+35	; 0x23
    249c:	7c a1       	ldd	r23, Y+36	; 0x24
    249e:	8d a1       	ldd	r24, Y+37	; 0x25
    24a0:	9e a1       	ldd	r25, Y+38	; 0x26
    24a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9a a3       	std	Y+34, r25	; 0x22
    24ac:	89 a3       	std	Y+33, r24	; 0x21
    24ae:	89 a1       	ldd	r24, Y+33	; 0x21
    24b0:	9a a1       	ldd	r25, Y+34	; 0x22
    24b2:	9e 8f       	std	Y+30, r25	; 0x1e
    24b4:	8d 8f       	std	Y+29, r24	; 0x1d
    24b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <LCD_I2C_SendString+0x1ec>
    24be:	9e 8f       	std	Y+30, r25	; 0x1e
    24c0:	8d 8f       	std	Y+29, r24	; 0x1d
    24c2:	81 c0       	rjmp	.+258    	; 0x25c6 <LCD_I2C_SendString+0x2f8>
	_delay_ms(100);

	while(Copy_u8str[i]!='\0')
	{
		I2C_Master_send_data(Copy_u8str[i++]);
    24c4:	89 ad       	ldd	r24, Y+57	; 0x39
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	8a ad       	ldd	r24, Y+58	; 0x3a
    24cc:	9b ad       	ldd	r25, Y+59	; 0x3b
    24ce:	fc 01       	movw	r30, r24
    24d0:	e2 0f       	add	r30, r18
    24d2:	f3 1f       	adc	r31, r19
    24d4:	90 81       	ld	r25, Z
    24d6:	89 ad       	ldd	r24, Y+57	; 0x39
    24d8:	8f 5f       	subi	r24, 0xFF	; 255
    24da:	89 af       	std	Y+57, r24	; 0x39
    24dc:	89 2f       	mov	r24, r25
    24de:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	a8 ec       	ldi	r26, 0xC8	; 200
    24e8:	b2 e4       	ldi	r27, 0x42	; 66
    24ea:	89 8f       	std	Y+25, r24	; 0x19
    24ec:	9a 8f       	std	Y+26, r25	; 0x1a
    24ee:	ab 8f       	std	Y+27, r26	; 0x1b
    24f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f2:	69 8d       	ldd	r22, Y+25	; 0x19
    24f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	4a ef       	ldi	r20, 0xFA	; 250
    2500:	54 e4       	ldi	r21, 0x44	; 68
    2502:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	8d 8b       	std	Y+21, r24	; 0x15
    250c:	9e 8b       	std	Y+22, r25	; 0x16
    250e:	af 8b       	std	Y+23, r26	; 0x17
    2510:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2512:	6d 89       	ldd	r22, Y+21	; 0x15
    2514:	7e 89       	ldd	r23, Y+22	; 0x16
    2516:	8f 89       	ldd	r24, Y+23	; 0x17
    2518:	98 8d       	ldd	r25, Y+24	; 0x18
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e8       	ldi	r20, 0x80	; 128
    2520:	5f e3       	ldi	r21, 0x3F	; 63
    2522:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2526:	88 23       	and	r24, r24
    2528:	2c f4       	brge	.+10     	; 0x2534 <LCD_I2C_SendString+0x266>
		__ticks = 1;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	9c 8b       	std	Y+20, r25	; 0x14
    2530:	8b 8b       	std	Y+19, r24	; 0x13
    2532:	3f c0       	rjmp	.+126    	; 0x25b2 <LCD_I2C_SendString+0x2e4>
	else if (__tmp > 65535)
    2534:	6d 89       	ldd	r22, Y+21	; 0x15
    2536:	7e 89       	ldd	r23, Y+22	; 0x16
    2538:	8f 89       	ldd	r24, Y+23	; 0x17
    253a:	98 8d       	ldd	r25, Y+24	; 0x18
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	3f ef       	ldi	r19, 0xFF	; 255
    2540:	4f e7       	ldi	r20, 0x7F	; 127
    2542:	57 e4       	ldi	r21, 0x47	; 71
    2544:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2548:	18 16       	cp	r1, r24
    254a:	4c f5       	brge	.+82     	; 0x259e <LCD_I2C_SendString+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254c:	69 8d       	ldd	r22, Y+25	; 0x19
    254e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2550:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2552:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e2       	ldi	r20, 0x20	; 32
    255a:	51 e4       	ldi	r21, 0x41	; 65
    255c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	bc 01       	movw	r22, r24
    2566:	cd 01       	movw	r24, r26
    2568:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
    2574:	0f c0       	rjmp	.+30     	; 0x2594 <LCD_I2C_SendString+0x2c6>
    2576:	88 ec       	ldi	r24, 0xC8	; 200
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9a 8b       	std	Y+18, r25	; 0x12
    257c:	89 8b       	std	Y+17, r24	; 0x11
    257e:	89 89       	ldd	r24, Y+17	; 0x11
    2580:	9a 89       	ldd	r25, Y+18	; 0x12
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_I2C_SendString+0x2b4>
    2586:	9a 8b       	std	Y+18, r25	; 0x12
    2588:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258a:	8b 89       	ldd	r24, Y+19	; 0x13
    258c:	9c 89       	ldd	r25, Y+20	; 0x14
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	9c 8b       	std	Y+20, r25	; 0x14
    2592:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2594:	8b 89       	ldd	r24, Y+19	; 0x13
    2596:	9c 89       	ldd	r25, Y+20	; 0x14
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	69 f7       	brne	.-38     	; 0x2576 <LCD_I2C_SendString+0x2a8>
    259c:	14 c0       	rjmp	.+40     	; 0x25c6 <LCD_I2C_SendString+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259e:	6d 89       	ldd	r22, Y+21	; 0x15
    25a0:	7e 89       	ldd	r23, Y+22	; 0x16
    25a2:	8f 89       	ldd	r24, Y+23	; 0x17
    25a4:	98 8d       	ldd	r25, Y+24	; 0x18
    25a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	9c 8b       	std	Y+20, r25	; 0x14
    25b0:	8b 8b       	std	Y+19, r24	; 0x13
    25b2:	8b 89       	ldd	r24, Y+19	; 0x13
    25b4:	9c 89       	ldd	r25, Y+20	; 0x14
    25b6:	98 8b       	std	Y+16, r25	; 0x10
    25b8:	8f 87       	std	Y+15, r24	; 0x0f
    25ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    25bc:	98 89       	ldd	r25, Y+16	; 0x10
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <LCD_I2C_SendString+0x2f0>
    25c2:	98 8b       	std	Y+16, r25	; 0x10
    25c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);

	I2C_Master_send_data(LCD_I2C_String);
	_delay_ms(100);

	while(Copy_u8str[i]!='\0')
    25c6:	89 ad       	ldd	r24, Y+57	; 0x39
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	8a ad       	ldd	r24, Y+58	; 0x3a
    25ce:	9b ad       	ldd	r25, Y+59	; 0x3b
    25d0:	fc 01       	movw	r30, r24
    25d2:	e2 0f       	add	r30, r18
    25d4:	f3 1f       	adc	r31, r19
    25d6:	80 81       	ld	r24, Z
    25d8:	88 23       	and	r24, r24
    25da:	09 f0       	breq	.+2      	; 0x25de <LCD_I2C_SendString+0x310>
    25dc:	73 cf       	rjmp	.-282    	; 0x24c4 <LCD_I2C_SendString+0x1f6>
	{
		I2C_Master_send_data(Copy_u8str[i++]);
		_delay_ms(100);
	}

	I2C_Master_send_data('\0');
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	a0 e2       	ldi	r26, 0x20	; 32
    25ea:	b1 e4       	ldi	r27, 0x41	; 65
    25ec:	8b 87       	std	Y+11, r24	; 0x0b
    25ee:	9c 87       	std	Y+12, r25	; 0x0c
    25f0:	ad 87       	std	Y+13, r26	; 0x0d
    25f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	4a ef       	ldi	r20, 0xFA	; 250
    2602:	54 e4       	ldi	r21, 0x44	; 68
    2604:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	8f 83       	std	Y+7, r24	; 0x07
    260e:	98 87       	std	Y+8, r25	; 0x08
    2610:	a9 87       	std	Y+9, r26	; 0x09
    2612:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2614:	6f 81       	ldd	r22, Y+7	; 0x07
    2616:	78 85       	ldd	r23, Y+8	; 0x08
    2618:	89 85       	ldd	r24, Y+9	; 0x09
    261a:	9a 85       	ldd	r25, Y+10	; 0x0a
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e8       	ldi	r20, 0x80	; 128
    2622:	5f e3       	ldi	r21, 0x3F	; 63
    2624:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2628:	88 23       	and	r24, r24
    262a:	2c f4       	brge	.+10     	; 0x2636 <LCD_I2C_SendString+0x368>
		__ticks = 1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	8d 83       	std	Y+5, r24	; 0x05
    2634:	3f c0       	rjmp	.+126    	; 0x26b4 <LCD_I2C_SendString+0x3e6>
	else if (__tmp > 65535)
    2636:	6f 81       	ldd	r22, Y+7	; 0x07
    2638:	78 85       	ldd	r23, Y+8	; 0x08
    263a:	89 85       	ldd	r24, Y+9	; 0x09
    263c:	9a 85       	ldd	r25, Y+10	; 0x0a
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	3f ef       	ldi	r19, 0xFF	; 255
    2642:	4f e7       	ldi	r20, 0x7F	; 127
    2644:	57 e4       	ldi	r21, 0x47	; 71
    2646:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    264a:	18 16       	cp	r1, r24
    264c:	4c f5       	brge	.+82     	; 0x26a0 <LCD_I2C_SendString+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2650:	7c 85       	ldd	r23, Y+12	; 0x0c
    2652:	8d 85       	ldd	r24, Y+13	; 0x0d
    2654:	9e 85       	ldd	r25, Y+14	; 0x0e
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e2       	ldi	r20, 0x20	; 32
    265c:	51 e4       	ldi	r21, 0x41	; 65
    265e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	bc 01       	movw	r22, r24
    2668:	cd 01       	movw	r24, r26
    266a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	9e 83       	std	Y+6, r25	; 0x06
    2674:	8d 83       	std	Y+5, r24	; 0x05
    2676:	0f c0       	rjmp	.+30     	; 0x2696 <LCD_I2C_SendString+0x3c8>
    2678:	88 ec       	ldi	r24, 0xC8	; 200
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	9c 83       	std	Y+4, r25	; 0x04
    267e:	8b 83       	std	Y+3, r24	; 0x03
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	9c 81       	ldd	r25, Y+4	; 0x04
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	f1 f7       	brne	.-4      	; 0x2684 <LCD_I2C_SendString+0x3b6>
    2688:	9c 83       	std	Y+4, r25	; 0x04
    268a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268c:	8d 81       	ldd	r24, Y+5	; 0x05
    268e:	9e 81       	ldd	r25, Y+6	; 0x06
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	9e 83       	std	Y+6, r25	; 0x06
    2694:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2696:	8d 81       	ldd	r24, Y+5	; 0x05
    2698:	9e 81       	ldd	r25, Y+6	; 0x06
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	69 f7       	brne	.-38     	; 0x2678 <LCD_I2C_SendString+0x3aa>
    269e:	14 c0       	rjmp	.+40     	; 0x26c8 <LCD_I2C_SendString+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a0:	6f 81       	ldd	r22, Y+7	; 0x07
    26a2:	78 85       	ldd	r23, Y+8	; 0x08
    26a4:	89 85       	ldd	r24, Y+9	; 0x09
    26a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	9e 83       	std	Y+6, r25	; 0x06
    26b2:	8d 83       	std	Y+5, r24	; 0x05
    26b4:	8d 81       	ldd	r24, Y+5	; 0x05
    26b6:	9e 81       	ldd	r25, Y+6	; 0x06
    26b8:	9a 83       	std	Y+2, r25	; 0x02
    26ba:	89 83       	std	Y+1, r24	; 0x01
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	9a 81       	ldd	r25, Y+2	; 0x02
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <LCD_I2C_SendString+0x3f2>
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	I2C_stop();
    26c8:	0e 94 42 0c 	call	0x1884	; 0x1884 <I2C_stop>
}
    26cc:	eb 96       	adiw	r28, 0x3b	; 59
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	cf 91       	pop	r28
    26da:	df 91       	pop	r29
    26dc:	08 95       	ret

000026de <LCD_I2C_SendCommand>:
void LCD_I2C_SendCommand(u8 Copy_u8Command)
{
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	ab 97       	sbiw	r28, 0x2b	; 43
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	8b a7       	std	Y+43, r24	; 0x2b
	I2C_send_start();
    26f4:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_send_start>
	I2C_select_slave(5,0);
    26f8:	85 e0       	ldi	r24, 0x05	; 5
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	0e 94 91 0b 	call	0x1722	; 0x1722 <I2C_select_slave>
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	a8 ec       	ldi	r26, 0xC8	; 200
    2706:	b2 e4       	ldi	r27, 0x42	; 66
    2708:	8f a3       	std	Y+39, r24	; 0x27
    270a:	98 a7       	std	Y+40, r25	; 0x28
    270c:	a9 a7       	std	Y+41, r26	; 0x29
    270e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2710:	6f a1       	ldd	r22, Y+39	; 0x27
    2712:	78 a5       	ldd	r23, Y+40	; 0x28
    2714:	89 a5       	ldd	r24, Y+41	; 0x29
    2716:	9a a5       	ldd	r25, Y+42	; 0x2a
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	4a ef       	ldi	r20, 0xFA	; 250
    271e:	54 e4       	ldi	r21, 0x44	; 68
    2720:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	8b a3       	std	Y+35, r24	; 0x23
    272a:	9c a3       	std	Y+36, r25	; 0x24
    272c:	ad a3       	std	Y+37, r26	; 0x25
    272e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2730:	6b a1       	ldd	r22, Y+35	; 0x23
    2732:	7c a1       	ldd	r23, Y+36	; 0x24
    2734:	8d a1       	ldd	r24, Y+37	; 0x25
    2736:	9e a1       	ldd	r25, Y+38	; 0x26
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e8       	ldi	r20, 0x80	; 128
    273e:	5f e3       	ldi	r21, 0x3F	; 63
    2740:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2744:	88 23       	and	r24, r24
    2746:	2c f4       	brge	.+10     	; 0x2752 <LCD_I2C_SendCommand+0x74>
		__ticks = 1;
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	9a a3       	std	Y+34, r25	; 0x22
    274e:	89 a3       	std	Y+33, r24	; 0x21
    2750:	3f c0       	rjmp	.+126    	; 0x27d0 <LCD_I2C_SendCommand+0xf2>
	else if (__tmp > 65535)
    2752:	6b a1       	ldd	r22, Y+35	; 0x23
    2754:	7c a1       	ldd	r23, Y+36	; 0x24
    2756:	8d a1       	ldd	r24, Y+37	; 0x25
    2758:	9e a1       	ldd	r25, Y+38	; 0x26
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	3f ef       	ldi	r19, 0xFF	; 255
    275e:	4f e7       	ldi	r20, 0x7F	; 127
    2760:	57 e4       	ldi	r21, 0x47	; 71
    2762:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2766:	18 16       	cp	r1, r24
    2768:	4c f5       	brge	.+82     	; 0x27bc <LCD_I2C_SendCommand+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276a:	6f a1       	ldd	r22, Y+39	; 0x27
    276c:	78 a5       	ldd	r23, Y+40	; 0x28
    276e:	89 a5       	ldd	r24, Y+41	; 0x29
    2770:	9a a5       	ldd	r25, Y+42	; 0x2a
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e2       	ldi	r20, 0x20	; 32
    2778:	51 e4       	ldi	r21, 0x41	; 65
    277a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	9a a3       	std	Y+34, r25	; 0x22
    2790:	89 a3       	std	Y+33, r24	; 0x21
    2792:	0f c0       	rjmp	.+30     	; 0x27b2 <LCD_I2C_SendCommand+0xd4>
    2794:	88 ec       	ldi	r24, 0xC8	; 200
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	98 a3       	std	Y+32, r25	; 0x20
    279a:	8f 8f       	std	Y+31, r24	; 0x1f
    279c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    279e:	98 a1       	ldd	r25, Y+32	; 0x20
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <LCD_I2C_SendCommand+0xc2>
    27a4:	98 a3       	std	Y+32, r25	; 0x20
    27a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a8:	89 a1       	ldd	r24, Y+33	; 0x21
    27aa:	9a a1       	ldd	r25, Y+34	; 0x22
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	9a a3       	std	Y+34, r25	; 0x22
    27b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b2:	89 a1       	ldd	r24, Y+33	; 0x21
    27b4:	9a a1       	ldd	r25, Y+34	; 0x22
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	69 f7       	brne	.-38     	; 0x2794 <LCD_I2C_SendCommand+0xb6>
    27ba:	14 c0       	rjmp	.+40     	; 0x27e4 <LCD_I2C_SendCommand+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27bc:	6b a1       	ldd	r22, Y+35	; 0x23
    27be:	7c a1       	ldd	r23, Y+36	; 0x24
    27c0:	8d a1       	ldd	r24, Y+37	; 0x25
    27c2:	9e a1       	ldd	r25, Y+38	; 0x26
    27c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	9a a3       	std	Y+34, r25	; 0x22
    27ce:	89 a3       	std	Y+33, r24	; 0x21
    27d0:	89 a1       	ldd	r24, Y+33	; 0x21
    27d2:	9a a1       	ldd	r25, Y+34	; 0x22
    27d4:	9e 8f       	std	Y+30, r25	; 0x1e
    27d6:	8d 8f       	std	Y+29, r24	; 0x1d
    27d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <LCD_I2C_SendCommand+0xfe>
    27e0:	9e 8f       	std	Y+30, r25	; 0x1e
    27e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	I2C_Master_send_data(LCD_I2C_Command);
    27e4:	85 e0       	ldi	r24, 0x05	; 5
    27e6:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	a8 ec       	ldi	r26, 0xC8	; 200
    27f0:	b2 e4       	ldi	r27, 0x42	; 66
    27f2:	89 8f       	std	Y+25, r24	; 0x19
    27f4:	9a 8f       	std	Y+26, r25	; 0x1a
    27f6:	ab 8f       	std	Y+27, r26	; 0x1b
    27f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fa:	69 8d       	ldd	r22, Y+25	; 0x19
    27fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2800:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	4a ef       	ldi	r20, 0xFA	; 250
    2808:	54 e4       	ldi	r21, 0x44	; 68
    280a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	8d 8b       	std	Y+21, r24	; 0x15
    2814:	9e 8b       	std	Y+22, r25	; 0x16
    2816:	af 8b       	std	Y+23, r26	; 0x17
    2818:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    281a:	6d 89       	ldd	r22, Y+21	; 0x15
    281c:	7e 89       	ldd	r23, Y+22	; 0x16
    281e:	8f 89       	ldd	r24, Y+23	; 0x17
    2820:	98 8d       	ldd	r25, Y+24	; 0x18
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e8       	ldi	r20, 0x80	; 128
    2828:	5f e3       	ldi	r21, 0x3F	; 63
    282a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    282e:	88 23       	and	r24, r24
    2830:	2c f4       	brge	.+10     	; 0x283c <LCD_I2C_SendCommand+0x15e>
		__ticks = 1;
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
    283a:	3f c0       	rjmp	.+126    	; 0x28ba <LCD_I2C_SendCommand+0x1dc>
	else if (__tmp > 65535)
    283c:	6d 89       	ldd	r22, Y+21	; 0x15
    283e:	7e 89       	ldd	r23, Y+22	; 0x16
    2840:	8f 89       	ldd	r24, Y+23	; 0x17
    2842:	98 8d       	ldd	r25, Y+24	; 0x18
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	3f ef       	ldi	r19, 0xFF	; 255
    2848:	4f e7       	ldi	r20, 0x7F	; 127
    284a:	57 e4       	ldi	r21, 0x47	; 71
    284c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2850:	18 16       	cp	r1, r24
    2852:	4c f5       	brge	.+82     	; 0x28a6 <LCD_I2C_SendCommand+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2854:	69 8d       	ldd	r22, Y+25	; 0x19
    2856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e2       	ldi	r20, 0x20	; 32
    2862:	51 e4       	ldi	r21, 0x41	; 65
    2864:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	bc 01       	movw	r22, r24
    286e:	cd 01       	movw	r24, r26
    2870:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	9c 8b       	std	Y+20, r25	; 0x14
    287a:	8b 8b       	std	Y+19, r24	; 0x13
    287c:	0f c0       	rjmp	.+30     	; 0x289c <LCD_I2C_SendCommand+0x1be>
    287e:	88 ec       	ldi	r24, 0xC8	; 200
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9a 8b       	std	Y+18, r25	; 0x12
    2884:	89 8b       	std	Y+17, r24	; 0x11
    2886:	89 89       	ldd	r24, Y+17	; 0x11
    2888:	9a 89       	ldd	r25, Y+18	; 0x12
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	f1 f7       	brne	.-4      	; 0x288a <LCD_I2C_SendCommand+0x1ac>
    288e:	9a 8b       	std	Y+18, r25	; 0x12
    2890:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2892:	8b 89       	ldd	r24, Y+19	; 0x13
    2894:	9c 89       	ldd	r25, Y+20	; 0x14
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	9c 8b       	std	Y+20, r25	; 0x14
    289a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289c:	8b 89       	ldd	r24, Y+19	; 0x13
    289e:	9c 89       	ldd	r25, Y+20	; 0x14
    28a0:	00 97       	sbiw	r24, 0x00	; 0
    28a2:	69 f7       	brne	.-38     	; 0x287e <LCD_I2C_SendCommand+0x1a0>
    28a4:	14 c0       	rjmp	.+40     	; 0x28ce <LCD_I2C_SendCommand+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a6:	6d 89       	ldd	r22, Y+21	; 0x15
    28a8:	7e 89       	ldd	r23, Y+22	; 0x16
    28aa:	8f 89       	ldd	r24, Y+23	; 0x17
    28ac:	98 8d       	ldd	r25, Y+24	; 0x18
    28ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9c 8b       	std	Y+20, r25	; 0x14
    28b8:	8b 8b       	std	Y+19, r24	; 0x13
    28ba:	8b 89       	ldd	r24, Y+19	; 0x13
    28bc:	9c 89       	ldd	r25, Y+20	; 0x14
    28be:	98 8b       	std	Y+16, r25	; 0x10
    28c0:	8f 87       	std	Y+15, r24	; 0x0f
    28c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c4:	98 89       	ldd	r25, Y+16	; 0x10
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <LCD_I2C_SendCommand+0x1e8>
    28ca:	98 8b       	std	Y+16, r25	; 0x10
    28cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);

	I2C_Master_send_data(Copy_u8Command);
    28ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    28d0:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	a0 e2       	ldi	r26, 0x20	; 32
    28da:	b1 e4       	ldi	r27, 0x41	; 65
    28dc:	8b 87       	std	Y+11, r24	; 0x0b
    28de:	9c 87       	std	Y+12, r25	; 0x0c
    28e0:	ad 87       	std	Y+13, r26	; 0x0d
    28e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	4a ef       	ldi	r20, 0xFA	; 250
    28f2:	54 e4       	ldi	r21, 0x44	; 68
    28f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	8f 83       	std	Y+7, r24	; 0x07
    28fe:	98 87       	std	Y+8, r25	; 0x08
    2900:	a9 87       	std	Y+9, r26	; 0x09
    2902:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2904:	6f 81       	ldd	r22, Y+7	; 0x07
    2906:	78 85       	ldd	r23, Y+8	; 0x08
    2908:	89 85       	ldd	r24, Y+9	; 0x09
    290a:	9a 85       	ldd	r25, Y+10	; 0x0a
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e8       	ldi	r20, 0x80	; 128
    2912:	5f e3       	ldi	r21, 0x3F	; 63
    2914:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2918:	88 23       	and	r24, r24
    291a:	2c f4       	brge	.+10     	; 0x2926 <LCD_I2C_SendCommand+0x248>
		__ticks = 1;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	9e 83       	std	Y+6, r25	; 0x06
    2922:	8d 83       	std	Y+5, r24	; 0x05
    2924:	3f c0       	rjmp	.+126    	; 0x29a4 <LCD_I2C_SendCommand+0x2c6>
	else if (__tmp > 65535)
    2926:	6f 81       	ldd	r22, Y+7	; 0x07
    2928:	78 85       	ldd	r23, Y+8	; 0x08
    292a:	89 85       	ldd	r24, Y+9	; 0x09
    292c:	9a 85       	ldd	r25, Y+10	; 0x0a
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	3f ef       	ldi	r19, 0xFF	; 255
    2932:	4f e7       	ldi	r20, 0x7F	; 127
    2934:	57 e4       	ldi	r21, 0x47	; 71
    2936:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    293a:	18 16       	cp	r1, r24
    293c:	4c f5       	brge	.+82     	; 0x2990 <LCD_I2C_SendCommand+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2940:	7c 85       	ldd	r23, Y+12	; 0x0c
    2942:	8d 85       	ldd	r24, Y+13	; 0x0d
    2944:	9e 85       	ldd	r25, Y+14	; 0x0e
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e2       	ldi	r20, 0x20	; 32
    294c:	51 e4       	ldi	r21, 0x41	; 65
    294e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	bc 01       	movw	r22, r24
    2958:	cd 01       	movw	r24, r26
    295a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	9e 83       	std	Y+6, r25	; 0x06
    2964:	8d 83       	std	Y+5, r24	; 0x05
    2966:	0f c0       	rjmp	.+30     	; 0x2986 <LCD_I2C_SendCommand+0x2a8>
    2968:	88 ec       	ldi	r24, 0xC8	; 200
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9c 83       	std	Y+4, r25	; 0x04
    296e:	8b 83       	std	Y+3, r24	; 0x03
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	9c 81       	ldd	r25, Y+4	; 0x04
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <LCD_I2C_SendCommand+0x296>
    2978:	9c 83       	std	Y+4, r25	; 0x04
    297a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297c:	8d 81       	ldd	r24, Y+5	; 0x05
    297e:	9e 81       	ldd	r25, Y+6	; 0x06
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	9e 83       	std	Y+6, r25	; 0x06
    2984:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2986:	8d 81       	ldd	r24, Y+5	; 0x05
    2988:	9e 81       	ldd	r25, Y+6	; 0x06
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	69 f7       	brne	.-38     	; 0x2968 <LCD_I2C_SendCommand+0x28a>
    298e:	14 c0       	rjmp	.+40     	; 0x29b8 <LCD_I2C_SendCommand+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2990:	6f 81       	ldd	r22, Y+7	; 0x07
    2992:	78 85       	ldd	r23, Y+8	; 0x08
    2994:	89 85       	ldd	r24, Y+9	; 0x09
    2996:	9a 85       	ldd	r25, Y+10	; 0x0a
    2998:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	9e 83       	std	Y+6, r25	; 0x06
    29a2:	8d 83       	std	Y+5, r24	; 0x05
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	89 83       	std	Y+1, r24	; 0x01
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	9a 81       	ldd	r25, Y+2	; 0x02
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <LCD_I2C_SendCommand+0x2d2>
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	I2C_stop();
    29b8:	0e 94 42 0c 	call	0x1884	; 0x1884 <I2C_stop>
}
    29bc:	ab 96       	adiw	r28, 0x2b	; 43
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <LCD_I2C_SendData>:

void LCD_I2C_SendData(u8 Copy_u8Data)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	ab 97       	sbiw	r28, 0x2b	; 43
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	8b a7       	std	Y+43, r24	; 0x2b
	I2C_send_start();
    29e4:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_send_start>
	I2C_select_slave(5,0);
    29e8:	85 e0       	ldi	r24, 0x05	; 5
    29ea:	60 e0       	ldi	r22, 0x00	; 0
    29ec:	0e 94 91 0b 	call	0x1722	; 0x1722 <I2C_select_slave>
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	a8 ec       	ldi	r26, 0xC8	; 200
    29f6:	b2 e4       	ldi	r27, 0x42	; 66
    29f8:	8f a3       	std	Y+39, r24	; 0x27
    29fa:	98 a7       	std	Y+40, r25	; 0x28
    29fc:	a9 a7       	std	Y+41, r26	; 0x29
    29fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a00:	6f a1       	ldd	r22, Y+39	; 0x27
    2a02:	78 a5       	ldd	r23, Y+40	; 0x28
    2a04:	89 a5       	ldd	r24, Y+41	; 0x29
    2a06:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	4a ef       	ldi	r20, 0xFA	; 250
    2a0e:	54 e4       	ldi	r21, 0x44	; 68
    2a10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	8b a3       	std	Y+35, r24	; 0x23
    2a1a:	9c a3       	std	Y+36, r25	; 0x24
    2a1c:	ad a3       	std	Y+37, r26	; 0x25
    2a1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a20:	6b a1       	ldd	r22, Y+35	; 0x23
    2a22:	7c a1       	ldd	r23, Y+36	; 0x24
    2a24:	8d a1       	ldd	r24, Y+37	; 0x25
    2a26:	9e a1       	ldd	r25, Y+38	; 0x26
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e8       	ldi	r20, 0x80	; 128
    2a2e:	5f e3       	ldi	r21, 0x3F	; 63
    2a30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a34:	88 23       	and	r24, r24
    2a36:	2c f4       	brge	.+10     	; 0x2a42 <LCD_I2C_SendData+0x74>
		__ticks = 1;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	9a a3       	std	Y+34, r25	; 0x22
    2a3e:	89 a3       	std	Y+33, r24	; 0x21
    2a40:	3f c0       	rjmp	.+126    	; 0x2ac0 <LCD_I2C_SendData+0xf2>
	else if (__tmp > 65535)
    2a42:	6b a1       	ldd	r22, Y+35	; 0x23
    2a44:	7c a1       	ldd	r23, Y+36	; 0x24
    2a46:	8d a1       	ldd	r24, Y+37	; 0x25
    2a48:	9e a1       	ldd	r25, Y+38	; 0x26
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	3f ef       	ldi	r19, 0xFF	; 255
    2a4e:	4f e7       	ldi	r20, 0x7F	; 127
    2a50:	57 e4       	ldi	r21, 0x47	; 71
    2a52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a56:	18 16       	cp	r1, r24
    2a58:	4c f5       	brge	.+82     	; 0x2aac <LCD_I2C_SendData+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e2       	ldi	r20, 0x20	; 32
    2a68:	51 e4       	ldi	r21, 0x41	; 65
    2a6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	bc 01       	movw	r22, r24
    2a74:	cd 01       	movw	r24, r26
    2a76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9a a3       	std	Y+34, r25	; 0x22
    2a80:	89 a3       	std	Y+33, r24	; 0x21
    2a82:	0f c0       	rjmp	.+30     	; 0x2aa2 <LCD_I2C_SendData+0xd4>
    2a84:	88 ec       	ldi	r24, 0xC8	; 200
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	98 a3       	std	Y+32, r25	; 0x20
    2a8a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a8e:	98 a1       	ldd	r25, Y+32	; 0x20
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <LCD_I2C_SendData+0xc2>
    2a94:	98 a3       	std	Y+32, r25	; 0x20
    2a96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a98:	89 a1       	ldd	r24, Y+33	; 0x21
    2a9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	9a a3       	std	Y+34, r25	; 0x22
    2aa0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa2:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa4:	9a a1       	ldd	r25, Y+34	; 0x22
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	69 f7       	brne	.-38     	; 0x2a84 <LCD_I2C_SendData+0xb6>
    2aaa:	14 c0       	rjmp	.+40     	; 0x2ad4 <LCD_I2C_SendData+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aac:	6b a1       	ldd	r22, Y+35	; 0x23
    2aae:	7c a1       	ldd	r23, Y+36	; 0x24
    2ab0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	9a a3       	std	Y+34, r25	; 0x22
    2abe:	89 a3       	std	Y+33, r24	; 0x21
    2ac0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ac8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <LCD_I2C_SendData+0xfe>
    2ad0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ad2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	I2C_Master_send_data(LCD_I2C_Data);
    2ad4:	86 e0       	ldi	r24, 0x06	; 6
    2ad6:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	a8 ec       	ldi	r26, 0xC8	; 200
    2ae0:	b2 e4       	ldi	r27, 0x42	; 66
    2ae2:	89 8f       	std	Y+25, r24	; 0x19
    2ae4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ae6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ae8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aea:	69 8d       	ldd	r22, Y+25	; 0x19
    2aec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	4a ef       	ldi	r20, 0xFA	; 250
    2af8:	54 e4       	ldi	r21, 0x44	; 68
    2afa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	8d 8b       	std	Y+21, r24	; 0x15
    2b04:	9e 8b       	std	Y+22, r25	; 0x16
    2b06:	af 8b       	std	Y+23, r26	; 0x17
    2b08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b10:	98 8d       	ldd	r25, Y+24	; 0x18
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e8       	ldi	r20, 0x80	; 128
    2b18:	5f e3       	ldi	r21, 0x3F	; 63
    2b1a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b1e:	88 23       	and	r24, r24
    2b20:	2c f4       	brge	.+10     	; 0x2b2c <LCD_I2C_SendData+0x15e>
		__ticks = 1;
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	9c 8b       	std	Y+20, r25	; 0x14
    2b28:	8b 8b       	std	Y+19, r24	; 0x13
    2b2a:	3f c0       	rjmp	.+126    	; 0x2baa <LCD_I2C_SendData+0x1dc>
	else if (__tmp > 65535)
    2b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b30:	8f 89       	ldd	r24, Y+23	; 0x17
    2b32:	98 8d       	ldd	r25, Y+24	; 0x18
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	3f ef       	ldi	r19, 0xFF	; 255
    2b38:	4f e7       	ldi	r20, 0x7F	; 127
    2b3a:	57 e4       	ldi	r21, 0x47	; 71
    2b3c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b40:	18 16       	cp	r1, r24
    2b42:	4c f5       	brge	.+82     	; 0x2b96 <LCD_I2C_SendData+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b44:	69 8d       	ldd	r22, Y+25	; 0x19
    2b46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e2       	ldi	r20, 0x20	; 32
    2b52:	51 e4       	ldi	r21, 0x41	; 65
    2b54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	bc 01       	movw	r22, r24
    2b5e:	cd 01       	movw	r24, r26
    2b60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	9c 8b       	std	Y+20, r25	; 0x14
    2b6a:	8b 8b       	std	Y+19, r24	; 0x13
    2b6c:	0f c0       	rjmp	.+30     	; 0x2b8c <LCD_I2C_SendData+0x1be>
    2b6e:	88 ec       	ldi	r24, 0xC8	; 200
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	9a 8b       	std	Y+18, r25	; 0x12
    2b74:	89 8b       	std	Y+17, r24	; 0x11
    2b76:	89 89       	ldd	r24, Y+17	; 0x11
    2b78:	9a 89       	ldd	r25, Y+18	; 0x12
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <LCD_I2C_SendData+0x1ac>
    2b7e:	9a 8b       	std	Y+18, r25	; 0x12
    2b80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b82:	8b 89       	ldd	r24, Y+19	; 0x13
    2b84:	9c 89       	ldd	r25, Y+20	; 0x14
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	9c 8b       	std	Y+20, r25	; 0x14
    2b8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b90:	00 97       	sbiw	r24, 0x00	; 0
    2b92:	69 f7       	brne	.-38     	; 0x2b6e <LCD_I2C_SendData+0x1a0>
    2b94:	14 c0       	rjmp	.+40     	; 0x2bbe <LCD_I2C_SendData+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b96:	6d 89       	ldd	r22, Y+21	; 0x15
    2b98:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9c 8b       	std	Y+20, r25	; 0x14
    2ba8:	8b 8b       	std	Y+19, r24	; 0x13
    2baa:	8b 89       	ldd	r24, Y+19	; 0x13
    2bac:	9c 89       	ldd	r25, Y+20	; 0x14
    2bae:	98 8b       	std	Y+16, r25	; 0x10
    2bb0:	8f 87       	std	Y+15, r24	; 0x0f
    2bb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bb4:	98 89       	ldd	r25, Y+16	; 0x10
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	f1 f7       	brne	.-4      	; 0x2bb6 <LCD_I2C_SendData+0x1e8>
    2bba:	98 8b       	std	Y+16, r25	; 0x10
    2bbc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);

	I2C_Master_send_data(Copy_u8Data);
    2bbe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bc0:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	a0 e2       	ldi	r26, 0x20	; 32
    2bca:	b1 e4       	ldi	r27, 0x41	; 65
    2bcc:	8b 87       	std	Y+11, r24	; 0x0b
    2bce:	9c 87       	std	Y+12, r25	; 0x0c
    2bd0:	ad 87       	std	Y+13, r26	; 0x0d
    2bd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	4a ef       	ldi	r20, 0xFA	; 250
    2be2:	54 e4       	ldi	r21, 0x44	; 68
    2be4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	8f 83       	std	Y+7, r24	; 0x07
    2bee:	98 87       	std	Y+8, r25	; 0x08
    2bf0:	a9 87       	std	Y+9, r26	; 0x09
    2bf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf6:	78 85       	ldd	r23, Y+8	; 0x08
    2bf8:	89 85       	ldd	r24, Y+9	; 0x09
    2bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	40 e8       	ldi	r20, 0x80	; 128
    2c02:	5f e3       	ldi	r21, 0x3F	; 63
    2c04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c08:	88 23       	and	r24, r24
    2c0a:	2c f4       	brge	.+10     	; 0x2c16 <LCD_I2C_SendData+0x248>
		__ticks = 1;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	9e 83       	std	Y+6, r25	; 0x06
    2c12:	8d 83       	std	Y+5, r24	; 0x05
    2c14:	3f c0       	rjmp	.+126    	; 0x2c94 <LCD_I2C_SendData+0x2c6>
	else if (__tmp > 65535)
    2c16:	6f 81       	ldd	r22, Y+7	; 0x07
    2c18:	78 85       	ldd	r23, Y+8	; 0x08
    2c1a:	89 85       	ldd	r24, Y+9	; 0x09
    2c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	3f ef       	ldi	r19, 0xFF	; 255
    2c22:	4f e7       	ldi	r20, 0x7F	; 127
    2c24:	57 e4       	ldi	r21, 0x47	; 71
    2c26:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c2a:	18 16       	cp	r1, r24
    2c2c:	4c f5       	brge	.+82     	; 0x2c80 <LCD_I2C_SendData+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	40 e2       	ldi	r20, 0x20	; 32
    2c3c:	51 e4       	ldi	r21, 0x41	; 65
    2c3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	bc 01       	movw	r22, r24
    2c48:	cd 01       	movw	r24, r26
    2c4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	9e 83       	std	Y+6, r25	; 0x06
    2c54:	8d 83       	std	Y+5, r24	; 0x05
    2c56:	0f c0       	rjmp	.+30     	; 0x2c76 <LCD_I2C_SendData+0x2a8>
    2c58:	88 ec       	ldi	r24, 0xC8	; 200
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	9c 83       	std	Y+4, r25	; 0x04
    2c5e:	8b 83       	std	Y+3, r24	; 0x03
    2c60:	8b 81       	ldd	r24, Y+3	; 0x03
    2c62:	9c 81       	ldd	r25, Y+4	; 0x04
    2c64:	01 97       	sbiw	r24, 0x01	; 1
    2c66:	f1 f7       	brne	.-4      	; 0x2c64 <LCD_I2C_SendData+0x296>
    2c68:	9c 83       	std	Y+4, r25	; 0x04
    2c6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	9e 83       	std	Y+6, r25	; 0x06
    2c74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c76:	8d 81       	ldd	r24, Y+5	; 0x05
    2c78:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7a:	00 97       	sbiw	r24, 0x00	; 0
    2c7c:	69 f7       	brne	.-38     	; 0x2c58 <LCD_I2C_SendData+0x28a>
    2c7e:	14 c0       	rjmp	.+40     	; 0x2ca8 <LCD_I2C_SendData+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c80:	6f 81       	ldd	r22, Y+7	; 0x07
    2c82:	78 85       	ldd	r23, Y+8	; 0x08
    2c84:	89 85       	ldd	r24, Y+9	; 0x09
    2c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	9e 83       	std	Y+6, r25	; 0x06
    2c92:	8d 83       	std	Y+5, r24	; 0x05
    2c94:	8d 81       	ldd	r24, Y+5	; 0x05
    2c96:	9e 81       	ldd	r25, Y+6	; 0x06
    2c98:	9a 83       	std	Y+2, r25	; 0x02
    2c9a:	89 83       	std	Y+1, r24	; 0x01
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	f1 f7       	brne	.-4      	; 0x2ca0 <LCD_I2C_SendData+0x2d2>
    2ca4:	9a 83       	std	Y+2, r25	; 0x02
    2ca6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	I2C_stop();
    2ca8:	0e 94 42 0c 	call	0x1884	; 0x1884 <I2C_stop>
}
    2cac:	ab 96       	adiw	r28, 0x2b	; 43
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	de bf       	out	0x3e, r29	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	cd bf       	out	0x3d, r28	; 61
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <LCD_I2C_SendFloat>:

void LCD_I2C_SendFloat(f32 Copy_u8Fnum){
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	28 97       	sbiw	r28, 0x08	; 8
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	6d 83       	std	Y+5, r22	; 0x05
    2cd4:	7e 83       	std	Y+6, r23	; 0x06
    2cd6:	8f 83       	std	Y+7, r24	; 0x07
    2cd8:	98 87       	std	Y+8, r25	; 0x08


	_delay_ms(10);
	I2C_stop();
	*/
	s16 Int=(s16)Copy_u8Fnum;
    2cda:	6d 81       	ldd	r22, Y+5	; 0x05
    2cdc:	7e 81       	ldd	r23, Y+6	; 0x06
    2cde:	8f 81       	ldd	r24, Y+7	; 0x07
    2ce0:	98 85       	ldd	r25, Y+8	; 0x08
    2ce2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	9c 83       	std	Y+4, r25	; 0x04
    2cec:	8b 83       	std	Y+3, r24	; 0x03
	s16 Float=(s16) ((Copy_u8Fnum -Int) *100);
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf2:	aa 27       	eor	r26, r26
    2cf4:	97 fd       	sbrc	r25, 7
    2cf6:	a0 95       	com	r26
    2cf8:	ba 2f       	mov	r27, r26
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    2d02:	9b 01       	movw	r18, r22
    2d04:	ac 01       	movw	r20, r24
    2d06:	6d 81       	ldd	r22, Y+5	; 0x05
    2d08:	7e 81       	ldd	r23, Y+6	; 0x06
    2d0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d0c:	98 85       	ldd	r25, Y+8	; 0x08
    2d0e:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	48 ec       	ldi	r20, 0xC8	; 200
    2d20:	52 e4       	ldi	r21, 0x42	; 66
    2d22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	9a 83       	std	Y+2, r25	; 0x02
    2d38:	89 83       	std	Y+1, r24	; 0x01
	Float *= -1;
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3e:	90 95       	com	r25
    2d40:	81 95       	neg	r24
    2d42:	9f 4f       	sbci	r25, 0xFF	; 255
    2d44:	9a 83       	std	Y+2, r25	; 0x02
    2d46:	89 83       	std	Y+1, r24	; 0x01
	LCD_I2C_SendNum(Int);
    2d48:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <LCD_I2C_SendNum>
	LCD_I2C_SendData('.');
    2d50:	8e e2       	ldi	r24, 0x2E	; 46
    2d52:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_I2C_SendData>
	LCD_I2C_SendNum(Float);
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
    2d58:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <LCD_I2C_SendNum>
}
    2d5e:	28 96       	adiw	r28, 0x08	; 8
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	f8 94       	cli
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	cd bf       	out	0x3d, r28	; 61
    2d6a:	cf 91       	pop	r28
    2d6c:	df 91       	pop	r29
    2d6e:	08 95       	ret

00002d70 <LCD_I2C_SetPosition>:


void LCD_I2C_SetPosition(u8 Copy_U8PosX,u8 Copy_U8PosY){
    2d70:	df 93       	push	r29
    2d72:	cf 93       	push	r28
    2d74:	00 d0       	rcall	.+0      	; 0x2d76 <LCD_I2C_SetPosition+0x6>
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	89 83       	std	Y+1, r24	; 0x01
    2d7c:	6a 83       	std	Y+2, r22	; 0x02
	if(0== Copy_U8PosX)
		LCD_send_command(128+Copy_U8PosY);
	else if(1==Copy_U8PosX)
		LCD_send_command(128+64+Copy_U8PosY);
*/
	LCD_I2C_SendCommand(0x80 | (Copy_U8PosX & 0x3F) | (GET_BIT(Copy_U8PosY,0) << 6));
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	8f 73       	andi	r24, 0x3F	; 63
    2d82:	28 2f       	mov	r18, r24
    2d84:	20 68       	ori	r18, 0x80	; 128
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	88 2f       	mov	r24, r24
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	81 70       	andi	r24, 0x01	; 1
    2d8e:	90 70       	andi	r25, 0x00	; 0
    2d90:	00 24       	eor	r0, r0
    2d92:	96 95       	lsr	r25
    2d94:	87 95       	ror	r24
    2d96:	07 94       	ror	r0
    2d98:	96 95       	lsr	r25
    2d9a:	87 95       	ror	r24
    2d9c:	07 94       	ror	r0
    2d9e:	98 2f       	mov	r25, r24
    2da0:	80 2d       	mov	r24, r0
    2da2:	82 2b       	or	r24, r18
    2da4:	0e 94 6f 13 	call	0x26de	; 0x26de <LCD_I2C_SendCommand>
}
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <LCD_I2C_SetCGRAMAdress>:


void LCD_I2C_SetCGRAMAdress(u8 Copy_U8Address){
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	0f 92       	push	r0
    2db8:	cd b7       	in	r28, 0x3d	; 61
    2dba:	de b7       	in	r29, 0x3e	; 62
    2dbc:	89 83       	std	Y+1, r24	; 0x01

	LCD_I2C_SendCommand	(0b01000000 | Copy_U8Address);
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	80 64       	ori	r24, 0x40	; 64
    2dc2:	0e 94 6f 13 	call	0x26de	; 0x26de <LCD_I2C_SendCommand>

}
    2dc6:	0f 90       	pop	r0
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <LCD_I2C_WriteInCGRAM>:


void LCD_I2C_WriteInCGRAM(u8 *Copy_U8ptr)
{
    2dce:	0f 93       	push	r16
    2dd0:	1f 93       	push	r17
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    2dda:	c9 54       	subi	r28, 0x49	; 73
    2ddc:	d0 40       	sbci	r29, 0x00	; 0
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	fe 01       	movw	r30, r28
    2dea:	e8 5b       	subi	r30, 0xB8	; 184
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	91 83       	std	Z+1, r25	; 0x01
    2df0:	80 83       	st	Z, r24
//CGRAMData

	u8 i = 0;
    2df2:	fe 01       	movw	r30, r28
    2df4:	e9 5b       	subi	r30, 0xB9	; 185
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	10 82       	st	Z, r1
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	ed 5b       	subi	r30, 0xBD	; 189
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	a0 e2       	ldi	r26, 0x20	; 32
    2e06:	b2 e4       	ldi	r27, 0x42	; 66
    2e08:	80 83       	st	Z, r24
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	a2 83       	std	Z+2, r26	; 0x02
    2e0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e10:	8e 01       	movw	r16, r28
    2e12:	01 5c       	subi	r16, 0xC1	; 193
    2e14:	1f 4f       	sbci	r17, 0xFF	; 255
    2e16:	fe 01       	movw	r30, r28
    2e18:	ed 5b       	subi	r30, 0xBD	; 189
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	60 81       	ld	r22, Z
    2e1e:	71 81       	ldd	r23, Z+1	; 0x01
    2e20:	82 81       	ldd	r24, Z+2	; 0x02
    2e22:	93 81       	ldd	r25, Z+3	; 0x03
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	4a ef       	ldi	r20, 0xFA	; 250
    2e2a:	54 e4       	ldi	r21, 0x44	; 68
    2e2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	f8 01       	movw	r30, r16
    2e36:	80 83       	st	Z, r24
    2e38:	91 83       	std	Z+1, r25	; 0x01
    2e3a:	a2 83       	std	Z+2, r26	; 0x02
    2e3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e3e:	fe 01       	movw	r30, r28
    2e40:	ff 96       	adiw	r30, 0x3f	; 63
    2e42:	60 81       	ld	r22, Z
    2e44:	71 81       	ldd	r23, Z+1	; 0x01
    2e46:	82 81       	ldd	r24, Z+2	; 0x02
    2e48:	93 81       	ldd	r25, Z+3	; 0x03
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e8       	ldi	r20, 0x80	; 128
    2e50:	5f e3       	ldi	r21, 0x3F	; 63
    2e52:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e56:	88 23       	and	r24, r24
    2e58:	2c f4       	brge	.+10     	; 0x2e64 <LCD_I2C_WriteInCGRAM+0x96>
		__ticks = 1;
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	9e af       	std	Y+62, r25	; 0x3e
    2e60:	8d af       	std	Y+61, r24	; 0x3d
    2e62:	46 c0       	rjmp	.+140    	; 0x2ef0 <LCD_I2C_WriteInCGRAM+0x122>
	else if (__tmp > 65535)
    2e64:	fe 01       	movw	r30, r28
    2e66:	ff 96       	adiw	r30, 0x3f	; 63
    2e68:	60 81       	ld	r22, Z
    2e6a:	71 81       	ldd	r23, Z+1	; 0x01
    2e6c:	82 81       	ldd	r24, Z+2	; 0x02
    2e6e:	93 81       	ldd	r25, Z+3	; 0x03
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	3f ef       	ldi	r19, 0xFF	; 255
    2e74:	4f e7       	ldi	r20, 0x7F	; 127
    2e76:	57 e4       	ldi	r21, 0x47	; 71
    2e78:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e7c:	18 16       	cp	r1, r24
    2e7e:	64 f5       	brge	.+88     	; 0x2ed8 <LCD_I2C_WriteInCGRAM+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e80:	fe 01       	movw	r30, r28
    2e82:	ed 5b       	subi	r30, 0xBD	; 189
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	60 81       	ld	r22, Z
    2e88:	71 81       	ldd	r23, Z+1	; 0x01
    2e8a:	82 81       	ldd	r24, Z+2	; 0x02
    2e8c:	93 81       	ldd	r25, Z+3	; 0x03
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9e af       	std	Y+62, r25	; 0x3e
    2eac:	8d af       	std	Y+61, r24	; 0x3d
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <LCD_I2C_WriteInCGRAM+0x100>
    2eb0:	88 ec       	ldi	r24, 0xC8	; 200
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	9c af       	std	Y+60, r25	; 0x3c
    2eb6:	8b af       	std	Y+59, r24	; 0x3b
    2eb8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2eba:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <LCD_I2C_WriteInCGRAM+0xee>
    2ec0:	9c af       	std	Y+60, r25	; 0x3c
    2ec2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ec6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	9e af       	std	Y+62, r25	; 0x3e
    2ecc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ed0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	69 f7       	brne	.-38     	; 0x2eb0 <LCD_I2C_WriteInCGRAM+0xe2>
    2ed6:	16 c0       	rjmp	.+44     	; 0x2f04 <LCD_I2C_WriteInCGRAM+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed8:	fe 01       	movw	r30, r28
    2eda:	ff 96       	adiw	r30, 0x3f	; 63
    2edc:	60 81       	ld	r22, Z
    2ede:	71 81       	ldd	r23, Z+1	; 0x01
    2ee0:	82 81       	ldd	r24, Z+2	; 0x02
    2ee2:	93 81       	ldd	r25, Z+3	; 0x03
    2ee4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	9e af       	std	Y+62, r25	; 0x3e
    2eee:	8d af       	std	Y+61, r24	; 0x3d
    2ef0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ef2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ef4:	9a af       	std	Y+58, r25	; 0x3a
    2ef6:	89 af       	std	Y+57, r24	; 0x39
    2ef8:	89 ad       	ldd	r24, Y+57	; 0x39
    2efa:	9a ad       	ldd	r25, Y+58	; 0x3a
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	f1 f7       	brne	.-4      	; 0x2efc <LCD_I2C_WriteInCGRAM+0x12e>
    2f00:	9a af       	std	Y+58, r25	; 0x3a
    2f02:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);
	I2C_master_init();
    2f04:	0e 94 4d 0c 	call	0x189a	; 0x189a <I2C_master_init>
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	a0 ef       	ldi	r26, 0xF0	; 240
    2f0e:	b2 e4       	ldi	r27, 0x42	; 66
    2f10:	8d ab       	std	Y+53, r24	; 0x35
    2f12:	9e ab       	std	Y+54, r25	; 0x36
    2f14:	af ab       	std	Y+55, r26	; 0x37
    2f16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f18:	6d a9       	ldd	r22, Y+53	; 0x35
    2f1a:	7e a9       	ldd	r23, Y+54	; 0x36
    2f1c:	8f a9       	ldd	r24, Y+55	; 0x37
    2f1e:	98 ad       	ldd	r25, Y+56	; 0x38
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	4a ef       	ldi	r20, 0xFA	; 250
    2f26:	54 e4       	ldi	r21, 0x44	; 68
    2f28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	89 ab       	std	Y+49, r24	; 0x31
    2f32:	9a ab       	std	Y+50, r25	; 0x32
    2f34:	ab ab       	std	Y+51, r26	; 0x33
    2f36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f38:	69 a9       	ldd	r22, Y+49	; 0x31
    2f3a:	7a a9       	ldd	r23, Y+50	; 0x32
    2f3c:	8b a9       	ldd	r24, Y+51	; 0x33
    2f3e:	9c a9       	ldd	r25, Y+52	; 0x34
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	40 e8       	ldi	r20, 0x80	; 128
    2f46:	5f e3       	ldi	r21, 0x3F	; 63
    2f48:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f4c:	88 23       	and	r24, r24
    2f4e:	2c f4       	brge	.+10     	; 0x2f5a <LCD_I2C_WriteInCGRAM+0x18c>
		__ticks = 1;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	98 ab       	std	Y+48, r25	; 0x30
    2f56:	8f a7       	std	Y+47, r24	; 0x2f
    2f58:	3f c0       	rjmp	.+126    	; 0x2fd8 <LCD_I2C_WriteInCGRAM+0x20a>
	else if (__tmp > 65535)
    2f5a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f5c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f5e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f60:	9c a9       	ldd	r25, Y+52	; 0x34
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	3f ef       	ldi	r19, 0xFF	; 255
    2f66:	4f e7       	ldi	r20, 0x7F	; 127
    2f68:	57 e4       	ldi	r21, 0x47	; 71
    2f6a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f6e:	18 16       	cp	r1, r24
    2f70:	4c f5       	brge	.+82     	; 0x2fc4 <LCD_I2C_WriteInCGRAM+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f72:	6d a9       	ldd	r22, Y+53	; 0x35
    2f74:	7e a9       	ldd	r23, Y+54	; 0x36
    2f76:	8f a9       	ldd	r24, Y+55	; 0x37
    2f78:	98 ad       	ldd	r25, Y+56	; 0x38
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e2       	ldi	r20, 0x20	; 32
    2f80:	51 e4       	ldi	r21, 0x41	; 65
    2f82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	cd 01       	movw	r24, r26
    2f8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	98 ab       	std	Y+48, r25	; 0x30
    2f98:	8f a7       	std	Y+47, r24	; 0x2f
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <LCD_I2C_WriteInCGRAM+0x1ec>
    2f9c:	88 ec       	ldi	r24, 0xC8	; 200
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9e a7       	std	Y+46, r25	; 0x2e
    2fa2:	8d a7       	std	Y+45, r24	; 0x2d
    2fa4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fa6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	f1 f7       	brne	.-4      	; 0x2fa8 <LCD_I2C_WriteInCGRAM+0x1da>
    2fac:	9e a7       	std	Y+46, r25	; 0x2e
    2fae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fb2:	98 a9       	ldd	r25, Y+48	; 0x30
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	98 ab       	std	Y+48, r25	; 0x30
    2fb8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fba:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fbc:	98 a9       	ldd	r25, Y+48	; 0x30
    2fbe:	00 97       	sbiw	r24, 0x00	; 0
    2fc0:	69 f7       	brne	.-38     	; 0x2f9c <LCD_I2C_WriteInCGRAM+0x1ce>
    2fc2:	14 c0       	rjmp	.+40     	; 0x2fec <LCD_I2C_WriteInCGRAM+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc4:	69 a9       	ldd	r22, Y+49	; 0x31
    2fc6:	7a a9       	ldd	r23, Y+50	; 0x32
    2fc8:	8b a9       	ldd	r24, Y+51	; 0x33
    2fca:	9c a9       	ldd	r25, Y+52	; 0x34
    2fcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	98 ab       	std	Y+48, r25	; 0x30
    2fd6:	8f a7       	std	Y+47, r24	; 0x2f
    2fd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fda:	98 a9       	ldd	r25, Y+48	; 0x30
    2fdc:	9c a7       	std	Y+44, r25	; 0x2c
    2fde:	8b a7       	std	Y+43, r24	; 0x2b
    2fe0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fe2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <LCD_I2C_WriteInCGRAM+0x216>
    2fe8:	9c a7       	std	Y+44, r25	; 0x2c
    2fea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(120);
	I2C_send_start();
    2fec:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_send_start>
	I2C_select_slave(5,0);
    2ff0:	85 e0       	ldi	r24, 0x05	; 5
    2ff2:	60 e0       	ldi	r22, 0x00	; 0
    2ff4:	0e 94 91 0b 	call	0x1722	; 0x1722 <I2C_select_slave>
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	a8 ec       	ldi	r26, 0xC8	; 200
    2ffe:	b2 e4       	ldi	r27, 0x42	; 66
    3000:	8f a3       	std	Y+39, r24	; 0x27
    3002:	98 a7       	std	Y+40, r25	; 0x28
    3004:	a9 a7       	std	Y+41, r26	; 0x29
    3006:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3008:	6f a1       	ldd	r22, Y+39	; 0x27
    300a:	78 a5       	ldd	r23, Y+40	; 0x28
    300c:	89 a5       	ldd	r24, Y+41	; 0x29
    300e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	4a ef       	ldi	r20, 0xFA	; 250
    3016:	54 e4       	ldi	r21, 0x44	; 68
    3018:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	8b a3       	std	Y+35, r24	; 0x23
    3022:	9c a3       	std	Y+36, r25	; 0x24
    3024:	ad a3       	std	Y+37, r26	; 0x25
    3026:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3028:	6b a1       	ldd	r22, Y+35	; 0x23
    302a:	7c a1       	ldd	r23, Y+36	; 0x24
    302c:	8d a1       	ldd	r24, Y+37	; 0x25
    302e:	9e a1       	ldd	r25, Y+38	; 0x26
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e8       	ldi	r20, 0x80	; 128
    3036:	5f e3       	ldi	r21, 0x3F	; 63
    3038:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    303c:	88 23       	and	r24, r24
    303e:	2c f4       	brge	.+10     	; 0x304a <LCD_I2C_WriteInCGRAM+0x27c>
		__ticks = 1;
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	9a a3       	std	Y+34, r25	; 0x22
    3046:	89 a3       	std	Y+33, r24	; 0x21
    3048:	3f c0       	rjmp	.+126    	; 0x30c8 <LCD_I2C_WriteInCGRAM+0x2fa>
	else if (__tmp > 65535)
    304a:	6b a1       	ldd	r22, Y+35	; 0x23
    304c:	7c a1       	ldd	r23, Y+36	; 0x24
    304e:	8d a1       	ldd	r24, Y+37	; 0x25
    3050:	9e a1       	ldd	r25, Y+38	; 0x26
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	3f ef       	ldi	r19, 0xFF	; 255
    3056:	4f e7       	ldi	r20, 0x7F	; 127
    3058:	57 e4       	ldi	r21, 0x47	; 71
    305a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    305e:	18 16       	cp	r1, r24
    3060:	4c f5       	brge	.+82     	; 0x30b4 <LCD_I2C_WriteInCGRAM+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3062:	6f a1       	ldd	r22, Y+39	; 0x27
    3064:	78 a5       	ldd	r23, Y+40	; 0x28
    3066:	89 a5       	ldd	r24, Y+41	; 0x29
    3068:	9a a5       	ldd	r25, Y+42	; 0x2a
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	40 e2       	ldi	r20, 0x20	; 32
    3070:	51 e4       	ldi	r21, 0x41	; 65
    3072:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	bc 01       	movw	r22, r24
    307c:	cd 01       	movw	r24, r26
    307e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	9a a3       	std	Y+34, r25	; 0x22
    3088:	89 a3       	std	Y+33, r24	; 0x21
    308a:	0f c0       	rjmp	.+30     	; 0x30aa <LCD_I2C_WriteInCGRAM+0x2dc>
    308c:	88 ec       	ldi	r24, 0xC8	; 200
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	98 a3       	std	Y+32, r25	; 0x20
    3092:	8f 8f       	std	Y+31, r24	; 0x1f
    3094:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3096:	98 a1       	ldd	r25, Y+32	; 0x20
    3098:	01 97       	sbiw	r24, 0x01	; 1
    309a:	f1 f7       	brne	.-4      	; 0x3098 <LCD_I2C_WriteInCGRAM+0x2ca>
    309c:	98 a3       	std	Y+32, r25	; 0x20
    309e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a0:	89 a1       	ldd	r24, Y+33	; 0x21
    30a2:	9a a1       	ldd	r25, Y+34	; 0x22
    30a4:	01 97       	sbiw	r24, 0x01	; 1
    30a6:	9a a3       	std	Y+34, r25	; 0x22
    30a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30aa:	89 a1       	ldd	r24, Y+33	; 0x21
    30ac:	9a a1       	ldd	r25, Y+34	; 0x22
    30ae:	00 97       	sbiw	r24, 0x00	; 0
    30b0:	69 f7       	brne	.-38     	; 0x308c <LCD_I2C_WriteInCGRAM+0x2be>
    30b2:	14 c0       	rjmp	.+40     	; 0x30dc <LCD_I2C_WriteInCGRAM+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b4:	6b a1       	ldd	r22, Y+35	; 0x23
    30b6:	7c a1       	ldd	r23, Y+36	; 0x24
    30b8:	8d a1       	ldd	r24, Y+37	; 0x25
    30ba:	9e a1       	ldd	r25, Y+38	; 0x26
    30bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	9a a3       	std	Y+34, r25	; 0x22
    30c6:	89 a3       	std	Y+33, r24	; 0x21
    30c8:	89 a1       	ldd	r24, Y+33	; 0x21
    30ca:	9a a1       	ldd	r25, Y+34	; 0x22
    30cc:	9e 8f       	std	Y+30, r25	; 0x1e
    30ce:	8d 8f       	std	Y+29, r24	; 0x1d
    30d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	f1 f7       	brne	.-4      	; 0x30d4 <LCD_I2C_WriteInCGRAM+0x306>
    30d8:	9e 8f       	std	Y+30, r25	; 0x1e
    30da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	I2C_Master_send_data(LCD_I2C_CGRAMData);
    30dc:	87 e0       	ldi	r24, 0x07	; 7
    30de:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>

	for(i = 0; i<8;i++){
    30e2:	fe 01       	movw	r30, r28
    30e4:	e9 5b       	subi	r30, 0xB9	; 185
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	10 82       	st	Z, r1
    30ea:	8c c0       	rjmp	.+280    	; 0x3204 <LCD_I2C_WriteInCGRAM+0x436>
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	a8 ec       	ldi	r26, 0xC8	; 200
    30f2:	b2 e4       	ldi	r27, 0x42	; 66
    30f4:	89 8f       	std	Y+25, r24	; 0x19
    30f6:	9a 8f       	std	Y+26, r25	; 0x1a
    30f8:	ab 8f       	std	Y+27, r26	; 0x1b
    30fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30fc:	69 8d       	ldd	r22, Y+25	; 0x19
    30fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3100:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3102:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	4a ef       	ldi	r20, 0xFA	; 250
    310a:	54 e4       	ldi	r21, 0x44	; 68
    310c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	8d 8b       	std	Y+21, r24	; 0x15
    3116:	9e 8b       	std	Y+22, r25	; 0x16
    3118:	af 8b       	std	Y+23, r26	; 0x17
    311a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    311c:	6d 89       	ldd	r22, Y+21	; 0x15
    311e:	7e 89       	ldd	r23, Y+22	; 0x16
    3120:	8f 89       	ldd	r24, Y+23	; 0x17
    3122:	98 8d       	ldd	r25, Y+24	; 0x18
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	40 e8       	ldi	r20, 0x80	; 128
    312a:	5f e3       	ldi	r21, 0x3F	; 63
    312c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3130:	88 23       	and	r24, r24
    3132:	2c f4       	brge	.+10     	; 0x313e <LCD_I2C_WriteInCGRAM+0x370>
		__ticks = 1;
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	9c 8b       	std	Y+20, r25	; 0x14
    313a:	8b 8b       	std	Y+19, r24	; 0x13
    313c:	3f c0       	rjmp	.+126    	; 0x31bc <LCD_I2C_WriteInCGRAM+0x3ee>
	else if (__tmp > 65535)
    313e:	6d 89       	ldd	r22, Y+21	; 0x15
    3140:	7e 89       	ldd	r23, Y+22	; 0x16
    3142:	8f 89       	ldd	r24, Y+23	; 0x17
    3144:	98 8d       	ldd	r25, Y+24	; 0x18
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	3f ef       	ldi	r19, 0xFF	; 255
    314a:	4f e7       	ldi	r20, 0x7F	; 127
    314c:	57 e4       	ldi	r21, 0x47	; 71
    314e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3152:	18 16       	cp	r1, r24
    3154:	4c f5       	brge	.+82     	; 0x31a8 <LCD_I2C_WriteInCGRAM+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3156:	69 8d       	ldd	r22, Y+25	; 0x19
    3158:	7a 8d       	ldd	r23, Y+26	; 0x1a
    315a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    315c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e2       	ldi	r20, 0x20	; 32
    3164:	51 e4       	ldi	r21, 0x41	; 65
    3166:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	bc 01       	movw	r22, r24
    3170:	cd 01       	movw	r24, r26
    3172:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	9c 8b       	std	Y+20, r25	; 0x14
    317c:	8b 8b       	std	Y+19, r24	; 0x13
    317e:	0f c0       	rjmp	.+30     	; 0x319e <LCD_I2C_WriteInCGRAM+0x3d0>
    3180:	88 ec       	ldi	r24, 0xC8	; 200
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	9a 8b       	std	Y+18, r25	; 0x12
    3186:	89 8b       	std	Y+17, r24	; 0x11
    3188:	89 89       	ldd	r24, Y+17	; 0x11
    318a:	9a 89       	ldd	r25, Y+18	; 0x12
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <LCD_I2C_WriteInCGRAM+0x3be>
    3190:	9a 8b       	std	Y+18, r25	; 0x12
    3192:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3194:	8b 89       	ldd	r24, Y+19	; 0x13
    3196:	9c 89       	ldd	r25, Y+20	; 0x14
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	9c 8b       	std	Y+20, r25	; 0x14
    319c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    319e:	8b 89       	ldd	r24, Y+19	; 0x13
    31a0:	9c 89       	ldd	r25, Y+20	; 0x14
    31a2:	00 97       	sbiw	r24, 0x00	; 0
    31a4:	69 f7       	brne	.-38     	; 0x3180 <LCD_I2C_WriteInCGRAM+0x3b2>
    31a6:	14 c0       	rjmp	.+40     	; 0x31d0 <LCD_I2C_WriteInCGRAM+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a8:	6d 89       	ldd	r22, Y+21	; 0x15
    31aa:	7e 89       	ldd	r23, Y+22	; 0x16
    31ac:	8f 89       	ldd	r24, Y+23	; 0x17
    31ae:	98 8d       	ldd	r25, Y+24	; 0x18
    31b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	9c 8b       	std	Y+20, r25	; 0x14
    31ba:	8b 8b       	std	Y+19, r24	; 0x13
    31bc:	8b 89       	ldd	r24, Y+19	; 0x13
    31be:	9c 89       	ldd	r25, Y+20	; 0x14
    31c0:	98 8b       	std	Y+16, r25	; 0x10
    31c2:	8f 87       	std	Y+15, r24	; 0x0f
    31c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    31c6:	98 89       	ldd	r25, Y+16	; 0x10
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <LCD_I2C_WriteInCGRAM+0x3fa>
    31cc:	98 8b       	std	Y+16, r25	; 0x10
    31ce:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		I2C_Master_send_data(Copy_U8ptr[i]);
    31d0:	fe 01       	movw	r30, r28
    31d2:	e9 5b       	subi	r30, 0xB9	; 185
    31d4:	ff 4f       	sbci	r31, 0xFF	; 255
    31d6:	80 81       	ld	r24, Z
    31d8:	28 2f       	mov	r18, r24
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	fe 01       	movw	r30, r28
    31de:	e8 5b       	subi	r30, 0xB8	; 184
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	80 81       	ld	r24, Z
    31e4:	91 81       	ldd	r25, Z+1	; 0x01
    31e6:	fc 01       	movw	r30, r24
    31e8:	e2 0f       	add	r30, r18
    31ea:	f3 1f       	adc	r31, r19
    31ec:	80 81       	ld	r24, Z
    31ee:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
	I2C_send_start();
	I2C_select_slave(5,0);
	_delay_ms(100);
	I2C_Master_send_data(LCD_I2C_CGRAMData);

	for(i = 0; i<8;i++){
    31f2:	de 01       	movw	r26, r28
    31f4:	a9 5b       	subi	r26, 0xB9	; 185
    31f6:	bf 4f       	sbci	r27, 0xFF	; 255
    31f8:	fe 01       	movw	r30, r28
    31fa:	e9 5b       	subi	r30, 0xB9	; 185
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	80 81       	ld	r24, Z
    3200:	8f 5f       	subi	r24, 0xFF	; 255
    3202:	8c 93       	st	X, r24
    3204:	fe 01       	movw	r30, r28
    3206:	e9 5b       	subi	r30, 0xB9	; 185
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	80 81       	ld	r24, Z
    320c:	88 30       	cpi	r24, 0x08	; 8
    320e:	08 f4       	brcc	.+2      	; 0x3212 <LCD_I2C_WriteInCGRAM+0x444>
    3210:	6d cf       	rjmp	.-294    	; 0x30ec <LCD_I2C_WriteInCGRAM+0x31e>
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	a0 e2       	ldi	r26, 0x20	; 32
    3218:	b1 e4       	ldi	r27, 0x41	; 65
    321a:	8b 87       	std	Y+11, r24	; 0x0b
    321c:	9c 87       	std	Y+12, r25	; 0x0c
    321e:	ad 87       	std	Y+13, r26	; 0x0d
    3220:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3222:	6b 85       	ldd	r22, Y+11	; 0x0b
    3224:	7c 85       	ldd	r23, Y+12	; 0x0c
    3226:	8d 85       	ldd	r24, Y+13	; 0x0d
    3228:	9e 85       	ldd	r25, Y+14	; 0x0e
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	4a ef       	ldi	r20, 0xFA	; 250
    3230:	54 e4       	ldi	r21, 0x44	; 68
    3232:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	8f 83       	std	Y+7, r24	; 0x07
    323c:	98 87       	std	Y+8, r25	; 0x08
    323e:	a9 87       	std	Y+9, r26	; 0x09
    3240:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3242:	6f 81       	ldd	r22, Y+7	; 0x07
    3244:	78 85       	ldd	r23, Y+8	; 0x08
    3246:	89 85       	ldd	r24, Y+9	; 0x09
    3248:	9a 85       	ldd	r25, Y+10	; 0x0a
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	40 e8       	ldi	r20, 0x80	; 128
    3250:	5f e3       	ldi	r21, 0x3F	; 63
    3252:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3256:	88 23       	and	r24, r24
    3258:	2c f4       	brge	.+10     	; 0x3264 <LCD_I2C_WriteInCGRAM+0x496>
		__ticks = 1;
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	9e 83       	std	Y+6, r25	; 0x06
    3260:	8d 83       	std	Y+5, r24	; 0x05
    3262:	3f c0       	rjmp	.+126    	; 0x32e2 <LCD_I2C_WriteInCGRAM+0x514>
	else if (__tmp > 65535)
    3264:	6f 81       	ldd	r22, Y+7	; 0x07
    3266:	78 85       	ldd	r23, Y+8	; 0x08
    3268:	89 85       	ldd	r24, Y+9	; 0x09
    326a:	9a 85       	ldd	r25, Y+10	; 0x0a
    326c:	20 e0       	ldi	r18, 0x00	; 0
    326e:	3f ef       	ldi	r19, 0xFF	; 255
    3270:	4f e7       	ldi	r20, 0x7F	; 127
    3272:	57 e4       	ldi	r21, 0x47	; 71
    3274:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3278:	18 16       	cp	r1, r24
    327a:	4c f5       	brge	.+82     	; 0x32ce <LCD_I2C_WriteInCGRAM+0x500>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    327c:	6b 85       	ldd	r22, Y+11	; 0x0b
    327e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3280:	8d 85       	ldd	r24, Y+13	; 0x0d
    3282:	9e 85       	ldd	r25, Y+14	; 0x0e
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	40 e2       	ldi	r20, 0x20	; 32
    328a:	51 e4       	ldi	r21, 0x41	; 65
    328c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	bc 01       	movw	r22, r24
    3296:	cd 01       	movw	r24, r26
    3298:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    329c:	dc 01       	movw	r26, r24
    329e:	cb 01       	movw	r24, r22
    32a0:	9e 83       	std	Y+6, r25	; 0x06
    32a2:	8d 83       	std	Y+5, r24	; 0x05
    32a4:	0f c0       	rjmp	.+30     	; 0x32c4 <LCD_I2C_WriteInCGRAM+0x4f6>
    32a6:	88 ec       	ldi	r24, 0xC8	; 200
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	9c 83       	std	Y+4, r25	; 0x04
    32ac:	8b 83       	std	Y+3, r24	; 0x03
    32ae:	8b 81       	ldd	r24, Y+3	; 0x03
    32b0:	9c 81       	ldd	r25, Y+4	; 0x04
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	f1 f7       	brne	.-4      	; 0x32b2 <LCD_I2C_WriteInCGRAM+0x4e4>
    32b6:	9c 83       	std	Y+4, r25	; 0x04
    32b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ba:	8d 81       	ldd	r24, Y+5	; 0x05
    32bc:	9e 81       	ldd	r25, Y+6	; 0x06
    32be:	01 97       	sbiw	r24, 0x01	; 1
    32c0:	9e 83       	std	Y+6, r25	; 0x06
    32c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c4:	8d 81       	ldd	r24, Y+5	; 0x05
    32c6:	9e 81       	ldd	r25, Y+6	; 0x06
    32c8:	00 97       	sbiw	r24, 0x00	; 0
    32ca:	69 f7       	brne	.-38     	; 0x32a6 <LCD_I2C_WriteInCGRAM+0x4d8>
    32cc:	14 c0       	rjmp	.+40     	; 0x32f6 <LCD_I2C_WriteInCGRAM+0x528>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ce:	6f 81       	ldd	r22, Y+7	; 0x07
    32d0:	78 85       	ldd	r23, Y+8	; 0x08
    32d2:	89 85       	ldd	r24, Y+9	; 0x09
    32d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	9e 83       	std	Y+6, r25	; 0x06
    32e0:	8d 83       	std	Y+5, r24	; 0x05
    32e2:	8d 81       	ldd	r24, Y+5	; 0x05
    32e4:	9e 81       	ldd	r25, Y+6	; 0x06
    32e6:	9a 83       	std	Y+2, r25	; 0x02
    32e8:	89 83       	std	Y+1, r24	; 0x01
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	9a 81       	ldd	r25, Y+2	; 0x02
    32ee:	01 97       	sbiw	r24, 0x01	; 1
    32f0:	f1 f7       	brne	.-4      	; 0x32ee <LCD_I2C_WriteInCGRAM+0x520>
    32f2:	9a 83       	std	Y+2, r25	; 0x02
    32f4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		I2C_Master_send_data(Copy_U8ptr[i]);
	}
	_delay_ms(10);
	I2C_stop();
    32f6:	0e 94 42 0c 	call	0x1884	; 0x1884 <I2C_stop>
}
    32fa:	c7 5b       	subi	r28, 0xB7	; 183
    32fc:	df 4f       	sbci	r29, 0xFF	; 255
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	f8 94       	cli
    3302:	de bf       	out	0x3e, r29	; 62
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	cd bf       	out	0x3d, r28	; 61
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	1f 91       	pop	r17
    330e:	0f 91       	pop	r16
    3310:	08 95       	ret

00003312 <LCD_VidSendData>:
#include"DIO_Interface.h"
#include"LCD_interface.h"
#include "LCD_cofig.h"

void LCD_VidSendData(u8 Copy_u8Data)
{
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	6d 97       	sbiw	r28, 0x1d	; 29
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	cd bf       	out	0x3d, r28	; 61
    3326:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	60 e0       	ldi	r22, 0x00	; 0
    332c:	41 e0       	ldi	r20, 0x01	; 1
    332e:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	61 e0       	ldi	r22, 0x01	; 1
    3336:	40 e0       	ldi	r20, 0x00	; 0
    3338:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
	DIO_VidWriteOnPort(Data_Port,Copy_u8Data);
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3340:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	62 e0       	ldi	r22, 0x02	; 2
    3348:	41 e0       	ldi	r20, 0x01	; 1
    334a:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	a0 e2       	ldi	r26, 0x20	; 32
    3354:	b1 e4       	ldi	r27, 0x41	; 65
    3356:	89 8f       	std	Y+25, r24	; 0x19
    3358:	9a 8f       	std	Y+26, r25	; 0x1a
    335a:	ab 8f       	std	Y+27, r26	; 0x1b
    335c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335e:	69 8d       	ldd	r22, Y+25	; 0x19
    3360:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3362:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3364:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	4a ef       	ldi	r20, 0xFA	; 250
    336c:	54 e4       	ldi	r21, 0x44	; 68
    336e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3372:	dc 01       	movw	r26, r24
    3374:	cb 01       	movw	r24, r22
    3376:	8d 8b       	std	Y+21, r24	; 0x15
    3378:	9e 8b       	std	Y+22, r25	; 0x16
    337a:	af 8b       	std	Y+23, r26	; 0x17
    337c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    337e:	6d 89       	ldd	r22, Y+21	; 0x15
    3380:	7e 89       	ldd	r23, Y+22	; 0x16
    3382:	8f 89       	ldd	r24, Y+23	; 0x17
    3384:	98 8d       	ldd	r25, Y+24	; 0x18
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	40 e8       	ldi	r20, 0x80	; 128
    338c:	5f e3       	ldi	r21, 0x3F	; 63
    338e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3392:	88 23       	and	r24, r24
    3394:	2c f4       	brge	.+10     	; 0x33a0 <LCD_VidSendData+0x8e>
		__ticks = 1;
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	9c 8b       	std	Y+20, r25	; 0x14
    339c:	8b 8b       	std	Y+19, r24	; 0x13
    339e:	3f c0       	rjmp	.+126    	; 0x341e <LCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    33a0:	6d 89       	ldd	r22, Y+21	; 0x15
    33a2:	7e 89       	ldd	r23, Y+22	; 0x16
    33a4:	8f 89       	ldd	r24, Y+23	; 0x17
    33a6:	98 8d       	ldd	r25, Y+24	; 0x18
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	3f ef       	ldi	r19, 0xFF	; 255
    33ac:	4f e7       	ldi	r20, 0x7F	; 127
    33ae:	57 e4       	ldi	r21, 0x47	; 71
    33b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    33b4:	18 16       	cp	r1, r24
    33b6:	4c f5       	brge	.+82     	; 0x340a <LCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b8:	69 8d       	ldd	r22, Y+25	; 0x19
    33ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	40 e2       	ldi	r20, 0x20	; 32
    33c6:	51 e4       	ldi	r21, 0x41	; 65
    33c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	bc 01       	movw	r22, r24
    33d2:	cd 01       	movw	r24, r26
    33d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	9c 8b       	std	Y+20, r25	; 0x14
    33de:	8b 8b       	std	Y+19, r24	; 0x13
    33e0:	0f c0       	rjmp	.+30     	; 0x3400 <LCD_VidSendData+0xee>
    33e2:	88 ec       	ldi	r24, 0xC8	; 200
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	9a 8b       	std	Y+18, r25	; 0x12
    33e8:	89 8b       	std	Y+17, r24	; 0x11
    33ea:	89 89       	ldd	r24, Y+17	; 0x11
    33ec:	9a 89       	ldd	r25, Y+18	; 0x12
    33ee:	01 97       	sbiw	r24, 0x01	; 1
    33f0:	f1 f7       	brne	.-4      	; 0x33ee <LCD_VidSendData+0xdc>
    33f2:	9a 8b       	std	Y+18, r25	; 0x12
    33f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f6:	8b 89       	ldd	r24, Y+19	; 0x13
    33f8:	9c 89       	ldd	r25, Y+20	; 0x14
    33fa:	01 97       	sbiw	r24, 0x01	; 1
    33fc:	9c 8b       	std	Y+20, r25	; 0x14
    33fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3400:	8b 89       	ldd	r24, Y+19	; 0x13
    3402:	9c 89       	ldd	r25, Y+20	; 0x14
    3404:	00 97       	sbiw	r24, 0x00	; 0
    3406:	69 f7       	brne	.-38     	; 0x33e2 <LCD_VidSendData+0xd0>
    3408:	14 c0       	rjmp	.+40     	; 0x3432 <LCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    340a:	6d 89       	ldd	r22, Y+21	; 0x15
    340c:	7e 89       	ldd	r23, Y+22	; 0x16
    340e:	8f 89       	ldd	r24, Y+23	; 0x17
    3410:	98 8d       	ldd	r25, Y+24	; 0x18
    3412:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	9c 8b       	std	Y+20, r25	; 0x14
    341c:	8b 8b       	std	Y+19, r24	; 0x13
    341e:	8b 89       	ldd	r24, Y+19	; 0x13
    3420:	9c 89       	ldd	r25, Y+20	; 0x14
    3422:	98 8b       	std	Y+16, r25	; 0x10
    3424:	8f 87       	std	Y+15, r24	; 0x0f
    3426:	8f 85       	ldd	r24, Y+15	; 0x0f
    3428:	98 89       	ldd	r25, Y+16	; 0x10
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	f1 f7       	brne	.-4      	; 0x342a <LCD_VidSendData+0x118>
    342e:	98 8b       	std	Y+16, r25	; 0x10
    3430:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	62 e0       	ldi	r22, 0x02	; 2
    3436:	40 e0       	ldi	r20, 0x00	; 0
    3438:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	a0 e2       	ldi	r26, 0x20	; 32
    3442:	b1 e4       	ldi	r27, 0x41	; 65
    3444:	8b 87       	std	Y+11, r24	; 0x0b
    3446:	9c 87       	std	Y+12, r25	; 0x0c
    3448:	ad 87       	std	Y+13, r26	; 0x0d
    344a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    344c:	6b 85       	ldd	r22, Y+11	; 0x0b
    344e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3450:	8d 85       	ldd	r24, Y+13	; 0x0d
    3452:	9e 85       	ldd	r25, Y+14	; 0x0e
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	4a ef       	ldi	r20, 0xFA	; 250
    345a:	54 e4       	ldi	r21, 0x44	; 68
    345c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	8f 83       	std	Y+7, r24	; 0x07
    3466:	98 87       	std	Y+8, r25	; 0x08
    3468:	a9 87       	std	Y+9, r26	; 0x09
    346a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    346c:	6f 81       	ldd	r22, Y+7	; 0x07
    346e:	78 85       	ldd	r23, Y+8	; 0x08
    3470:	89 85       	ldd	r24, Y+9	; 0x09
    3472:	9a 85       	ldd	r25, Y+10	; 0x0a
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	40 e8       	ldi	r20, 0x80	; 128
    347a:	5f e3       	ldi	r21, 0x3F	; 63
    347c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3480:	88 23       	and	r24, r24
    3482:	2c f4       	brge	.+10     	; 0x348e <LCD_VidSendData+0x17c>
		__ticks = 1;
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	9e 83       	std	Y+6, r25	; 0x06
    348a:	8d 83       	std	Y+5, r24	; 0x05
    348c:	3f c0       	rjmp	.+126    	; 0x350c <LCD_VidSendData+0x1fa>
	else if (__tmp > 65535)
    348e:	6f 81       	ldd	r22, Y+7	; 0x07
    3490:	78 85       	ldd	r23, Y+8	; 0x08
    3492:	89 85       	ldd	r24, Y+9	; 0x09
    3494:	9a 85       	ldd	r25, Y+10	; 0x0a
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	3f ef       	ldi	r19, 0xFF	; 255
    349a:	4f e7       	ldi	r20, 0x7F	; 127
    349c:	57 e4       	ldi	r21, 0x47	; 71
    349e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    34a2:	18 16       	cp	r1, r24
    34a4:	4c f5       	brge	.+82     	; 0x34f8 <LCD_VidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e2       	ldi	r20, 0x20	; 32
    34b4:	51 e4       	ldi	r21, 0x41	; 65
    34b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	bc 01       	movw	r22, r24
    34c0:	cd 01       	movw	r24, r26
    34c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	9e 83       	std	Y+6, r25	; 0x06
    34cc:	8d 83       	std	Y+5, r24	; 0x05
    34ce:	0f c0       	rjmp	.+30     	; 0x34ee <LCD_VidSendData+0x1dc>
    34d0:	88 ec       	ldi	r24, 0xC8	; 200
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	9c 83       	std	Y+4, r25	; 0x04
    34d6:	8b 83       	std	Y+3, r24	; 0x03
    34d8:	8b 81       	ldd	r24, Y+3	; 0x03
    34da:	9c 81       	ldd	r25, Y+4	; 0x04
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	f1 f7       	brne	.-4      	; 0x34dc <LCD_VidSendData+0x1ca>
    34e0:	9c 83       	std	Y+4, r25	; 0x04
    34e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e4:	8d 81       	ldd	r24, Y+5	; 0x05
    34e6:	9e 81       	ldd	r25, Y+6	; 0x06
    34e8:	01 97       	sbiw	r24, 0x01	; 1
    34ea:	9e 83       	std	Y+6, r25	; 0x06
    34ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ee:	8d 81       	ldd	r24, Y+5	; 0x05
    34f0:	9e 81       	ldd	r25, Y+6	; 0x06
    34f2:	00 97       	sbiw	r24, 0x00	; 0
    34f4:	69 f7       	brne	.-38     	; 0x34d0 <LCD_VidSendData+0x1be>
    34f6:	14 c0       	rjmp	.+40     	; 0x3520 <LCD_VidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f8:	6f 81       	ldd	r22, Y+7	; 0x07
    34fa:	78 85       	ldd	r23, Y+8	; 0x08
    34fc:	89 85       	ldd	r24, Y+9	; 0x09
    34fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3500:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	9e 83       	std	Y+6, r25	; 0x06
    350a:	8d 83       	std	Y+5, r24	; 0x05
    350c:	8d 81       	ldd	r24, Y+5	; 0x05
    350e:	9e 81       	ldd	r25, Y+6	; 0x06
    3510:	9a 83       	std	Y+2, r25	; 0x02
    3512:	89 83       	std	Y+1, r24	; 0x01
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    3516:	9a 81       	ldd	r25, Y+2	; 0x02
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	f1 f7       	brne	.-4      	; 0x3518 <LCD_VidSendData+0x206>
    351c:	9a 83       	std	Y+2, r25	; 0x02
    351e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    3520:	6d 96       	adiw	r28, 0x1d	; 29
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	cf 91       	pop	r28
    352e:	df 91       	pop	r29
    3530:	08 95       	ret

00003532 <LCD_VidSendCommand>:
void LCD_VidSendCommand(u8 Copy_u8Data)
{
    3532:	df 93       	push	r29
    3534:	cf 93       	push	r28
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
    353a:	6d 97       	sbiw	r28, 0x1d	; 29
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	f8 94       	cli
    3540:	de bf       	out	0x3e, r29	; 62
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	cd bf       	out	0x3d, r28	; 61
    3546:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPin_Value(Control_Port,RS,0);   //rs=0   data
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	60 e0       	ldi	r22, 0x00	; 0
    354c:	40 e0       	ldi	r20, 0x00	; 0
    354e:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	61 e0       	ldi	r22, 0x01	; 1
    3556:	40 e0       	ldi	r20, 0x00	; 0
    3558:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
	DIO_VidWriteOnPort(Data_Port,Copy_u8Data);
    355c:	80 e0       	ldi	r24, 0x00	; 0
    355e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3560:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	62 e0       	ldi	r22, 0x02	; 2
    3568:	41 e0       	ldi	r20, 0x01	; 1
    356a:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	a0 e2       	ldi	r26, 0x20	; 32
    3574:	b1 e4       	ldi	r27, 0x41	; 65
    3576:	89 8f       	std	Y+25, r24	; 0x19
    3578:	9a 8f       	std	Y+26, r25	; 0x1a
    357a:	ab 8f       	std	Y+27, r26	; 0x1b
    357c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357e:	69 8d       	ldd	r22, Y+25	; 0x19
    3580:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3582:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3584:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	4a ef       	ldi	r20, 0xFA	; 250
    358c:	54 e4       	ldi	r21, 0x44	; 68
    358e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	8d 8b       	std	Y+21, r24	; 0x15
    3598:	9e 8b       	std	Y+22, r25	; 0x16
    359a:	af 8b       	std	Y+23, r26	; 0x17
    359c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    359e:	6d 89       	ldd	r22, Y+21	; 0x15
    35a0:	7e 89       	ldd	r23, Y+22	; 0x16
    35a2:	8f 89       	ldd	r24, Y+23	; 0x17
    35a4:	98 8d       	ldd	r25, Y+24	; 0x18
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	40 e8       	ldi	r20, 0x80	; 128
    35ac:	5f e3       	ldi	r21, 0x3F	; 63
    35ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    35b2:	88 23       	and	r24, r24
    35b4:	2c f4       	brge	.+10     	; 0x35c0 <LCD_VidSendCommand+0x8e>
		__ticks = 1;
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	9c 8b       	std	Y+20, r25	; 0x14
    35bc:	8b 8b       	std	Y+19, r24	; 0x13
    35be:	3f c0       	rjmp	.+126    	; 0x363e <LCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    35c0:	6d 89       	ldd	r22, Y+21	; 0x15
    35c2:	7e 89       	ldd	r23, Y+22	; 0x16
    35c4:	8f 89       	ldd	r24, Y+23	; 0x17
    35c6:	98 8d       	ldd	r25, Y+24	; 0x18
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	3f ef       	ldi	r19, 0xFF	; 255
    35cc:	4f e7       	ldi	r20, 0x7F	; 127
    35ce:	57 e4       	ldi	r21, 0x47	; 71
    35d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    35d4:	18 16       	cp	r1, r24
    35d6:	4c f5       	brge	.+82     	; 0x362a <LCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d8:	69 8d       	ldd	r22, Y+25	; 0x19
    35da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	40 e2       	ldi	r20, 0x20	; 32
    35e6:	51 e4       	ldi	r21, 0x41	; 65
    35e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	9c 8b       	std	Y+20, r25	; 0x14
    35fe:	8b 8b       	std	Y+19, r24	; 0x13
    3600:	0f c0       	rjmp	.+30     	; 0x3620 <LCD_VidSendCommand+0xee>
    3602:	88 ec       	ldi	r24, 0xC8	; 200
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	9a 8b       	std	Y+18, r25	; 0x12
    3608:	89 8b       	std	Y+17, r24	; 0x11
    360a:	89 89       	ldd	r24, Y+17	; 0x11
    360c:	9a 89       	ldd	r25, Y+18	; 0x12
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	f1 f7       	brne	.-4      	; 0x360e <LCD_VidSendCommand+0xdc>
    3612:	9a 8b       	std	Y+18, r25	; 0x12
    3614:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3616:	8b 89       	ldd	r24, Y+19	; 0x13
    3618:	9c 89       	ldd	r25, Y+20	; 0x14
    361a:	01 97       	sbiw	r24, 0x01	; 1
    361c:	9c 8b       	std	Y+20, r25	; 0x14
    361e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3620:	8b 89       	ldd	r24, Y+19	; 0x13
    3622:	9c 89       	ldd	r25, Y+20	; 0x14
    3624:	00 97       	sbiw	r24, 0x00	; 0
    3626:	69 f7       	brne	.-38     	; 0x3602 <LCD_VidSendCommand+0xd0>
    3628:	14 c0       	rjmp	.+40     	; 0x3652 <LCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    362a:	6d 89       	ldd	r22, Y+21	; 0x15
    362c:	7e 89       	ldd	r23, Y+22	; 0x16
    362e:	8f 89       	ldd	r24, Y+23	; 0x17
    3630:	98 8d       	ldd	r25, Y+24	; 0x18
    3632:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	9c 8b       	std	Y+20, r25	; 0x14
    363c:	8b 8b       	std	Y+19, r24	; 0x13
    363e:	8b 89       	ldd	r24, Y+19	; 0x13
    3640:	9c 89       	ldd	r25, Y+20	; 0x14
    3642:	98 8b       	std	Y+16, r25	; 0x10
    3644:	8f 87       	std	Y+15, r24	; 0x0f
    3646:	8f 85       	ldd	r24, Y+15	; 0x0f
    3648:	98 89       	ldd	r25, Y+16	; 0x10
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	f1 f7       	brne	.-4      	; 0x364a <LCD_VidSendCommand+0x118>
    364e:	98 8b       	std	Y+16, r25	; 0x10
    3650:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	62 e0       	ldi	r22, 0x02	; 2
    3656:	40 e0       	ldi	r20, 0x00	; 0
    3658:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	a0 e2       	ldi	r26, 0x20	; 32
    3662:	b1 e4       	ldi	r27, 0x41	; 65
    3664:	8b 87       	std	Y+11, r24	; 0x0b
    3666:	9c 87       	std	Y+12, r25	; 0x0c
    3668:	ad 87       	std	Y+13, r26	; 0x0d
    366a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    366c:	6b 85       	ldd	r22, Y+11	; 0x0b
    366e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3670:	8d 85       	ldd	r24, Y+13	; 0x0d
    3672:	9e 85       	ldd	r25, Y+14	; 0x0e
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	4a ef       	ldi	r20, 0xFA	; 250
    367a:	54 e4       	ldi	r21, 0x44	; 68
    367c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	8f 83       	std	Y+7, r24	; 0x07
    3686:	98 87       	std	Y+8, r25	; 0x08
    3688:	a9 87       	std	Y+9, r26	; 0x09
    368a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    368c:	6f 81       	ldd	r22, Y+7	; 0x07
    368e:	78 85       	ldd	r23, Y+8	; 0x08
    3690:	89 85       	ldd	r24, Y+9	; 0x09
    3692:	9a 85       	ldd	r25, Y+10	; 0x0a
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	40 e8       	ldi	r20, 0x80	; 128
    369a:	5f e3       	ldi	r21, 0x3F	; 63
    369c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    36a0:	88 23       	and	r24, r24
    36a2:	2c f4       	brge	.+10     	; 0x36ae <LCD_VidSendCommand+0x17c>
		__ticks = 1;
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	9e 83       	std	Y+6, r25	; 0x06
    36aa:	8d 83       	std	Y+5, r24	; 0x05
    36ac:	3f c0       	rjmp	.+126    	; 0x372c <LCD_VidSendCommand+0x1fa>
	else if (__tmp > 65535)
    36ae:	6f 81       	ldd	r22, Y+7	; 0x07
    36b0:	78 85       	ldd	r23, Y+8	; 0x08
    36b2:	89 85       	ldd	r24, Y+9	; 0x09
    36b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	3f ef       	ldi	r19, 0xFF	; 255
    36ba:	4f e7       	ldi	r20, 0x7F	; 127
    36bc:	57 e4       	ldi	r21, 0x47	; 71
    36be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    36c2:	18 16       	cp	r1, r24
    36c4:	4c f5       	brge	.+82     	; 0x3718 <LCD_VidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    36c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    36ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    36cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	40 e2       	ldi	r20, 0x20	; 32
    36d4:	51 e4       	ldi	r21, 0x41	; 65
    36d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	bc 01       	movw	r22, r24
    36e0:	cd 01       	movw	r24, r26
    36e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	9e 83       	std	Y+6, r25	; 0x06
    36ec:	8d 83       	std	Y+5, r24	; 0x05
    36ee:	0f c0       	rjmp	.+30     	; 0x370e <LCD_VidSendCommand+0x1dc>
    36f0:	88 ec       	ldi	r24, 0xC8	; 200
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	9c 83       	std	Y+4, r25	; 0x04
    36f6:	8b 83       	std	Y+3, r24	; 0x03
    36f8:	8b 81       	ldd	r24, Y+3	; 0x03
    36fa:	9c 81       	ldd	r25, Y+4	; 0x04
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	f1 f7       	brne	.-4      	; 0x36fc <LCD_VidSendCommand+0x1ca>
    3700:	9c 83       	std	Y+4, r25	; 0x04
    3702:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3704:	8d 81       	ldd	r24, Y+5	; 0x05
    3706:	9e 81       	ldd	r25, Y+6	; 0x06
    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	9e 83       	std	Y+6, r25	; 0x06
    370c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    370e:	8d 81       	ldd	r24, Y+5	; 0x05
    3710:	9e 81       	ldd	r25, Y+6	; 0x06
    3712:	00 97       	sbiw	r24, 0x00	; 0
    3714:	69 f7       	brne	.-38     	; 0x36f0 <LCD_VidSendCommand+0x1be>
    3716:	14 c0       	rjmp	.+40     	; 0x3740 <LCD_VidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3718:	6f 81       	ldd	r22, Y+7	; 0x07
    371a:	78 85       	ldd	r23, Y+8	; 0x08
    371c:	89 85       	ldd	r24, Y+9	; 0x09
    371e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3720:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	9e 83       	std	Y+6, r25	; 0x06
    372a:	8d 83       	std	Y+5, r24	; 0x05
    372c:	8d 81       	ldd	r24, Y+5	; 0x05
    372e:	9e 81       	ldd	r25, Y+6	; 0x06
    3730:	9a 83       	std	Y+2, r25	; 0x02
    3732:	89 83       	std	Y+1, r24	; 0x01
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	9a 81       	ldd	r25, Y+2	; 0x02
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	f1 f7       	brne	.-4      	; 0x3738 <LCD_VidSendCommand+0x206>
    373c:	9a 83       	std	Y+2, r25	; 0x02
    373e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    3740:	6d 96       	adiw	r28, 0x1d	; 29
    3742:	0f b6       	in	r0, 0x3f	; 63
    3744:	f8 94       	cli
    3746:	de bf       	out	0x3e, r29	; 62
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	cd bf       	out	0x3d, r28	; 61
    374c:	cf 91       	pop	r28
    374e:	df 91       	pop	r29
    3750:	08 95       	ret

00003752 <LCD_VidInt>:
void LCD_VidInt(void)
{	
    3752:	df 93       	push	r29
    3754:	cf 93       	push	r28
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
    375a:	e8 97       	sbiw	r28, 0x38	; 56
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	de bf       	out	0x3e, r29	; 62
    3762:	0f be       	out	0x3f, r0	; 63
    3764:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPort_Direction(Data_Port,1);
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	61 e0       	ldi	r22, 0x01	; 1
    376a:	0e 94 3e 09 	call	0x127c	; 0x127c <DIO_VidSetPort_Direction>
	DIO_VidSetPin_Direction(Control_Port,RS,1);
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	60 e0       	ldi	r22, 0x00	; 0
    3772:	41 e0       	ldi	r20, 0x01	; 1
    3774:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_VidSetPin_Direction>
	DIO_VidSetPin_Direction(Control_Port,RW,1);
    3778:	81 e0       	ldi	r24, 0x01	; 1
    377a:	61 e0       	ldi	r22, 0x01	; 1
    377c:	41 e0       	ldi	r20, 0x01	; 1
    377e:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_VidSetPin_Direction>
	DIO_VidSetPin_Direction(Control_Port,E,1);
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	62 e0       	ldi	r22, 0x02	; 2
    3786:	41 e0       	ldi	r20, 0x01	; 1
    3788:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_VidSetPin_Direction>
    378c:	80 e0       	ldi	r24, 0x00	; 0
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	a0 e2       	ldi	r26, 0x20	; 32
    3792:	b2 e4       	ldi	r27, 0x42	; 66
    3794:	8d ab       	std	Y+53, r24	; 0x35
    3796:	9e ab       	std	Y+54, r25	; 0x36
    3798:	af ab       	std	Y+55, r26	; 0x37
    379a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    379c:	6d a9       	ldd	r22, Y+53	; 0x35
    379e:	7e a9       	ldd	r23, Y+54	; 0x36
    37a0:	8f a9       	ldd	r24, Y+55	; 0x37
    37a2:	98 ad       	ldd	r25, Y+56	; 0x38
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	4a ef       	ldi	r20, 0xFA	; 250
    37aa:	54 e4       	ldi	r21, 0x44	; 68
    37ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	89 ab       	std	Y+49, r24	; 0x31
    37b6:	9a ab       	std	Y+50, r25	; 0x32
    37b8:	ab ab       	std	Y+51, r26	; 0x33
    37ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37bc:	69 a9       	ldd	r22, Y+49	; 0x31
    37be:	7a a9       	ldd	r23, Y+50	; 0x32
    37c0:	8b a9       	ldd	r24, Y+51	; 0x33
    37c2:	9c a9       	ldd	r25, Y+52	; 0x34
    37c4:	20 e0       	ldi	r18, 0x00	; 0
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	40 e8       	ldi	r20, 0x80	; 128
    37ca:	5f e3       	ldi	r21, 0x3F	; 63
    37cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    37d0:	88 23       	and	r24, r24
    37d2:	2c f4       	brge	.+10     	; 0x37de <LCD_VidInt+0x8c>
		__ticks = 1;
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	98 ab       	std	Y+48, r25	; 0x30
    37da:	8f a7       	std	Y+47, r24	; 0x2f
    37dc:	3f c0       	rjmp	.+126    	; 0x385c <LCD_VidInt+0x10a>
	else if (__tmp > 65535)
    37de:	69 a9       	ldd	r22, Y+49	; 0x31
    37e0:	7a a9       	ldd	r23, Y+50	; 0x32
    37e2:	8b a9       	ldd	r24, Y+51	; 0x33
    37e4:	9c a9       	ldd	r25, Y+52	; 0x34
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	3f ef       	ldi	r19, 0xFF	; 255
    37ea:	4f e7       	ldi	r20, 0x7F	; 127
    37ec:	57 e4       	ldi	r21, 0x47	; 71
    37ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    37f2:	18 16       	cp	r1, r24
    37f4:	4c f5       	brge	.+82     	; 0x3848 <LCD_VidInt+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f6:	6d a9       	ldd	r22, Y+53	; 0x35
    37f8:	7e a9       	ldd	r23, Y+54	; 0x36
    37fa:	8f a9       	ldd	r24, Y+55	; 0x37
    37fc:	98 ad       	ldd	r25, Y+56	; 0x38
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e2       	ldi	r20, 0x20	; 32
    3804:	51 e4       	ldi	r21, 0x41	; 65
    3806:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	bc 01       	movw	r22, r24
    3810:	cd 01       	movw	r24, r26
    3812:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	98 ab       	std	Y+48, r25	; 0x30
    381c:	8f a7       	std	Y+47, r24	; 0x2f
    381e:	0f c0       	rjmp	.+30     	; 0x383e <LCD_VidInt+0xec>
    3820:	88 ec       	ldi	r24, 0xC8	; 200
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	9e a7       	std	Y+46, r25	; 0x2e
    3826:	8d a7       	std	Y+45, r24	; 0x2d
    3828:	8d a5       	ldd	r24, Y+45	; 0x2d
    382a:	9e a5       	ldd	r25, Y+46	; 0x2e
    382c:	01 97       	sbiw	r24, 0x01	; 1
    382e:	f1 f7       	brne	.-4      	; 0x382c <LCD_VidInt+0xda>
    3830:	9e a7       	std	Y+46, r25	; 0x2e
    3832:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3834:	8f a5       	ldd	r24, Y+47	; 0x2f
    3836:	98 a9       	ldd	r25, Y+48	; 0x30
    3838:	01 97       	sbiw	r24, 0x01	; 1
    383a:	98 ab       	std	Y+48, r25	; 0x30
    383c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    383e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3840:	98 a9       	ldd	r25, Y+48	; 0x30
    3842:	00 97       	sbiw	r24, 0x00	; 0
    3844:	69 f7       	brne	.-38     	; 0x3820 <LCD_VidInt+0xce>
    3846:	14 c0       	rjmp	.+40     	; 0x3870 <LCD_VidInt+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3848:	69 a9       	ldd	r22, Y+49	; 0x31
    384a:	7a a9       	ldd	r23, Y+50	; 0x32
    384c:	8b a9       	ldd	r24, Y+51	; 0x33
    384e:	9c a9       	ldd	r25, Y+52	; 0x34
    3850:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	98 ab       	std	Y+48, r25	; 0x30
    385a:	8f a7       	std	Y+47, r24	; 0x2f
    385c:	8f a5       	ldd	r24, Y+47	; 0x2f
    385e:	98 a9       	ldd	r25, Y+48	; 0x30
    3860:	9c a7       	std	Y+44, r25	; 0x2c
    3862:	8b a7       	std	Y+43, r24	; 0x2b
    3864:	8b a5       	ldd	r24, Y+43	; 0x2b
    3866:	9c a5       	ldd	r25, Y+44	; 0x2c
    3868:	01 97       	sbiw	r24, 0x01	; 1
    386a:	f1 f7       	brne	.-4      	; 0x3868 <LCD_VidInt+0x116>
    386c:	9c a7       	std	Y+44, r25	; 0x2c
    386e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(40);
	LCD_VidSendCommand(0b00111000);
    3870:	88 e3       	ldi	r24, 0x38	; 56
    3872:	0e 94 99 1a 	call	0x3532	; 0x3532 <LCD_VidSendCommand>
    3876:	80 e0       	ldi	r24, 0x00	; 0
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	a0 e8       	ldi	r26, 0x80	; 128
    387c:	bf e3       	ldi	r27, 0x3F	; 63
    387e:	8f a3       	std	Y+39, r24	; 0x27
    3880:	98 a7       	std	Y+40, r25	; 0x28
    3882:	a9 a7       	std	Y+41, r26	; 0x29
    3884:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3886:	6f a1       	ldd	r22, Y+39	; 0x27
    3888:	78 a5       	ldd	r23, Y+40	; 0x28
    388a:	89 a5       	ldd	r24, Y+41	; 0x29
    388c:	9a a5       	ldd	r25, Y+42	; 0x2a
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	4a ef       	ldi	r20, 0xFA	; 250
    3894:	54 e4       	ldi	r21, 0x44	; 68
    3896:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    389a:	dc 01       	movw	r26, r24
    389c:	cb 01       	movw	r24, r22
    389e:	8b a3       	std	Y+35, r24	; 0x23
    38a0:	9c a3       	std	Y+36, r25	; 0x24
    38a2:	ad a3       	std	Y+37, r26	; 0x25
    38a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38a6:	6b a1       	ldd	r22, Y+35	; 0x23
    38a8:	7c a1       	ldd	r23, Y+36	; 0x24
    38aa:	8d a1       	ldd	r24, Y+37	; 0x25
    38ac:	9e a1       	ldd	r25, Y+38	; 0x26
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	40 e8       	ldi	r20, 0x80	; 128
    38b4:	5f e3       	ldi	r21, 0x3F	; 63
    38b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    38ba:	88 23       	and	r24, r24
    38bc:	2c f4       	brge	.+10     	; 0x38c8 <LCD_VidInt+0x176>
		__ticks = 1;
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	9a a3       	std	Y+34, r25	; 0x22
    38c4:	89 a3       	std	Y+33, r24	; 0x21
    38c6:	3f c0       	rjmp	.+126    	; 0x3946 <LCD_VidInt+0x1f4>
	else if (__tmp > 65535)
    38c8:	6b a1       	ldd	r22, Y+35	; 0x23
    38ca:	7c a1       	ldd	r23, Y+36	; 0x24
    38cc:	8d a1       	ldd	r24, Y+37	; 0x25
    38ce:	9e a1       	ldd	r25, Y+38	; 0x26
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	3f ef       	ldi	r19, 0xFF	; 255
    38d4:	4f e7       	ldi	r20, 0x7F	; 127
    38d6:	57 e4       	ldi	r21, 0x47	; 71
    38d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    38dc:	18 16       	cp	r1, r24
    38de:	4c f5       	brge	.+82     	; 0x3932 <LCD_VidInt+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38e0:	6f a1       	ldd	r22, Y+39	; 0x27
    38e2:	78 a5       	ldd	r23, Y+40	; 0x28
    38e4:	89 a5       	ldd	r24, Y+41	; 0x29
    38e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	40 e2       	ldi	r20, 0x20	; 32
    38ee:	51 e4       	ldi	r21, 0x41	; 65
    38f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	bc 01       	movw	r22, r24
    38fa:	cd 01       	movw	r24, r26
    38fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	9a a3       	std	Y+34, r25	; 0x22
    3906:	89 a3       	std	Y+33, r24	; 0x21
    3908:	0f c0       	rjmp	.+30     	; 0x3928 <LCD_VidInt+0x1d6>
    390a:	88 ec       	ldi	r24, 0xC8	; 200
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	98 a3       	std	Y+32, r25	; 0x20
    3910:	8f 8f       	std	Y+31, r24	; 0x1f
    3912:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3914:	98 a1       	ldd	r25, Y+32	; 0x20
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	f1 f7       	brne	.-4      	; 0x3916 <LCD_VidInt+0x1c4>
    391a:	98 a3       	std	Y+32, r25	; 0x20
    391c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    391e:	89 a1       	ldd	r24, Y+33	; 0x21
    3920:	9a a1       	ldd	r25, Y+34	; 0x22
    3922:	01 97       	sbiw	r24, 0x01	; 1
    3924:	9a a3       	std	Y+34, r25	; 0x22
    3926:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3928:	89 a1       	ldd	r24, Y+33	; 0x21
    392a:	9a a1       	ldd	r25, Y+34	; 0x22
    392c:	00 97       	sbiw	r24, 0x00	; 0
    392e:	69 f7       	brne	.-38     	; 0x390a <LCD_VidInt+0x1b8>
    3930:	14 c0       	rjmp	.+40     	; 0x395a <LCD_VidInt+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3932:	6b a1       	ldd	r22, Y+35	; 0x23
    3934:	7c a1       	ldd	r23, Y+36	; 0x24
    3936:	8d a1       	ldd	r24, Y+37	; 0x25
    3938:	9e a1       	ldd	r25, Y+38	; 0x26
    393a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	9a a3       	std	Y+34, r25	; 0x22
    3944:	89 a3       	std	Y+33, r24	; 0x21
    3946:	89 a1       	ldd	r24, Y+33	; 0x21
    3948:	9a a1       	ldd	r25, Y+34	; 0x22
    394a:	9e 8f       	std	Y+30, r25	; 0x1e
    394c:	8d 8f       	std	Y+29, r24	; 0x1d
    394e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3950:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3952:	01 97       	sbiw	r24, 0x01	; 1
    3954:	f1 f7       	brne	.-4      	; 0x3952 <LCD_VidInt+0x200>
    3956:	9e 8f       	std	Y+30, r25	; 0x1e
    3958:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
	LCD_VidSendCommand(0b00001100);
    395a:	8c e0       	ldi	r24, 0x0C	; 12
    395c:	0e 94 99 1a 	call	0x3532	; 0x3532 <LCD_VidSendCommand>
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	a0 e8       	ldi	r26, 0x80	; 128
    3966:	bf e3       	ldi	r27, 0x3F	; 63
    3968:	89 8f       	std	Y+25, r24	; 0x19
    396a:	9a 8f       	std	Y+26, r25	; 0x1a
    396c:	ab 8f       	std	Y+27, r26	; 0x1b
    396e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3970:	69 8d       	ldd	r22, Y+25	; 0x19
    3972:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3974:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3976:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	4a ef       	ldi	r20, 0xFA	; 250
    397e:	54 e4       	ldi	r21, 0x44	; 68
    3980:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	8d 8b       	std	Y+21, r24	; 0x15
    398a:	9e 8b       	std	Y+22, r25	; 0x16
    398c:	af 8b       	std	Y+23, r26	; 0x17
    398e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3990:	6d 89       	ldd	r22, Y+21	; 0x15
    3992:	7e 89       	ldd	r23, Y+22	; 0x16
    3994:	8f 89       	ldd	r24, Y+23	; 0x17
    3996:	98 8d       	ldd	r25, Y+24	; 0x18
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	40 e8       	ldi	r20, 0x80	; 128
    399e:	5f e3       	ldi	r21, 0x3F	; 63
    39a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    39a4:	88 23       	and	r24, r24
    39a6:	2c f4       	brge	.+10     	; 0x39b2 <LCD_VidInt+0x260>
		__ticks = 1;
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	9c 8b       	std	Y+20, r25	; 0x14
    39ae:	8b 8b       	std	Y+19, r24	; 0x13
    39b0:	3f c0       	rjmp	.+126    	; 0x3a30 <LCD_VidInt+0x2de>
	else if (__tmp > 65535)
    39b2:	6d 89       	ldd	r22, Y+21	; 0x15
    39b4:	7e 89       	ldd	r23, Y+22	; 0x16
    39b6:	8f 89       	ldd	r24, Y+23	; 0x17
    39b8:	98 8d       	ldd	r25, Y+24	; 0x18
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	3f ef       	ldi	r19, 0xFF	; 255
    39be:	4f e7       	ldi	r20, 0x7F	; 127
    39c0:	57 e4       	ldi	r21, 0x47	; 71
    39c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    39c6:	18 16       	cp	r1, r24
    39c8:	4c f5       	brge	.+82     	; 0x3a1c <LCD_VidInt+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ca:	69 8d       	ldd	r22, Y+25	; 0x19
    39cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 e2       	ldi	r20, 0x20	; 32
    39d8:	51 e4       	ldi	r21, 0x41	; 65
    39da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39de:	dc 01       	movw	r26, r24
    39e0:	cb 01       	movw	r24, r22
    39e2:	bc 01       	movw	r22, r24
    39e4:	cd 01       	movw	r24, r26
    39e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	9c 8b       	std	Y+20, r25	; 0x14
    39f0:	8b 8b       	std	Y+19, r24	; 0x13
    39f2:	0f c0       	rjmp	.+30     	; 0x3a12 <LCD_VidInt+0x2c0>
    39f4:	88 ec       	ldi	r24, 0xC8	; 200
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	9a 8b       	std	Y+18, r25	; 0x12
    39fa:	89 8b       	std	Y+17, r24	; 0x11
    39fc:	89 89       	ldd	r24, Y+17	; 0x11
    39fe:	9a 89       	ldd	r25, Y+18	; 0x12
    3a00:	01 97       	sbiw	r24, 0x01	; 1
    3a02:	f1 f7       	brne	.-4      	; 0x3a00 <LCD_VidInt+0x2ae>
    3a04:	9a 8b       	std	Y+18, r25	; 0x12
    3a06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a08:	8b 89       	ldd	r24, Y+19	; 0x13
    3a0a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a0c:	01 97       	sbiw	r24, 0x01	; 1
    3a0e:	9c 8b       	std	Y+20, r25	; 0x14
    3a10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a12:	8b 89       	ldd	r24, Y+19	; 0x13
    3a14:	9c 89       	ldd	r25, Y+20	; 0x14
    3a16:	00 97       	sbiw	r24, 0x00	; 0
    3a18:	69 f7       	brne	.-38     	; 0x39f4 <LCD_VidInt+0x2a2>
    3a1a:	14 c0       	rjmp	.+40     	; 0x3a44 <LCD_VidInt+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a1c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a1e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a20:	8f 89       	ldd	r24, Y+23	; 0x17
    3a22:	98 8d       	ldd	r25, Y+24	; 0x18
    3a24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	9c 8b       	std	Y+20, r25	; 0x14
    3a2e:	8b 8b       	std	Y+19, r24	; 0x13
    3a30:	8b 89       	ldd	r24, Y+19	; 0x13
    3a32:	9c 89       	ldd	r25, Y+20	; 0x14
    3a34:	98 8b       	std	Y+16, r25	; 0x10
    3a36:	8f 87       	std	Y+15, r24	; 0x0f
    3a38:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a3a:	98 89       	ldd	r25, Y+16	; 0x10
    3a3c:	01 97       	sbiw	r24, 0x01	; 1
    3a3e:	f1 f7       	brne	.-4      	; 0x3a3c <LCD_VidInt+0x2ea>
    3a40:	98 8b       	std	Y+16, r25	; 0x10
    3a42:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
	LCD_VidSendCommand(0b00000001);
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	0e 94 99 1a 	call	0x3532	; 0x3532 <LCD_VidSendCommand>
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	a0 e8       	ldi	r26, 0x80	; 128
    3a50:	bf e3       	ldi	r27, 0x3F	; 63
    3a52:	8b 87       	std	Y+11, r24	; 0x0b
    3a54:	9c 87       	std	Y+12, r25	; 0x0c
    3a56:	ad 87       	std	Y+13, r26	; 0x0d
    3a58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	4a ef       	ldi	r20, 0xFA	; 250
    3a68:	54 e4       	ldi	r21, 0x44	; 68
    3a6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	8f 83       	std	Y+7, r24	; 0x07
    3a74:	98 87       	std	Y+8, r25	; 0x08
    3a76:	a9 87       	std	Y+9, r26	; 0x09
    3a78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a7c:	78 85       	ldd	r23, Y+8	; 0x08
    3a7e:	89 85       	ldd	r24, Y+9	; 0x09
    3a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	40 e8       	ldi	r20, 0x80	; 128
    3a88:	5f e3       	ldi	r21, 0x3F	; 63
    3a8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3a8e:	88 23       	and	r24, r24
    3a90:	2c f4       	brge	.+10     	; 0x3a9c <LCD_VidInt+0x34a>
		__ticks = 1;
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	9e 83       	std	Y+6, r25	; 0x06
    3a98:	8d 83       	std	Y+5, r24	; 0x05
    3a9a:	3f c0       	rjmp	.+126    	; 0x3b1a <LCD_VidInt+0x3c8>
	else if (__tmp > 65535)
    3a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a9e:	78 85       	ldd	r23, Y+8	; 0x08
    3aa0:	89 85       	ldd	r24, Y+9	; 0x09
    3aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa4:	20 e0       	ldi	r18, 0x00	; 0
    3aa6:	3f ef       	ldi	r19, 0xFF	; 255
    3aa8:	4f e7       	ldi	r20, 0x7F	; 127
    3aaa:	57 e4       	ldi	r21, 0x47	; 71
    3aac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3ab0:	18 16       	cp	r1, r24
    3ab2:	4c f5       	brge	.+82     	; 0x3b06 <LCD_VidInt+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3abc:	20 e0       	ldi	r18, 0x00	; 0
    3abe:	30 e0       	ldi	r19, 0x00	; 0
    3ac0:	40 e2       	ldi	r20, 0x20	; 32
    3ac2:	51 e4       	ldi	r21, 0x41	; 65
    3ac4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ac8:	dc 01       	movw	r26, r24
    3aca:	cb 01       	movw	r24, r22
    3acc:	bc 01       	movw	r22, r24
    3ace:	cd 01       	movw	r24, r26
    3ad0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	9e 83       	std	Y+6, r25	; 0x06
    3ada:	8d 83       	std	Y+5, r24	; 0x05
    3adc:	0f c0       	rjmp	.+30     	; 0x3afc <LCD_VidInt+0x3aa>
    3ade:	88 ec       	ldi	r24, 0xC8	; 200
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	9c 83       	std	Y+4, r25	; 0x04
    3ae4:	8b 83       	std	Y+3, r24	; 0x03
    3ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aea:	01 97       	sbiw	r24, 0x01	; 1
    3aec:	f1 f7       	brne	.-4      	; 0x3aea <LCD_VidInt+0x398>
    3aee:	9c 83       	std	Y+4, r25	; 0x04
    3af0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af2:	8d 81       	ldd	r24, Y+5	; 0x05
    3af4:	9e 81       	ldd	r25, Y+6	; 0x06
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	9e 83       	std	Y+6, r25	; 0x06
    3afa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3afc:	8d 81       	ldd	r24, Y+5	; 0x05
    3afe:	9e 81       	ldd	r25, Y+6	; 0x06
    3b00:	00 97       	sbiw	r24, 0x00	; 0
    3b02:	69 f7       	brne	.-38     	; 0x3ade <LCD_VidInt+0x38c>
    3b04:	14 c0       	rjmp	.+40     	; 0x3b2e <LCD_VidInt+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b06:	6f 81       	ldd	r22, Y+7	; 0x07
    3b08:	78 85       	ldd	r23, Y+8	; 0x08
    3b0a:	89 85       	ldd	r24, Y+9	; 0x09
    3b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	9e 83       	std	Y+6, r25	; 0x06
    3b18:	8d 83       	std	Y+5, r24	; 0x05
    3b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b1e:	9a 83       	std	Y+2, r25	; 0x02
    3b20:	89 83       	std	Y+1, r24	; 0x01
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	9a 81       	ldd	r25, Y+2	; 0x02
    3b26:	01 97       	sbiw	r24, 0x01	; 1
    3b28:	f1 f7       	brne	.-4      	; 0x3b26 <LCD_VidInt+0x3d4>
    3b2a:	9a 83       	std	Y+2, r25	; 0x02
    3b2c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

}
    3b2e:	e8 96       	adiw	r28, 0x38	; 56
    3b30:	0f b6       	in	r0, 0x3f	; 63
    3b32:	f8 94       	cli
    3b34:	de bf       	out	0x3e, r29	; 62
    3b36:	0f be       	out	0x3f, r0	; 63
    3b38:	cd bf       	out	0x3d, r28	; 61
    3b3a:	cf 91       	pop	r28
    3b3c:	df 91       	pop	r29
    3b3e:	08 95       	ret

00003b40 <LCD_VidSendStr>:
void LCD_VidSendStr(u8* Copy_u8string)
{
    3b40:	df 93       	push	r29
    3b42:	cf 93       	push	r28
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	6e 97       	sbiw	r28, 0x1e	; 30
    3b4a:	0f b6       	in	r0, 0x3f	; 63
    3b4c:	f8 94       	cli
    3b4e:	de bf       	out	0x3e, r29	; 62
    3b50:	0f be       	out	0x3f, r0	; 63
    3b52:	cd bf       	out	0x3d, r28	; 61
    3b54:	9e 8f       	std	Y+30, r25	; 0x1e
    3b56:	8d 8f       	std	Y+29, r24	; 0x1d
	

	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	60 e0       	ldi	r22, 0x00	; 0
    3b5c:	41 e0       	ldi	r20, 0x01	; 1
    3b5e:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    3b62:	81 e0       	ldi	r24, 0x01	; 1
    3b64:	61 e0       	ldi	r22, 0x01	; 1
    3b66:	40 e0       	ldi	r20, 0x00	; 0
    3b68:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
    3b6c:	fa c0       	rjmp	.+500    	; 0x3d62 <LCD_VidSendStr+0x222>
	while(*Copy_u8string!='\0')
	{

	DIO_VidWriteOnPort(Data_Port,*Copy_u8string);
    3b6e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3b70:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3b72:	90 81       	ld	r25, Z
    3b74:	80 e0       	ldi	r24, 0x00	; 0
    3b76:	69 2f       	mov	r22, r25
    3b78:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	62 e0       	ldi	r22, 0x02	; 2
    3b80:	41 e0       	ldi	r20, 0x01	; 1
    3b82:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	a0 e2       	ldi	r26, 0x20	; 32
    3b8c:	b1 e4       	ldi	r27, 0x41	; 65
    3b8e:	89 8f       	std	Y+25, r24	; 0x19
    3b90:	9a 8f       	std	Y+26, r25	; 0x1a
    3b92:	ab 8f       	std	Y+27, r26	; 0x1b
    3b94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b96:	69 8d       	ldd	r22, Y+25	; 0x19
    3b98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	4a ef       	ldi	r20, 0xFA	; 250
    3ba4:	54 e4       	ldi	r21, 0x44	; 68
    3ba6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	8d 8b       	std	Y+21, r24	; 0x15
    3bb0:	9e 8b       	std	Y+22, r25	; 0x16
    3bb2:	af 8b       	std	Y+23, r26	; 0x17
    3bb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bb6:	6d 89       	ldd	r22, Y+21	; 0x15
    3bb8:	7e 89       	ldd	r23, Y+22	; 0x16
    3bba:	8f 89       	ldd	r24, Y+23	; 0x17
    3bbc:	98 8d       	ldd	r25, Y+24	; 0x18
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	40 e8       	ldi	r20, 0x80	; 128
    3bc4:	5f e3       	ldi	r21, 0x3F	; 63
    3bc6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3bca:	88 23       	and	r24, r24
    3bcc:	2c f4       	brge	.+10     	; 0x3bd8 <LCD_VidSendStr+0x98>
		__ticks = 1;
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	9c 8b       	std	Y+20, r25	; 0x14
    3bd4:	8b 8b       	std	Y+19, r24	; 0x13
    3bd6:	3f c0       	rjmp	.+126    	; 0x3c56 <LCD_VidSendStr+0x116>
	else if (__tmp > 65535)
    3bd8:	6d 89       	ldd	r22, Y+21	; 0x15
    3bda:	7e 89       	ldd	r23, Y+22	; 0x16
    3bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    3bde:	98 8d       	ldd	r25, Y+24	; 0x18
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	3f ef       	ldi	r19, 0xFF	; 255
    3be4:	4f e7       	ldi	r20, 0x7F	; 127
    3be6:	57 e4       	ldi	r21, 0x47	; 71
    3be8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3bec:	18 16       	cp	r1, r24
    3bee:	4c f5       	brge	.+82     	; 0x3c42 <LCD_VidSendStr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf0:	69 8d       	ldd	r22, Y+25	; 0x19
    3bf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bf8:	20 e0       	ldi	r18, 0x00	; 0
    3bfa:	30 e0       	ldi	r19, 0x00	; 0
    3bfc:	40 e2       	ldi	r20, 0x20	; 32
    3bfe:	51 e4       	ldi	r21, 0x41	; 65
    3c00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c04:	dc 01       	movw	r26, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	bc 01       	movw	r22, r24
    3c0a:	cd 01       	movw	r24, r26
    3c0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	9c 8b       	std	Y+20, r25	; 0x14
    3c16:	8b 8b       	std	Y+19, r24	; 0x13
    3c18:	0f c0       	rjmp	.+30     	; 0x3c38 <LCD_VidSendStr+0xf8>
    3c1a:	88 ec       	ldi	r24, 0xC8	; 200
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	9a 8b       	std	Y+18, r25	; 0x12
    3c20:	89 8b       	std	Y+17, r24	; 0x11
    3c22:	89 89       	ldd	r24, Y+17	; 0x11
    3c24:	9a 89       	ldd	r25, Y+18	; 0x12
    3c26:	01 97       	sbiw	r24, 0x01	; 1
    3c28:	f1 f7       	brne	.-4      	; 0x3c26 <LCD_VidSendStr+0xe6>
    3c2a:	9a 8b       	std	Y+18, r25	; 0x12
    3c2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c30:	9c 89       	ldd	r25, Y+20	; 0x14
    3c32:	01 97       	sbiw	r24, 0x01	; 1
    3c34:	9c 8b       	std	Y+20, r25	; 0x14
    3c36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c38:	8b 89       	ldd	r24, Y+19	; 0x13
    3c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c3c:	00 97       	sbiw	r24, 0x00	; 0
    3c3e:	69 f7       	brne	.-38     	; 0x3c1a <LCD_VidSendStr+0xda>
    3c40:	14 c0       	rjmp	.+40     	; 0x3c6a <LCD_VidSendStr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c42:	6d 89       	ldd	r22, Y+21	; 0x15
    3c44:	7e 89       	ldd	r23, Y+22	; 0x16
    3c46:	8f 89       	ldd	r24, Y+23	; 0x17
    3c48:	98 8d       	ldd	r25, Y+24	; 0x18
    3c4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	9c 8b       	std	Y+20, r25	; 0x14
    3c54:	8b 8b       	std	Y+19, r24	; 0x13
    3c56:	8b 89       	ldd	r24, Y+19	; 0x13
    3c58:	9c 89       	ldd	r25, Y+20	; 0x14
    3c5a:	98 8b       	std	Y+16, r25	; 0x10
    3c5c:	8f 87       	std	Y+15, r24	; 0x0f
    3c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c60:	98 89       	ldd	r25, Y+16	; 0x10
    3c62:	01 97       	sbiw	r24, 0x01	; 1
    3c64:	f1 f7       	brne	.-4      	; 0x3c62 <LCD_VidSendStr+0x122>
    3c66:	98 8b       	std	Y+16, r25	; 0x10
    3c68:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	62 e0       	ldi	r22, 0x02	; 2
    3c6e:	40 e0       	ldi	r20, 0x00	; 0
    3c70:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	a0 e2       	ldi	r26, 0x20	; 32
    3c7a:	b1 e4       	ldi	r27, 0x41	; 65
    3c7c:	8b 87       	std	Y+11, r24	; 0x0b
    3c7e:	9c 87       	std	Y+12, r25	; 0x0c
    3c80:	ad 87       	std	Y+13, r26	; 0x0d
    3c82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	4a ef       	ldi	r20, 0xFA	; 250
    3c92:	54 e4       	ldi	r21, 0x44	; 68
    3c94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	8f 83       	std	Y+7, r24	; 0x07
    3c9e:	98 87       	std	Y+8, r25	; 0x08
    3ca0:	a9 87       	std	Y+9, r26	; 0x09
    3ca2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca6:	78 85       	ldd	r23, Y+8	; 0x08
    3ca8:	89 85       	ldd	r24, Y+9	; 0x09
    3caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	40 e8       	ldi	r20, 0x80	; 128
    3cb2:	5f e3       	ldi	r21, 0x3F	; 63
    3cb4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3cb8:	88 23       	and	r24, r24
    3cba:	2c f4       	brge	.+10     	; 0x3cc6 <LCD_VidSendStr+0x186>
		__ticks = 1;
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	9e 83       	std	Y+6, r25	; 0x06
    3cc2:	8d 83       	std	Y+5, r24	; 0x05
    3cc4:	3f c0       	rjmp	.+126    	; 0x3d44 <LCD_VidSendStr+0x204>
	else if (__tmp > 65535)
    3cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc8:	78 85       	ldd	r23, Y+8	; 0x08
    3cca:	89 85       	ldd	r24, Y+9	; 0x09
    3ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cce:	20 e0       	ldi	r18, 0x00	; 0
    3cd0:	3f ef       	ldi	r19, 0xFF	; 255
    3cd2:	4f e7       	ldi	r20, 0x7F	; 127
    3cd4:	57 e4       	ldi	r21, 0x47	; 71
    3cd6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3cda:	18 16       	cp	r1, r24
    3cdc:	4c f5       	brge	.+82     	; 0x3d30 <LCD_VidSendStr+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cde:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	40 e2       	ldi	r20, 0x20	; 32
    3cec:	51 e4       	ldi	r21, 0x41	; 65
    3cee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	cb 01       	movw	r24, r22
    3cf6:	bc 01       	movw	r22, r24
    3cf8:	cd 01       	movw	r24, r26
    3cfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	9e 83       	std	Y+6, r25	; 0x06
    3d04:	8d 83       	std	Y+5, r24	; 0x05
    3d06:	0f c0       	rjmp	.+30     	; 0x3d26 <LCD_VidSendStr+0x1e6>
    3d08:	88 ec       	ldi	r24, 0xC8	; 200
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	9c 83       	std	Y+4, r25	; 0x04
    3d0e:	8b 83       	std	Y+3, r24	; 0x03
    3d10:	8b 81       	ldd	r24, Y+3	; 0x03
    3d12:	9c 81       	ldd	r25, Y+4	; 0x04
    3d14:	01 97       	sbiw	r24, 0x01	; 1
    3d16:	f1 f7       	brne	.-4      	; 0x3d14 <LCD_VidSendStr+0x1d4>
    3d18:	9c 83       	std	Y+4, r25	; 0x04
    3d1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d20:	01 97       	sbiw	r24, 0x01	; 1
    3d22:	9e 83       	std	Y+6, r25	; 0x06
    3d24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d26:	8d 81       	ldd	r24, Y+5	; 0x05
    3d28:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2a:	00 97       	sbiw	r24, 0x00	; 0
    3d2c:	69 f7       	brne	.-38     	; 0x3d08 <LCD_VidSendStr+0x1c8>
    3d2e:	14 c0       	rjmp	.+40     	; 0x3d58 <LCD_VidSendStr+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d30:	6f 81       	ldd	r22, Y+7	; 0x07
    3d32:	78 85       	ldd	r23, Y+8	; 0x08
    3d34:	89 85       	ldd	r24, Y+9	; 0x09
    3d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	9e 83       	std	Y+6, r25	; 0x06
    3d42:	8d 83       	std	Y+5, r24	; 0x05
    3d44:	8d 81       	ldd	r24, Y+5	; 0x05
    3d46:	9e 81       	ldd	r25, Y+6	; 0x06
    3d48:	9a 83       	std	Y+2, r25	; 0x02
    3d4a:	89 83       	std	Y+1, r24	; 0x01
    3d4c:	89 81       	ldd	r24, Y+1	; 0x01
    3d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	f1 f7       	brne	.-4      	; 0x3d50 <LCD_VidSendStr+0x210>
    3d54:	9a 83       	std	Y+2, r25	; 0x02
    3d56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	Copy_u8string++;
    3d58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d5c:	01 96       	adiw	r24, 0x01	; 1
    3d5e:	9e 8f       	std	Y+30, r25	; 0x1e
    3d60:	8d 8f       	std	Y+29, r24	; 0x1d
{
	

	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
	while(*Copy_u8string!='\0')
    3d62:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3d64:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3d66:	80 81       	ld	r24, Z
    3d68:	88 23       	and	r24, r24
    3d6a:	09 f0       	breq	.+2      	; 0x3d6e <LCD_VidSendStr+0x22e>
    3d6c:	00 cf       	rjmp	.-512    	; 0x3b6e <LCD_VidSendStr+0x2e>
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
	_delay_ms(10);
	Copy_u8string++;
	}
}
    3d6e:	6e 96       	adiw	r28, 0x1e	; 30
    3d70:	0f b6       	in	r0, 0x3f	; 63
    3d72:	f8 94       	cli
    3d74:	de bf       	out	0x3e, r29	; 62
    3d76:	0f be       	out	0x3f, r0	; 63
    3d78:	cd bf       	out	0x3d, r28	; 61
    3d7a:	cf 91       	pop	r28
    3d7c:	df 91       	pop	r29
    3d7e:	08 95       	ret

00003d80 <LCD_VidSendNum>:
void LCD_VidSendNum(u16 Copy_u16Num)
{	u16 rev=0;
    3d80:	df 93       	push	r29
    3d82:	cf 93       	push	r28
    3d84:	00 d0       	rcall	.+0      	; 0x3d86 <LCD_VidSendNum+0x6>
    3d86:	00 d0       	rcall	.+0      	; 0x3d88 <LCD_VidSendNum+0x8>
    3d88:	00 d0       	rcall	.+0      	; 0x3d8a <LCD_VidSendNum+0xa>
    3d8a:	cd b7       	in	r28, 0x3d	; 61
    3d8c:	de b7       	in	r29, 0x3e	; 62
    3d8e:	9e 83       	std	Y+6, r25	; 0x06
    3d90:	8d 83       	std	Y+5, r24	; 0x05
    3d92:	1c 82       	std	Y+4, r1	; 0x04
    3d94:	1b 82       	std	Y+3, r1	; 0x03
	u8 zeros=0;
    3d96:	1a 82       	std	Y+2, r1	; 0x02
	if (Copy_u16Num!=0)
    3d98:	8d 81       	ldd	r24, Y+5	; 0x05
    3d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d9c:	00 97       	sbiw	r24, 0x00	; 0
    3d9e:	09 f4       	brne	.+2      	; 0x3da2 <LCD_VidSendNum+0x22>
    3da0:	53 c0       	rjmp	.+166    	; 0x3e48 <LCD_VidSendNum+0xc8>
    3da2:	25 c0       	rjmp	.+74     	; 0x3dee <LCD_VidSendNum+0x6e>
	{
	while(Copy_u16Num>0)
		{
		 rev=(rev*10)+(Copy_u16Num % 10);
    3da4:	8b 81       	ldd	r24, Y+3	; 0x03
    3da6:	9c 81       	ldd	r25, Y+4	; 0x04
    3da8:	9c 01       	movw	r18, r24
    3daa:	22 0f       	add	r18, r18
    3dac:	33 1f       	adc	r19, r19
    3dae:	c9 01       	movw	r24, r18
    3db0:	88 0f       	add	r24, r24
    3db2:	99 1f       	adc	r25, r25
    3db4:	88 0f       	add	r24, r24
    3db6:	99 1f       	adc	r25, r25
    3db8:	f9 01       	movw	r30, r18
    3dba:	e8 0f       	add	r30, r24
    3dbc:	f9 1f       	adc	r31, r25
    3dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc2:	2a e0       	ldi	r18, 0x0A	; 10
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	b9 01       	movw	r22, r18
    3dc8:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__udivmodhi4>
    3dcc:	8e 0f       	add	r24, r30
    3dce:	9f 1f       	adc	r25, r31
    3dd0:	9c 83       	std	Y+4, r25	; 0x04
    3dd2:	8b 83       	std	Y+3, r24	; 0x03
		Copy_u16Num/=10;
    3dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd8:	2a e0       	ldi	r18, 0x0A	; 10
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	b9 01       	movw	r22, r18
    3dde:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__udivmodhi4>
    3de2:	cb 01       	movw	r24, r22
    3de4:	9e 83       	std	Y+6, r25	; 0x06
    3de6:	8d 83       	std	Y+5, r24	; 0x05
		zeros++;
    3de8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dea:	8f 5f       	subi	r24, 0xFF	; 255
    3dec:	8a 83       	std	Y+2, r24	; 0x02
void LCD_VidSendNum(u16 Copy_u16Num)
{	u16 rev=0;
	u8 zeros=0;
	if (Copy_u16Num!=0)
	{
	while(Copy_u16Num>0)
    3dee:	8d 81       	ldd	r24, Y+5	; 0x05
    3df0:	9e 81       	ldd	r25, Y+6	; 0x06
    3df2:	00 97       	sbiw	r24, 0x00	; 0
    3df4:	b9 f6       	brne	.-82     	; 0x3da4 <LCD_VidSendNum+0x24>
    3df6:	19 c0       	rjmp	.+50     	; 0x3e2a <LCD_VidSendNum+0xaa>
		Copy_u16Num/=10;
		zeros++;
		};
	while(rev!=0)
	{
	u8 rem=rev%10;
    3df8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfc:	2a e0       	ldi	r18, 0x0A	; 10
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	b9 01       	movw	r22, r18
    3e02:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__udivmodhi4>
    3e06:	89 83       	std	Y+1, r24	; 0x01
	rev/=10;
    3e08:	8b 81       	ldd	r24, Y+3	; 0x03
    3e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e0c:	2a e0       	ldi	r18, 0x0A	; 10
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	b9 01       	movw	r22, r18
    3e12:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__udivmodhi4>
    3e16:	cb 01       	movw	r24, r22
    3e18:	9c 83       	std	Y+4, r25	; 0x04
    3e1a:	8b 83       	std	Y+3, r24	; 0x03
	LCD_VidSendData((48+rem));//+48 to have aski code
    3e1c:	89 81       	ldd	r24, Y+1	; 0x01
    3e1e:	80 5d       	subi	r24, 0xD0	; 208
    3e20:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_VidSendData>
	zeros--;
    3e24:	8a 81       	ldd	r24, Y+2	; 0x02
    3e26:	81 50       	subi	r24, 0x01	; 1
    3e28:	8a 83       	std	Y+2, r24	; 0x02
		{
		 rev=(rev*10)+(Copy_u16Num % 10);
		Copy_u16Num/=10;
		zeros++;
		};
	while(rev!=0)
    3e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2e:	00 97       	sbiw	r24, 0x00	; 0
    3e30:	19 f7       	brne	.-58     	; 0x3df8 <LCD_VidSendNum+0x78>
    3e32:	06 c0       	rjmp	.+12     	; 0x3e40 <LCD_VidSendNum+0xc0>
	LCD_VidSendData((48+rem));//+48 to have aski code
	zeros--;
	}
	while(zeros>0)
	{
	LCD_VidSendData((48+0));
    3e34:	80 e3       	ldi	r24, 0x30	; 48
    3e36:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_VidSendData>
	zeros--;
    3e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3c:	81 50       	subi	r24, 0x01	; 1
    3e3e:	8a 83       	std	Y+2, r24	; 0x02
	u8 rem=rev%10;
	rev/=10;
	LCD_VidSendData((48+rem));//+48 to have aski code
	zeros--;
	}
	while(zeros>0)
    3e40:	8a 81       	ldd	r24, Y+2	; 0x02
    3e42:	88 23       	and	r24, r24
    3e44:	b9 f7       	brne	.-18     	; 0x3e34 <LCD_VidSendNum+0xb4>
    3e46:	03 c0       	rjmp	.+6      	; 0x3e4e <LCD_VidSendNum+0xce>
	}
	}
	else
	{

		LCD_VidSendData((48+0));
    3e48:	80 e3       	ldi	r24, 0x30	; 48
    3e4a:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_VidSendData>
	}
}
    3e4e:	26 96       	adiw	r28, 0x06	; 6
    3e50:	0f b6       	in	r0, 0x3f	; 63
    3e52:	f8 94       	cli
    3e54:	de bf       	out	0x3e, r29	; 62
    3e56:	0f be       	out	0x3f, r0	; 63
    3e58:	cd bf       	out	0x3d, r28	; 61
    3e5a:	cf 91       	pop	r28
    3e5c:	df 91       	pop	r29
    3e5e:	08 95       	ret

00003e60 <LCD_VidShiftDispaly>:

void LCD_VidShiftDispaly(u8 Copy_u8Line,u8 Copy_u8Column)
{u8 shift=0,offset=0;
    3e60:	df 93       	push	r29
    3e62:	cf 93       	push	r28
    3e64:	00 d0       	rcall	.+0      	; 0x3e66 <LCD_VidShiftDispaly+0x6>
    3e66:	00 d0       	rcall	.+0      	; 0x3e68 <LCD_VidShiftDispaly+0x8>
    3e68:	00 d0       	rcall	.+0      	; 0x3e6a <LCD_VidShiftDispaly+0xa>
    3e6a:	cd b7       	in	r28, 0x3d	; 61
    3e6c:	de b7       	in	r29, 0x3e	; 62
    3e6e:	8b 83       	std	Y+3, r24	; 0x03
    3e70:	6c 83       	std	Y+4, r22	; 0x04
    3e72:	1a 82       	std	Y+2, r1	; 0x02
    3e74:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Line)
    3e76:	8b 81       	ldd	r24, Y+3	; 0x03
    3e78:	28 2f       	mov	r18, r24
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	3e 83       	std	Y+6, r19	; 0x06
    3e7e:	2d 83       	std	Y+5, r18	; 0x05
    3e80:	8d 81       	ldd	r24, Y+5	; 0x05
    3e82:	9e 81       	ldd	r25, Y+6	; 0x06
    3e84:	81 30       	cpi	r24, 0x01	; 1
    3e86:	91 05       	cpc	r25, r1
    3e88:	31 f0       	breq	.+12     	; 0x3e96 <LCD_VidShiftDispaly+0x36>
    3e8a:	2d 81       	ldd	r18, Y+5	; 0x05
    3e8c:	3e 81       	ldd	r19, Y+6	; 0x06
    3e8e:	22 30       	cpi	r18, 0x02	; 2
    3e90:	31 05       	cpc	r19, r1
    3e92:	21 f0       	breq	.+8      	; 0x3e9c <LCD_VidShiftDispaly+0x3c>
    3e94:	05 c0       	rjmp	.+10     	; 0x3ea0 <LCD_VidShiftDispaly+0x40>
	{case 1:
		offset=128;
    3e96:	80 e8       	ldi	r24, 0x80	; 128
    3e98:	89 83       	std	Y+1, r24	; 0x01
    3e9a:	02 c0       	rjmp	.+4      	; 0x3ea0 <LCD_VidShiftDispaly+0x40>
	break;
	case 2:
		offset=128+64;
    3e9c:	80 ec       	ldi	r24, 0xC0	; 192
    3e9e:	89 83       	std	Y+1, r24	; 0x01
	}
	shift=offset+Copy_u8Column;
    3ea0:	89 81       	ldd	r24, Y+1	; 0x01
    3ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ea4:	89 0f       	add	r24, r25
    3ea6:	8a 83       	std	Y+2, r24	; 0x02
	LCD_VidSendCommand(shift);
    3ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eaa:	0e 94 99 1a 	call	0x3532	; 0x3532 <LCD_VidSendCommand>
}
    3eae:	26 96       	adiw	r28, 0x06	; 6
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	f8 94       	cli
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	0f be       	out	0x3f, r0	; 63
    3eb8:	cd bf       	out	0x3d, r28	; 61
    3eba:	cf 91       	pop	r28
    3ebc:	df 91       	pop	r29
    3ebe:	08 95       	ret

00003ec0 <LCD_VidCLR>:


void LCD_VidCLR(void)
{
    3ec0:	df 93       	push	r29
    3ec2:	cf 93       	push	r28
    3ec4:	cd b7       	in	r28, 0x3d	; 61
    3ec6:	de b7       	in	r29, 0x3e	; 62

	LCD_VidSendCommand(0b00000001);
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    3eca:	0e 94 99 1a 	call	0x3532	; 0x3532 <LCD_VidSendCommand>

}
    3ece:	cf 91       	pop	r28
    3ed0:	df 91       	pop	r29
    3ed2:	08 95       	ret

00003ed4 <LCD_SetCGRam>:

void LCD_SetCGRam(u8 Copy_u8location )  //start from 0:7
{	u8 offset=64+Copy_u8location;
    3ed4:	df 93       	push	r29
    3ed6:	cf 93       	push	r28
    3ed8:	00 d0       	rcall	.+0      	; 0x3eda <LCD_SetCGRam+0x6>
    3eda:	cd b7       	in	r28, 0x3d	; 61
    3edc:	de b7       	in	r29, 0x3e	; 62
    3ede:	8a 83       	std	Y+2, r24	; 0x02
    3ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee2:	80 5c       	subi	r24, 0xC0	; 192
    3ee4:	89 83       	std	Y+1, r24	; 0x01

	LCD_VidSendCommand(offset);
    3ee6:	89 81       	ldd	r24, Y+1	; 0x01
    3ee8:	0e 94 99 1a 	call	0x3532	; 0x3532 <LCD_VidSendCommand>

}
    3eec:	0f 90       	pop	r0
    3eee:	0f 90       	pop	r0
    3ef0:	cf 91       	pop	r28
    3ef2:	df 91       	pop	r29
    3ef4:	08 95       	ret

00003ef6 <LCD_SetDDRam>:

void LCD_SetDDRam(void)
{	u8 offset=128;
    3ef6:	df 93       	push	r29
    3ef8:	cf 93       	push	r28
    3efa:	0f 92       	push	r0
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
    3f00:	80 e8       	ldi	r24, 0x80	; 128
    3f02:	89 83       	std	Y+1, r24	; 0x01

	LCD_VidSendCommand(offset);
    3f04:	89 81       	ldd	r24, Y+1	; 0x01
    3f06:	0e 94 99 1a 	call	0x3532	; 0x3532 <LCD_VidSendCommand>

}
    3f0a:	0f 90       	pop	r0
    3f0c:	cf 91       	pop	r28
    3f0e:	df 91       	pop	r29
    3f10:	08 95       	ret

00003f12 <LCD_VidSendCharToCGRam>:


void LCD_VidSendCharToCGRam(u8* Copy_u8Ptr)
{
    3f12:	df 93       	push	r29
    3f14:	cf 93       	push	r28
    3f16:	00 d0       	rcall	.+0      	; 0x3f18 <LCD_VidSendCharToCGRam+0x6>
    3f18:	00 d0       	rcall	.+0      	; 0x3f1a <LCD_VidSendCharToCGRam+0x8>
    3f1a:	cd b7       	in	r28, 0x3d	; 61
    3f1c:	de b7       	in	r29, 0x3e	; 62
    3f1e:	9c 83       	std	Y+4, r25	; 0x04
    3f20:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;i<8;i++)
    3f22:	1a 82       	std	Y+2, r1	; 0x02
    3f24:	19 82       	std	Y+1, r1	; 0x01
    3f26:	0f c0       	rjmp	.+30     	; 0x3f46 <LCD_VidSendCharToCGRam+0x34>
	{
		LCD_VidSendData(*Copy_u8Ptr);
    3f28:	eb 81       	ldd	r30, Y+3	; 0x03
    3f2a:	fc 81       	ldd	r31, Y+4	; 0x04
    3f2c:	80 81       	ld	r24, Z
    3f2e:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_VidSendData>
		Copy_u8Ptr++;
    3f32:	8b 81       	ldd	r24, Y+3	; 0x03
    3f34:	9c 81       	ldd	r25, Y+4	; 0x04
    3f36:	01 96       	adiw	r24, 0x01	; 1
    3f38:	9c 83       	std	Y+4, r25	; 0x04
    3f3a:	8b 83       	std	Y+3, r24	; 0x03
}


void LCD_VidSendCharToCGRam(u8* Copy_u8Ptr)
{
	for(int i=0;i<8;i++)
    3f3c:	89 81       	ldd	r24, Y+1	; 0x01
    3f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f40:	01 96       	adiw	r24, 0x01	; 1
    3f42:	9a 83       	std	Y+2, r25	; 0x02
    3f44:	89 83       	std	Y+1, r24	; 0x01
    3f46:	89 81       	ldd	r24, Y+1	; 0x01
    3f48:	9a 81       	ldd	r25, Y+2	; 0x02
    3f4a:	88 30       	cpi	r24, 0x08	; 8
    3f4c:	91 05       	cpc	r25, r1
    3f4e:	64 f3       	brlt	.-40     	; 0x3f28 <LCD_VidSendCharToCGRam+0x16>
		LCD_VidSendData(*Copy_u8Ptr);
		Copy_u8Ptr++;
	}


}
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	0f 90       	pop	r0
    3f56:	0f 90       	pop	r0
    3f58:	cf 91       	pop	r28
    3f5a:	df 91       	pop	r29
    3f5c:	08 95       	ret

00003f5e <__udivmodhi4>:
    3f5e:	aa 1b       	sub	r26, r26
    3f60:	bb 1b       	sub	r27, r27
    3f62:	51 e1       	ldi	r21, 0x11	; 17
    3f64:	07 c0       	rjmp	.+14     	; 0x3f74 <__udivmodhi4_ep>

00003f66 <__udivmodhi4_loop>:
    3f66:	aa 1f       	adc	r26, r26
    3f68:	bb 1f       	adc	r27, r27
    3f6a:	a6 17       	cp	r26, r22
    3f6c:	b7 07       	cpc	r27, r23
    3f6e:	10 f0       	brcs	.+4      	; 0x3f74 <__udivmodhi4_ep>
    3f70:	a6 1b       	sub	r26, r22
    3f72:	b7 0b       	sbc	r27, r23

00003f74 <__udivmodhi4_ep>:
    3f74:	88 1f       	adc	r24, r24
    3f76:	99 1f       	adc	r25, r25
    3f78:	5a 95       	dec	r21
    3f7a:	a9 f7       	brne	.-22     	; 0x3f66 <__udivmodhi4_loop>
    3f7c:	80 95       	com	r24
    3f7e:	90 95       	com	r25
    3f80:	bc 01       	movw	r22, r24
    3f82:	cd 01       	movw	r24, r26
    3f84:	08 95       	ret

00003f86 <__prologue_saves__>:
    3f86:	2f 92       	push	r2
    3f88:	3f 92       	push	r3
    3f8a:	4f 92       	push	r4
    3f8c:	5f 92       	push	r5
    3f8e:	6f 92       	push	r6
    3f90:	7f 92       	push	r7
    3f92:	8f 92       	push	r8
    3f94:	9f 92       	push	r9
    3f96:	af 92       	push	r10
    3f98:	bf 92       	push	r11
    3f9a:	cf 92       	push	r12
    3f9c:	df 92       	push	r13
    3f9e:	ef 92       	push	r14
    3fa0:	ff 92       	push	r15
    3fa2:	0f 93       	push	r16
    3fa4:	1f 93       	push	r17
    3fa6:	cf 93       	push	r28
    3fa8:	df 93       	push	r29
    3faa:	cd b7       	in	r28, 0x3d	; 61
    3fac:	de b7       	in	r29, 0x3e	; 62
    3fae:	ca 1b       	sub	r28, r26
    3fb0:	db 0b       	sbc	r29, r27
    3fb2:	0f b6       	in	r0, 0x3f	; 63
    3fb4:	f8 94       	cli
    3fb6:	de bf       	out	0x3e, r29	; 62
    3fb8:	0f be       	out	0x3f, r0	; 63
    3fba:	cd bf       	out	0x3d, r28	; 61
    3fbc:	09 94       	ijmp

00003fbe <__epilogue_restores__>:
    3fbe:	2a 88       	ldd	r2, Y+18	; 0x12
    3fc0:	39 88       	ldd	r3, Y+17	; 0x11
    3fc2:	48 88       	ldd	r4, Y+16	; 0x10
    3fc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fca:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fcc:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fce:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fd0:	b9 84       	ldd	r11, Y+9	; 0x09
    3fd2:	c8 84       	ldd	r12, Y+8	; 0x08
    3fd4:	df 80       	ldd	r13, Y+7	; 0x07
    3fd6:	ee 80       	ldd	r14, Y+6	; 0x06
    3fd8:	fd 80       	ldd	r15, Y+5	; 0x05
    3fda:	0c 81       	ldd	r16, Y+4	; 0x04
    3fdc:	1b 81       	ldd	r17, Y+3	; 0x03
    3fde:	aa 81       	ldd	r26, Y+2	; 0x02
    3fe0:	b9 81       	ldd	r27, Y+1	; 0x01
    3fe2:	ce 0f       	add	r28, r30
    3fe4:	d1 1d       	adc	r29, r1
    3fe6:	0f b6       	in	r0, 0x3f	; 63
    3fe8:	f8 94       	cli
    3fea:	de bf       	out	0x3e, r29	; 62
    3fec:	0f be       	out	0x3f, r0	; 63
    3fee:	cd bf       	out	0x3d, r28	; 61
    3ff0:	ed 01       	movw	r28, r26
    3ff2:	08 95       	ret

00003ff4 <_exit>:
    3ff4:	f8 94       	cli

00003ff6 <__stop_program>:
    3ff6:	ff cf       	rjmp	.-2      	; 0x3ff6 <__stop_program>
