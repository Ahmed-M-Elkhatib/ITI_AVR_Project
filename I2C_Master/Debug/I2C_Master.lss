
I2C_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004982  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00004982  000049f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000378c  00000000  00000000  00004b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f77  00000000  00000000  00008294  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000920b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f5  00000000  00000000  000093ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002216  00000000  00000000  000095a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b8  00000000  00000000  0000b7b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001136  00000000  00000000  0000ca6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000dba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d2  00000000  00000000  0000dd64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000095a  00000000  00000000  0000e036  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <main>
      7a:	0c 94 bf 24 	jmp	0x497e	; 0x497e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 57 24 	jmp	0x48ae	; 0x48ae <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 73 24 	jmp	0x48e6	; 0x48e6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 63 24 	jmp	0x48c6	; 0x48c6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 63 24 	jmp	0x48c6	; 0x48c6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 57 24 	jmp	0x48ae	; 0x48ae <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 73 24 	jmp	0x48e6	; 0x48e6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 63 24 	jmp	0x48c6	; 0x48c6 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 63 24 	jmp	0x48c6	; 0x48c6 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 63 24 	jmp	0x48c6	; 0x48c6 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 60 24 	jmp	0x48c0	; 0x48c0 <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 cc 04 	call	0x998	; 0x998 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 7c 24 	jmp	0x48f8	; 0x48f8 <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 67 24 	jmp	0x48ce	; 0x48ce <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__fixsfsi+0x80>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__fixsfsi+0x80>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__fixsfsi+0x8a>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__fixsfsi+0x94>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__fixsfsi+0x80>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__fixsfsi+0x8a>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__fixsfsi+0x94>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__fixsfsi+0x68>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__fixsfsi+0x9c>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__fixsfsi+0x9c>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__fixsfsi+0x9c>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__fixsfsi+0x9c>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 83 24 	jmp	0x4906	; 0x4906 <__epilogue_restores__+0x20>

000008a6 <__floatunsisf>:
     8a6:	a8 e0       	ldi	r26, 0x08	; 8
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e9 e5       	ldi	r30, 0x59	; 89
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	0c 94 5f 24 	jmp	0x48be	; 0x48be <__prologue_saves__+0x10>
     8b2:	7b 01       	movw	r14, r22
     8b4:	8c 01       	movw	r16, r24
     8b6:	61 15       	cp	r22, r1
     8b8:	71 05       	cpc	r23, r1
     8ba:	81 05       	cpc	r24, r1
     8bc:	91 05       	cpc	r25, r1
     8be:	19 f4       	brne	.+6      	; 0x8c6 <__floatunsisf+0x20>
     8c0:	82 e0       	ldi	r24, 0x02	; 2
     8c2:	89 83       	std	Y+1, r24	; 0x01
     8c4:	60 c0       	rjmp	.+192    	; 0x986 <__floatunsisf+0xe0>
     8c6:	83 e0       	ldi	r24, 0x03	; 3
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	8e e1       	ldi	r24, 0x1E	; 30
     8cc:	c8 2e       	mov	r12, r24
     8ce:	d1 2c       	mov	r13, r1
     8d0:	dc 82       	std	Y+4, r13	; 0x04
     8d2:	cb 82       	std	Y+3, r12	; 0x03
     8d4:	ed 82       	std	Y+5, r14	; 0x05
     8d6:	fe 82       	std	Y+6, r15	; 0x06
     8d8:	0f 83       	std	Y+7, r16	; 0x07
     8da:	18 87       	std	Y+8, r17	; 0x08
     8dc:	c8 01       	movw	r24, r16
     8de:	b7 01       	movw	r22, r14
     8e0:	0e 94 cc 04 	call	0x998	; 0x998 <__clzsi2>
     8e4:	fc 01       	movw	r30, r24
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	f7 ff       	sbrs	r31, 7
     8ea:	3b c0       	rjmp	.+118    	; 0x962 <__floatunsisf+0xbc>
     8ec:	22 27       	eor	r18, r18
     8ee:	33 27       	eor	r19, r19
     8f0:	2e 1b       	sub	r18, r30
     8f2:	3f 0b       	sbc	r19, r31
     8f4:	57 01       	movw	r10, r14
     8f6:	68 01       	movw	r12, r16
     8f8:	02 2e       	mov	r0, r18
     8fa:	04 c0       	rjmp	.+8      	; 0x904 <__floatunsisf+0x5e>
     8fc:	d6 94       	lsr	r13
     8fe:	c7 94       	ror	r12
     900:	b7 94       	ror	r11
     902:	a7 94       	ror	r10
     904:	0a 94       	dec	r0
     906:	d2 f7       	brpl	.-12     	; 0x8fc <__floatunsisf+0x56>
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a0 e0       	ldi	r26, 0x00	; 0
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	04 c0       	rjmp	.+8      	; 0x922 <__floatunsisf+0x7c>
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	aa 1f       	adc	r26, r26
     920:	bb 1f       	adc	r27, r27
     922:	2a 95       	dec	r18
     924:	d2 f7       	brpl	.-12     	; 0x91a <__floatunsisf+0x74>
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	a1 09       	sbc	r26, r1
     92a:	b1 09       	sbc	r27, r1
     92c:	8e 21       	and	r24, r14
     92e:	9f 21       	and	r25, r15
     930:	a0 23       	and	r26, r16
     932:	b1 23       	and	r27, r17
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	a1 05       	cpc	r26, r1
     938:	b1 05       	cpc	r27, r1
     93a:	21 f0       	breq	.+8      	; 0x944 <__floatunsisf+0x9e>
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	4a 29       	or	r20, r10
     946:	5b 29       	or	r21, r11
     948:	6c 29       	or	r22, r12
     94a:	7d 29       	or	r23, r13
     94c:	4d 83       	std	Y+5, r20	; 0x05
     94e:	5e 83       	std	Y+6, r21	; 0x06
     950:	6f 83       	std	Y+7, r22	; 0x07
     952:	78 87       	std	Y+8, r23	; 0x08
     954:	8e e1       	ldi	r24, 0x1E	; 30
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	8e 1b       	sub	r24, r30
     95a:	9f 0b       	sbc	r25, r31
     95c:	9c 83       	std	Y+4, r25	; 0x04
     95e:	8b 83       	std	Y+3, r24	; 0x03
     960:	12 c0       	rjmp	.+36     	; 0x986 <__floatunsisf+0xe0>
     962:	30 97       	sbiw	r30, 0x00	; 0
     964:	81 f0       	breq	.+32     	; 0x986 <__floatunsisf+0xe0>
     966:	0e 2e       	mov	r0, r30
     968:	04 c0       	rjmp	.+8      	; 0x972 <__floatunsisf+0xcc>
     96a:	ee 0c       	add	r14, r14
     96c:	ff 1c       	adc	r15, r15
     96e:	00 1f       	adc	r16, r16
     970:	11 1f       	adc	r17, r17
     972:	0a 94       	dec	r0
     974:	d2 f7       	brpl	.-12     	; 0x96a <__floatunsisf+0xc4>
     976:	ed 82       	std	Y+5, r14	; 0x05
     978:	fe 82       	std	Y+6, r15	; 0x06
     97a:	0f 83       	std	Y+7, r16	; 0x07
     97c:	18 87       	std	Y+8, r17	; 0x08
     97e:	ce 1a       	sub	r12, r30
     980:	df 0a       	sbc	r13, r31
     982:	dc 82       	std	Y+4, r13	; 0x04
     984:	cb 82       	std	Y+3, r12	; 0x03
     986:	1a 82       	std	Y+2, r1	; 0x02
     988:	ce 01       	movw	r24, r28
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     990:	28 96       	adiw	r28, 0x08	; 8
     992:	ea e0       	ldi	r30, 0x0A	; 10
     994:	0c 94 7b 24 	jmp	0x48f6	; 0x48f6 <__epilogue_restores__+0x10>

00000998 <__clzsi2>:
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	7b 01       	movw	r14, r22
     9a2:	8c 01       	movw	r16, r24
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	e8 16       	cp	r14, r24
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	f8 06       	cpc	r15, r24
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	08 07       	cpc	r16, r24
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	18 07       	cpc	r17, r24
     9b4:	88 f4       	brcc	.+34     	; 0x9d8 <__clzsi2+0x40>
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	e8 16       	cp	r14, r24
     9ba:	f1 04       	cpc	r15, r1
     9bc:	01 05       	cpc	r16, r1
     9be:	11 05       	cpc	r17, r1
     9c0:	31 f0       	breq	.+12     	; 0x9ce <__clzsi2+0x36>
     9c2:	28 f0       	brcs	.+10     	; 0x9ce <__clzsi2+0x36>
     9c4:	88 e0       	ldi	r24, 0x08	; 8
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	a0 e0       	ldi	r26, 0x00	; 0
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	17 c0       	rjmp	.+46     	; 0x9fc <__clzsi2+0x64>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	12 c0       	rjmp	.+36     	; 0x9fc <__clzsi2+0x64>
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	e8 16       	cp	r14, r24
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	f8 06       	cpc	r15, r24
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	08 07       	cpc	r16, r24
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	18 07       	cpc	r17, r24
     9e8:	28 f0       	brcs	.+10     	; 0x9f4 <__clzsi2+0x5c>
     9ea:	88 e1       	ldi	r24, 0x18	; 24
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	04 c0       	rjmp	.+8      	; 0x9fc <__clzsi2+0x64>
     9f4:	80 e1       	ldi	r24, 0x10	; 16
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	a0 e0       	ldi	r26, 0x00	; 0
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	20 e2       	ldi	r18, 0x20	; 32
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	28 1b       	sub	r18, r24
     a06:	39 0b       	sbc	r19, r25
     a08:	4a 0b       	sbc	r20, r26
     a0a:	5b 0b       	sbc	r21, r27
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__clzsi2+0x7e>
     a0e:	16 95       	lsr	r17
     a10:	07 95       	ror	r16
     a12:	f7 94       	ror	r15
     a14:	e7 94       	ror	r14
     a16:	8a 95       	dec	r24
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__clzsi2+0x76>
     a1a:	f7 01       	movw	r30, r14
     a1c:	e8 59       	subi	r30, 0x98	; 152
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
     a20:	80 81       	ld	r24, Z
     a22:	28 1b       	sub	r18, r24
     a24:	31 09       	sbc	r19, r1
     a26:	41 09       	sbc	r20, r1
     a28:	51 09       	sbc	r21, r1
     a2a:	c9 01       	movw	r24, r18
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	08 95       	ret

00000a36 <__pack_f>:
     a36:	df 92       	push	r13
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	fc 01       	movw	r30, r24
     a42:	e4 80       	ldd	r14, Z+4	; 0x04
     a44:	f5 80       	ldd	r15, Z+5	; 0x05
     a46:	06 81       	ldd	r16, Z+6	; 0x06
     a48:	17 81       	ldd	r17, Z+7	; 0x07
     a4a:	d1 80       	ldd	r13, Z+1	; 0x01
     a4c:	80 81       	ld	r24, Z
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	48 f4       	brcc	.+18     	; 0xa64 <__pack_f+0x2e>
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	a0 e1       	ldi	r26, 0x10	; 16
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	e8 2a       	or	r14, r24
     a5c:	f9 2a       	or	r15, r25
     a5e:	0a 2b       	or	r16, r26
     a60:	1b 2b       	or	r17, r27
     a62:	a5 c0       	rjmp	.+330    	; 0xbae <__pack_f+0x178>
     a64:	84 30       	cpi	r24, 0x04	; 4
     a66:	09 f4       	brne	.+2      	; 0xa6a <__pack_f+0x34>
     a68:	9f c0       	rjmp	.+318    	; 0xba8 <__pack_f+0x172>
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	21 f4       	brne	.+8      	; 0xa76 <__pack_f+0x40>
     a6e:	ee 24       	eor	r14, r14
     a70:	ff 24       	eor	r15, r15
     a72:	87 01       	movw	r16, r14
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <__pack_f+0x4a>
     a76:	e1 14       	cp	r14, r1
     a78:	f1 04       	cpc	r15, r1
     a7a:	01 05       	cpc	r16, r1
     a7c:	11 05       	cpc	r17, r1
     a7e:	19 f4       	brne	.+6      	; 0xa86 <__pack_f+0x50>
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	96 c0       	rjmp	.+300    	; 0xbb2 <__pack_f+0x17c>
     a86:	62 81       	ldd	r22, Z+2	; 0x02
     a88:	73 81       	ldd	r23, Z+3	; 0x03
     a8a:	9f ef       	ldi	r25, 0xFF	; 255
     a8c:	62 38       	cpi	r22, 0x82	; 130
     a8e:	79 07       	cpc	r23, r25
     a90:	0c f0       	brlt	.+2      	; 0xa94 <__pack_f+0x5e>
     a92:	5b c0       	rjmp	.+182    	; 0xb4a <__pack_f+0x114>
     a94:	22 e8       	ldi	r18, 0x82	; 130
     a96:	3f ef       	ldi	r19, 0xFF	; 255
     a98:	26 1b       	sub	r18, r22
     a9a:	37 0b       	sbc	r19, r23
     a9c:	2a 31       	cpi	r18, 0x1A	; 26
     a9e:	31 05       	cpc	r19, r1
     aa0:	2c f0       	brlt	.+10     	; 0xaac <__pack_f+0x76>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	2a c0       	rjmp	.+84     	; 0xb00 <__pack_f+0xca>
     aac:	b8 01       	movw	r22, r16
     aae:	a7 01       	movw	r20, r14
     ab0:	02 2e       	mov	r0, r18
     ab2:	04 c0       	rjmp	.+8      	; 0xabc <__pack_f+0x86>
     ab4:	76 95       	lsr	r23
     ab6:	67 95       	ror	r22
     ab8:	57 95       	ror	r21
     aba:	47 95       	ror	r20
     abc:	0a 94       	dec	r0
     abe:	d2 f7       	brpl	.-12     	; 0xab4 <__pack_f+0x7e>
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__pack_f+0x9c>
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	aa 1f       	adc	r26, r26
     ad0:	bb 1f       	adc	r27, r27
     ad2:	2a 95       	dec	r18
     ad4:	d2 f7       	brpl	.-12     	; 0xaca <__pack_f+0x94>
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	a1 09       	sbc	r26, r1
     ada:	b1 09       	sbc	r27, r1
     adc:	8e 21       	and	r24, r14
     ade:	9f 21       	and	r25, r15
     ae0:	a0 23       	and	r26, r16
     ae2:	b1 23       	and	r27, r17
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	a1 05       	cpc	r26, r1
     ae8:	b1 05       	cpc	r27, r1
     aea:	21 f0       	breq	.+8      	; 0xaf4 <__pack_f+0xbe>
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	9a 01       	movw	r18, r20
     af6:	ab 01       	movw	r20, r22
     af8:	28 2b       	or	r18, r24
     afa:	39 2b       	or	r19, r25
     afc:	4a 2b       	or	r20, r26
     afe:	5b 2b       	or	r21, r27
     b00:	da 01       	movw	r26, r20
     b02:	c9 01       	movw	r24, r18
     b04:	8f 77       	andi	r24, 0x7F	; 127
     b06:	90 70       	andi	r25, 0x00	; 0
     b08:	a0 70       	andi	r26, 0x00	; 0
     b0a:	b0 70       	andi	r27, 0x00	; 0
     b0c:	80 34       	cpi	r24, 0x40	; 64
     b0e:	91 05       	cpc	r25, r1
     b10:	a1 05       	cpc	r26, r1
     b12:	b1 05       	cpc	r27, r1
     b14:	39 f4       	brne	.+14     	; 0xb24 <__pack_f+0xee>
     b16:	27 ff       	sbrs	r18, 7
     b18:	09 c0       	rjmp	.+18     	; 0xb2c <__pack_f+0xf6>
     b1a:	20 5c       	subi	r18, 0xC0	; 192
     b1c:	3f 4f       	sbci	r19, 0xFF	; 255
     b1e:	4f 4f       	sbci	r20, 0xFF	; 255
     b20:	5f 4f       	sbci	r21, 0xFF	; 255
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__pack_f+0xf6>
     b24:	21 5c       	subi	r18, 0xC1	; 193
     b26:	3f 4f       	sbci	r19, 0xFF	; 255
     b28:	4f 4f       	sbci	r20, 0xFF	; 255
     b2a:	5f 4f       	sbci	r21, 0xFF	; 255
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	20 30       	cpi	r18, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	3a 07       	cpc	r19, r26
     b36:	a0 e0       	ldi	r26, 0x00	; 0
     b38:	4a 07       	cpc	r20, r26
     b3a:	a0 e4       	ldi	r26, 0x40	; 64
     b3c:	5a 07       	cpc	r21, r26
     b3e:	10 f0       	brcs	.+4      	; 0xb44 <__pack_f+0x10e>
     b40:	e1 e0       	ldi	r30, 0x01	; 1
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	79 01       	movw	r14, r18
     b46:	8a 01       	movw	r16, r20
     b48:	27 c0       	rjmp	.+78     	; 0xb98 <__pack_f+0x162>
     b4a:	60 38       	cpi	r22, 0x80	; 128
     b4c:	71 05       	cpc	r23, r1
     b4e:	64 f5       	brge	.+88     	; 0xba8 <__pack_f+0x172>
     b50:	fb 01       	movw	r30, r22
     b52:	e1 58       	subi	r30, 0x81	; 129
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	d8 01       	movw	r26, r16
     b58:	c7 01       	movw	r24, r14
     b5a:	8f 77       	andi	r24, 0x7F	; 127
     b5c:	90 70       	andi	r25, 0x00	; 0
     b5e:	a0 70       	andi	r26, 0x00	; 0
     b60:	b0 70       	andi	r27, 0x00	; 0
     b62:	80 34       	cpi	r24, 0x40	; 64
     b64:	91 05       	cpc	r25, r1
     b66:	a1 05       	cpc	r26, r1
     b68:	b1 05       	cpc	r27, r1
     b6a:	39 f4       	brne	.+14     	; 0xb7a <__pack_f+0x144>
     b6c:	e7 fe       	sbrs	r14, 7
     b6e:	0d c0       	rjmp	.+26     	; 0xb8a <__pack_f+0x154>
     b70:	80 e4       	ldi	r24, 0x40	; 64
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	a0 e0       	ldi	r26, 0x00	; 0
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__pack_f+0x14c>
     b7a:	8f e3       	ldi	r24, 0x3F	; 63
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e8 0e       	add	r14, r24
     b84:	f9 1e       	adc	r15, r25
     b86:	0a 1f       	adc	r16, r26
     b88:	1b 1f       	adc	r17, r27
     b8a:	17 ff       	sbrs	r17, 7
     b8c:	05 c0       	rjmp	.+10     	; 0xb98 <__pack_f+0x162>
     b8e:	16 95       	lsr	r17
     b90:	07 95       	ror	r16
     b92:	f7 94       	ror	r15
     b94:	e7 94       	ror	r14
     b96:	31 96       	adiw	r30, 0x01	; 1
     b98:	87 e0       	ldi	r24, 0x07	; 7
     b9a:	16 95       	lsr	r17
     b9c:	07 95       	ror	r16
     b9e:	f7 94       	ror	r15
     ba0:	e7 94       	ror	r14
     ba2:	8a 95       	dec	r24
     ba4:	d1 f7       	brne	.-12     	; 0xb9a <__pack_f+0x164>
     ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <__pack_f+0x17c>
     ba8:	ee 24       	eor	r14, r14
     baa:	ff 24       	eor	r15, r15
     bac:	87 01       	movw	r16, r14
     bae:	ef ef       	ldi	r30, 0xFF	; 255
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	6e 2f       	mov	r22, r30
     bb4:	67 95       	ror	r22
     bb6:	66 27       	eor	r22, r22
     bb8:	67 95       	ror	r22
     bba:	90 2f       	mov	r25, r16
     bbc:	9f 77       	andi	r25, 0x7F	; 127
     bbe:	d7 94       	ror	r13
     bc0:	dd 24       	eor	r13, r13
     bc2:	d7 94       	ror	r13
     bc4:	8e 2f       	mov	r24, r30
     bc6:	86 95       	lsr	r24
     bc8:	49 2f       	mov	r20, r25
     bca:	46 2b       	or	r20, r22
     bcc:	58 2f       	mov	r21, r24
     bce:	5d 29       	or	r21, r13
     bd0:	b7 01       	movw	r22, r14
     bd2:	ca 01       	movw	r24, r20
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	08 95       	ret

00000be0 <__unpack_f>:
     be0:	fc 01       	movw	r30, r24
     be2:	db 01       	movw	r26, r22
     be4:	40 81       	ld	r20, Z
     be6:	51 81       	ldd	r21, Z+1	; 0x01
     be8:	22 81       	ldd	r18, Z+2	; 0x02
     bea:	62 2f       	mov	r22, r18
     bec:	6f 77       	andi	r22, 0x7F	; 127
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	22 1f       	adc	r18, r18
     bf2:	22 27       	eor	r18, r18
     bf4:	22 1f       	adc	r18, r18
     bf6:	93 81       	ldd	r25, Z+3	; 0x03
     bf8:	89 2f       	mov	r24, r25
     bfa:	88 0f       	add	r24, r24
     bfc:	82 2b       	or	r24, r18
     bfe:	28 2f       	mov	r18, r24
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	99 1f       	adc	r25, r25
     c04:	99 27       	eor	r25, r25
     c06:	99 1f       	adc	r25, r25
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	9c 93       	st	X, r25
     c0c:	11 97       	sbiw	r26, 0x01	; 1
     c0e:	21 15       	cp	r18, r1
     c10:	31 05       	cpc	r19, r1
     c12:	a9 f5       	brne	.+106    	; 0xc7e <__unpack_f+0x9e>
     c14:	41 15       	cp	r20, r1
     c16:	51 05       	cpc	r21, r1
     c18:	61 05       	cpc	r22, r1
     c1a:	71 05       	cpc	r23, r1
     c1c:	11 f4       	brne	.+4      	; 0xc22 <__unpack_f+0x42>
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	37 c0       	rjmp	.+110    	; 0xc90 <__unpack_f+0xb0>
     c22:	82 e8       	ldi	r24, 0x82	; 130
     c24:	9f ef       	ldi	r25, 0xFF	; 255
     c26:	13 96       	adiw	r26, 0x03	; 3
     c28:	9c 93       	st	X, r25
     c2a:	8e 93       	st	-X, r24
     c2c:	12 97       	sbiw	r26, 0x02	; 2
     c2e:	9a 01       	movw	r18, r20
     c30:	ab 01       	movw	r20, r22
     c32:	67 e0       	ldi	r22, 0x07	; 7
     c34:	22 0f       	add	r18, r18
     c36:	33 1f       	adc	r19, r19
     c38:	44 1f       	adc	r20, r20
     c3a:	55 1f       	adc	r21, r21
     c3c:	6a 95       	dec	r22
     c3e:	d1 f7       	brne	.-12     	; 0xc34 <__unpack_f+0x54>
     c40:	83 e0       	ldi	r24, 0x03	; 3
     c42:	8c 93       	st	X, r24
     c44:	0d c0       	rjmp	.+26     	; 0xc60 <__unpack_f+0x80>
     c46:	22 0f       	add	r18, r18
     c48:	33 1f       	adc	r19, r19
     c4a:	44 1f       	adc	r20, r20
     c4c:	55 1f       	adc	r21, r21
     c4e:	12 96       	adiw	r26, 0x02	; 2
     c50:	8d 91       	ld	r24, X+
     c52:	9c 91       	ld	r25, X
     c54:	13 97       	sbiw	r26, 0x03	; 3
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	13 96       	adiw	r26, 0x03	; 3
     c5a:	9c 93       	st	X, r25
     c5c:	8e 93       	st	-X, r24
     c5e:	12 97       	sbiw	r26, 0x02	; 2
     c60:	20 30       	cpi	r18, 0x00	; 0
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	38 07       	cpc	r19, r24
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	48 07       	cpc	r20, r24
     c6a:	80 e4       	ldi	r24, 0x40	; 64
     c6c:	58 07       	cpc	r21, r24
     c6e:	58 f3       	brcs	.-42     	; 0xc46 <__unpack_f+0x66>
     c70:	14 96       	adiw	r26, 0x04	; 4
     c72:	2d 93       	st	X+, r18
     c74:	3d 93       	st	X+, r19
     c76:	4d 93       	st	X+, r20
     c78:	5c 93       	st	X, r21
     c7a:	17 97       	sbiw	r26, 0x07	; 7
     c7c:	08 95       	ret
     c7e:	2f 3f       	cpi	r18, 0xFF	; 255
     c80:	31 05       	cpc	r19, r1
     c82:	79 f4       	brne	.+30     	; 0xca2 <__unpack_f+0xc2>
     c84:	41 15       	cp	r20, r1
     c86:	51 05       	cpc	r21, r1
     c88:	61 05       	cpc	r22, r1
     c8a:	71 05       	cpc	r23, r1
     c8c:	19 f4       	brne	.+6      	; 0xc94 <__unpack_f+0xb4>
     c8e:	84 e0       	ldi	r24, 0x04	; 4
     c90:	8c 93       	st	X, r24
     c92:	08 95       	ret
     c94:	64 ff       	sbrs	r22, 4
     c96:	03 c0       	rjmp	.+6      	; 0xc9e <__unpack_f+0xbe>
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	8c 93       	st	X, r24
     c9c:	12 c0       	rjmp	.+36     	; 0xcc2 <__unpack_f+0xe2>
     c9e:	1c 92       	st	X, r1
     ca0:	10 c0       	rjmp	.+32     	; 0xcc2 <__unpack_f+0xe2>
     ca2:	2f 57       	subi	r18, 0x7F	; 127
     ca4:	30 40       	sbci	r19, 0x00	; 0
     ca6:	13 96       	adiw	r26, 0x03	; 3
     ca8:	3c 93       	st	X, r19
     caa:	2e 93       	st	-X, r18
     cac:	12 97       	sbiw	r26, 0x02	; 2
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	8c 93       	st	X, r24
     cb2:	87 e0       	ldi	r24, 0x07	; 7
     cb4:	44 0f       	add	r20, r20
     cb6:	55 1f       	adc	r21, r21
     cb8:	66 1f       	adc	r22, r22
     cba:	77 1f       	adc	r23, r23
     cbc:	8a 95       	dec	r24
     cbe:	d1 f7       	brne	.-12     	; 0xcb4 <__unpack_f+0xd4>
     cc0:	70 64       	ori	r23, 0x40	; 64
     cc2:	14 96       	adiw	r26, 0x04	; 4
     cc4:	4d 93       	st	X+, r20
     cc6:	5d 93       	st	X+, r21
     cc8:	6d 93       	st	X+, r22
     cca:	7c 93       	st	X, r23
     ccc:	17 97       	sbiw	r26, 0x07	; 7
     cce:	08 95       	ret

00000cd0 <__fpcmp_parts_f>:
     cd0:	1f 93       	push	r17
     cd2:	dc 01       	movw	r26, r24
     cd4:	fb 01       	movw	r30, r22
     cd6:	9c 91       	ld	r25, X
     cd8:	92 30       	cpi	r25, 0x02	; 2
     cda:	08 f4       	brcc	.+2      	; 0xcde <__fpcmp_parts_f+0xe>
     cdc:	47 c0       	rjmp	.+142    	; 0xd6c <__fpcmp_parts_f+0x9c>
     cde:	80 81       	ld	r24, Z
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <__fpcmp_parts_f+0x16>
     ce4:	43 c0       	rjmp	.+134    	; 0xd6c <__fpcmp_parts_f+0x9c>
     ce6:	94 30       	cpi	r25, 0x04	; 4
     ce8:	51 f4       	brne	.+20     	; 0xcfe <__fpcmp_parts_f+0x2e>
     cea:	11 96       	adiw	r26, 0x01	; 1
     cec:	1c 91       	ld	r17, X
     cee:	84 30       	cpi	r24, 0x04	; 4
     cf0:	99 f5       	brne	.+102    	; 0xd58 <__fpcmp_parts_f+0x88>
     cf2:	81 81       	ldd	r24, Z+1	; 0x01
     cf4:	68 2f       	mov	r22, r24
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	61 1b       	sub	r22, r17
     cfa:	71 09       	sbc	r23, r1
     cfc:	3f c0       	rjmp	.+126    	; 0xd7c <__fpcmp_parts_f+0xac>
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	21 f0       	breq	.+8      	; 0xd0a <__fpcmp_parts_f+0x3a>
     d02:	92 30       	cpi	r25, 0x02	; 2
     d04:	31 f4       	brne	.+12     	; 0xd12 <__fpcmp_parts_f+0x42>
     d06:	82 30       	cpi	r24, 0x02	; 2
     d08:	b9 f1       	breq	.+110    	; 0xd78 <__fpcmp_parts_f+0xa8>
     d0a:	81 81       	ldd	r24, Z+1	; 0x01
     d0c:	88 23       	and	r24, r24
     d0e:	89 f1       	breq	.+98     	; 0xd72 <__fpcmp_parts_f+0xa2>
     d10:	2d c0       	rjmp	.+90     	; 0xd6c <__fpcmp_parts_f+0x9c>
     d12:	11 96       	adiw	r26, 0x01	; 1
     d14:	1c 91       	ld	r17, X
     d16:	11 97       	sbiw	r26, 0x01	; 1
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	f1 f0       	breq	.+60     	; 0xd58 <__fpcmp_parts_f+0x88>
     d1c:	81 81       	ldd	r24, Z+1	; 0x01
     d1e:	18 17       	cp	r17, r24
     d20:	d9 f4       	brne	.+54     	; 0xd58 <__fpcmp_parts_f+0x88>
     d22:	12 96       	adiw	r26, 0x02	; 2
     d24:	2d 91       	ld	r18, X+
     d26:	3c 91       	ld	r19, X
     d28:	13 97       	sbiw	r26, 0x03	; 3
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	82 17       	cp	r24, r18
     d30:	93 07       	cpc	r25, r19
     d32:	94 f0       	brlt	.+36     	; 0xd58 <__fpcmp_parts_f+0x88>
     d34:	28 17       	cp	r18, r24
     d36:	39 07       	cpc	r19, r25
     d38:	bc f0       	brlt	.+46     	; 0xd68 <__fpcmp_parts_f+0x98>
     d3a:	14 96       	adiw	r26, 0x04	; 4
     d3c:	8d 91       	ld	r24, X+
     d3e:	9d 91       	ld	r25, X+
     d40:	0d 90       	ld	r0, X+
     d42:	bc 91       	ld	r27, X
     d44:	a0 2d       	mov	r26, r0
     d46:	24 81       	ldd	r18, Z+4	; 0x04
     d48:	35 81       	ldd	r19, Z+5	; 0x05
     d4a:	46 81       	ldd	r20, Z+6	; 0x06
     d4c:	57 81       	ldd	r21, Z+7	; 0x07
     d4e:	28 17       	cp	r18, r24
     d50:	39 07       	cpc	r19, r25
     d52:	4a 07       	cpc	r20, r26
     d54:	5b 07       	cpc	r21, r27
     d56:	18 f4       	brcc	.+6      	; 0xd5e <__fpcmp_parts_f+0x8e>
     d58:	11 23       	and	r17, r17
     d5a:	41 f0       	breq	.+16     	; 0xd6c <__fpcmp_parts_f+0x9c>
     d5c:	0a c0       	rjmp	.+20     	; 0xd72 <__fpcmp_parts_f+0xa2>
     d5e:	82 17       	cp	r24, r18
     d60:	93 07       	cpc	r25, r19
     d62:	a4 07       	cpc	r26, r20
     d64:	b5 07       	cpc	r27, r21
     d66:	40 f4       	brcc	.+16     	; 0xd78 <__fpcmp_parts_f+0xa8>
     d68:	11 23       	and	r17, r17
     d6a:	19 f0       	breq	.+6      	; 0xd72 <__fpcmp_parts_f+0xa2>
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <__fpcmp_parts_f+0xac>
     d72:	6f ef       	ldi	r22, 0xFF	; 255
     d74:	7f ef       	ldi	r23, 0xFF	; 255
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <__fpcmp_parts_f+0xac>
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	cb 01       	movw	r24, r22
     d7e:	1f 91       	pop	r17
     d80:	08 95       	ret

00000d82 <DIO_VidSetPin_Direction>:




void DIO_VidSetPin_Direction(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8State)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	27 97       	sbiw	r28, 0x07	; 7
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	89 83       	std	Y+1, r24	; 0x01
     d98:	6a 83       	std	Y+2, r22	; 0x02
     d9a:	4b 83       	std	Y+3, r20	; 0x03
	if (1==Copy_u8State)
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	09 f0       	breq	.+2      	; 0xda4 <DIO_VidSetPin_Direction+0x22>
     da2:	6f c0       	rjmp	.+222    	; 0xe82 <DIO_VidSetPin_Direction+0x100>
	{
		switch (Copy_u8Port)
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	3f 83       	std	Y+7, r19	; 0x07
     dac:	2e 83       	std	Y+6, r18	; 0x06
     dae:	8e 81       	ldd	r24, Y+6	; 0x06
     db0:	9f 81       	ldd	r25, Y+7	; 0x07
     db2:	81 30       	cpi	r24, 0x01	; 1
     db4:	91 05       	cpc	r25, r1
     db6:	49 f1       	breq	.+82     	; 0xe0a <DIO_VidSetPin_Direction+0x88>
     db8:	2e 81       	ldd	r18, Y+6	; 0x06
     dba:	3f 81       	ldd	r19, Y+7	; 0x07
     dbc:	22 30       	cpi	r18, 0x02	; 2
     dbe:	31 05       	cpc	r19, r1
     dc0:	2c f4       	brge	.+10     	; 0xdcc <DIO_VidSetPin_Direction+0x4a>
     dc2:	8e 81       	ldd	r24, Y+6	; 0x06
     dc4:	9f 81       	ldd	r25, Y+7	; 0x07
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	61 f0       	breq	.+24     	; 0xde2 <DIO_VidSetPin_Direction+0x60>
     dca:	d2 c0       	rjmp	.+420    	; 0xf70 <DIO_VidSetPin_Direction+0x1ee>
     dcc:	2e 81       	ldd	r18, Y+6	; 0x06
     dce:	3f 81       	ldd	r19, Y+7	; 0x07
     dd0:	22 30       	cpi	r18, 0x02	; 2
     dd2:	31 05       	cpc	r19, r1
     dd4:	71 f1       	breq	.+92     	; 0xe32 <DIO_VidSetPin_Direction+0xb0>
     dd6:	8e 81       	ldd	r24, Y+6	; 0x06
     dd8:	9f 81       	ldd	r25, Y+7	; 0x07
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	91 05       	cpc	r25, r1
     dde:	e9 f1       	breq	.+122    	; 0xe5a <DIO_VidSetPin_Direction+0xd8>
     de0:	c7 c0       	rjmp	.+398    	; 0xf70 <DIO_VidSetPin_Direction+0x1ee>
			{case 0:
			SET_BIT( DDRA,Copy_u8Pin); break;
     de2:	aa e3       	ldi	r26, 0x3A	; 58
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	ea e3       	ldi	r30, 0x3A	; 58
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO_VidSetPin_Direction+0x7e>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <DIO_VidSetPin_Direction+0x7a>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	b3 c0       	rjmp	.+358    	; 0xf70 <DIO_VidSetPin_Direction+0x1ee>
			case 1:
			SET_BIT( DDRB,Copy_u8Pin); break;
     e0a:	a7 e3       	ldi	r26, 0x37	; 55
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e7 e3       	ldi	r30, 0x37	; 55
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_VidSetPin_Direction+0xa6>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_VidSetPin_Direction+0xa2>
     e2c:	84 2b       	or	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	9f c0       	rjmp	.+318    	; 0xf70 <DIO_VidSetPin_Direction+0x1ee>
			case 2:
			SET_BIT( DDRC,Copy_u8Pin); break;
     e32:	a4 e3       	ldi	r26, 0x34	; 52
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e4 e3       	ldi	r30, 0x34	; 52
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 2e       	mov	r0, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <DIO_VidSetPin_Direction+0xce>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <DIO_VidSetPin_Direction+0xca>
     e54:	84 2b       	or	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	8b c0       	rjmp	.+278    	; 0xf70 <DIO_VidSetPin_Direction+0x1ee>
			case 3:
			SET_BIT( DDRD,Copy_u8Pin); break;
     e5a:	a1 e3       	ldi	r26, 0x31	; 49
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e1 e3       	ldi	r30, 0x31	; 49
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <DIO_VidSetPin_Direction+0xf6>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <DIO_VidSetPin_Direction+0xf2>
     e7c:	84 2b       	or	r24, r20
     e7e:	8c 93       	st	X, r24
     e80:	77 c0       	rjmp	.+238    	; 0xf70 <DIO_VidSetPin_Direction+0x1ee>
	}}
	else if (0==Copy_u8State)
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	88 23       	and	r24, r24
     e86:	09 f0       	breq	.+2      	; 0xe8a <DIO_VidSetPin_Direction+0x108>
     e88:	73 c0       	rjmp	.+230    	; 0xf70 <DIO_VidSetPin_Direction+0x1ee>
	{	switch(Copy_u8Port)
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	3d 83       	std	Y+5, r19	; 0x05
     e92:	2c 83       	std	Y+4, r18	; 0x04
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	9d 81       	ldd	r25, Y+5	; 0x05
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	91 05       	cpc	r25, r1
     e9c:	59 f1       	breq	.+86     	; 0xef4 <DIO_VidSetPin_Direction+0x172>
     e9e:	2c 81       	ldd	r18, Y+4	; 0x04
     ea0:	3d 81       	ldd	r19, Y+5	; 0x05
     ea2:	22 30       	cpi	r18, 0x02	; 2
     ea4:	31 05       	cpc	r19, r1
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <DIO_VidSetPin_Direction+0x130>
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	9d 81       	ldd	r25, Y+5	; 0x05
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	69 f0       	breq	.+26     	; 0xeca <DIO_VidSetPin_Direction+0x148>
     eb0:	5f c0       	rjmp	.+190    	; 0xf70 <DIO_VidSetPin_Direction+0x1ee>
     eb2:	2c 81       	ldd	r18, Y+4	; 0x04
     eb4:	3d 81       	ldd	r19, Y+5	; 0x05
     eb6:	22 30       	cpi	r18, 0x02	; 2
     eb8:	31 05       	cpc	r19, r1
     eba:	89 f1       	breq	.+98     	; 0xf1e <DIO_VidSetPin_Direction+0x19c>
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	9d 81       	ldd	r25, Y+5	; 0x05
     ec0:	83 30       	cpi	r24, 0x03	; 3
     ec2:	91 05       	cpc	r25, r1
     ec4:	09 f4       	brne	.+2      	; 0xec8 <DIO_VidSetPin_Direction+0x146>
     ec6:	40 c0       	rjmp	.+128    	; 0xf48 <DIO_VidSetPin_Direction+0x1c6>
     ec8:	53 c0       	rjmp	.+166    	; 0xf70 <DIO_VidSetPin_Direction+0x1ee>
			{case 0:
			CLR_BIT( DDRA,Copy_u8Pin); break;
     eca:	aa e3       	ldi	r26, 0x3A	; 58
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	ea e3       	ldi	r30, 0x3A	; 58
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_VidSetPin_Direction+0x166>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <DIO_VidSetPin_Direction+0x162>
     eec:	80 95       	com	r24
     eee:	84 23       	and	r24, r20
     ef0:	8c 93       	st	X, r24
     ef2:	3e c0       	rjmp	.+124    	; 0xf70 <DIO_VidSetPin_Direction+0x1ee>
			case 1:
			CLR_BIT( DDRB,Copy_u8Pin); break;
     ef4:	a7 e3       	ldi	r26, 0x37	; 55
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e7 e3       	ldi	r30, 0x37	; 55
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <DIO_VidSetPin_Direction+0x190>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <DIO_VidSetPin_Direction+0x18c>
     f16:	80 95       	com	r24
     f18:	84 23       	and	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	29 c0       	rjmp	.+82     	; 0xf70 <DIO_VidSetPin_Direction+0x1ee>
			case 2:
			CLR_BIT( DDRC,Copy_u8Pin); break;
     f1e:	a4 e3       	ldi	r26, 0x34	; 52
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e4 e3       	ldi	r30, 0x34	; 52
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_VidSetPin_Direction+0x1ba>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_VidSetPin_Direction+0x1b6>
     f40:	80 95       	com	r24
     f42:	84 23       	and	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <DIO_VidSetPin_Direction+0x1ee>
			case 3:
			CLR_BIT( DDRD,Copy_u8Pin); break;
     f48:	a1 e3       	ldi	r26, 0x31	; 49
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e1 e3       	ldi	r30, 0x31	; 49
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <DIO_VidSetPin_Direction+0x1e4>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <DIO_VidSetPin_Direction+0x1e0>
     f6a:	80 95       	com	r24
     f6c:	84 23       	and	r24, r20
     f6e:	8c 93       	st	X, r24
	}}

	}
     f70:	27 96       	adiw	r28, 0x07	; 7
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <DIO_VidSetPin_Value>:
	
	
void DIO_VidSetPin_Value(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	27 97       	sbiw	r28, 0x07	; 7
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	6a 83       	std	Y+2, r22	; 0x02
     f9a:	4b 83       	std	Y+3, r20	; 0x03
	if(0==Copy_u8Value)
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	88 23       	and	r24, r24
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <DIO_VidSetPin_Value+0x22>
     fa2:	74 c0       	rjmp	.+232    	; 0x108c <DIO_VidSetPin_Value+0x10a>
	
	{switch(Copy_u8Port)
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	3f 83       	std	Y+7, r19	; 0x07
     fac:	2e 83       	std	Y+6, r18	; 0x06
     fae:	8e 81       	ldd	r24, Y+6	; 0x06
     fb0:	9f 81       	ldd	r25, Y+7	; 0x07
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	91 05       	cpc	r25, r1
     fb6:	59 f1       	breq	.+86     	; 0x100e <DIO_VidSetPin_Value+0x8c>
     fb8:	2e 81       	ldd	r18, Y+6	; 0x06
     fba:	3f 81       	ldd	r19, Y+7	; 0x07
     fbc:	22 30       	cpi	r18, 0x02	; 2
     fbe:	31 05       	cpc	r19, r1
     fc0:	2c f4       	brge	.+10     	; 0xfcc <DIO_VidSetPin_Value+0x4a>
     fc2:	8e 81       	ldd	r24, Y+6	; 0x06
     fc4:	9f 81       	ldd	r25, Y+7	; 0x07
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	69 f0       	breq	.+26     	; 0xfe4 <DIO_VidSetPin_Value+0x62>
     fca:	d2 c0       	rjmp	.+420    	; 0x1170 <DIO_VidSetPin_Value+0x1ee>
     fcc:	2e 81       	ldd	r18, Y+6	; 0x06
     fce:	3f 81       	ldd	r19, Y+7	; 0x07
     fd0:	22 30       	cpi	r18, 0x02	; 2
     fd2:	31 05       	cpc	r19, r1
     fd4:	89 f1       	breq	.+98     	; 0x1038 <DIO_VidSetPin_Value+0xb6>
     fd6:	8e 81       	ldd	r24, Y+6	; 0x06
     fd8:	9f 81       	ldd	r25, Y+7	; 0x07
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	91 05       	cpc	r25, r1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <DIO_VidSetPin_Value+0x60>
     fe0:	40 c0       	rjmp	.+128    	; 0x1062 <DIO_VidSetPin_Value+0xe0>
     fe2:	c6 c0       	rjmp	.+396    	; 0x1170 <DIO_VidSetPin_Value+0x1ee>
		{case 0:
		CLR_BIT( PORTA,Copy_u8Pin) ;break;
     fe4:	ab e3       	ldi	r26, 0x3B	; 59
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	eb e3       	ldi	r30, 0x3B	; 59
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_VidSetPin_Value+0x80>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_VidSetPin_Value+0x7c>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	8c 93       	st	X, r24
    100c:	b1 c0       	rjmp	.+354    	; 0x1170 <DIO_VidSetPin_Value+0x1ee>
		case 1:
		CLR_BIT( PORTB,Copy_u8Pin) ;break;
    100e:	a8 e3       	ldi	r26, 0x38	; 56
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e8 e3       	ldi	r30, 0x38	; 56
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	48 2f       	mov	r20, r24
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 2e       	mov	r0, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_VidSetPin_Value+0xaa>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_VidSetPin_Value+0xa6>
    1030:	80 95       	com	r24
    1032:	84 23       	and	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	9c c0       	rjmp	.+312    	; 0x1170 <DIO_VidSetPin_Value+0x1ee>
		case 2:
		CLR_BIT( PORTC,Copy_u8Pin) ;break;
    1038:	a5 e3       	ldi	r26, 0x35	; 53
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e5 e3       	ldi	r30, 0x35	; 53
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_VidSetPin_Value+0xd4>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_VidSetPin_Value+0xd0>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	87 c0       	rjmp	.+270    	; 0x1170 <DIO_VidSetPin_Value+0x1ee>
		case 3:
		CLR_BIT( PORTD,Copy_u8Pin) ;break;
    1062:	a2 e3       	ldi	r26, 0x32	; 50
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e2 e3       	ldi	r30, 0x32	; 50
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_VidSetPin_Value+0xfe>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_VidSetPin_Value+0xfa>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	72 c0       	rjmp	.+228    	; 0x1170 <DIO_VidSetPin_Value+0x1ee>
	}}
	else if (1==Copy_u8Value)
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	09 f0       	breq	.+2      	; 0x1094 <DIO_VidSetPin_Value+0x112>
    1092:	6e c0       	rjmp	.+220    	; 0x1170 <DIO_VidSetPin_Value+0x1ee>
	{switch(Copy_u8Port)
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	3d 83       	std	Y+5, r19	; 0x05
    109c:	2c 83       	std	Y+4, r18	; 0x04
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	91 05       	cpc	r25, r1
    10a6:	49 f1       	breq	.+82     	; 0x10fa <DIO_VidSetPin_Value+0x178>
    10a8:	2c 81       	ldd	r18, Y+4	; 0x04
    10aa:	3d 81       	ldd	r19, Y+5	; 0x05
    10ac:	22 30       	cpi	r18, 0x02	; 2
    10ae:	31 05       	cpc	r19, r1
    10b0:	2c f4       	brge	.+10     	; 0x10bc <DIO_VidSetPin_Value+0x13a>
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	9d 81       	ldd	r25, Y+5	; 0x05
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	61 f0       	breq	.+24     	; 0x10d2 <DIO_VidSetPin_Value+0x150>
    10ba:	5a c0       	rjmp	.+180    	; 0x1170 <DIO_VidSetPin_Value+0x1ee>
    10bc:	2c 81       	ldd	r18, Y+4	; 0x04
    10be:	3d 81       	ldd	r19, Y+5	; 0x05
    10c0:	22 30       	cpi	r18, 0x02	; 2
    10c2:	31 05       	cpc	r19, r1
    10c4:	71 f1       	breq	.+92     	; 0x1122 <DIO_VidSetPin_Value+0x1a0>
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	91 05       	cpc	r25, r1
    10ce:	e9 f1       	breq	.+122    	; 0x114a <DIO_VidSetPin_Value+0x1c8>
    10d0:	4f c0       	rjmp	.+158    	; 0x1170 <DIO_VidSetPin_Value+0x1ee>
		{case 0:
		SET_BIT( PORTA,Copy_u8Pin) ;break;
    10d2:	ab e3       	ldi	r26, 0x3B	; 59
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	eb e3       	ldi	r30, 0x3B	; 59
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_VidSetPin_Value+0x16e>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_VidSetPin_Value+0x16a>
    10f4:	84 2b       	or	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	3b c0       	rjmp	.+118    	; 0x1170 <DIO_VidSetPin_Value+0x1ee>
		case 1:
		SET_BIT( PORTB,Copy_u8Pin) ;break;
    10fa:	a8 e3       	ldi	r26, 0x38	; 56
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e8 e3       	ldi	r30, 0x38	; 56
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 2e       	mov	r0, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_VidSetPin_Value+0x196>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_VidSetPin_Value+0x192>
    111c:	84 2b       	or	r24, r20
    111e:	8c 93       	st	X, r24
    1120:	27 c0       	rjmp	.+78     	; 0x1170 <DIO_VidSetPin_Value+0x1ee>
		case 2:
		SET_BIT( PORTC,Copy_u8Pin) ;break;
    1122:	a5 e3       	ldi	r26, 0x35	; 53
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e5 e3       	ldi	r30, 0x35	; 53
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_VidSetPin_Value+0x1be>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_VidSetPin_Value+0x1ba>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	13 c0       	rjmp	.+38     	; 0x1170 <DIO_VidSetPin_Value+0x1ee>
		case 3:
		SET_BIT( PORTD,Copy_u8Pin) ;break;
    114a:	a2 e3       	ldi	r26, 0x32	; 50
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e2 e3       	ldi	r30, 0x32	; 50
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_VidSetPin_Value+0x1e6>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <DIO_VidSetPin_Value+0x1e2>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
	}}
		
		
}
    1170:	27 96       	adiw	r28, 0x07	; 7
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <DIO_VidGetPin>:
	
	u8 DIO_VidGetPin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{	u8 bit;
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <DIO_VidGetPin+0x6>
    1188:	00 d0       	rcall	.+0      	; 0x118a <DIO_VidGetPin+0x8>
    118a:	0f 92       	push	r0
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	8a 83       	std	Y+2, r24	; 0x02
    1192:	6b 83       	std	Y+3, r22	; 0x03
		switch(Copy_u8Port)
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3d 83       	std	Y+5, r19	; 0x05
    119c:	2c 83       	std	Y+4, r18	; 0x04
    119e:	4c 81       	ldd	r20, Y+4	; 0x04
    11a0:	5d 81       	ldd	r21, Y+5	; 0x05
    11a2:	41 30       	cpi	r20, 0x01	; 1
    11a4:	51 05       	cpc	r21, r1
    11a6:	41 f1       	breq	.+80     	; 0x11f8 <DIO_VidGetPin+0x76>
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	82 30       	cpi	r24, 0x02	; 2
    11ae:	91 05       	cpc	r25, r1
    11b0:	34 f4       	brge	.+12     	; 0x11be <DIO_VidGetPin+0x3c>
    11b2:	2c 81       	ldd	r18, Y+4	; 0x04
    11b4:	3d 81       	ldd	r19, Y+5	; 0x05
    11b6:	21 15       	cp	r18, r1
    11b8:	31 05       	cpc	r19, r1
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <DIO_VidGetPin+0x52>
    11bc:	52 c0       	rjmp	.+164    	; 0x1262 <DIO_VidGetPin+0xe0>
    11be:	4c 81       	ldd	r20, Y+4	; 0x04
    11c0:	5d 81       	ldd	r21, Y+5	; 0x05
    11c2:	42 30       	cpi	r20, 0x02	; 2
    11c4:	51 05       	cpc	r21, r1
    11c6:	51 f1       	breq	.+84     	; 0x121c <DIO_VidGetPin+0x9a>
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	9d 81       	ldd	r25, Y+5	; 0x05
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	b9 f1       	breq	.+110    	; 0x1240 <DIO_VidGetPin+0xbe>
    11d2:	47 c0       	rjmp	.+142    	; 0x1262 <DIO_VidGetPin+0xe0>
		{case 0:
		bit=GET_BIT( PINA,Copy_u8Pin) ;break;
    11d4:	e9 e3       	ldi	r30, 0x39	; 57
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	88 2f       	mov	r24, r24
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	a9 01       	movw	r20, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <DIO_VidGetPin+0x6a>
    11e8:	55 95       	asr	r21
    11ea:	47 95       	ror	r20
    11ec:	8a 95       	dec	r24
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <DIO_VidGetPin+0x66>
    11f0:	ca 01       	movw	r24, r20
    11f2:	81 70       	andi	r24, 0x01	; 1
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	35 c0       	rjmp	.+106    	; 0x1262 <DIO_VidGetPin+0xe0>
		case 1:
		bit=GET_BIT( PINB,Copy_u8Pin) ;break;
    11f8:	e6 e3       	ldi	r30, 0x36	; 54
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a9 01       	movw	r20, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_VidGetPin+0x8e>
    120c:	55 95       	asr	r21
    120e:	47 95       	ror	r20
    1210:	8a 95       	dec	r24
    1212:	e2 f7       	brpl	.-8      	; 0x120c <DIO_VidGetPin+0x8a>
    1214:	ca 01       	movw	r24, r20
    1216:	81 70       	andi	r24, 0x01	; 1
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	23 c0       	rjmp	.+70     	; 0x1262 <DIO_VidGetPin+0xe0>
		case 2:
		bit=GET_BIT( PINC,Copy_u8Pin) ;break;
    121c:	e3 e3       	ldi	r30, 0x33	; 51
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	88 2f       	mov	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	a9 01       	movw	r20, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_VidGetPin+0xb2>
    1230:	55 95       	asr	r21
    1232:	47 95       	ror	r20
    1234:	8a 95       	dec	r24
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_VidGetPin+0xae>
    1238:	ca 01       	movw	r24, r20
    123a:	81 70       	andi	r24, 0x01	; 1
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	11 c0       	rjmp	.+34     	; 0x1262 <DIO_VidGetPin+0xe0>
		case 3:
		bit=GET_BIT( PIND,Copy_u8Pin) ;break;
    1240:	e0 e3       	ldi	r30, 0x30	; 48
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_VidGetPin+0xd6>
    1254:	55 95       	asr	r21
    1256:	47 95       	ror	r20
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_VidGetPin+0xd2>
    125c:	ca 01       	movw	r24, r20
    125e:	81 70       	andi	r24, 0x01	; 1
    1260:	89 83       	std	Y+1, r24	; 0x01
		}
		return bit;
    1262:	89 81       	ldd	r24, Y+1	; 0x01
				
		
	}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <DIO_VidToggelPin>:

	
	
	void DIO_VidToggelPin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	00 d0       	rcall	.+0      	; 0x127a <DIO_VidToggelPin+0x6>
    127a:	00 d0       	rcall	.+0      	; 0x127c <DIO_VidToggelPin+0x8>
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	3c 83       	std	Y+4, r19	; 0x04
    128c:	2b 83       	std	Y+3, r18	; 0x03
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	91 05       	cpc	r25, r1
    1296:	49 f1       	breq	.+82     	; 0x12ea <DIO_VidToggelPin+0x76>
    1298:	2b 81       	ldd	r18, Y+3	; 0x03
    129a:	3c 81       	ldd	r19, Y+4	; 0x04
    129c:	22 30       	cpi	r18, 0x02	; 2
    129e:	31 05       	cpc	r19, r1
    12a0:	2c f4       	brge	.+10     	; 0x12ac <DIO_VidToggelPin+0x38>
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	61 f0       	breq	.+24     	; 0x12c2 <DIO_VidToggelPin+0x4e>
    12aa:	5a c0       	rjmp	.+180    	; 0x1360 <DIO_VidToggelPin+0xec>
    12ac:	2b 81       	ldd	r18, Y+3	; 0x03
    12ae:	3c 81       	ldd	r19, Y+4	; 0x04
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 05       	cpc	r19, r1
    12b4:	71 f1       	breq	.+92     	; 0x1312 <DIO_VidToggelPin+0x9e>
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	83 30       	cpi	r24, 0x03	; 3
    12bc:	91 05       	cpc	r25, r1
    12be:	e9 f1       	breq	.+122    	; 0x133a <DIO_VidToggelPin+0xc6>
    12c0:	4f c0       	rjmp	.+158    	; 0x1360 <DIO_VidToggelPin+0xec>
		{
			case 0:   TOGGLE_BIT( PORTA,Copy_u8Pin); break;
    12c2:	ab e3       	ldi	r26, 0x3B	; 59
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	eb e3       	ldi	r30, 0x3B	; 59
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_VidToggelPin+0x6c>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_VidToggelPin+0x68>
    12e4:	84 27       	eor	r24, r20
    12e6:	8c 93       	st	X, r24
    12e8:	3b c0       	rjmp	.+118    	; 0x1360 <DIO_VidToggelPin+0xec>
			case 1:   TOGGLE_BIT( PORTB,Copy_u8Pin); break;
    12ea:	a8 e3       	ldi	r26, 0x38	; 56
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e8 e3       	ldi	r30, 0x38	; 56
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_VidToggelPin+0x94>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_VidToggelPin+0x90>
    130c:	84 27       	eor	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	27 c0       	rjmp	.+78     	; 0x1360 <DIO_VidToggelPin+0xec>
			case 2:   TOGGLE_BIT( PORTC,Copy_u8Pin); break;
    1312:	a5 e3       	ldi	r26, 0x35	; 53
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e5 e3       	ldi	r30, 0x35	; 53
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_VidToggelPin+0xbc>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_VidToggelPin+0xb8>
    1334:	84 27       	eor	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	13 c0       	rjmp	.+38     	; 0x1360 <DIO_VidToggelPin+0xec>
			case 3:   TOGGLE_BIT( PORTD,Copy_u8Pin); break;
    133a:	a2 e3       	ldi	r26, 0x32	; 50
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e2 e3       	ldi	r30, 0x32	; 50
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_VidToggelPin+0xe4>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_VidToggelPin+0xe0>
    135c:	84 27       	eor	r24, r20
    135e:	8c 93       	st	X, r24
		}
			
		
	}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <DIO_VidSetPort_Direction>:
	
	void DIO_VidSetPort_Direction(u8 Copy_u8Port,u8 Copy_u8State)
	{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	00 d0       	rcall	.+0      	; 0x1374 <DIO_VidSetPort_Direction+0x6>
    1374:	00 d0       	rcall	.+0      	; 0x1376 <DIO_VidSetPort_Direction+0x8>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <DIO_VidSetPort_Direction+0xa>
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	6a 83       	std	Y+2, r22	; 0x02
		
		if (1==Copy_u8State)
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	99 f5       	brne	.+102    	; 0x13ec <DIO_VidSetPort_Direction+0x7e>
		{
			switch(Copy_u8Port)
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	3e 83       	std	Y+6, r19	; 0x06
    138e:	2d 83       	std	Y+5, r18	; 0x05
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	91 05       	cpc	r25, r1
    1398:	d1 f0       	breq	.+52     	; 0x13ce <DIO_VidSetPort_Direction+0x60>
    139a:	2d 81       	ldd	r18, Y+5	; 0x05
    139c:	3e 81       	ldd	r19, Y+6	; 0x06
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	2c f4       	brge	.+10     	; 0x13ae <DIO_VidSetPort_Direction+0x40>
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	61 f0       	breq	.+24     	; 0x13c4 <DIO_VidSetPort_Direction+0x56>
    13ac:	50 c0       	rjmp	.+160    	; 0x144e <DIO_VidSetPort_Direction+0xe0>
    13ae:	2d 81       	ldd	r18, Y+5	; 0x05
    13b0:	3e 81       	ldd	r19, Y+6	; 0x06
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	81 f0       	breq	.+32     	; 0x13d8 <DIO_VidSetPort_Direction+0x6a>
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	83 30       	cpi	r24, 0x03	; 3
    13be:	91 05       	cpc	r25, r1
    13c0:	81 f0       	breq	.+32     	; 0x13e2 <DIO_VidSetPort_Direction+0x74>
    13c2:	45 c0       	rjmp	.+138    	; 0x144e <DIO_VidSetPort_Direction+0xe0>
			{
				case 0: SET_PORT(DDRA);   break;
    13c4:	ea e3       	ldi	r30, 0x3A	; 58
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8f ef       	ldi	r24, 0xFF	; 255
    13ca:	80 83       	st	Z, r24
    13cc:	40 c0       	rjmp	.+128    	; 0x144e <DIO_VidSetPort_Direction+0xe0>
				case 1: SET_PORT(DDRB);   break;
    13ce:	e7 e3       	ldi	r30, 0x37	; 55
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8f ef       	ldi	r24, 0xFF	; 255
    13d4:	80 83       	st	Z, r24
    13d6:	3b c0       	rjmp	.+118    	; 0x144e <DIO_VidSetPort_Direction+0xe0>
				case 2: SET_PORT(DDRC);   break;
    13d8:	e4 e3       	ldi	r30, 0x34	; 52
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	8f ef       	ldi	r24, 0xFF	; 255
    13de:	80 83       	st	Z, r24
    13e0:	36 c0       	rjmp	.+108    	; 0x144e <DIO_VidSetPort_Direction+0xe0>
				case 3: SET_PORT(DDRD);   break;
    13e2:	e1 e3       	ldi	r30, 0x31	; 49
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	80 83       	st	Z, r24
    13ea:	31 c0       	rjmp	.+98     	; 0x144e <DIO_VidSetPort_Direction+0xe0>
			}
			
		}
		else if(0==Copy_u8State)
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	88 23       	and	r24, r24
    13f0:	71 f5       	brne	.+92     	; 0x144e <DIO_VidSetPort_Direction+0xe0>
		
		{
			switch(Copy_u8Port)
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	3c 83       	std	Y+4, r19	; 0x04
    13fa:	2b 83       	std	Y+3, r18	; 0x03
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	c9 f0       	breq	.+50     	; 0x1438 <DIO_VidSetPort_Direction+0xca>
    1406:	2b 81       	ldd	r18, Y+3	; 0x03
    1408:	3c 81       	ldd	r19, Y+4	; 0x04
    140a:	22 30       	cpi	r18, 0x02	; 2
    140c:	31 05       	cpc	r19, r1
    140e:	2c f4       	brge	.+10     	; 0x141a <DIO_VidSetPort_Direction+0xac>
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	61 f0       	breq	.+24     	; 0x1430 <DIO_VidSetPort_Direction+0xc2>
    1418:	1a c0       	rjmp	.+52     	; 0x144e <DIO_VidSetPort_Direction+0xe0>
    141a:	2b 81       	ldd	r18, Y+3	; 0x03
    141c:	3c 81       	ldd	r19, Y+4	; 0x04
    141e:	22 30       	cpi	r18, 0x02	; 2
    1420:	31 05       	cpc	r19, r1
    1422:	71 f0       	breq	.+28     	; 0x1440 <DIO_VidSetPort_Direction+0xd2>
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	91 05       	cpc	r25, r1
    142c:	69 f0       	breq	.+26     	; 0x1448 <DIO_VidSetPort_Direction+0xda>
    142e:	0f c0       	rjmp	.+30     	; 0x144e <DIO_VidSetPort_Direction+0xe0>
			{
				case 0: CLR_PORT(DDRA);   break;
    1430:	ea e3       	ldi	r30, 0x3A	; 58
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	10 82       	st	Z, r1
    1436:	0b c0       	rjmp	.+22     	; 0x144e <DIO_VidSetPort_Direction+0xe0>
				case 1: CLR_PORT(DDRB);   break;
    1438:	e7 e3       	ldi	r30, 0x37	; 55
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	10 82       	st	Z, r1
    143e:	07 c0       	rjmp	.+14     	; 0x144e <DIO_VidSetPort_Direction+0xe0>
				case 2: CLR_PORT(DDRC);   break;
    1440:	e4 e3       	ldi	r30, 0x34	; 52
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	10 82       	st	Z, r1
    1446:	03 c0       	rjmp	.+6      	; 0x144e <DIO_VidSetPort_Direction+0xe0>
				case 3: CLR_PORT(DDRD);   break;
    1448:	e1 e3       	ldi	r30, 0x31	; 49
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	10 82       	st	Z, r1
			}	
		}
		
	}
    144e:	26 96       	adiw	r28, 0x06	; 6
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <DIO_VidWriteOnPort>:

	void DIO_VidWriteOnPort(u8 Copy_u8Port,u8 Copy_u8Value)
	{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <DIO_VidWriteOnPort+0x6>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <DIO_VidWriteOnPort+0x8>
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3c 83       	std	Y+4, r19	; 0x04
    1478:	2b 83       	std	Y+3, r18	; 0x03
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	91 05       	cpc	r25, r1
    1482:	d1 f0       	breq	.+52     	; 0x14b8 <DIO_VidWriteOnPort+0x58>
    1484:	2b 81       	ldd	r18, Y+3	; 0x03
    1486:	3c 81       	ldd	r19, Y+4	; 0x04
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	2c f4       	brge	.+10     	; 0x1498 <DIO_VidWriteOnPort+0x38>
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	61 f0       	breq	.+24     	; 0x14ae <DIO_VidWriteOnPort+0x4e>
    1496:	1e c0       	rjmp	.+60     	; 0x14d4 <DIO_VidWriteOnPort+0x74>
    1498:	2b 81       	ldd	r18, Y+3	; 0x03
    149a:	3c 81       	ldd	r19, Y+4	; 0x04
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	81 f0       	breq	.+32     	; 0x14c2 <DIO_VidWriteOnPort+0x62>
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	91 05       	cpc	r25, r1
    14aa:	81 f0       	breq	.+32     	; 0x14cc <DIO_VidWriteOnPort+0x6c>
    14ac:	13 c0       	rjmp	.+38     	; 0x14d4 <DIO_VidWriteOnPort+0x74>
		{
			case 0: WRITEON_PORT(PORTA,Copy_u8Value); break;
    14ae:	eb e3       	ldi	r30, 0x3B	; 59
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	80 83       	st	Z, r24
    14b6:	0e c0       	rjmp	.+28     	; 0x14d4 <DIO_VidWriteOnPort+0x74>
			case 1: WRITEON_PORT(PORTB,Copy_u8Value); break;
    14b8:	e8 e3       	ldi	r30, 0x38	; 56
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	80 83       	st	Z, r24
    14c0:	09 c0       	rjmp	.+18     	; 0x14d4 <DIO_VidWriteOnPort+0x74>
			case 2: WRITEON_PORT(PORTC,Copy_u8Value); break;
    14c2:	e5 e3       	ldi	r30, 0x35	; 53
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	80 83       	st	Z, r24
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <DIO_VidWriteOnPort+0x74>
			case 3: WRITEON_PORT(PORTD,Copy_u8Value); break;
    14cc:	e2 e3       	ldi	r30, 0x32	; 50
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	80 83       	st	Z, r24
		}
		
	}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <DIO_VidPullUp_Pin>:


	
	void DIO_VidPullUp_Pin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <DIO_VidPullUp_Pin+0x6>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <DIO_VidPullUp_Pin+0x8>
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	3c 83       	std	Y+4, r19	; 0x04
    14fa:	2b 83       	std	Y+3, r18	; 0x03
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	91 05       	cpc	r25, r1
    1504:	49 f1       	breq	.+82     	; 0x1558 <DIO_VidPullUp_Pin+0x76>
    1506:	2b 81       	ldd	r18, Y+3	; 0x03
    1508:	3c 81       	ldd	r19, Y+4	; 0x04
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	2c f4       	brge	.+10     	; 0x151a <DIO_VidPullUp_Pin+0x38>
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	61 f0       	breq	.+24     	; 0x1530 <DIO_VidPullUp_Pin+0x4e>
    1518:	5a c0       	rjmp	.+180    	; 0x15ce <DIO_VidPullUp_Pin+0xec>
    151a:	2b 81       	ldd	r18, Y+3	; 0x03
    151c:	3c 81       	ldd	r19, Y+4	; 0x04
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	71 f1       	breq	.+92     	; 0x1580 <DIO_VidPullUp_Pin+0x9e>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	e9 f1       	breq	.+122    	; 0x15a8 <DIO_VidPullUp_Pin+0xc6>
    152e:	4f c0       	rjmp	.+158    	; 0x15ce <DIO_VidPullUp_Pin+0xec>
		{
			case 0: SET_BIT(PORTA,Copy_u8Pin); break;
    1530:	ab e3       	ldi	r26, 0x3B	; 59
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	eb e3       	ldi	r30, 0x3B	; 59
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 2e       	mov	r0, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DIO_VidPullUp_Pin+0x6c>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DIO_VidPullUp_Pin+0x68>
    1552:	84 2b       	or	r24, r20
    1554:	8c 93       	st	X, r24
    1556:	3b c0       	rjmp	.+118    	; 0x15ce <DIO_VidPullUp_Pin+0xec>
			case 1: SET_BIT(PORTB,Copy_u8Pin); break;
    1558:	a8 e3       	ldi	r26, 0x38	; 56
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e8 e3       	ldi	r30, 0x38	; 56
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_VidPullUp_Pin+0x94>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <DIO_VidPullUp_Pin+0x90>
    157a:	84 2b       	or	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	27 c0       	rjmp	.+78     	; 0x15ce <DIO_VidPullUp_Pin+0xec>
			case 2: SET_BIT(PORTC,Copy_u8Pin); break;
    1580:	a5 e3       	ldi	r26, 0x35	; 53
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e5 e3       	ldi	r30, 0x35	; 53
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_VidPullUp_Pin+0xbc>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_VidPullUp_Pin+0xb8>
    15a2:	84 2b       	or	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	13 c0       	rjmp	.+38     	; 0x15ce <DIO_VidPullUp_Pin+0xec>
			case 3: SET_BIT(PORTD,Copy_u8Pin); break;
    15a8:	a2 e3       	ldi	r26, 0x32	; 50
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e2 e3       	ldi	r30, 0x32	; 50
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_VidPullUp_Pin+0xe4>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_VidPullUp_Pin+0xe0>
    15ca:	84 2b       	or	r24, r20
    15cc:	8c 93       	st	X, r24
			
		}
		
	}
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <DIO_VidPullDown_Pin>:
	
	void DIO_VidPullDown_Pin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <DIO_VidPullDown_Pin+0x6>
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <DIO_VidPullDown_Pin+0x8>
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	3c 83       	std	Y+4, r19	; 0x04
    15f4:	2b 83       	std	Y+3, r18	; 0x03
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	91 05       	cpc	r25, r1
    15fe:	59 f1       	breq	.+86     	; 0x1656 <DIO_VidPullDown_Pin+0x7a>
    1600:	2b 81       	ldd	r18, Y+3	; 0x03
    1602:	3c 81       	ldd	r19, Y+4	; 0x04
    1604:	22 30       	cpi	r18, 0x02	; 2
    1606:	31 05       	cpc	r19, r1
    1608:	2c f4       	brge	.+10     	; 0x1614 <DIO_VidPullDown_Pin+0x38>
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	69 f0       	breq	.+26     	; 0x162c <DIO_VidPullDown_Pin+0x50>
    1612:	5f c0       	rjmp	.+190    	; 0x16d2 <DIO_VidPullDown_Pin+0xf6>
    1614:	2b 81       	ldd	r18, Y+3	; 0x03
    1616:	3c 81       	ldd	r19, Y+4	; 0x04
    1618:	22 30       	cpi	r18, 0x02	; 2
    161a:	31 05       	cpc	r19, r1
    161c:	89 f1       	breq	.+98     	; 0x1680 <DIO_VidPullDown_Pin+0xa4>
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	83 30       	cpi	r24, 0x03	; 3
    1624:	91 05       	cpc	r25, r1
    1626:	09 f4       	brne	.+2      	; 0x162a <DIO_VidPullDown_Pin+0x4e>
    1628:	40 c0       	rjmp	.+128    	; 0x16aa <DIO_VidPullDown_Pin+0xce>
    162a:	53 c0       	rjmp	.+166    	; 0x16d2 <DIO_VidPullDown_Pin+0xf6>
		{
			case 0: CLR_BIT(PORTA,Copy_u8Pin); break;
    162c:	ab e3       	ldi	r26, 0x3B	; 59
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	eb e3       	ldi	r30, 0x3B	; 59
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <DIO_VidPullDown_Pin+0x6e>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <DIO_VidPullDown_Pin+0x6a>
    164e:	80 95       	com	r24
    1650:	84 23       	and	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	3e c0       	rjmp	.+124    	; 0x16d2 <DIO_VidPullDown_Pin+0xf6>
			case 1: CLR_BIT(PORTB,Copy_u8Pin); break;
    1656:	a8 e3       	ldi	r26, 0x38	; 56
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e8 e3       	ldi	r30, 0x38	; 56
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_VidPullDown_Pin+0x98>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DIO_VidPullDown_Pin+0x94>
    1678:	80 95       	com	r24
    167a:	84 23       	and	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	29 c0       	rjmp	.+82     	; 0x16d2 <DIO_VidPullDown_Pin+0xf6>
			case 2: CLR_BIT(PORTC,Copy_u8Pin); break;
    1680:	a5 e3       	ldi	r26, 0x35	; 53
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e5 e3       	ldi	r30, 0x35	; 53
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_VidPullDown_Pin+0xc2>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <DIO_VidPullDown_Pin+0xbe>
    16a2:	80 95       	com	r24
    16a4:	84 23       	and	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <DIO_VidPullDown_Pin+0xf6>
			case 3: CLR_BIT(PORTD,Copy_u8Pin); break;
    16aa:	a2 e3       	ldi	r26, 0x32	; 50
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e2 e3       	ldi	r30, 0x32	; 50
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_VidPullDown_Pin+0xec>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <DIO_VidPullDown_Pin+0xe8>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
			
		}
	}
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <DIO_VidSetPort_Value>:

	void DIO_VidSetPort_Value(u8 Copy_u8Port,u8 Copy_u8Value)

	{if (Copy_u8Value==1)
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <DIO_VidSetPort_Value+0x6>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <DIO_VidSetPort_Value+0x8>
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <DIO_VidSetPort_Value+0xa>
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	6a 83       	std	Y+2, r22	; 0x02
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	99 f5       	brne	.+102    	; 0x175e <DIO_VidSetPort_Value+0x7e>
		{switch(Copy_u8Port)
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	3e 83       	std	Y+6, r19	; 0x06
    1700:	2d 83       	std	Y+5, r18	; 0x05
    1702:	8d 81       	ldd	r24, Y+5	; 0x05
    1704:	9e 81       	ldd	r25, Y+6	; 0x06
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	91 05       	cpc	r25, r1
    170a:	d1 f0       	breq	.+52     	; 0x1740 <DIO_VidSetPort_Value+0x60>
    170c:	2d 81       	ldd	r18, Y+5	; 0x05
    170e:	3e 81       	ldd	r19, Y+6	; 0x06
    1710:	22 30       	cpi	r18, 0x02	; 2
    1712:	31 05       	cpc	r19, r1
    1714:	2c f4       	brge	.+10     	; 0x1720 <DIO_VidSetPort_Value+0x40>
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	9e 81       	ldd	r25, Y+6	; 0x06
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	61 f0       	breq	.+24     	; 0x1736 <DIO_VidSetPort_Value+0x56>
    171e:	50 c0       	rjmp	.+160    	; 0x17c0 <DIO_VidSetPort_Value+0xe0>
    1720:	2d 81       	ldd	r18, Y+5	; 0x05
    1722:	3e 81       	ldd	r19, Y+6	; 0x06
    1724:	22 30       	cpi	r18, 0x02	; 2
    1726:	31 05       	cpc	r19, r1
    1728:	81 f0       	breq	.+32     	; 0x174a <DIO_VidSetPort_Value+0x6a>
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	83 30       	cpi	r24, 0x03	; 3
    1730:	91 05       	cpc	r25, r1
    1732:	81 f0       	breq	.+32     	; 0x1754 <DIO_VidSetPort_Value+0x74>
    1734:	45 c0       	rjmp	.+138    	; 0x17c0 <DIO_VidSetPort_Value+0xe0>
				{
					case 0: SET_PORT(PORTA); break;
    1736:	eb e3       	ldi	r30, 0x3B	; 59
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	8f ef       	ldi	r24, 0xFF	; 255
    173c:	80 83       	st	Z, r24
    173e:	40 c0       	rjmp	.+128    	; 0x17c0 <DIO_VidSetPort_Value+0xe0>
					case 1: SET_PORT(PORTB); break;
    1740:	e8 e3       	ldi	r30, 0x38	; 56
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	8f ef       	ldi	r24, 0xFF	; 255
    1746:	80 83       	st	Z, r24
    1748:	3b c0       	rjmp	.+118    	; 0x17c0 <DIO_VidSetPort_Value+0xe0>
					case 2: SET_PORT(PORTC); break;
    174a:	e5 e3       	ldi	r30, 0x35	; 53
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	8f ef       	ldi	r24, 0xFF	; 255
    1750:	80 83       	st	Z, r24
    1752:	36 c0       	rjmp	.+108    	; 0x17c0 <DIO_VidSetPort_Value+0xe0>
					case 3: SET_PORT(PORTD); break;
    1754:	e2 e3       	ldi	r30, 0x32	; 50
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	8f ef       	ldi	r24, 0xFF	; 255
    175a:	80 83       	st	Z, r24
    175c:	31 c0       	rjmp	.+98     	; 0x17c0 <DIO_VidSetPort_Value+0xe0>

				}
		}
	else if(Copy_u8Value==0)
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	88 23       	and	r24, r24
    1762:	71 f5       	brne	.+92     	; 0x17c0 <DIO_VidSetPort_Value+0xe0>
	{

		switch(Copy_u8Port)
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	3c 83       	std	Y+4, r19	; 0x04
    176c:	2b 83       	std	Y+3, r18	; 0x03
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	91 05       	cpc	r25, r1
    1776:	c9 f0       	breq	.+50     	; 0x17aa <DIO_VidSetPort_Value+0xca>
    1778:	2b 81       	ldd	r18, Y+3	; 0x03
    177a:	3c 81       	ldd	r19, Y+4	; 0x04
    177c:	22 30       	cpi	r18, 0x02	; 2
    177e:	31 05       	cpc	r19, r1
    1780:	2c f4       	brge	.+10     	; 0x178c <DIO_VidSetPort_Value+0xac>
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	61 f0       	breq	.+24     	; 0x17a2 <DIO_VidSetPort_Value+0xc2>
    178a:	1a c0       	rjmp	.+52     	; 0x17c0 <DIO_VidSetPort_Value+0xe0>
    178c:	2b 81       	ldd	r18, Y+3	; 0x03
    178e:	3c 81       	ldd	r19, Y+4	; 0x04
    1790:	22 30       	cpi	r18, 0x02	; 2
    1792:	31 05       	cpc	r19, r1
    1794:	71 f0       	breq	.+28     	; 0x17b2 <DIO_VidSetPort_Value+0xd2>
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	83 30       	cpi	r24, 0x03	; 3
    179c:	91 05       	cpc	r25, r1
    179e:	69 f0       	breq	.+26     	; 0x17ba <DIO_VidSetPort_Value+0xda>
    17a0:	0f c0       	rjmp	.+30     	; 0x17c0 <DIO_VidSetPort_Value+0xe0>
						{
							case 0: CLR_PORT(PORTA); break;
    17a2:	eb e3       	ldi	r30, 0x3B	; 59
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	10 82       	st	Z, r1
    17a8:	0b c0       	rjmp	.+22     	; 0x17c0 <DIO_VidSetPort_Value+0xe0>
							case 1: CLR_PORT(PORTB); break;
    17aa:	e8 e3       	ldi	r30, 0x38	; 56
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	10 82       	st	Z, r1
    17b0:	07 c0       	rjmp	.+14     	; 0x17c0 <DIO_VidSetPort_Value+0xe0>
							case 2: CLR_PORT(PORTC); break;
    17b2:	e5 e3       	ldi	r30, 0x35	; 53
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	10 82       	st	Z, r1
    17b8:	03 c0       	rjmp	.+6      	; 0x17c0 <DIO_VidSetPort_Value+0xe0>
							case 3: CLR_PORT(PORTD); break;
    17ba:	e2 e3       	ldi	r30, 0x32	; 50
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	10 82       	st	Z, r1

						}
	}
	}
    17c0:	26 96       	adiw	r28, 0x06	; 6
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <I2C_send_start>:
#include "DIO_Interface.h"
#include"I2C_PRIVATE.h"
#include "I2C_config.h"
#include "avr/delay.h"
 u8 I2C_send_start(void )
 {
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	0f 92       	push	r0
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
	 // start bit condition
	 TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    17dc:	e6 e5       	ldi	r30, 0x56	; 86
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	84 ea       	ldi	r24, 0xA4	; 164
    17e2:	80 83       	st	Z, r24
	 while(GET_BIT(TWCR,TWINT)==0);  // wait the flag
    17e4:	e6 e5       	ldi	r30, 0x56	; 86
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	88 23       	and	r24, r24
    17ec:	dc f7       	brge	.-10     	; 0x17e4 <I2C_send_start+0x12>
	 if ((TWSR & 0xF8) != 0x08){return 0;}
    17ee:	e1 e2       	ldi	r30, 0x21	; 33
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	88 2f       	mov	r24, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	88 7f       	andi	r24, 0xF8	; 248
    17fa:	90 70       	andi	r25, 0x00	; 0
    17fc:	88 30       	cpi	r24, 0x08	; 8
    17fe:	91 05       	cpc	r25, r1
    1800:	11 f0       	breq	.+4      	; 0x1806 <I2C_send_start+0x34>
    1802:	19 82       	std	Y+1, r1	; 0x01
    1804:	02 c0       	rjmp	.+4      	; 0x180a <I2C_send_start+0x38>
	 else{return 1;}
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	89 81       	ldd	r24, Y+1	; 0x01
 }
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <I2C_select_slave>:
 u8 I2C_select_slave(u8 Copy_slave_add,u8 Copy_W_R)
 {u8 status=0;
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	00 d0       	rcall	.+0      	; 0x181a <I2C_select_slave+0x6>
    181a:	00 d0       	rcall	.+0      	; 0x181c <I2C_select_slave+0x8>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	8a 83       	std	Y+2, r24	; 0x02
    1822:	6b 83       	std	Y+3, r22	; 0x03
    1824:	19 82       	std	Y+1, r1	; 0x01
	 if (Copy_W_R==0)         // write
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	88 23       	and	r24, r24
    182a:	99 f4       	brne	.+38     	; 0x1852 <I2C_select_slave+0x3e>
	 {TWDR=(Copy_slave_add<<1);
    182c:	e3 e2       	ldi	r30, 0x23	; 35
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	88 0f       	add	r24, r24
    1834:	80 83       	st	Z, r24
	  TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1836:	e6 e5       	ldi	r30, 0x56	; 86
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	84 ec       	ldi	r24, 0xC4	; 196
    183c:	80 83       	st	Z, r24
	  while(GET_BIT(TWCR,TWINT)==0);  // wait the flag
    183e:	e6 e5       	ldi	r30, 0x56	; 86
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	88 23       	and	r24, r24
    1846:	dc f7       	brge	.-10     	; 0x183e <I2C_select_slave+0x2a>
	  if ((TWSR & 0xF8) != 18) {status= 0;}   // no ACK
    1848:	e1 e2       	ldi	r30, 0x21	; 33
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	19 82       	std	Y+1, r1	; 0x01
    1850:	23 c0       	rjmp	.+70     	; 0x1898 <I2C_select_slave+0x84>
	  else {status= 1;}
	 }
	 else if(Copy_W_R==1)   // read
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	01 f5       	brne	.+64     	; 0x1898 <I2C_select_slave+0x84>
	 {TWDR=(Copy_slave_add<<1)|1;
    1858:	e3 e2       	ldi	r30, 0x23	; 35
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	81 60       	ori	r24, 0x01	; 1
    1868:	80 83       	st	Z, r24
	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    186a:	e6 e5       	ldi	r30, 0x56	; 86
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	84 ec       	ldi	r24, 0xC4	; 196
    1870:	80 83       	st	Z, r24
	 while(GET_BIT(TWCR,7)==0);  // wait the flag
    1872:	e6 e5       	ldi	r30, 0x56	; 86
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	88 23       	and	r24, r24
    187a:	dc f7       	brge	.-10     	; 0x1872 <I2C_select_slave+0x5e>
	 if ((TWSR & 0xF8) != 40) {status= 0;}   // no ACK
    187c:	e1 e2       	ldi	r30, 0x21	; 33
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	88 7f       	andi	r24, 0xF8	; 248
    1888:	90 70       	andi	r25, 0x00	; 0
    188a:	88 32       	cpi	r24, 0x28	; 40
    188c:	91 05       	cpc	r25, r1
    188e:	11 f0       	breq	.+4      	; 0x1894 <I2C_select_slave+0x80>
    1890:	19 82       	std	Y+1, r1	; 0x01
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <I2C_select_slave+0x84>
	 else {status= 1;}
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	89 83       	std	Y+1, r24	; 0x01
	 }
	 return status;
    1898:	89 81       	ldd	r24, Y+1	; 0x01
 }
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <I2C_Master_send_data>:

 u8 I2C_Master_send_data(u8 Copy_data)
 {
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <I2C_Master_send_data+0x6>
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01

	 TWDR =Copy_data;
    18b4:	e3 e2       	ldi	r30, 0x23	; 35
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	80 83       	st	Z, r24
	 TWCR=(1<<TWINT)|(1<<TWEN);
    18bc:	e6 e5       	ldi	r30, 0x56	; 86
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	84 e8       	ldi	r24, 0x84	; 132
    18c2:	80 83       	st	Z, r24
	 while (GET_BIT(TWCR,TWINT)==0);        // wait flag
    18c4:	e6 e5       	ldi	r30, 0x56	; 86
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	88 23       	and	r24, r24
    18cc:	dc f7       	brge	.-10     	; 0x18c4 <I2C_Master_send_data+0x1c>
	 if ((TWSR & 0xF8) != 28){return 0;}
    18ce:	e1 e2       	ldi	r30, 0x21	; 33
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	80 e0       	ldi	r24, 0x00	; 0
	 else{return 1;}

 }
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <I2C_Slave_recive_data>:


 u8 I2C_Slave_recive_data(u8 *status)
  {u8 Temp=0;
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <I2C_Slave_recive_data+0x6>
    18e6:	0f 92       	push	r0
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	9b 83       	std	Y+3, r25	; 0x03
    18ee:	8a 83       	std	Y+2, r24	; 0x02
    18f0:	19 82       	std	Y+1, r1	; 0x01


  	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA)  ;
    18f2:	e6 e5       	ldi	r30, 0x56	; 86
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	84 ec       	ldi	r24, 0xC4	; 196
    18f8:	80 83       	st	Z, r24
  	 while (GET_BIT(TWCR,TWINT)==0);  // wait flag
    18fa:	e6 e5       	ldi	r30, 0x56	; 86
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	88 23       	and	r24, r24
    1902:	dc f7       	brge	.-10     	; 0x18fa <I2C_Slave_recive_data+0x1a>

  	 if((TWSR & 0xf8) == 0x60)   // status =received address
    1904:	e1 e2       	ldi	r30, 0x21	; 33
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	88 2f       	mov	r24, r24
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	88 7f       	andi	r24, 0xF8	; 248
    1910:	90 70       	andi	r25, 0x00	; 0
    1912:	80 36       	cpi	r24, 0x60	; 96
    1914:	91 05       	cpc	r25, r1
    1916:	71 f4       	brne	.+28     	; 0x1934 <I2C_Slave_recive_data+0x54>
  	 {
  		 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA)  ;  //start again to skip the address byte
    1918:	e6 e5       	ldi	r30, 0x56	; 86
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	84 ec       	ldi	r24, 0xC4	; 196
    191e:	80 83       	st	Z, r24
  		 while (GET_BIT(TWCR,TWINT)==0);  // wait flag
    1920:	e6 e5       	ldi	r30, 0x56	; 86
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	88 23       	and	r24, r24
    1928:	dc f7       	brge	.-10     	; 0x1920 <I2C_Slave_recive_data+0x40>
  		 Temp=TWDR;
    192a:	e3 e2       	ldi	r30, 0x23	; 35
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	04 c0       	rjmp	.+8      	; 0x193c <I2C_Slave_recive_data+0x5c>
  	 }
  	 else
  	 {Temp=TWDR;}
    1934:	e3 e2       	ldi	r30, 0x23	; 35
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	89 83       	std	Y+1, r24	; 0x01

  	if (status!= NULL)
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	9b 81       	ldd	r25, Y+3	; 0x03
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	91 f0       	breq	.+36     	; 0x1968 <I2C_Slave_recive_data+0x88>
  	{if ((TWSR & 0xF8) != 80){*status= 0;}
    1944:	e1 e2       	ldi	r30, 0x21	; 33
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	88 7f       	andi	r24, 0xF8	; 248
    1950:	90 70       	andi	r25, 0x00	; 0
    1952:	80 35       	cpi	r24, 0x50	; 80
    1954:	91 05       	cpc	r25, r1
    1956:	21 f0       	breq	.+8      	; 0x1960 <I2C_Slave_recive_data+0x80>
    1958:	ea 81       	ldd	r30, Y+2	; 0x02
    195a:	fb 81       	ldd	r31, Y+3	; 0x03
    195c:	10 82       	st	Z, r1
    195e:	04 c0       	rjmp	.+8      	; 0x1968 <I2C_Slave_recive_data+0x88>
  	else{*status= 1;}
    1960:	ea 81       	ldd	r30, Y+2	; 0x02
    1962:	fb 81       	ldd	r31, Y+3	; 0x03
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	80 83       	st	Z, r24
  	}
  	return Temp;
    1968:	89 81       	ldd	r24, Y+1	; 0x01
  }
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <I2C_stop>:
void I2C_stop(void )
{
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    197e:	e6 e5       	ldi	r30, 0x56	; 86
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	84 e9       	ldi	r24, 0x94	; 148
    1984:	80 83       	st	Z, r24
}
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <I2C_master_init>:

void I2C_master_init(void )
{
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
	TWSR=(0<<TWPS0)|(0<<TWPS1);     //prescaler
    1994:	e1 e2       	ldi	r30, 0x21	; 33
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	10 82       	st	Z, r1
	TWBR=32;		  // bit rate
    199a:	e0 e2       	ldi	r30, 0x20	; 32
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 e2       	ldi	r24, 0x20	; 32
    19a0:	80 83       	st	Z, r24
	TWAR=10;       /// any address except 0000 or 1111
    19a2:	e2 e2       	ldi	r30, 0x22	; 34
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	8a e0       	ldi	r24, 0x0A	; 10
    19a8:	80 83       	st	Z, r24
}
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <I2C_slave_init>:


void I2C_slave_init(void )
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
	TWAR=5<<1;                     /// 0000 or 1111   address
    19b8:	e2 e2       	ldi	r30, 0x22	; 34
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	8a e0       	ldi	r24, 0x0A	; 10
    19be:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    19c0:	e6 e5       	ldi	r30, 0x56	; 86
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	84 ec       	ldi	r24, 0xC4	; 196
    19c6:	80 83       	st	Z, r24

}
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <main>:
#include "I2C_PRIVATE.h"
#include "LCD_interface.h"
#include "LCD_I2C_Interface.h"

int main (void)
{
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	e7 97       	sbiw	r28, 0x37	; 55
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61

	u8 arr[8]={0x00,0x1B,0x1F,0x1F,0x0E,0x04,0x04,0x00};
    19e2:	ce 01       	movw	r24, r28
    19e4:	8b 96       	adiw	r24, 0x2b	; 43
    19e6:	9c ab       	std	Y+52, r25	; 0x34
    19e8:	8b ab       	std	Y+51, r24	; 0x33
    19ea:	e8 e6       	ldi	r30, 0x68	; 104
    19ec:	f1 e0       	ldi	r31, 0x01	; 1
    19ee:	fe ab       	std	Y+54, r31	; 0x36
    19f0:	ed ab       	std	Y+53, r30	; 0x35
    19f2:	f8 e0       	ldi	r31, 0x08	; 8
    19f4:	ff ab       	std	Y+55, r31	; 0x37
    19f6:	ed a9       	ldd	r30, Y+53	; 0x35
    19f8:	fe a9       	ldd	r31, Y+54	; 0x36
    19fa:	00 80       	ld	r0, Z
    19fc:	8d a9       	ldd	r24, Y+53	; 0x35
    19fe:	9e a9       	ldd	r25, Y+54	; 0x36
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	9e ab       	std	Y+54, r25	; 0x36
    1a04:	8d ab       	std	Y+53, r24	; 0x35
    1a06:	eb a9       	ldd	r30, Y+51	; 0x33
    1a08:	fc a9       	ldd	r31, Y+52	; 0x34
    1a0a:	00 82       	st	Z, r0
    1a0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	9c ab       	std	Y+52, r25	; 0x34
    1a14:	8b ab       	std	Y+51, r24	; 0x33
    1a16:	9f a9       	ldd	r25, Y+55	; 0x37
    1a18:	91 50       	subi	r25, 0x01	; 1
    1a1a:	9f ab       	std	Y+55, r25	; 0x37
    1a1c:	ef a9       	ldd	r30, Y+55	; 0x37
    1a1e:	ee 23       	and	r30, r30
    1a20:	51 f7       	brne	.-44     	; 0x19f6 <main+0x28>

	LCD_I2C_init();
    1a22:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <LCD_I2C_init>
	LCD_I2C_SendFloat(1254.1245,5);
    1a26:	6c ef       	ldi	r22, 0xFC	; 252
    1a28:	73 ec       	ldi	r23, 0xC3	; 195
    1a2a:	8c e9       	ldi	r24, 0x9C	; 156
    1a2c:	94 e4       	ldi	r25, 0x44	; 68
    1a2e:	45 e0       	ldi	r20, 0x05	; 5
    1a30:	0e 94 13 19 	call	0x3226	; 0x3226 <LCD_I2C_SendFloat>
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	aa e7       	ldi	r26, 0x7A	; 122
    1a3a:	b4 e4       	ldi	r27, 0x44	; 68
    1a3c:	8f a3       	std	Y+39, r24	; 0x27
    1a3e:	98 a7       	std	Y+40, r25	; 0x28
    1a40:	a9 a7       	std	Y+41, r26	; 0x29
    1a42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a44:	6f a1       	ldd	r22, Y+39	; 0x27
    1a46:	78 a5       	ldd	r23, Y+40	; 0x28
    1a48:	89 a5       	ldd	r24, Y+41	; 0x29
    1a4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	4a e7       	ldi	r20, 0x7A	; 122
    1a52:	55 e4       	ldi	r21, 0x45	; 69
    1a54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	8b a3       	std	Y+35, r24	; 0x23
    1a5e:	9c a3       	std	Y+36, r25	; 0x24
    1a60:	ad a3       	std	Y+37, r26	; 0x25
    1a62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a64:	6b a1       	ldd	r22, Y+35	; 0x23
    1a66:	7c a1       	ldd	r23, Y+36	; 0x24
    1a68:	8d a1       	ldd	r24, Y+37	; 0x25
    1a6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e8       	ldi	r20, 0x80	; 128
    1a72:	5f e3       	ldi	r21, 0x3F	; 63
    1a74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a78:	88 23       	and	r24, r24
    1a7a:	2c f4       	brge	.+10     	; 0x1a86 <main+0xb8>
		__ticks = 1;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	9a a3       	std	Y+34, r25	; 0x22
    1a82:	89 a3       	std	Y+33, r24	; 0x21
    1a84:	3f c0       	rjmp	.+126    	; 0x1b04 <main+0x136>
	else if (__tmp > 65535)
    1a86:	6b a1       	ldd	r22, Y+35	; 0x23
    1a88:	7c a1       	ldd	r23, Y+36	; 0x24
    1a8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	3f ef       	ldi	r19, 0xFF	; 255
    1a92:	4f e7       	ldi	r20, 0x7F	; 127
    1a94:	57 e4       	ldi	r21, 0x47	; 71
    1a96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a9a:	18 16       	cp	r1, r24
    1a9c:	4c f5       	brge	.+82     	; 0x1af0 <main+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9e:	6f a1       	ldd	r22, Y+39	; 0x27
    1aa0:	78 a5       	ldd	r23, Y+40	; 0x28
    1aa2:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e2       	ldi	r20, 0x20	; 32
    1aac:	51 e4       	ldi	r21, 0x41	; 65
    1aae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9a a3       	std	Y+34, r25	; 0x22
    1ac4:	89 a3       	std	Y+33, r24	; 0x21
    1ac6:	0f c0       	rjmp	.+30     	; 0x1ae6 <main+0x118>
    1ac8:	80 e9       	ldi	r24, 0x90	; 144
    1aca:	91 e0       	ldi	r25, 0x01	; 1
    1acc:	98 a3       	std	Y+32, r25	; 0x20
    1ace:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ad0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ad2:	98 a1       	ldd	r25, Y+32	; 0x20
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <main+0x106>
    1ad8:	98 a3       	std	Y+32, r25	; 0x20
    1ada:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1adc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ade:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	9a a3       	std	Y+34, r25	; 0x22
    1ae4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	69 f7       	brne	.-38     	; 0x1ac8 <main+0xfa>
    1aee:	14 c0       	rjmp	.+40     	; 0x1b18 <main+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af0:	6b a1       	ldd	r22, Y+35	; 0x23
    1af2:	7c a1       	ldd	r23, Y+36	; 0x24
    1af4:	8d a1       	ldd	r24, Y+37	; 0x25
    1af6:	9e a1       	ldd	r25, Y+38	; 0x26
    1af8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9a a3       	std	Y+34, r25	; 0x22
    1b02:	89 a3       	std	Y+33, r24	; 0x21
    1b04:	89 a1       	ldd	r24, Y+33	; 0x21
    1b06:	9a a1       	ldd	r25, Y+34	; 0x22
    1b08:	9e 8f       	std	Y+30, r25	; 0x1e
    1b0a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <main+0x142>
    1b14:	9e 8f       	std	Y+30, r25	; 0x1e
    1b16:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	LCD_I2C_SendCommand(LCD_COMMAND_CLEARDISP);
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_I2C_SendCommand>
	LCD_I2C_SendFloat(-10.5,1);
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	88 e2       	ldi	r24, 0x28	; 40
    1b24:	91 ec       	ldi	r25, 0xC1	; 193
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	0e 94 13 19 	call	0x3226	; 0x3226 <LCD_I2C_SendFloat>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	aa e7       	ldi	r26, 0x7A	; 122
    1b32:	b4 e4       	ldi	r27, 0x44	; 68
    1b34:	89 8f       	std	Y+25, r24	; 0x19
    1b36:	9a 8f       	std	Y+26, r25	; 0x1a
    1b38:	ab 8f       	std	Y+27, r26	; 0x1b
    1b3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a e7       	ldi	r20, 0x7A	; 122
    1b4a:	55 e4       	ldi	r21, 0x45	; 69
    1b4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	8d 8b       	std	Y+21, r24	; 0x15
    1b56:	9e 8b       	std	Y+22, r25	; 0x16
    1b58:	af 8b       	std	Y+23, r26	; 0x17
    1b5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b60:	8f 89       	ldd	r24, Y+23	; 0x17
    1b62:	98 8d       	ldd	r25, Y+24	; 0x18
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b70:	88 23       	and	r24, r24
    1b72:	2c f4       	brge	.+10     	; 0x1b7e <main+0x1b0>
		__ticks = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9c 8b       	std	Y+20, r25	; 0x14
    1b7a:	8b 8b       	std	Y+19, r24	; 0x13
    1b7c:	3f c0       	rjmp	.+126    	; 0x1bfc <main+0x22e>
	else if (__tmp > 65535)
    1b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b80:	7e 89       	ldd	r23, Y+22	; 0x16
    1b82:	8f 89       	ldd	r24, Y+23	; 0x17
    1b84:	98 8d       	ldd	r25, Y+24	; 0x18
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	4f e7       	ldi	r20, 0x7F	; 127
    1b8c:	57 e4       	ldi	r21, 0x47	; 71
    1b8e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	4c f5       	brge	.+82     	; 0x1be8 <main+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b96:	69 8d       	ldd	r22, Y+25	; 0x19
    1b98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e2       	ldi	r20, 0x20	; 32
    1ba4:	51 e4       	ldi	r21, 0x41	; 65
    1ba6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9c 8b       	std	Y+20, r25	; 0x14
    1bbc:	8b 8b       	std	Y+19, r24	; 0x13
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <main+0x210>
    1bc0:	80 e9       	ldi	r24, 0x90	; 144
    1bc2:	91 e0       	ldi	r25, 0x01	; 1
    1bc4:	9a 8b       	std	Y+18, r25	; 0x12
    1bc6:	89 8b       	std	Y+17, r24	; 0x11
    1bc8:	89 89       	ldd	r24, Y+17	; 0x11
    1bca:	9a 89       	ldd	r25, Y+18	; 0x12
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <main+0x1fe>
    1bd0:	9a 8b       	std	Y+18, r25	; 0x12
    1bd2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	9c 8b       	std	Y+20, r25	; 0x14
    1bdc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bde:	8b 89       	ldd	r24, Y+19	; 0x13
    1be0:	9c 89       	ldd	r25, Y+20	; 0x14
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	69 f7       	brne	.-38     	; 0x1bc0 <main+0x1f2>
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <main+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bea:	7e 89       	ldd	r23, Y+22	; 0x16
    1bec:	8f 89       	ldd	r24, Y+23	; 0x17
    1bee:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	9c 8b       	std	Y+20, r25	; 0x14
    1bfa:	8b 8b       	std	Y+19, r24	; 0x13
    1bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1c00:	98 8b       	std	Y+16, r25	; 0x10
    1c02:	8f 87       	std	Y+15, r24	; 0x0f
    1c04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c06:	98 89       	ldd	r25, Y+16	; 0x10
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <main+0x23a>
    1c0c:	98 8b       	std	Y+16, r25	; 0x10
    1c0e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_I2C_SendCommand(LCD_COMMAND_CLEARDISP);
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_I2C_SendCommand>
	LCD_I2C_SendFloat(32.54,2);
    1c16:	66 ef       	ldi	r22, 0xF6	; 246
    1c18:	78 e2       	ldi	r23, 0x28	; 40
    1c1a:	82 e0       	ldi	r24, 0x02	; 2
    1c1c:	92 e4       	ldi	r25, 0x42	; 66
    1c1e:	42 e0       	ldi	r20, 0x02	; 2
    1c20:	0e 94 13 19 	call	0x3226	; 0x3226 <LCD_I2C_SendFloat>
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	aa e7       	ldi	r26, 0x7A	; 122
    1c2a:	b4 e4       	ldi	r27, 0x44	; 68
    1c2c:	8b 87       	std	Y+11, r24	; 0x0b
    1c2e:	9c 87       	std	Y+12, r25	; 0x0c
    1c30:	ad 87       	std	Y+13, r26	; 0x0d
    1c32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	4a e7       	ldi	r20, 0x7A	; 122
    1c42:	55 e4       	ldi	r21, 0x45	; 69
    1c44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	8f 83       	std	Y+7, r24	; 0x07
    1c4e:	98 87       	std	Y+8, r25	; 0x08
    1c50:	a9 87       	std	Y+9, r26	; 0x09
    1c52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c54:	6f 81       	ldd	r22, Y+7	; 0x07
    1c56:	78 85       	ldd	r23, Y+8	; 0x08
    1c58:	89 85       	ldd	r24, Y+9	; 0x09
    1c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e8       	ldi	r20, 0x80	; 128
    1c62:	5f e3       	ldi	r21, 0x3F	; 63
    1c64:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c68:	88 23       	and	r24, r24
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <main+0x2a8>
		__ticks = 1;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	3f c0       	rjmp	.+126    	; 0x1cf4 <main+0x326>
	else if (__tmp > 65535)
    1c76:	6f 81       	ldd	r22, Y+7	; 0x07
    1c78:	78 85       	ldd	r23, Y+8	; 0x08
    1c7a:	89 85       	ldd	r24, Y+9	; 0x09
    1c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	3f ef       	ldi	r19, 0xFF	; 255
    1c82:	4f e7       	ldi	r20, 0x7F	; 127
    1c84:	57 e4       	ldi	r21, 0x47	; 71
    1c86:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c8a:	18 16       	cp	r1, r24
    1c8c:	4c f5       	brge	.+82     	; 0x1ce0 <main+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e2       	ldi	r20, 0x20	; 32
    1c9c:	51 e4       	ldi	r21, 0x41	; 65
    1c9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <main+0x308>
    1cb8:	80 e9       	ldi	r24, 0x90	; 144
    1cba:	91 e0       	ldi	r25, 0x01	; 1
    1cbc:	9c 83       	std	Y+4, r25	; 0x04
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <main+0x2f6>
    1cc8:	9c 83       	std	Y+4, r25	; 0x04
    1cca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cce:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	9e 83       	std	Y+6, r25	; 0x06
    1cd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	69 f7       	brne	.-38     	; 0x1cb8 <main+0x2ea>
    1cde:	14 c0       	rjmp	.+40     	; 0x1d08 <main+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce2:	78 85       	ldd	r23, Y+8	; 0x08
    1ce4:	89 85       	ldd	r24, Y+9	; 0x09
    1ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	9e 83       	std	Y+6, r25	; 0x06
    1cf2:	8d 83       	std	Y+5, r24	; 0x05
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <main+0x332>
    1d04:	9a 83       	std	Y+2, r25	; 0x02
    1d06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_I2C_SendCommand(LCD_COMMAND_CLEARDISP);
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_I2C_SendCommand>
	LCD_I2C_WriteInCGRAM(arr,0);
    1d0e:	ce 01       	movw	r24, r28
    1d10:	8b 96       	adiw	r24, 0x2b	; 43
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <LCD_I2C_WriteInCGRAM>
	LCD_I2C_SendData(0);
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <LCD_I2C_SendData>
    1d1e:	ff cf       	rjmp	.-2      	; 0x1d1e <main+0x350>

00001d20 <LCD_I2C_init>:
#define LCD_I2C_Command 			5
#define LCD_I2C_Data 				6
#define LCD_I2C_CGRAMData			7

void LCD_I2C_init()
{
    1d20:	0f 93       	push	r16
    1d22:	1f 93       	push	r17
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	c0 58       	subi	r28, 0x80	; 128
    1d2e:	d0 40       	sbci	r29, 0x00	; 0
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61

	u8 command1 = (0x04 | (LCD_ENTRYMODE_ID<<1) | (LCD_ENTRYMODE_S<<0));
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e0 58       	subi	r30, 0x80	; 128
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	86 e0       	ldi	r24, 0x06	; 6
    1d42:	80 83       	st	Z, r24
	u8 command2 = (0x08 | (LCD_DISPLAY_C<<1) | (LCD_DISPLAY_D<<2)  | (LCD_DISPLAY_B<<0));
    1d44:	fe 01       	movw	r30, r28
    1d46:	e1 58       	subi	r30, 0x81	; 129
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	8c e0       	ldi	r24, 0x0C	; 12
    1d4c:	80 83       	st	Z, r24
    1d4e:	fe 01       	movw	r30, r28
    1d50:	e5 58       	subi	r30, 0x85	; 133
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e2       	ldi	r26, 0x20	; 32
    1d5a:	b2 e4       	ldi	r27, 0x42	; 66
    1d5c:	80 83       	st	Z, r24
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	a2 83       	std	Z+2, r26	; 0x02
    1d62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d64:	8e 01       	movw	r16, r28
    1d66:	09 58       	subi	r16, 0x89	; 137
    1d68:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	e5 58       	subi	r30, 0x85	; 133
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	60 81       	ld	r22, Z
    1d72:	71 81       	ldd	r23, Z+1	; 0x01
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	4a e7       	ldi	r20, 0x7A	; 122
    1d7e:	55 e4       	ldi	r21, 0x45	; 69
    1d80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	f8 01       	movw	r30, r16
    1d8a:	80 83       	st	Z, r24
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	a2 83       	std	Z+2, r26	; 0x02
    1d90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d92:	fe 01       	movw	r30, r28
    1d94:	e9 58       	subi	r30, 0x89	; 137
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	60 81       	ld	r22, Z
    1d9a:	71 81       	ldd	r23, Z+1	; 0x01
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	44 f4       	brge	.+16     	; 0x1dc0 <LCD_I2C_init+0xa0>
		__ticks = 1;
    1db0:	fe 01       	movw	r30, r28
    1db2:	eb 58       	subi	r30, 0x8B	; 139
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	91 83       	std	Z+1, r25	; 0x01
    1dbc:	80 83       	st	Z, r24
    1dbe:	64 c0       	rjmp	.+200    	; 0x1e88 <LCD_I2C_init+0x168>
	else if (__tmp > 65535)
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e9 58       	subi	r30, 0x89	; 137
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	60 81       	ld	r22, Z
    1dc8:	71 81       	ldd	r23, Z+1	; 0x01
    1dca:	82 81       	ldd	r24, Z+2	; 0x02
    1dcc:	93 81       	ldd	r25, Z+3	; 0x03
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	3f ef       	ldi	r19, 0xFF	; 255
    1dd2:	4f e7       	ldi	r20, 0x7F	; 127
    1dd4:	57 e4       	ldi	r21, 0x47	; 71
    1dd6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dda:	18 16       	cp	r1, r24
    1ddc:	0c f0       	brlt	.+2      	; 0x1de0 <LCD_I2C_init+0xc0>
    1dde:	43 c0       	rjmp	.+134    	; 0x1e66 <LCD_I2C_init+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de0:	fe 01       	movw	r30, r28
    1de2:	e5 58       	subi	r30, 0x85	; 133
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e2       	ldi	r20, 0x20	; 32
    1df4:	51 e4       	ldi	r21, 0x41	; 65
    1df6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	8e 01       	movw	r16, r28
    1e00:	0b 58       	subi	r16, 0x8B	; 139
    1e02:	1f 4f       	sbci	r17, 0xFF	; 255
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	f8 01       	movw	r30, r16
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	80 83       	st	Z, r24
    1e16:	1f c0       	rjmp	.+62     	; 0x1e56 <LCD_I2C_init+0x136>
    1e18:	fe 01       	movw	r30, r28
    1e1a:	ed 58       	subi	r30, 0x8D	; 141
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 e9       	ldi	r24, 0x90	; 144
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	80 83       	st	Z, r24
    1e26:	fe 01       	movw	r30, r28
    1e28:	ed 58       	subi	r30, 0x8D	; 141
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_I2C_init+0x110>
    1e34:	fe 01       	movw	r30, r28
    1e36:	ed 58       	subi	r30, 0x8D	; 141
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3e:	de 01       	movw	r26, r28
    1e40:	ab 58       	subi	r26, 0x8B	; 139
    1e42:	bf 4f       	sbci	r27, 0xFF	; 255
    1e44:	fe 01       	movw	r30, r28
    1e46:	eb 58       	subi	r30, 0x8B	; 139
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 81       	ld	r24, Z
    1e4c:	91 81       	ldd	r25, Z+1	; 0x01
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	11 96       	adiw	r26, 0x01	; 1
    1e52:	9c 93       	st	X, r25
    1e54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e56:	fe 01       	movw	r30, r28
    1e58:	eb 58       	subi	r30, 0x8B	; 139
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	80 81       	ld	r24, Z
    1e5e:	91 81       	ldd	r25, Z+1	; 0x01
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	d1 f6       	brne	.-76     	; 0x1e18 <LCD_I2C_init+0xf8>
    1e64:	27 c0       	rjmp	.+78     	; 0x1eb4 <LCD_I2C_init+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e66:	8e 01       	movw	r16, r28
    1e68:	0b 58       	subi	r16, 0x8B	; 139
    1e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e9 58       	subi	r30, 0x89	; 137
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	60 81       	ld	r22, Z
    1e74:	71 81       	ldd	r23, Z+1	; 0x01
    1e76:	82 81       	ldd	r24, Z+2	; 0x02
    1e78:	93 81       	ldd	r25, Z+3	; 0x03
    1e7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	f8 01       	movw	r30, r16
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	80 83       	st	Z, r24
    1e88:	de 01       	movw	r26, r28
    1e8a:	af 58       	subi	r26, 0x8F	; 143
    1e8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e8e:	fe 01       	movw	r30, r28
    1e90:	eb 58       	subi	r30, 0x8B	; 139
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	80 81       	ld	r24, Z
    1e96:	91 81       	ldd	r25, Z+1	; 0x01
    1e98:	8d 93       	st	X+, r24
    1e9a:	9c 93       	st	X, r25
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	ef 58       	subi	r30, 0x8F	; 143
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 81       	ld	r24, Z
    1ea4:	91 81       	ldd	r25, Z+1	; 0x01
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	f1 f7       	brne	.-4      	; 0x1ea6 <LCD_I2C_init+0x186>
    1eaa:	fe 01       	movw	r30, r28
    1eac:	ef 58       	subi	r30, 0x8F	; 143
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	91 83       	std	Z+1, r25	; 0x01
    1eb2:	80 83       	st	Z, r24
	_delay_ms(40);
	I2C_master_init();
    1eb4:	0e 94 c6 0c 	call	0x198c	; 0x198c <I2C_master_init>
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e3 59       	subi	r30, 0x93	; 147
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a0 ef       	ldi	r26, 0xF0	; 240
    1ec4:	b2 e4       	ldi	r27, 0x42	; 66
    1ec6:	80 83       	st	Z, r24
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	a2 83       	std	Z+2, r26	; 0x02
    1ecc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	8e 01       	movw	r16, r28
    1ed0:	07 59       	subi	r16, 0x97	; 151
    1ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	e3 59       	subi	r30, 0x93	; 147
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	60 81       	ld	r22, Z
    1edc:	71 81       	ldd	r23, Z+1	; 0x01
    1ede:	82 81       	ldd	r24, Z+2	; 0x02
    1ee0:	93 81       	ldd	r25, Z+3	; 0x03
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	4a e7       	ldi	r20, 0x7A	; 122
    1ee8:	55 e4       	ldi	r21, 0x45	; 69
    1eea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	80 83       	st	Z, r24
    1ef6:	91 83       	std	Z+1, r25	; 0x01
    1ef8:	a2 83       	std	Z+2, r26	; 0x02
    1efa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1efc:	fe 01       	movw	r30, r28
    1efe:	e7 59       	subi	r30, 0x97	; 151
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	60 81       	ld	r22, Z
    1f04:	71 81       	ldd	r23, Z+1	; 0x01
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e8       	ldi	r20, 0x80	; 128
    1f10:	5f e3       	ldi	r21, 0x3F	; 63
    1f12:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f16:	88 23       	and	r24, r24
    1f18:	44 f4       	brge	.+16     	; 0x1f2a <LCD_I2C_init+0x20a>
		__ticks = 1;
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e9 59       	subi	r30, 0x99	; 153
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	80 83       	st	Z, r24
    1f28:	64 c0       	rjmp	.+200    	; 0x1ff2 <LCD_I2C_init+0x2d2>
	else if (__tmp > 65535)
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e7 59       	subi	r30, 0x97	; 151
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	3f ef       	ldi	r19, 0xFF	; 255
    1f3c:	4f e7       	ldi	r20, 0x7F	; 127
    1f3e:	57 e4       	ldi	r21, 0x47	; 71
    1f40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f44:	18 16       	cp	r1, r24
    1f46:	0c f0       	brlt	.+2      	; 0x1f4a <LCD_I2C_init+0x22a>
    1f48:	43 c0       	rjmp	.+134    	; 0x1fd0 <LCD_I2C_init+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e3 59       	subi	r30, 0x93	; 147
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	8e 01       	movw	r16, r28
    1f6a:	09 59       	subi	r16, 0x99	; 153
    1f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
    1f80:	1f c0       	rjmp	.+62     	; 0x1fc0 <LCD_I2C_init+0x2a0>
    1f82:	fe 01       	movw	r30, r28
    1f84:	eb 59       	subi	r30, 0x9B	; 155
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 e9       	ldi	r24, 0x90	; 144
    1f8a:	91 e0       	ldi	r25, 0x01	; 1
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	80 83       	st	Z, r24
    1f90:	fe 01       	movw	r30, r28
    1f92:	eb 59       	subi	r30, 0x9B	; 155
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 81       	ld	r24, Z
    1f98:	91 81       	ldd	r25, Z+1	; 0x01
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <LCD_I2C_init+0x27a>
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	eb 59       	subi	r30, 0x9B	; 155
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	91 83       	std	Z+1, r25	; 0x01
    1fa6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	de 01       	movw	r26, r28
    1faa:	a9 59       	subi	r26, 0x99	; 153
    1fac:	bf 4f       	sbci	r27, 0xFF	; 255
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e9 59       	subi	r30, 0x99	; 153
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 81       	ld	r24, Z
    1fb6:	91 81       	ldd	r25, Z+1	; 0x01
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	11 96       	adiw	r26, 0x01	; 1
    1fbc:	9c 93       	st	X, r25
    1fbe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e9 59       	subi	r30, 0x99	; 153
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	80 81       	ld	r24, Z
    1fc8:	91 81       	ldd	r25, Z+1	; 0x01
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	d1 f6       	brne	.-76     	; 0x1f82 <LCD_I2C_init+0x262>
    1fce:	27 c0       	rjmp	.+78     	; 0x201e <LCD_I2C_init+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	8e 01       	movw	r16, r28
    1fd2:	09 59       	subi	r16, 0x99	; 153
    1fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e7 59       	subi	r30, 0x97	; 151
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	60 81       	ld	r22, Z
    1fde:	71 81       	ldd	r23, Z+1	; 0x01
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	f8 01       	movw	r30, r16
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	80 83       	st	Z, r24
    1ff2:	de 01       	movw	r26, r28
    1ff4:	ad 59       	subi	r26, 0x9D	; 157
    1ff6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e9 59       	subi	r30, 0x99	; 153
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	80 81       	ld	r24, Z
    2000:	91 81       	ldd	r25, Z+1	; 0x01
    2002:	8d 93       	st	X+, r24
    2004:	9c 93       	st	X, r25
    2006:	fe 01       	movw	r30, r28
    2008:	ed 59       	subi	r30, 0x9D	; 157
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	91 81       	ldd	r25, Z+1	; 0x01
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <LCD_I2C_init+0x2f0>
    2014:	fe 01       	movw	r30, r28
    2016:	ed 59       	subi	r30, 0x9D	; 157
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24
	_delay_ms(120);
	I2C_send_start();
    201e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <I2C_send_start>
	I2C_select_slave(5,0);
    2022:	85 e0       	ldi	r24, 0x05	; 5
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	0e 94 0a 0c 	call	0x1814	; 0x1814 <I2C_select_slave>
    202a:	fe 01       	movw	r30, r28
    202c:	e1 5a       	subi	r30, 0xA1	; 161
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a8 ec       	ldi	r26, 0xC8	; 200
    2036:	b2 e4       	ldi	r27, 0x42	; 66
    2038:	80 83       	st	Z, r24
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	a2 83       	std	Z+2, r26	; 0x02
    203e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2040:	8e 01       	movw	r16, r28
    2042:	05 5a       	subi	r16, 0xA5	; 165
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
    2046:	fe 01       	movw	r30, r28
    2048:	e1 5a       	subi	r30, 0xA1	; 161
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	60 81       	ld	r22, Z
    204e:	71 81       	ldd	r23, Z+1	; 0x01
    2050:	82 81       	ldd	r24, Z+2	; 0x02
    2052:	93 81       	ldd	r25, Z+3	; 0x03
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	4a e7       	ldi	r20, 0x7A	; 122
    205a:	55 e4       	ldi	r21, 0x45	; 69
    205c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	f8 01       	movw	r30, r16
    2066:	80 83       	st	Z, r24
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	a2 83       	std	Z+2, r26	; 0x02
    206c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    206e:	fe 01       	movw	r30, r28
    2070:	e5 5a       	subi	r30, 0xA5	; 165
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	60 81       	ld	r22, Z
    2076:	71 81       	ldd	r23, Z+1	; 0x01
    2078:	82 81       	ldd	r24, Z+2	; 0x02
    207a:	93 81       	ldd	r25, Z+3	; 0x03
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e8       	ldi	r20, 0x80	; 128
    2082:	5f e3       	ldi	r21, 0x3F	; 63
    2084:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2088:	88 23       	and	r24, r24
    208a:	44 f4       	brge	.+16     	; 0x209c <LCD_I2C_init+0x37c>
		__ticks = 1;
    208c:	fe 01       	movw	r30, r28
    208e:	e7 5a       	subi	r30, 0xA7	; 167
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	80 83       	st	Z, r24
    209a:	64 c0       	rjmp	.+200    	; 0x2164 <LCD_I2C_init+0x444>
	else if (__tmp > 65535)
    209c:	fe 01       	movw	r30, r28
    209e:	e5 5a       	subi	r30, 0xA5	; 165
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	60 81       	ld	r22, Z
    20a4:	71 81       	ldd	r23, Z+1	; 0x01
    20a6:	82 81       	ldd	r24, Z+2	; 0x02
    20a8:	93 81       	ldd	r25, Z+3	; 0x03
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	3f ef       	ldi	r19, 0xFF	; 255
    20ae:	4f e7       	ldi	r20, 0x7F	; 127
    20b0:	57 e4       	ldi	r21, 0x47	; 71
    20b2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20b6:	18 16       	cp	r1, r24
    20b8:	0c f0       	brlt	.+2      	; 0x20bc <LCD_I2C_init+0x39c>
    20ba:	43 c0       	rjmp	.+134    	; 0x2142 <LCD_I2C_init+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	fe 01       	movw	r30, r28
    20be:	e1 5a       	subi	r30, 0xA1	; 161
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	60 81       	ld	r22, Z
    20c4:	71 81       	ldd	r23, Z+1	; 0x01
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	8e 01       	movw	r16, r28
    20dc:	07 5a       	subi	r16, 0xA7	; 167
    20de:	1f 4f       	sbci	r17, 0xFF	; 255
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	f8 01       	movw	r30, r16
    20ee:	91 83       	std	Z+1, r25	; 0x01
    20f0:	80 83       	st	Z, r24
    20f2:	1f c0       	rjmp	.+62     	; 0x2132 <LCD_I2C_init+0x412>
    20f4:	fe 01       	movw	r30, r28
    20f6:	e9 5a       	subi	r30, 0xA9	; 169
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	80 e9       	ldi	r24, 0x90	; 144
    20fc:	91 e0       	ldi	r25, 0x01	; 1
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	80 83       	st	Z, r24
    2102:	fe 01       	movw	r30, r28
    2104:	e9 5a       	subi	r30, 0xA9	; 169
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	80 81       	ld	r24, Z
    210a:	91 81       	ldd	r25, Z+1	; 0x01
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_I2C_init+0x3ec>
    2110:	fe 01       	movw	r30, r28
    2112:	e9 5a       	subi	r30, 0xA9	; 169
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	91 83       	std	Z+1, r25	; 0x01
    2118:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211a:	de 01       	movw	r26, r28
    211c:	a7 5a       	subi	r26, 0xA7	; 167
    211e:	bf 4f       	sbci	r27, 0xFF	; 255
    2120:	fe 01       	movw	r30, r28
    2122:	e7 5a       	subi	r30, 0xA7	; 167
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	91 81       	ldd	r25, Z+1	; 0x01
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	11 96       	adiw	r26, 0x01	; 1
    212e:	9c 93       	st	X, r25
    2130:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2132:	fe 01       	movw	r30, r28
    2134:	e7 5a       	subi	r30, 0xA7	; 167
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 81       	ld	r24, Z
    213a:	91 81       	ldd	r25, Z+1	; 0x01
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	d1 f6       	brne	.-76     	; 0x20f4 <LCD_I2C_init+0x3d4>
    2140:	27 c0       	rjmp	.+78     	; 0x2190 <LCD_I2C_init+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2142:	8e 01       	movw	r16, r28
    2144:	07 5a       	subi	r16, 0xA7	; 167
    2146:	1f 4f       	sbci	r17, 0xFF	; 255
    2148:	fe 01       	movw	r30, r28
    214a:	e5 5a       	subi	r30, 0xA5	; 165
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	60 81       	ld	r22, Z
    2150:	71 81       	ldd	r23, Z+1	; 0x01
    2152:	82 81       	ldd	r24, Z+2	; 0x02
    2154:	93 81       	ldd	r25, Z+3	; 0x03
    2156:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	f8 01       	movw	r30, r16
    2160:	91 83       	std	Z+1, r25	; 0x01
    2162:	80 83       	st	Z, r24
    2164:	de 01       	movw	r26, r28
    2166:	ab 5a       	subi	r26, 0xAB	; 171
    2168:	bf 4f       	sbci	r27, 0xFF	; 255
    216a:	fe 01       	movw	r30, r28
    216c:	e7 5a       	subi	r30, 0xA7	; 167
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 81       	ld	r24, Z
    2172:	91 81       	ldd	r25, Z+1	; 0x01
    2174:	8d 93       	st	X+, r24
    2176:	9c 93       	st	X, r25
    2178:	fe 01       	movw	r30, r28
    217a:	eb 5a       	subi	r30, 0xAB	; 171
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCD_I2C_init+0x462>
    2186:	fe 01       	movw	r30, r28
    2188:	eb 5a       	subi	r30, 0xAB	; 171
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	80 83       	st	Z, r24
	_delay_ms(100);

	I2C_Master_send_data(LCD_I2C_Command);
    2190:	85 e0       	ldi	r24, 0x05	; 5
    2192:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
    2196:	fe 01       	movw	r30, r28
    2198:	ef 5a       	subi	r30, 0xAF	; 175
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	a8 ec       	ldi	r26, 0xC8	; 200
    21a2:	b2 e4       	ldi	r27, 0x42	; 66
    21a4:	80 83       	st	Z, r24
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	a2 83       	std	Z+2, r26	; 0x02
    21aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	8e 01       	movw	r16, r28
    21ae:	03 5b       	subi	r16, 0xB3	; 179
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    21b2:	fe 01       	movw	r30, r28
    21b4:	ef 5a       	subi	r30, 0xAF	; 175
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	60 81       	ld	r22, Z
    21ba:	71 81       	ldd	r23, Z+1	; 0x01
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	4a e7       	ldi	r20, 0x7A	; 122
    21c6:	55 e4       	ldi	r21, 0x45	; 69
    21c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	f8 01       	movw	r30, r16
    21d2:	80 83       	st	Z, r24
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	a2 83       	std	Z+2, r26	; 0x02
    21d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21da:	fe 01       	movw	r30, r28
    21dc:	e3 5b       	subi	r30, 0xB3	; 179
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e8       	ldi	r20, 0x80	; 128
    21ee:	5f e3       	ldi	r21, 0x3F	; 63
    21f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21f4:	88 23       	and	r24, r24
    21f6:	44 f4       	brge	.+16     	; 0x2208 <LCD_I2C_init+0x4e8>
		__ticks = 1;
    21f8:	fe 01       	movw	r30, r28
    21fa:	e5 5b       	subi	r30, 0xB5	; 181
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	91 83       	std	Z+1, r25	; 0x01
    2204:	80 83       	st	Z, r24
    2206:	64 c0       	rjmp	.+200    	; 0x22d0 <LCD_I2C_init+0x5b0>
	else if (__tmp > 65535)
    2208:	fe 01       	movw	r30, r28
    220a:	e3 5b       	subi	r30, 0xB3	; 179
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	60 81       	ld	r22, Z
    2210:	71 81       	ldd	r23, Z+1	; 0x01
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	93 81       	ldd	r25, Z+3	; 0x03
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	3f ef       	ldi	r19, 0xFF	; 255
    221a:	4f e7       	ldi	r20, 0x7F	; 127
    221c:	57 e4       	ldi	r21, 0x47	; 71
    221e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2222:	18 16       	cp	r1, r24
    2224:	0c f0       	brlt	.+2      	; 0x2228 <LCD_I2C_init+0x508>
    2226:	43 c0       	rjmp	.+134    	; 0x22ae <LCD_I2C_init+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2228:	fe 01       	movw	r30, r28
    222a:	ef 5a       	subi	r30, 0xAF	; 175
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e2       	ldi	r20, 0x20	; 32
    223c:	51 e4       	ldi	r21, 0x41	; 65
    223e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	8e 01       	movw	r16, r28
    2248:	05 5b       	subi	r16, 0xB5	; 181
    224a:	1f 4f       	sbci	r17, 0xFF	; 255
    224c:	bc 01       	movw	r22, r24
    224e:	cd 01       	movw	r24, r26
    2250:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	f8 01       	movw	r30, r16
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
    225e:	1f c0       	rjmp	.+62     	; 0x229e <LCD_I2C_init+0x57e>
    2260:	fe 01       	movw	r30, r28
    2262:	e7 5b       	subi	r30, 0xB7	; 183
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 e9       	ldi	r24, 0x90	; 144
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
    226e:	fe 01       	movw	r30, r28
    2270:	e7 5b       	subi	r30, 0xB7	; 183
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	91 81       	ldd	r25, Z+1	; 0x01
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <LCD_I2C_init+0x558>
    227c:	fe 01       	movw	r30, r28
    227e:	e7 5b       	subi	r30, 0xB7	; 183
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2286:	de 01       	movw	r26, r28
    2288:	a5 5b       	subi	r26, 0xB5	; 181
    228a:	bf 4f       	sbci	r27, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	e5 5b       	subi	r30, 0xB5	; 181
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	11 96       	adiw	r26, 0x01	; 1
    229a:	9c 93       	st	X, r25
    229c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229e:	fe 01       	movw	r30, r28
    22a0:	e5 5b       	subi	r30, 0xB5	; 181
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	d1 f6       	brne	.-76     	; 0x2260 <LCD_I2C_init+0x540>
    22ac:	27 c0       	rjmp	.+78     	; 0x22fc <LCD_I2C_init+0x5dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ae:	8e 01       	movw	r16, r28
    22b0:	05 5b       	subi	r16, 0xB5	; 181
    22b2:	1f 4f       	sbci	r17, 0xFF	; 255
    22b4:	fe 01       	movw	r30, r28
    22b6:	e3 5b       	subi	r30, 0xB3	; 179
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	f8 01       	movw	r30, r16
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	80 83       	st	Z, r24
    22d0:	de 01       	movw	r26, r28
    22d2:	a9 5b       	subi	r26, 0xB9	; 185
    22d4:	bf 4f       	sbci	r27, 0xFF	; 255
    22d6:	fe 01       	movw	r30, r28
    22d8:	e5 5b       	subi	r30, 0xB5	; 181
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	80 81       	ld	r24, Z
    22de:	91 81       	ldd	r25, Z+1	; 0x01
    22e0:	8d 93       	st	X+, r24
    22e2:	9c 93       	st	X, r25
    22e4:	fe 01       	movw	r30, r28
    22e6:	e9 5b       	subi	r30, 0xB9	; 185
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 81       	ld	r24, Z
    22ec:	91 81       	ldd	r25, Z+1	; 0x01
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <LCD_I2C_init+0x5ce>
    22f2:	fe 01       	movw	r30, r28
    22f4:	e9 5b       	subi	r30, 0xB9	; 185
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
	_delay_ms(100);
	I2C_Master_send_data(command1);
    22fc:	fe 01       	movw	r30, r28
    22fe:	e0 58       	subi	r30, 0x80	; 128
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	80 81       	ld	r24, Z
    2304:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
    2308:	fe 01       	movw	r30, r28
    230a:	ed 5b       	subi	r30, 0xBD	; 189
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	a8 ec       	ldi	r26, 0xC8	; 200
    2314:	b2 e4       	ldi	r27, 0x42	; 66
    2316:	80 83       	st	Z, r24
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	a2 83       	std	Z+2, r26	; 0x02
    231c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231e:	8e 01       	movw	r16, r28
    2320:	01 5c       	subi	r16, 0xC1	; 193
    2322:	1f 4f       	sbci	r17, 0xFF	; 255
    2324:	fe 01       	movw	r30, r28
    2326:	ed 5b       	subi	r30, 0xBD	; 189
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	4a e7       	ldi	r20, 0x7A	; 122
    2338:	55 e4       	ldi	r21, 0x45	; 69
    233a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	f8 01       	movw	r30, r16
    2344:	80 83       	st	Z, r24
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	a2 83       	std	Z+2, r26	; 0x02
    234a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    234c:	fe 01       	movw	r30, r28
    234e:	ff 96       	adiw	r30, 0x3f	; 63
    2350:	60 81       	ld	r22, Z
    2352:	71 81       	ldd	r23, Z+1	; 0x01
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e8       	ldi	r20, 0x80	; 128
    235e:	5f e3       	ldi	r21, 0x3F	; 63
    2360:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2364:	88 23       	and	r24, r24
    2366:	2c f4       	brge	.+10     	; 0x2372 <LCD_I2C_init+0x652>
		__ticks = 1;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	9e af       	std	Y+62, r25	; 0x3e
    236e:	8d af       	std	Y+61, r24	; 0x3d
    2370:	46 c0       	rjmp	.+140    	; 0x23fe <LCD_I2C_init+0x6de>
	else if (__tmp > 65535)
    2372:	fe 01       	movw	r30, r28
    2374:	ff 96       	adiw	r30, 0x3f	; 63
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	93 81       	ldd	r25, Z+3	; 0x03
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	64 f5       	brge	.+88     	; 0x23e6 <LCD_I2C_init+0x6c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238e:	fe 01       	movw	r30, r28
    2390:	ed 5b       	subi	r30, 0xBD	; 189
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e2       	ldi	r20, 0x20	; 32
    23a2:	51 e4       	ldi	r21, 0x41	; 65
    23a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	bc 01       	movw	r22, r24
    23ae:	cd 01       	movw	r24, r26
    23b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9e af       	std	Y+62, r25	; 0x3e
    23ba:	8d af       	std	Y+61, r24	; 0x3d
    23bc:	0f c0       	rjmp	.+30     	; 0x23dc <LCD_I2C_init+0x6bc>
    23be:	80 e9       	ldi	r24, 0x90	; 144
    23c0:	91 e0       	ldi	r25, 0x01	; 1
    23c2:	9c af       	std	Y+60, r25	; 0x3c
    23c4:	8b af       	std	Y+59, r24	; 0x3b
    23c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    23c8:	9c ad       	ldd	r25, Y+60	; 0x3c
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <LCD_I2C_init+0x6aa>
    23ce:	9c af       	std	Y+60, r25	; 0x3c
    23d0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    23d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	9e af       	std	Y+62, r25	; 0x3e
    23da:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    23de:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	69 f7       	brne	.-38     	; 0x23be <LCD_I2C_init+0x69e>
    23e4:	16 c0       	rjmp	.+44     	; 0x2412 <LCD_I2C_init+0x6f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e6:	fe 01       	movw	r30, r28
    23e8:	ff 96       	adiw	r30, 0x3f	; 63
    23ea:	60 81       	ld	r22, Z
    23ec:	71 81       	ldd	r23, Z+1	; 0x01
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	9e af       	std	Y+62, r25	; 0x3e
    23fc:	8d af       	std	Y+61, r24	; 0x3d
    23fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2400:	9e ad       	ldd	r25, Y+62	; 0x3e
    2402:	9a af       	std	Y+58, r25	; 0x3a
    2404:	89 af       	std	Y+57, r24	; 0x39
    2406:	89 ad       	ldd	r24, Y+57	; 0x39
    2408:	9a ad       	ldd	r25, Y+58	; 0x3a
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <LCD_I2C_init+0x6ea>
    240e:	9a af       	std	Y+58, r25	; 0x3a
    2410:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);
	I2C_Master_send_data(LCD_I2C_Command);
    2412:	85 e0       	ldi	r24, 0x05	; 5
    2414:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	a8 ec       	ldi	r26, 0xC8	; 200
    241e:	b2 e4       	ldi	r27, 0x42	; 66
    2420:	8d ab       	std	Y+53, r24	; 0x35
    2422:	9e ab       	std	Y+54, r25	; 0x36
    2424:	af ab       	std	Y+55, r26	; 0x37
    2426:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2428:	6d a9       	ldd	r22, Y+53	; 0x35
    242a:	7e a9       	ldd	r23, Y+54	; 0x36
    242c:	8f a9       	ldd	r24, Y+55	; 0x37
    242e:	98 ad       	ldd	r25, Y+56	; 0x38
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	4a e7       	ldi	r20, 0x7A	; 122
    2436:	55 e4       	ldi	r21, 0x45	; 69
    2438:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	89 ab       	std	Y+49, r24	; 0x31
    2442:	9a ab       	std	Y+50, r25	; 0x32
    2444:	ab ab       	std	Y+51, r26	; 0x33
    2446:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2448:	69 a9       	ldd	r22, Y+49	; 0x31
    244a:	7a a9       	ldd	r23, Y+50	; 0x32
    244c:	8b a9       	ldd	r24, Y+51	; 0x33
    244e:	9c a9       	ldd	r25, Y+52	; 0x34
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e8       	ldi	r20, 0x80	; 128
    2456:	5f e3       	ldi	r21, 0x3F	; 63
    2458:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    245c:	88 23       	and	r24, r24
    245e:	2c f4       	brge	.+10     	; 0x246a <LCD_I2C_init+0x74a>
		__ticks = 1;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	98 ab       	std	Y+48, r25	; 0x30
    2466:	8f a7       	std	Y+47, r24	; 0x2f
    2468:	3f c0       	rjmp	.+126    	; 0x24e8 <LCD_I2C_init+0x7c8>
	else if (__tmp > 65535)
    246a:	69 a9       	ldd	r22, Y+49	; 0x31
    246c:	7a a9       	ldd	r23, Y+50	; 0x32
    246e:	8b a9       	ldd	r24, Y+51	; 0x33
    2470:	9c a9       	ldd	r25, Y+52	; 0x34
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	3f ef       	ldi	r19, 0xFF	; 255
    2476:	4f e7       	ldi	r20, 0x7F	; 127
    2478:	57 e4       	ldi	r21, 0x47	; 71
    247a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    247e:	18 16       	cp	r1, r24
    2480:	4c f5       	brge	.+82     	; 0x24d4 <LCD_I2C_init+0x7b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2482:	6d a9       	ldd	r22, Y+53	; 0x35
    2484:	7e a9       	ldd	r23, Y+54	; 0x36
    2486:	8f a9       	ldd	r24, Y+55	; 0x37
    2488:	98 ad       	ldd	r25, Y+56	; 0x38
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e2       	ldi	r20, 0x20	; 32
    2490:	51 e4       	ldi	r21, 0x41	; 65
    2492:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	98 ab       	std	Y+48, r25	; 0x30
    24a8:	8f a7       	std	Y+47, r24	; 0x2f
    24aa:	0f c0       	rjmp	.+30     	; 0x24ca <LCD_I2C_init+0x7aa>
    24ac:	80 e9       	ldi	r24, 0x90	; 144
    24ae:	91 e0       	ldi	r25, 0x01	; 1
    24b0:	9e a7       	std	Y+46, r25	; 0x2e
    24b2:	8d a7       	std	Y+45, r24	; 0x2d
    24b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    24b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <LCD_I2C_init+0x798>
    24bc:	9e a7       	std	Y+46, r25	; 0x2e
    24be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c2:	98 a9       	ldd	r25, Y+48	; 0x30
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	98 ab       	std	Y+48, r25	; 0x30
    24c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    24cc:	98 a9       	ldd	r25, Y+48	; 0x30
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	69 f7       	brne	.-38     	; 0x24ac <LCD_I2C_init+0x78c>
    24d2:	14 c0       	rjmp	.+40     	; 0x24fc <LCD_I2C_init+0x7dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d4:	69 a9       	ldd	r22, Y+49	; 0x31
    24d6:	7a a9       	ldd	r23, Y+50	; 0x32
    24d8:	8b a9       	ldd	r24, Y+51	; 0x33
    24da:	9c a9       	ldd	r25, Y+52	; 0x34
    24dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	98 ab       	std	Y+48, r25	; 0x30
    24e6:	8f a7       	std	Y+47, r24	; 0x2f
    24e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ea:	98 a9       	ldd	r25, Y+48	; 0x30
    24ec:	9c a7       	std	Y+44, r25	; 0x2c
    24ee:	8b a7       	std	Y+43, r24	; 0x2b
    24f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <LCD_I2C_init+0x7d4>
    24f8:	9c a7       	std	Y+44, r25	; 0x2c
    24fa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	I2C_Master_send_data(command2);
    24fc:	fe 01       	movw	r30, r28
    24fe:	e1 58       	subi	r30, 0x81	; 129
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 81       	ld	r24, Z
    2504:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	a8 ec       	ldi	r26, 0xC8	; 200
    250e:	b2 e4       	ldi	r27, 0x42	; 66
    2510:	8f a3       	std	Y+39, r24	; 0x27
    2512:	98 a7       	std	Y+40, r25	; 0x28
    2514:	a9 a7       	std	Y+41, r26	; 0x29
    2516:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2518:	6f a1       	ldd	r22, Y+39	; 0x27
    251a:	78 a5       	ldd	r23, Y+40	; 0x28
    251c:	89 a5       	ldd	r24, Y+41	; 0x29
    251e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4a e7       	ldi	r20, 0x7A	; 122
    2526:	55 e4       	ldi	r21, 0x45	; 69
    2528:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	8b a3       	std	Y+35, r24	; 0x23
    2532:	9c a3       	std	Y+36, r25	; 0x24
    2534:	ad a3       	std	Y+37, r26	; 0x25
    2536:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2538:	6b a1       	ldd	r22, Y+35	; 0x23
    253a:	7c a1       	ldd	r23, Y+36	; 0x24
    253c:	8d a1       	ldd	r24, Y+37	; 0x25
    253e:	9e a1       	ldd	r25, Y+38	; 0x26
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	2c f4       	brge	.+10     	; 0x255a <LCD_I2C_init+0x83a>
		__ticks = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9a a3       	std	Y+34, r25	; 0x22
    2556:	89 a3       	std	Y+33, r24	; 0x21
    2558:	3f c0       	rjmp	.+126    	; 0x25d8 <LCD_I2C_init+0x8b8>
	else if (__tmp > 65535)
    255a:	6b a1       	ldd	r22, Y+35	; 0x23
    255c:	7c a1       	ldd	r23, Y+36	; 0x24
    255e:	8d a1       	ldd	r24, Y+37	; 0x25
    2560:	9e a1       	ldd	r25, Y+38	; 0x26
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	3f ef       	ldi	r19, 0xFF	; 255
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	57 e4       	ldi	r21, 0x47	; 71
    256a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	4c f5       	brge	.+82     	; 0x25c4 <LCD_I2C_init+0x8a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2572:	6f a1       	ldd	r22, Y+39	; 0x27
    2574:	78 a5       	ldd	r23, Y+40	; 0x28
    2576:	89 a5       	ldd	r24, Y+41	; 0x29
    2578:	9a a5       	ldd	r25, Y+42	; 0x2a
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e2       	ldi	r20, 0x20	; 32
    2580:	51 e4       	ldi	r21, 0x41	; 65
    2582:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9a a3       	std	Y+34, r25	; 0x22
    2598:	89 a3       	std	Y+33, r24	; 0x21
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <LCD_I2C_init+0x89a>
    259c:	80 e9       	ldi	r24, 0x90	; 144
    259e:	91 e0       	ldi	r25, 0x01	; 1
    25a0:	98 a3       	std	Y+32, r25	; 0x20
    25a2:	8f 8f       	std	Y+31, r24	; 0x1f
    25a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25a6:	98 a1       	ldd	r25, Y+32	; 0x20
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <LCD_I2C_init+0x888>
    25ac:	98 a3       	std	Y+32, r25	; 0x20
    25ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b0:	89 a1       	ldd	r24, Y+33	; 0x21
    25b2:	9a a1       	ldd	r25, Y+34	; 0x22
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	9a a3       	std	Y+34, r25	; 0x22
    25b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ba:	89 a1       	ldd	r24, Y+33	; 0x21
    25bc:	9a a1       	ldd	r25, Y+34	; 0x22
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	69 f7       	brne	.-38     	; 0x259c <LCD_I2C_init+0x87c>
    25c2:	14 c0       	rjmp	.+40     	; 0x25ec <LCD_I2C_init+0x8cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c4:	6b a1       	ldd	r22, Y+35	; 0x23
    25c6:	7c a1       	ldd	r23, Y+36	; 0x24
    25c8:	8d a1       	ldd	r24, Y+37	; 0x25
    25ca:	9e a1       	ldd	r25, Y+38	; 0x26
    25cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9a a3       	std	Y+34, r25	; 0x22
    25d6:	89 a3       	std	Y+33, r24	; 0x21
    25d8:	89 a1       	ldd	r24, Y+33	; 0x21
    25da:	9a a1       	ldd	r25, Y+34	; 0x22
    25dc:	9e 8f       	std	Y+30, r25	; 0x1e
    25de:	8d 8f       	std	Y+29, r24	; 0x1d
    25e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <LCD_I2C_init+0x8c4>
    25e8:	9e 8f       	std	Y+30, r25	; 0x1e
    25ea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	I2C_Master_send_data(LCD_I2C_Command);
    25ec:	85 e0       	ldi	r24, 0x05	; 5
    25ee:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	a8 ec       	ldi	r26, 0xC8	; 200
    25f8:	b2 e4       	ldi	r27, 0x42	; 66
    25fa:	89 8f       	std	Y+25, r24	; 0x19
    25fc:	9a 8f       	std	Y+26, r25	; 0x1a
    25fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2600:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2602:	69 8d       	ldd	r22, Y+25	; 0x19
    2604:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2606:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2608:	9c 8d       	ldd	r25, Y+28	; 0x1c
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	4a e7       	ldi	r20, 0x7A	; 122
    2610:	55 e4       	ldi	r21, 0x45	; 69
    2612:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	8d 8b       	std	Y+21, r24	; 0x15
    261c:	9e 8b       	std	Y+22, r25	; 0x16
    261e:	af 8b       	std	Y+23, r26	; 0x17
    2620:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2622:	6d 89       	ldd	r22, Y+21	; 0x15
    2624:	7e 89       	ldd	r23, Y+22	; 0x16
    2626:	8f 89       	ldd	r24, Y+23	; 0x17
    2628:	98 8d       	ldd	r25, Y+24	; 0x18
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	2c f4       	brge	.+10     	; 0x2644 <LCD_I2C_init+0x924>
		__ticks = 1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	9c 8b       	std	Y+20, r25	; 0x14
    2640:	8b 8b       	std	Y+19, r24	; 0x13
    2642:	3f c0       	rjmp	.+126    	; 0x26c2 <LCD_I2C_init+0x9a2>
	else if (__tmp > 65535)
    2644:	6d 89       	ldd	r22, Y+21	; 0x15
    2646:	7e 89       	ldd	r23, Y+22	; 0x16
    2648:	8f 89       	ldd	r24, Y+23	; 0x17
    264a:	98 8d       	ldd	r25, Y+24	; 0x18
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	3f ef       	ldi	r19, 0xFF	; 255
    2650:	4f e7       	ldi	r20, 0x7F	; 127
    2652:	57 e4       	ldi	r21, 0x47	; 71
    2654:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2658:	18 16       	cp	r1, r24
    265a:	4c f5       	brge	.+82     	; 0x26ae <LCD_I2C_init+0x98e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265c:	69 8d       	ldd	r22, Y+25	; 0x19
    265e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2660:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2662:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e2       	ldi	r20, 0x20	; 32
    266a:	51 e4       	ldi	r21, 0x41	; 65
    266c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9c 8b       	std	Y+20, r25	; 0x14
    2682:	8b 8b       	std	Y+19, r24	; 0x13
    2684:	0f c0       	rjmp	.+30     	; 0x26a4 <LCD_I2C_init+0x984>
    2686:	80 e9       	ldi	r24, 0x90	; 144
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	9a 8b       	std	Y+18, r25	; 0x12
    268c:	89 8b       	std	Y+17, r24	; 0x11
    268e:	89 89       	ldd	r24, Y+17	; 0x11
    2690:	9a 89       	ldd	r25, Y+18	; 0x12
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <LCD_I2C_init+0x972>
    2696:	9a 8b       	std	Y+18, r25	; 0x12
    2698:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	8b 89       	ldd	r24, Y+19	; 0x13
    269c:	9c 89       	ldd	r25, Y+20	; 0x14
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	9c 8b       	std	Y+20, r25	; 0x14
    26a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a4:	8b 89       	ldd	r24, Y+19	; 0x13
    26a6:	9c 89       	ldd	r25, Y+20	; 0x14
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	69 f7       	brne	.-38     	; 0x2686 <LCD_I2C_init+0x966>
    26ac:	14 c0       	rjmp	.+40     	; 0x26d6 <LCD_I2C_init+0x9b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	6d 89       	ldd	r22, Y+21	; 0x15
    26b0:	7e 89       	ldd	r23, Y+22	; 0x16
    26b2:	8f 89       	ldd	r24, Y+23	; 0x17
    26b4:	98 8d       	ldd	r25, Y+24	; 0x18
    26b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	9c 8b       	std	Y+20, r25	; 0x14
    26c0:	8b 8b       	std	Y+19, r24	; 0x13
    26c2:	8b 89       	ldd	r24, Y+19	; 0x13
    26c4:	9c 89       	ldd	r25, Y+20	; 0x14
    26c6:	98 8b       	std	Y+16, r25	; 0x10
    26c8:	8f 87       	std	Y+15, r24	; 0x0f
    26ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    26cc:	98 89       	ldd	r25, Y+16	; 0x10
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <LCD_I2C_init+0x9ae>
    26d2:	98 8b       	std	Y+16, r25	; 0x10
    26d4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	I2C_Master_send_data(LCD_COMMAND_CLEARDISP);
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	a0 e2       	ldi	r26, 0x20	; 32
    26e2:	b1 e4       	ldi	r27, 0x41	; 65
    26e4:	8b 87       	std	Y+11, r24	; 0x0b
    26e6:	9c 87       	std	Y+12, r25	; 0x0c
    26e8:	ad 87       	std	Y+13, r26	; 0x0d
    26ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4a e7       	ldi	r20, 0x7A	; 122
    26fa:	55 e4       	ldi	r21, 0x45	; 69
    26fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	8f 83       	std	Y+7, r24	; 0x07
    2706:	98 87       	std	Y+8, r25	; 0x08
    2708:	a9 87       	std	Y+9, r26	; 0x09
    270a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    270c:	6f 81       	ldd	r22, Y+7	; 0x07
    270e:	78 85       	ldd	r23, Y+8	; 0x08
    2710:	89 85       	ldd	r24, Y+9	; 0x09
    2712:	9a 85       	ldd	r25, Y+10	; 0x0a
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e8       	ldi	r20, 0x80	; 128
    271a:	5f e3       	ldi	r21, 0x3F	; 63
    271c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2720:	88 23       	and	r24, r24
    2722:	2c f4       	brge	.+10     	; 0x272e <LCD_I2C_init+0xa0e>
		__ticks = 1;
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	9e 83       	std	Y+6, r25	; 0x06
    272a:	8d 83       	std	Y+5, r24	; 0x05
    272c:	3f c0       	rjmp	.+126    	; 0x27ac <LCD_I2C_init+0xa8c>
	else if (__tmp > 65535)
    272e:	6f 81       	ldd	r22, Y+7	; 0x07
    2730:	78 85       	ldd	r23, Y+8	; 0x08
    2732:	89 85       	ldd	r24, Y+9	; 0x09
    2734:	9a 85       	ldd	r25, Y+10	; 0x0a
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	3f ef       	ldi	r19, 0xFF	; 255
    273a:	4f e7       	ldi	r20, 0x7F	; 127
    273c:	57 e4       	ldi	r21, 0x47	; 71
    273e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2742:	18 16       	cp	r1, r24
    2744:	4c f5       	brge	.+82     	; 0x2798 <LCD_I2C_init+0xa78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2746:	6b 85       	ldd	r22, Y+11	; 0x0b
    2748:	7c 85       	ldd	r23, Y+12	; 0x0c
    274a:	8d 85       	ldd	r24, Y+13	; 0x0d
    274c:	9e 85       	ldd	r25, Y+14	; 0x0e
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e2       	ldi	r20, 0x20	; 32
    2754:	51 e4       	ldi	r21, 0x41	; 65
    2756:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	9e 83       	std	Y+6, r25	; 0x06
    276c:	8d 83       	std	Y+5, r24	; 0x05
    276e:	0f c0       	rjmp	.+30     	; 0x278e <LCD_I2C_init+0xa6e>
    2770:	80 e9       	ldi	r24, 0x90	; 144
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	9c 83       	std	Y+4, r25	; 0x04
    2776:	8b 83       	std	Y+3, r24	; 0x03
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	9c 81       	ldd	r25, Y+4	; 0x04
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <LCD_I2C_init+0xa5c>
    2780:	9c 83       	std	Y+4, r25	; 0x04
    2782:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	9e 81       	ldd	r25, Y+6	; 0x06
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	9e 83       	std	Y+6, r25	; 0x06
    278c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278e:	8d 81       	ldd	r24, Y+5	; 0x05
    2790:	9e 81       	ldd	r25, Y+6	; 0x06
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	69 f7       	brne	.-38     	; 0x2770 <LCD_I2C_init+0xa50>
    2796:	14 c0       	rjmp	.+40     	; 0x27c0 <LCD_I2C_init+0xaa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2798:	6f 81       	ldd	r22, Y+7	; 0x07
    279a:	78 85       	ldd	r23, Y+8	; 0x08
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	9e 83       	std	Y+6, r25	; 0x06
    27aa:	8d 83       	std	Y+5, r24	; 0x05
    27ac:	8d 81       	ldd	r24, Y+5	; 0x05
    27ae:	9e 81       	ldd	r25, Y+6	; 0x06
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	89 83       	std	Y+1, r24	; 0x01
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	9a 81       	ldd	r25, Y+2	; 0x02
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <LCD_I2C_init+0xa98>
    27bc:	9a 83       	std	Y+2, r25	; 0x02
    27be:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);
	I2C_stop();
    27c0:	0e 94 bb 0c 	call	0x1976	; 0x1976 <I2C_stop>
}
    27c4:	c0 58       	subi	r28, 0x80	; 128
    27c6:	df 4f       	sbci	r29, 0xFF	; 255
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	cd bf       	out	0x3d, r28	; 61
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	1f 91       	pop	r17
    27d8:	0f 91       	pop	r16
    27da:	08 95       	ret

000027dc <LCD_I2C_SendNum>:
void LCD_I2C_SendNum(s32 Copy_u32num)
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	2e 97       	sbiw	r28, 0x0e	; 14
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	6b 87       	std	Y+11, r22	; 0x0b
    27f2:	7c 87       	std	Y+12, r23	; 0x0c
    27f4:	8d 87       	std	Y+13, r24	; 0x0d
    27f6:	9e 87       	std	Y+14, r25	; 0x0e
	char number[10]={0};
    27f8:	8a e0       	ldi	r24, 0x0A	; 10
    27fa:	fe 01       	movw	r30, r28
    27fc:	31 96       	adiw	r30, 0x01	; 1
    27fe:	df 01       	movw	r26, r30
    2800:	98 2f       	mov	r25, r24
    2802:	1d 92       	st	X+, r1
    2804:	9a 95       	dec	r25
    2806:	e9 f7       	brne	.-6      	; 0x2802 <LCD_I2C_SendNum+0x26>
	itoa(Copy_u32num,number,10);
    2808:	8b 85       	ldd	r24, Y+11	; 0x0b
    280a:	9c 85       	ldd	r25, Y+12	; 0x0c
    280c:	9e 01       	movw	r18, r28
    280e:	2f 5f       	subi	r18, 0xFF	; 255
    2810:	3f 4f       	sbci	r19, 0xFF	; 255
    2812:	b9 01       	movw	r22, r18
    2814:	4a e0       	ldi	r20, 0x0A	; 10
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	0e 94 8e 24 	call	0x491c	; 0x491c <itoa>
	LCD_I2C_SendString(number);
    281c:	ce 01       	movw	r24, r28
    281e:	01 96       	adiw	r24, 0x01	; 1
    2820:	0e 94 1b 14 	call	0x2836	; 0x2836 <LCD_I2C_SendString>
	_delay_ms(200);
	I2C_Master_send_data(MSB2);

	_delay_ms(10);
	I2C_stop();*/
}
    2824:	2e 96       	adiw	r28, 0x0e	; 14
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <LCD_I2C_SendString>:
void LCD_I2C_SendString(char* Copy_u8str)
{
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	eb 97       	sbiw	r28, 0x3b	; 59
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	9b af       	std	Y+59, r25	; 0x3b
    284c:	8a af       	std	Y+58, r24	; 0x3a

	u8 i=0;
    284e:	19 ae       	std	Y+57, r1	; 0x39
	I2C_send_start();
    2850:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <I2C_send_start>
	I2C_select_slave(5,0);
    2854:	85 e0       	ldi	r24, 0x05	; 5
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	0e 94 0a 0c 	call	0x1814	; 0x1814 <I2C_select_slave>
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	a8 ec       	ldi	r26, 0xC8	; 200
    2862:	b2 e4       	ldi	r27, 0x42	; 66
    2864:	8d ab       	std	Y+53, r24	; 0x35
    2866:	9e ab       	std	Y+54, r25	; 0x36
    2868:	af ab       	std	Y+55, r26	; 0x37
    286a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286c:	6d a9       	ldd	r22, Y+53	; 0x35
    286e:	7e a9       	ldd	r23, Y+54	; 0x36
    2870:	8f a9       	ldd	r24, Y+55	; 0x37
    2872:	98 ad       	ldd	r25, Y+56	; 0x38
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	4a e7       	ldi	r20, 0x7A	; 122
    287a:	55 e4       	ldi	r21, 0x45	; 69
    287c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	89 ab       	std	Y+49, r24	; 0x31
    2886:	9a ab       	std	Y+50, r25	; 0x32
    2888:	ab ab       	std	Y+51, r26	; 0x33
    288a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    288c:	69 a9       	ldd	r22, Y+49	; 0x31
    288e:	7a a9       	ldd	r23, Y+50	; 0x32
    2890:	8b a9       	ldd	r24, Y+51	; 0x33
    2892:	9c a9       	ldd	r25, Y+52	; 0x34
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e8       	ldi	r20, 0x80	; 128
    289a:	5f e3       	ldi	r21, 0x3F	; 63
    289c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28a0:	88 23       	and	r24, r24
    28a2:	2c f4       	brge	.+10     	; 0x28ae <LCD_I2C_SendString+0x78>
		__ticks = 1;
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	98 ab       	std	Y+48, r25	; 0x30
    28aa:	8f a7       	std	Y+47, r24	; 0x2f
    28ac:	3f c0       	rjmp	.+126    	; 0x292c <LCD_I2C_SendString+0xf6>
	else if (__tmp > 65535)
    28ae:	69 a9       	ldd	r22, Y+49	; 0x31
    28b0:	7a a9       	ldd	r23, Y+50	; 0x32
    28b2:	8b a9       	ldd	r24, Y+51	; 0x33
    28b4:	9c a9       	ldd	r25, Y+52	; 0x34
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	3f ef       	ldi	r19, 0xFF	; 255
    28ba:	4f e7       	ldi	r20, 0x7F	; 127
    28bc:	57 e4       	ldi	r21, 0x47	; 71
    28be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28c2:	18 16       	cp	r1, r24
    28c4:	4c f5       	brge	.+82     	; 0x2918 <LCD_I2C_SendString+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c6:	6d a9       	ldd	r22, Y+53	; 0x35
    28c8:	7e a9       	ldd	r23, Y+54	; 0x36
    28ca:	8f a9       	ldd	r24, Y+55	; 0x37
    28cc:	98 ad       	ldd	r25, Y+56	; 0x38
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e2       	ldi	r20, 0x20	; 32
    28d4:	51 e4       	ldi	r21, 0x41	; 65
    28d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	98 ab       	std	Y+48, r25	; 0x30
    28ec:	8f a7       	std	Y+47, r24	; 0x2f
    28ee:	0f c0       	rjmp	.+30     	; 0x290e <LCD_I2C_SendString+0xd8>
    28f0:	80 e9       	ldi	r24, 0x90	; 144
    28f2:	91 e0       	ldi	r25, 0x01	; 1
    28f4:	9e a7       	std	Y+46, r25	; 0x2e
    28f6:	8d a7       	std	Y+45, r24	; 0x2d
    28f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    28fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <LCD_I2C_SendString+0xc6>
    2900:	9e a7       	std	Y+46, r25	; 0x2e
    2902:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2904:	8f a5       	ldd	r24, Y+47	; 0x2f
    2906:	98 a9       	ldd	r25, Y+48	; 0x30
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	98 ab       	std	Y+48, r25	; 0x30
    290c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2910:	98 a9       	ldd	r25, Y+48	; 0x30
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	69 f7       	brne	.-38     	; 0x28f0 <LCD_I2C_SendString+0xba>
    2916:	14 c0       	rjmp	.+40     	; 0x2940 <LCD_I2C_SendString+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2918:	69 a9       	ldd	r22, Y+49	; 0x31
    291a:	7a a9       	ldd	r23, Y+50	; 0x32
    291c:	8b a9       	ldd	r24, Y+51	; 0x33
    291e:	9c a9       	ldd	r25, Y+52	; 0x34
    2920:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	98 ab       	std	Y+48, r25	; 0x30
    292a:	8f a7       	std	Y+47, r24	; 0x2f
    292c:	8f a5       	ldd	r24, Y+47	; 0x2f
    292e:	98 a9       	ldd	r25, Y+48	; 0x30
    2930:	9c a7       	std	Y+44, r25	; 0x2c
    2932:	8b a7       	std	Y+43, r24	; 0x2b
    2934:	8b a5       	ldd	r24, Y+43	; 0x2b
    2936:	9c a5       	ldd	r25, Y+44	; 0x2c
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	f1 f7       	brne	.-4      	; 0x2938 <LCD_I2C_SendString+0x102>
    293c:	9c a7       	std	Y+44, r25	; 0x2c
    293e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);

	I2C_Master_send_data(LCD_I2C_String);
    2940:	84 e0       	ldi	r24, 0x04	; 4
    2942:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	a8 ec       	ldi	r26, 0xC8	; 200
    294c:	b2 e4       	ldi	r27, 0x42	; 66
    294e:	8f a3       	std	Y+39, r24	; 0x27
    2950:	98 a7       	std	Y+40, r25	; 0x28
    2952:	a9 a7       	std	Y+41, r26	; 0x29
    2954:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2956:	6f a1       	ldd	r22, Y+39	; 0x27
    2958:	78 a5       	ldd	r23, Y+40	; 0x28
    295a:	89 a5       	ldd	r24, Y+41	; 0x29
    295c:	9a a5       	ldd	r25, Y+42	; 0x2a
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	4a e7       	ldi	r20, 0x7A	; 122
    2964:	55 e4       	ldi	r21, 0x45	; 69
    2966:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	8b a3       	std	Y+35, r24	; 0x23
    2970:	9c a3       	std	Y+36, r25	; 0x24
    2972:	ad a3       	std	Y+37, r26	; 0x25
    2974:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2976:	6b a1       	ldd	r22, Y+35	; 0x23
    2978:	7c a1       	ldd	r23, Y+36	; 0x24
    297a:	8d a1       	ldd	r24, Y+37	; 0x25
    297c:	9e a1       	ldd	r25, Y+38	; 0x26
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e8       	ldi	r20, 0x80	; 128
    2984:	5f e3       	ldi	r21, 0x3F	; 63
    2986:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    298a:	88 23       	and	r24, r24
    298c:	2c f4       	brge	.+10     	; 0x2998 <LCD_I2C_SendString+0x162>
		__ticks = 1;
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	9a a3       	std	Y+34, r25	; 0x22
    2994:	89 a3       	std	Y+33, r24	; 0x21
    2996:	3f c0       	rjmp	.+126    	; 0x2a16 <LCD_I2C_SendString+0x1e0>
	else if (__tmp > 65535)
    2998:	6b a1       	ldd	r22, Y+35	; 0x23
    299a:	7c a1       	ldd	r23, Y+36	; 0x24
    299c:	8d a1       	ldd	r24, Y+37	; 0x25
    299e:	9e a1       	ldd	r25, Y+38	; 0x26
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	3f ef       	ldi	r19, 0xFF	; 255
    29a4:	4f e7       	ldi	r20, 0x7F	; 127
    29a6:	57 e4       	ldi	r21, 0x47	; 71
    29a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29ac:	18 16       	cp	r1, r24
    29ae:	4c f5       	brge	.+82     	; 0x2a02 <LCD_I2C_SendString+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b0:	6f a1       	ldd	r22, Y+39	; 0x27
    29b2:	78 a5       	ldd	r23, Y+40	; 0x28
    29b4:	89 a5       	ldd	r24, Y+41	; 0x29
    29b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e2       	ldi	r20, 0x20	; 32
    29be:	51 e4       	ldi	r21, 0x41	; 65
    29c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	9a a3       	std	Y+34, r25	; 0x22
    29d6:	89 a3       	std	Y+33, r24	; 0x21
    29d8:	0f c0       	rjmp	.+30     	; 0x29f8 <LCD_I2C_SendString+0x1c2>
    29da:	80 e9       	ldi	r24, 0x90	; 144
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	98 a3       	std	Y+32, r25	; 0x20
    29e0:	8f 8f       	std	Y+31, r24	; 0x1f
    29e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29e4:	98 a1       	ldd	r25, Y+32	; 0x20
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <LCD_I2C_SendString+0x1b0>
    29ea:	98 a3       	std	Y+32, r25	; 0x20
    29ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ee:	89 a1       	ldd	r24, Y+33	; 0x21
    29f0:	9a a1       	ldd	r25, Y+34	; 0x22
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	9a a3       	std	Y+34, r25	; 0x22
    29f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f8:	89 a1       	ldd	r24, Y+33	; 0x21
    29fa:	9a a1       	ldd	r25, Y+34	; 0x22
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	69 f7       	brne	.-38     	; 0x29da <LCD_I2C_SendString+0x1a4>
    2a00:	96 c0       	rjmp	.+300    	; 0x2b2e <LCD_I2C_SendString+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a02:	6b a1       	ldd	r22, Y+35	; 0x23
    2a04:	7c a1       	ldd	r23, Y+36	; 0x24
    2a06:	8d a1       	ldd	r24, Y+37	; 0x25
    2a08:	9e a1       	ldd	r25, Y+38	; 0x26
    2a0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	9a a3       	std	Y+34, r25	; 0x22
    2a14:	89 a3       	std	Y+33, r24	; 0x21
    2a16:	89 a1       	ldd	r24, Y+33	; 0x21
    2a18:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a1c:	8d 8f       	std	Y+29, r24	; 0x1d
    2a1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <LCD_I2C_SendString+0x1ec>
    2a26:	9e 8f       	std	Y+30, r25	; 0x1e
    2a28:	8d 8f       	std	Y+29, r24	; 0x1d
    2a2a:	81 c0       	rjmp	.+258    	; 0x2b2e <LCD_I2C_SendString+0x2f8>
	_delay_ms(100);

	while(Copy_u8str[i]!='\0')
	{
		I2C_Master_send_data(Copy_u8str[i++]);
    2a2c:	89 ad       	ldd	r24, Y+57	; 0x39
    2a2e:	28 2f       	mov	r18, r24
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a34:	9b ad       	ldd	r25, Y+59	; 0x3b
    2a36:	fc 01       	movw	r30, r24
    2a38:	e2 0f       	add	r30, r18
    2a3a:	f3 1f       	adc	r31, r19
    2a3c:	90 81       	ld	r25, Z
    2a3e:	89 ad       	ldd	r24, Y+57	; 0x39
    2a40:	8f 5f       	subi	r24, 0xFF	; 255
    2a42:	89 af       	std	Y+57, r24	; 0x39
    2a44:	89 2f       	mov	r24, r25
    2a46:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a8 ec       	ldi	r26, 0xC8	; 200
    2a50:	b2 e4       	ldi	r27, 0x42	; 66
    2a52:	89 8f       	std	Y+25, r24	; 0x19
    2a54:	9a 8f       	std	Y+26, r25	; 0x1a
    2a56:	ab 8f       	std	Y+27, r26	; 0x1b
    2a58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	4a e7       	ldi	r20, 0x7A	; 122
    2a68:	55 e4       	ldi	r21, 0x45	; 69
    2a6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	8d 8b       	std	Y+21, r24	; 0x15
    2a74:	9e 8b       	std	Y+22, r25	; 0x16
    2a76:	af 8b       	std	Y+23, r26	; 0x17
    2a78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a80:	98 8d       	ldd	r25, Y+24	; 0x18
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e8       	ldi	r20, 0x80	; 128
    2a88:	5f e3       	ldi	r21, 0x3F	; 63
    2a8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a8e:	88 23       	and	r24, r24
    2a90:	2c f4       	brge	.+10     	; 0x2a9c <LCD_I2C_SendString+0x266>
		__ticks = 1;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9c 8b       	std	Y+20, r25	; 0x14
    2a98:	8b 8b       	std	Y+19, r24	; 0x13
    2a9a:	3f c0       	rjmp	.+126    	; 0x2b1a <LCD_I2C_SendString+0x2e4>
	else if (__tmp > 65535)
    2a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	57 e4       	ldi	r21, 0x47	; 71
    2aac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	4c f5       	brge	.+82     	; 0x2b06 <LCD_I2C_SendString+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ab8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9c 8b       	std	Y+20, r25	; 0x14
    2ada:	8b 8b       	std	Y+19, r24	; 0x13
    2adc:	0f c0       	rjmp	.+30     	; 0x2afc <LCD_I2C_SendString+0x2c6>
    2ade:	80 e9       	ldi	r24, 0x90	; 144
    2ae0:	91 e0       	ldi	r25, 0x01	; 1
    2ae2:	9a 8b       	std	Y+18, r25	; 0x12
    2ae4:	89 8b       	std	Y+17, r24	; 0x11
    2ae6:	89 89       	ldd	r24, Y+17	; 0x11
    2ae8:	9a 89       	ldd	r25, Y+18	; 0x12
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <LCD_I2C_SendString+0x2b4>
    2aee:	9a 8b       	std	Y+18, r25	; 0x12
    2af0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af2:	8b 89       	ldd	r24, Y+19	; 0x13
    2af4:	9c 89       	ldd	r25, Y+20	; 0x14
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	9c 8b       	std	Y+20, r25	; 0x14
    2afa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afc:	8b 89       	ldd	r24, Y+19	; 0x13
    2afe:	9c 89       	ldd	r25, Y+20	; 0x14
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	69 f7       	brne	.-38     	; 0x2ade <LCD_I2C_SendString+0x2a8>
    2b04:	14 c0       	rjmp	.+40     	; 0x2b2e <LCD_I2C_SendString+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b06:	6d 89       	ldd	r22, Y+21	; 0x15
    2b08:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9c 8b       	std	Y+20, r25	; 0x14
    2b18:	8b 8b       	std	Y+19, r24	; 0x13
    2b1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b1e:	98 8b       	std	Y+16, r25	; 0x10
    2b20:	8f 87       	std	Y+15, r24	; 0x0f
    2b22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b24:	98 89       	ldd	r25, Y+16	; 0x10
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <LCD_I2C_SendString+0x2f0>
    2b2a:	98 8b       	std	Y+16, r25	; 0x10
    2b2c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);

	I2C_Master_send_data(LCD_I2C_String);
	_delay_ms(100);

	while(Copy_u8str[i]!='\0')
    2b2e:	89 ad       	ldd	r24, Y+57	; 0x39
    2b30:	28 2f       	mov	r18, r24
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b36:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b38:	fc 01       	movw	r30, r24
    2b3a:	e2 0f       	add	r30, r18
    2b3c:	f3 1f       	adc	r31, r19
    2b3e:	80 81       	ld	r24, Z
    2b40:	88 23       	and	r24, r24
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <LCD_I2C_SendString+0x310>
    2b44:	73 cf       	rjmp	.-282    	; 0x2a2c <LCD_I2C_SendString+0x1f6>
	{
		I2C_Master_send_data(Copy_u8str[i++]);
		_delay_ms(100);
	}

	I2C_Master_send_data('\0');
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	a0 e2       	ldi	r26, 0x20	; 32
    2b52:	b1 e4       	ldi	r27, 0x41	; 65
    2b54:	8b 87       	std	Y+11, r24	; 0x0b
    2b56:	9c 87       	std	Y+12, r25	; 0x0c
    2b58:	ad 87       	std	Y+13, r26	; 0x0d
    2b5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	4a e7       	ldi	r20, 0x7A	; 122
    2b6a:	55 e4       	ldi	r21, 0x45	; 69
    2b6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	8f 83       	std	Y+7, r24	; 0x07
    2b76:	98 87       	std	Y+8, r25	; 0x08
    2b78:	a9 87       	std	Y+9, r26	; 0x09
    2b7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b7e:	78 85       	ldd	r23, Y+8	; 0x08
    2b80:	89 85       	ldd	r24, Y+9	; 0x09
    2b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e8       	ldi	r20, 0x80	; 128
    2b8a:	5f e3       	ldi	r21, 0x3F	; 63
    2b8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b90:	88 23       	and	r24, r24
    2b92:	2c f4       	brge	.+10     	; 0x2b9e <LCD_I2C_SendString+0x368>
		__ticks = 1;
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	9e 83       	std	Y+6, r25	; 0x06
    2b9a:	8d 83       	std	Y+5, r24	; 0x05
    2b9c:	3f c0       	rjmp	.+126    	; 0x2c1c <LCD_I2C_SendString+0x3e6>
	else if (__tmp > 65535)
    2b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba0:	78 85       	ldd	r23, Y+8	; 0x08
    2ba2:	89 85       	ldd	r24, Y+9	; 0x09
    2ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	3f ef       	ldi	r19, 0xFF	; 255
    2baa:	4f e7       	ldi	r20, 0x7F	; 127
    2bac:	57 e4       	ldi	r21, 0x47	; 71
    2bae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bb2:	18 16       	cp	r1, r24
    2bb4:	4c f5       	brge	.+82     	; 0x2c08 <LCD_I2C_SendString+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	40 e2       	ldi	r20, 0x20	; 32
    2bc4:	51 e4       	ldi	r21, 0x41	; 65
    2bc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	bc 01       	movw	r22, r24
    2bd0:	cd 01       	movw	r24, r26
    2bd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	9e 83       	std	Y+6, r25	; 0x06
    2bdc:	8d 83       	std	Y+5, r24	; 0x05
    2bde:	0f c0       	rjmp	.+30     	; 0x2bfe <LCD_I2C_SendString+0x3c8>
    2be0:	80 e9       	ldi	r24, 0x90	; 144
    2be2:	91 e0       	ldi	r25, 0x01	; 1
    2be4:	9c 83       	std	Y+4, r25	; 0x04
    2be6:	8b 83       	std	Y+3, r24	; 0x03
    2be8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bea:	9c 81       	ldd	r25, Y+4	; 0x04
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <LCD_I2C_SendString+0x3b6>
    2bf0:	9c 83       	std	Y+4, r25	; 0x04
    2bf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	9e 83       	std	Y+6, r25	; 0x06
    2bfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2c00:	9e 81       	ldd	r25, Y+6	; 0x06
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	69 f7       	brne	.-38     	; 0x2be0 <LCD_I2C_SendString+0x3aa>
    2c06:	14 c0       	rjmp	.+40     	; 0x2c30 <LCD_I2C_SendString+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c08:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0a:	78 85       	ldd	r23, Y+8	; 0x08
    2c0c:	89 85       	ldd	r24, Y+9	; 0x09
    2c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	9e 83       	std	Y+6, r25	; 0x06
    2c1a:	8d 83       	std	Y+5, r24	; 0x05
    2c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c20:	9a 83       	std	Y+2, r25	; 0x02
    2c22:	89 83       	std	Y+1, r24	; 0x01
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	9a 81       	ldd	r25, Y+2	; 0x02
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <LCD_I2C_SendString+0x3f2>
    2c2c:	9a 83       	std	Y+2, r25	; 0x02
    2c2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	I2C_stop();
    2c30:	0e 94 bb 0c 	call	0x1976	; 0x1976 <I2C_stop>
}
    2c34:	eb 96       	adiw	r28, 0x3b	; 59
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	08 95       	ret

00002c46 <LCD_I2C_SendCommand>:
void LCD_I2C_SendCommand(u8 Copy_u8Command)
{
    2c46:	df 93       	push	r29
    2c48:	cf 93       	push	r28
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
    2c4e:	ab 97       	sbiw	r28, 0x2b	; 43
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	cd bf       	out	0x3d, r28	; 61
    2c5a:	8b a7       	std	Y+43, r24	; 0x2b
	I2C_send_start();
    2c5c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <I2C_send_start>
	I2C_select_slave(5,0);
    2c60:	85 e0       	ldi	r24, 0x05	; 5
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	0e 94 0a 0c 	call	0x1814	; 0x1814 <I2C_select_slave>
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	a8 ec       	ldi	r26, 0xC8	; 200
    2c6e:	b2 e4       	ldi	r27, 0x42	; 66
    2c70:	8f a3       	std	Y+39, r24	; 0x27
    2c72:	98 a7       	std	Y+40, r25	; 0x28
    2c74:	a9 a7       	std	Y+41, r26	; 0x29
    2c76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c78:	6f a1       	ldd	r22, Y+39	; 0x27
    2c7a:	78 a5       	ldd	r23, Y+40	; 0x28
    2c7c:	89 a5       	ldd	r24, Y+41	; 0x29
    2c7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	4a e7       	ldi	r20, 0x7A	; 122
    2c86:	55 e4       	ldi	r21, 0x45	; 69
    2c88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	8b a3       	std	Y+35, r24	; 0x23
    2c92:	9c a3       	std	Y+36, r25	; 0x24
    2c94:	ad a3       	std	Y+37, r26	; 0x25
    2c96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c98:	6b a1       	ldd	r22, Y+35	; 0x23
    2c9a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c9c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c9e:	9e a1       	ldd	r25, Y+38	; 0x26
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e8       	ldi	r20, 0x80	; 128
    2ca6:	5f e3       	ldi	r21, 0x3F	; 63
    2ca8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cac:	88 23       	and	r24, r24
    2cae:	2c f4       	brge	.+10     	; 0x2cba <LCD_I2C_SendCommand+0x74>
		__ticks = 1;
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	9a a3       	std	Y+34, r25	; 0x22
    2cb6:	89 a3       	std	Y+33, r24	; 0x21
    2cb8:	3f c0       	rjmp	.+126    	; 0x2d38 <LCD_I2C_SendCommand+0xf2>
	else if (__tmp > 65535)
    2cba:	6b a1       	ldd	r22, Y+35	; 0x23
    2cbc:	7c a1       	ldd	r23, Y+36	; 0x24
    2cbe:	8d a1       	ldd	r24, Y+37	; 0x25
    2cc0:	9e a1       	ldd	r25, Y+38	; 0x26
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	3f ef       	ldi	r19, 0xFF	; 255
    2cc6:	4f e7       	ldi	r20, 0x7F	; 127
    2cc8:	57 e4       	ldi	r21, 0x47	; 71
    2cca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cce:	18 16       	cp	r1, r24
    2cd0:	4c f5       	brge	.+82     	; 0x2d24 <LCD_I2C_SendCommand+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd2:	6f a1       	ldd	r22, Y+39	; 0x27
    2cd4:	78 a5       	ldd	r23, Y+40	; 0x28
    2cd6:	89 a5       	ldd	r24, Y+41	; 0x29
    2cd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	40 e2       	ldi	r20, 0x20	; 32
    2ce0:	51 e4       	ldi	r21, 0x41	; 65
    2ce2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	bc 01       	movw	r22, r24
    2cec:	cd 01       	movw	r24, r26
    2cee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	9a a3       	std	Y+34, r25	; 0x22
    2cf8:	89 a3       	std	Y+33, r24	; 0x21
    2cfa:	0f c0       	rjmp	.+30     	; 0x2d1a <LCD_I2C_SendCommand+0xd4>
    2cfc:	80 e9       	ldi	r24, 0x90	; 144
    2cfe:	91 e0       	ldi	r25, 0x01	; 1
    2d00:	98 a3       	std	Y+32, r25	; 0x20
    2d02:	8f 8f       	std	Y+31, r24	; 0x1f
    2d04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d06:	98 a1       	ldd	r25, Y+32	; 0x20
    2d08:	01 97       	sbiw	r24, 0x01	; 1
    2d0a:	f1 f7       	brne	.-4      	; 0x2d08 <LCD_I2C_SendCommand+0xc2>
    2d0c:	98 a3       	std	Y+32, r25	; 0x20
    2d0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d10:	89 a1       	ldd	r24, Y+33	; 0x21
    2d12:	9a a1       	ldd	r25, Y+34	; 0x22
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	9a a3       	std	Y+34, r25	; 0x22
    2d18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d1e:	00 97       	sbiw	r24, 0x00	; 0
    2d20:	69 f7       	brne	.-38     	; 0x2cfc <LCD_I2C_SendCommand+0xb6>
    2d22:	14 c0       	rjmp	.+40     	; 0x2d4c <LCD_I2C_SendCommand+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d24:	6b a1       	ldd	r22, Y+35	; 0x23
    2d26:	7c a1       	ldd	r23, Y+36	; 0x24
    2d28:	8d a1       	ldd	r24, Y+37	; 0x25
    2d2a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	9a a3       	std	Y+34, r25	; 0x22
    2d36:	89 a3       	std	Y+33, r24	; 0x21
    2d38:	89 a1       	ldd	r24, Y+33	; 0x21
    2d3a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d3c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d3e:	8d 8f       	std	Y+29, r24	; 0x1d
    2d40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	f1 f7       	brne	.-4      	; 0x2d44 <LCD_I2C_SendCommand+0xfe>
    2d48:	9e 8f       	std	Y+30, r25	; 0x1e
    2d4a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	I2C_Master_send_data(LCD_I2C_Command);
    2d4c:	85 e0       	ldi	r24, 0x05	; 5
    2d4e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	a8 ec       	ldi	r26, 0xC8	; 200
    2d58:	b2 e4       	ldi	r27, 0x42	; 66
    2d5a:	89 8f       	std	Y+25, r24	; 0x19
    2d5c:	9a 8f       	std	Y+26, r25	; 0x1a
    2d5e:	ab 8f       	std	Y+27, r26	; 0x1b
    2d60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d62:	69 8d       	ldd	r22, Y+25	; 0x19
    2d64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	4a e7       	ldi	r20, 0x7A	; 122
    2d70:	55 e4       	ldi	r21, 0x45	; 69
    2d72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	8d 8b       	std	Y+21, r24	; 0x15
    2d7c:	9e 8b       	std	Y+22, r25	; 0x16
    2d7e:	af 8b       	std	Y+23, r26	; 0x17
    2d80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d82:	6d 89       	ldd	r22, Y+21	; 0x15
    2d84:	7e 89       	ldd	r23, Y+22	; 0x16
    2d86:	8f 89       	ldd	r24, Y+23	; 0x17
    2d88:	98 8d       	ldd	r25, Y+24	; 0x18
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e8       	ldi	r20, 0x80	; 128
    2d90:	5f e3       	ldi	r21, 0x3F	; 63
    2d92:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d96:	88 23       	and	r24, r24
    2d98:	2c f4       	brge	.+10     	; 0x2da4 <LCD_I2C_SendCommand+0x15e>
		__ticks = 1;
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	9c 8b       	std	Y+20, r25	; 0x14
    2da0:	8b 8b       	std	Y+19, r24	; 0x13
    2da2:	3f c0       	rjmp	.+126    	; 0x2e22 <LCD_I2C_SendCommand+0x1dc>
	else if (__tmp > 65535)
    2da4:	6d 89       	ldd	r22, Y+21	; 0x15
    2da6:	7e 89       	ldd	r23, Y+22	; 0x16
    2da8:	8f 89       	ldd	r24, Y+23	; 0x17
    2daa:	98 8d       	ldd	r25, Y+24	; 0x18
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	3f ef       	ldi	r19, 0xFF	; 255
    2db0:	4f e7       	ldi	r20, 0x7F	; 127
    2db2:	57 e4       	ldi	r21, 0x47	; 71
    2db4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2db8:	18 16       	cp	r1, r24
    2dba:	4c f5       	brge	.+82     	; 0x2e0e <LCD_I2C_SendCommand+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dbc:	69 8d       	ldd	r22, Y+25	; 0x19
    2dbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	40 e2       	ldi	r20, 0x20	; 32
    2dca:	51 e4       	ldi	r21, 0x41	; 65
    2dcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	bc 01       	movw	r22, r24
    2dd6:	cd 01       	movw	r24, r26
    2dd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	9c 8b       	std	Y+20, r25	; 0x14
    2de2:	8b 8b       	std	Y+19, r24	; 0x13
    2de4:	0f c0       	rjmp	.+30     	; 0x2e04 <LCD_I2C_SendCommand+0x1be>
    2de6:	80 e9       	ldi	r24, 0x90	; 144
    2de8:	91 e0       	ldi	r25, 0x01	; 1
    2dea:	9a 8b       	std	Y+18, r25	; 0x12
    2dec:	89 8b       	std	Y+17, r24	; 0x11
    2dee:	89 89       	ldd	r24, Y+17	; 0x11
    2df0:	9a 89       	ldd	r25, Y+18	; 0x12
    2df2:	01 97       	sbiw	r24, 0x01	; 1
    2df4:	f1 f7       	brne	.-4      	; 0x2df2 <LCD_I2C_SendCommand+0x1ac>
    2df6:	9a 8b       	std	Y+18, r25	; 0x12
    2df8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfa:	8b 89       	ldd	r24, Y+19	; 0x13
    2dfc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	9c 8b       	std	Y+20, r25	; 0x14
    2e02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e04:	8b 89       	ldd	r24, Y+19	; 0x13
    2e06:	9c 89       	ldd	r25, Y+20	; 0x14
    2e08:	00 97       	sbiw	r24, 0x00	; 0
    2e0a:	69 f7       	brne	.-38     	; 0x2de6 <LCD_I2C_SendCommand+0x1a0>
    2e0c:	14 c0       	rjmp	.+40     	; 0x2e36 <LCD_I2C_SendCommand+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e10:	7e 89       	ldd	r23, Y+22	; 0x16
    2e12:	8f 89       	ldd	r24, Y+23	; 0x17
    2e14:	98 8d       	ldd	r25, Y+24	; 0x18
    2e16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	9c 8b       	std	Y+20, r25	; 0x14
    2e20:	8b 8b       	std	Y+19, r24	; 0x13
    2e22:	8b 89       	ldd	r24, Y+19	; 0x13
    2e24:	9c 89       	ldd	r25, Y+20	; 0x14
    2e26:	98 8b       	std	Y+16, r25	; 0x10
    2e28:	8f 87       	std	Y+15, r24	; 0x0f
    2e2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e2c:	98 89       	ldd	r25, Y+16	; 0x10
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	f1 f7       	brne	.-4      	; 0x2e2e <LCD_I2C_SendCommand+0x1e8>
    2e32:	98 8b       	std	Y+16, r25	; 0x10
    2e34:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);

	I2C_Master_send_data(Copy_u8Command);
    2e36:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e38:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	a0 e2       	ldi	r26, 0x20	; 32
    2e42:	b1 e4       	ldi	r27, 0x41	; 65
    2e44:	8b 87       	std	Y+11, r24	; 0x0b
    2e46:	9c 87       	std	Y+12, r25	; 0x0c
    2e48:	ad 87       	std	Y+13, r26	; 0x0d
    2e4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	4a e7       	ldi	r20, 0x7A	; 122
    2e5a:	55 e4       	ldi	r21, 0x45	; 69
    2e5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	8f 83       	std	Y+7, r24	; 0x07
    2e66:	98 87       	std	Y+8, r25	; 0x08
    2e68:	a9 87       	std	Y+9, r26	; 0x09
    2e6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6e:	78 85       	ldd	r23, Y+8	; 0x08
    2e70:	89 85       	ldd	r24, Y+9	; 0x09
    2e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e8       	ldi	r20, 0x80	; 128
    2e7a:	5f e3       	ldi	r21, 0x3F	; 63
    2e7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e80:	88 23       	and	r24, r24
    2e82:	2c f4       	brge	.+10     	; 0x2e8e <LCD_I2C_SendCommand+0x248>
		__ticks = 1;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	9e 83       	std	Y+6, r25	; 0x06
    2e8a:	8d 83       	std	Y+5, r24	; 0x05
    2e8c:	3f c0       	rjmp	.+126    	; 0x2f0c <LCD_I2C_SendCommand+0x2c6>
	else if (__tmp > 65535)
    2e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e90:	78 85       	ldd	r23, Y+8	; 0x08
    2e92:	89 85       	ldd	r24, Y+9	; 0x09
    2e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	3f ef       	ldi	r19, 0xFF	; 255
    2e9a:	4f e7       	ldi	r20, 0x7F	; 127
    2e9c:	57 e4       	ldi	r21, 0x47	; 71
    2e9e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ea2:	18 16       	cp	r1, r24
    2ea4:	4c f5       	brge	.+82     	; 0x2ef8 <LCD_I2C_SendCommand+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e2       	ldi	r20, 0x20	; 32
    2eb4:	51 e4       	ldi	r21, 0x41	; 65
    2eb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	bc 01       	movw	r22, r24
    2ec0:	cd 01       	movw	r24, r26
    2ec2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	9e 83       	std	Y+6, r25	; 0x06
    2ecc:	8d 83       	std	Y+5, r24	; 0x05
    2ece:	0f c0       	rjmp	.+30     	; 0x2eee <LCD_I2C_SendCommand+0x2a8>
    2ed0:	80 e9       	ldi	r24, 0x90	; 144
    2ed2:	91 e0       	ldi	r25, 0x01	; 1
    2ed4:	9c 83       	std	Y+4, r25	; 0x04
    2ed6:	8b 83       	std	Y+3, r24	; 0x03
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	9c 81       	ldd	r25, Y+4	; 0x04
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <LCD_I2C_SendCommand+0x296>
    2ee0:	9c 83       	std	Y+4, r25	; 0x04
    2ee2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	9e 83       	std	Y+6, r25	; 0x06
    2eec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eee:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	69 f7       	brne	.-38     	; 0x2ed0 <LCD_I2C_SendCommand+0x28a>
    2ef6:	14 c0       	rjmp	.+40     	; 0x2f20 <LCD_I2C_SendCommand+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    2efa:	78 85       	ldd	r23, Y+8	; 0x08
    2efc:	89 85       	ldd	r24, Y+9	; 0x09
    2efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9e 83       	std	Y+6, r25	; 0x06
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
    2f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f10:	9a 83       	std	Y+2, r25	; 0x02
    2f12:	89 83       	std	Y+1, r24	; 0x01
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	9a 81       	ldd	r25, Y+2	; 0x02
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	f1 f7       	brne	.-4      	; 0x2f18 <LCD_I2C_SendCommand+0x2d2>
    2f1c:	9a 83       	std	Y+2, r25	; 0x02
    2f1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	I2C_stop();
    2f20:	0e 94 bb 0c 	call	0x1976	; 0x1976 <I2C_stop>
}
    2f24:	ab 96       	adiw	r28, 0x2b	; 43
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	cf 91       	pop	r28
    2f32:	df 91       	pop	r29
    2f34:	08 95       	ret

00002f36 <LCD_I2C_SendData>:

void LCD_I2C_SendData(u8 Copy_u8Data)
{
    2f36:	df 93       	push	r29
    2f38:	cf 93       	push	r28
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	ab 97       	sbiw	r28, 0x2b	; 43
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	8b a7       	std	Y+43, r24	; 0x2b
	I2C_send_start();
    2f4c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <I2C_send_start>
	I2C_select_slave(5,0);
    2f50:	85 e0       	ldi	r24, 0x05	; 5
    2f52:	60 e0       	ldi	r22, 0x00	; 0
    2f54:	0e 94 0a 0c 	call	0x1814	; 0x1814 <I2C_select_slave>
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	a8 ec       	ldi	r26, 0xC8	; 200
    2f5e:	b2 e4       	ldi	r27, 0x42	; 66
    2f60:	8f a3       	std	Y+39, r24	; 0x27
    2f62:	98 a7       	std	Y+40, r25	; 0x28
    2f64:	a9 a7       	std	Y+41, r26	; 0x29
    2f66:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f68:	6f a1       	ldd	r22, Y+39	; 0x27
    2f6a:	78 a5       	ldd	r23, Y+40	; 0x28
    2f6c:	89 a5       	ldd	r24, Y+41	; 0x29
    2f6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	4a e7       	ldi	r20, 0x7A	; 122
    2f76:	55 e4       	ldi	r21, 0x45	; 69
    2f78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	8b a3       	std	Y+35, r24	; 0x23
    2f82:	9c a3       	std	Y+36, r25	; 0x24
    2f84:	ad a3       	std	Y+37, r26	; 0x25
    2f86:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f88:	6b a1       	ldd	r22, Y+35	; 0x23
    2f8a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f8c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f8e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 e8       	ldi	r20, 0x80	; 128
    2f96:	5f e3       	ldi	r21, 0x3F	; 63
    2f98:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f9c:	88 23       	and	r24, r24
    2f9e:	2c f4       	brge	.+10     	; 0x2faa <LCD_I2C_SendData+0x74>
		__ticks = 1;
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	9a a3       	std	Y+34, r25	; 0x22
    2fa6:	89 a3       	std	Y+33, r24	; 0x21
    2fa8:	3f c0       	rjmp	.+126    	; 0x3028 <LCD_I2C_SendData+0xf2>
	else if (__tmp > 65535)
    2faa:	6b a1       	ldd	r22, Y+35	; 0x23
    2fac:	7c a1       	ldd	r23, Y+36	; 0x24
    2fae:	8d a1       	ldd	r24, Y+37	; 0x25
    2fb0:	9e a1       	ldd	r25, Y+38	; 0x26
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	3f ef       	ldi	r19, 0xFF	; 255
    2fb6:	4f e7       	ldi	r20, 0x7F	; 127
    2fb8:	57 e4       	ldi	r21, 0x47	; 71
    2fba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fbe:	18 16       	cp	r1, r24
    2fc0:	4c f5       	brge	.+82     	; 0x3014 <LCD_I2C_SendData+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc2:	6f a1       	ldd	r22, Y+39	; 0x27
    2fc4:	78 a5       	ldd	r23, Y+40	; 0x28
    2fc6:	89 a5       	ldd	r24, Y+41	; 0x29
    2fc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	40 e2       	ldi	r20, 0x20	; 32
    2fd0:	51 e4       	ldi	r21, 0x41	; 65
    2fd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	bc 01       	movw	r22, r24
    2fdc:	cd 01       	movw	r24, r26
    2fde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	9a a3       	std	Y+34, r25	; 0x22
    2fe8:	89 a3       	std	Y+33, r24	; 0x21
    2fea:	0f c0       	rjmp	.+30     	; 0x300a <LCD_I2C_SendData+0xd4>
    2fec:	80 e9       	ldi	r24, 0x90	; 144
    2fee:	91 e0       	ldi	r25, 0x01	; 1
    2ff0:	98 a3       	std	Y+32, r25	; 0x20
    2ff2:	8f 8f       	std	Y+31, r24	; 0x1f
    2ff4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ff6:	98 a1       	ldd	r25, Y+32	; 0x20
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	f1 f7       	brne	.-4      	; 0x2ff8 <LCD_I2C_SendData+0xc2>
    2ffc:	98 a3       	std	Y+32, r25	; 0x20
    2ffe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3000:	89 a1       	ldd	r24, Y+33	; 0x21
    3002:	9a a1       	ldd	r25, Y+34	; 0x22
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	9a a3       	std	Y+34, r25	; 0x22
    3008:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300a:	89 a1       	ldd	r24, Y+33	; 0x21
    300c:	9a a1       	ldd	r25, Y+34	; 0x22
    300e:	00 97       	sbiw	r24, 0x00	; 0
    3010:	69 f7       	brne	.-38     	; 0x2fec <LCD_I2C_SendData+0xb6>
    3012:	14 c0       	rjmp	.+40     	; 0x303c <LCD_I2C_SendData+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3014:	6b a1       	ldd	r22, Y+35	; 0x23
    3016:	7c a1       	ldd	r23, Y+36	; 0x24
    3018:	8d a1       	ldd	r24, Y+37	; 0x25
    301a:	9e a1       	ldd	r25, Y+38	; 0x26
    301c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	9a a3       	std	Y+34, r25	; 0x22
    3026:	89 a3       	std	Y+33, r24	; 0x21
    3028:	89 a1       	ldd	r24, Y+33	; 0x21
    302a:	9a a1       	ldd	r25, Y+34	; 0x22
    302c:	9e 8f       	std	Y+30, r25	; 0x1e
    302e:	8d 8f       	std	Y+29, r24	; 0x1d
    3030:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3032:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	f1 f7       	brne	.-4      	; 0x3034 <LCD_I2C_SendData+0xfe>
    3038:	9e 8f       	std	Y+30, r25	; 0x1e
    303a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	I2C_Master_send_data(LCD_I2C_Data);
    303c:	86 e0       	ldi	r24, 0x06	; 6
    303e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	a8 ec       	ldi	r26, 0xC8	; 200
    3048:	b2 e4       	ldi	r27, 0x42	; 66
    304a:	89 8f       	std	Y+25, r24	; 0x19
    304c:	9a 8f       	std	Y+26, r25	; 0x1a
    304e:	ab 8f       	std	Y+27, r26	; 0x1b
    3050:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3052:	69 8d       	ldd	r22, Y+25	; 0x19
    3054:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3056:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3058:	9c 8d       	ldd	r25, Y+28	; 0x1c
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	4a e7       	ldi	r20, 0x7A	; 122
    3060:	55 e4       	ldi	r21, 0x45	; 69
    3062:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	8d 8b       	std	Y+21, r24	; 0x15
    306c:	9e 8b       	std	Y+22, r25	; 0x16
    306e:	af 8b       	std	Y+23, r26	; 0x17
    3070:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3072:	6d 89       	ldd	r22, Y+21	; 0x15
    3074:	7e 89       	ldd	r23, Y+22	; 0x16
    3076:	8f 89       	ldd	r24, Y+23	; 0x17
    3078:	98 8d       	ldd	r25, Y+24	; 0x18
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	40 e8       	ldi	r20, 0x80	; 128
    3080:	5f e3       	ldi	r21, 0x3F	; 63
    3082:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3086:	88 23       	and	r24, r24
    3088:	2c f4       	brge	.+10     	; 0x3094 <LCD_I2C_SendData+0x15e>
		__ticks = 1;
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	9c 8b       	std	Y+20, r25	; 0x14
    3090:	8b 8b       	std	Y+19, r24	; 0x13
    3092:	3f c0       	rjmp	.+126    	; 0x3112 <LCD_I2C_SendData+0x1dc>
	else if (__tmp > 65535)
    3094:	6d 89       	ldd	r22, Y+21	; 0x15
    3096:	7e 89       	ldd	r23, Y+22	; 0x16
    3098:	8f 89       	ldd	r24, Y+23	; 0x17
    309a:	98 8d       	ldd	r25, Y+24	; 0x18
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	3f ef       	ldi	r19, 0xFF	; 255
    30a0:	4f e7       	ldi	r20, 0x7F	; 127
    30a2:	57 e4       	ldi	r21, 0x47	; 71
    30a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    30a8:	18 16       	cp	r1, r24
    30aa:	4c f5       	brge	.+82     	; 0x30fe <LCD_I2C_SendData+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ac:	69 8d       	ldd	r22, Y+25	; 0x19
    30ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	40 e2       	ldi	r20, 0x20	; 32
    30ba:	51 e4       	ldi	r21, 0x41	; 65
    30bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	bc 01       	movw	r22, r24
    30c6:	cd 01       	movw	r24, r26
    30c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	9c 8b       	std	Y+20, r25	; 0x14
    30d2:	8b 8b       	std	Y+19, r24	; 0x13
    30d4:	0f c0       	rjmp	.+30     	; 0x30f4 <LCD_I2C_SendData+0x1be>
    30d6:	80 e9       	ldi	r24, 0x90	; 144
    30d8:	91 e0       	ldi	r25, 0x01	; 1
    30da:	9a 8b       	std	Y+18, r25	; 0x12
    30dc:	89 8b       	std	Y+17, r24	; 0x11
    30de:	89 89       	ldd	r24, Y+17	; 0x11
    30e0:	9a 89       	ldd	r25, Y+18	; 0x12
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	f1 f7       	brne	.-4      	; 0x30e2 <LCD_I2C_SendData+0x1ac>
    30e6:	9a 8b       	std	Y+18, r25	; 0x12
    30e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ea:	8b 89       	ldd	r24, Y+19	; 0x13
    30ec:	9c 89       	ldd	r25, Y+20	; 0x14
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	9c 8b       	std	Y+20, r25	; 0x14
    30f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f4:	8b 89       	ldd	r24, Y+19	; 0x13
    30f6:	9c 89       	ldd	r25, Y+20	; 0x14
    30f8:	00 97       	sbiw	r24, 0x00	; 0
    30fa:	69 f7       	brne	.-38     	; 0x30d6 <LCD_I2C_SendData+0x1a0>
    30fc:	14 c0       	rjmp	.+40     	; 0x3126 <LCD_I2C_SendData+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3100:	7e 89       	ldd	r23, Y+22	; 0x16
    3102:	8f 89       	ldd	r24, Y+23	; 0x17
    3104:	98 8d       	ldd	r25, Y+24	; 0x18
    3106:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	9c 8b       	std	Y+20, r25	; 0x14
    3110:	8b 8b       	std	Y+19, r24	; 0x13
    3112:	8b 89       	ldd	r24, Y+19	; 0x13
    3114:	9c 89       	ldd	r25, Y+20	; 0x14
    3116:	98 8b       	std	Y+16, r25	; 0x10
    3118:	8f 87       	std	Y+15, r24	; 0x0f
    311a:	8f 85       	ldd	r24, Y+15	; 0x0f
    311c:	98 89       	ldd	r25, Y+16	; 0x10
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	f1 f7       	brne	.-4      	; 0x311e <LCD_I2C_SendData+0x1e8>
    3122:	98 8b       	std	Y+16, r25	; 0x10
    3124:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);

	I2C_Master_send_data(Copy_u8Data);
    3126:	8b a5       	ldd	r24, Y+43	; 0x2b
    3128:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	a0 e2       	ldi	r26, 0x20	; 32
    3132:	b1 e4       	ldi	r27, 0x41	; 65
    3134:	8b 87       	std	Y+11, r24	; 0x0b
    3136:	9c 87       	std	Y+12, r25	; 0x0c
    3138:	ad 87       	std	Y+13, r26	; 0x0d
    313a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313c:	6b 85       	ldd	r22, Y+11	; 0x0b
    313e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3140:	8d 85       	ldd	r24, Y+13	; 0x0d
    3142:	9e 85       	ldd	r25, Y+14	; 0x0e
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	4a e7       	ldi	r20, 0x7A	; 122
    314a:	55 e4       	ldi	r21, 0x45	; 69
    314c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	8f 83       	std	Y+7, r24	; 0x07
    3156:	98 87       	std	Y+8, r25	; 0x08
    3158:	a9 87       	std	Y+9, r26	; 0x09
    315a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    315c:	6f 81       	ldd	r22, Y+7	; 0x07
    315e:	78 85       	ldd	r23, Y+8	; 0x08
    3160:	89 85       	ldd	r24, Y+9	; 0x09
    3162:	9a 85       	ldd	r25, Y+10	; 0x0a
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e8       	ldi	r20, 0x80	; 128
    316a:	5f e3       	ldi	r21, 0x3F	; 63
    316c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3170:	88 23       	and	r24, r24
    3172:	2c f4       	brge	.+10     	; 0x317e <LCD_I2C_SendData+0x248>
		__ticks = 1;
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	9e 83       	std	Y+6, r25	; 0x06
    317a:	8d 83       	std	Y+5, r24	; 0x05
    317c:	3f c0       	rjmp	.+126    	; 0x31fc <LCD_I2C_SendData+0x2c6>
	else if (__tmp > 65535)
    317e:	6f 81       	ldd	r22, Y+7	; 0x07
    3180:	78 85       	ldd	r23, Y+8	; 0x08
    3182:	89 85       	ldd	r24, Y+9	; 0x09
    3184:	9a 85       	ldd	r25, Y+10	; 0x0a
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	3f ef       	ldi	r19, 0xFF	; 255
    318a:	4f e7       	ldi	r20, 0x7F	; 127
    318c:	57 e4       	ldi	r21, 0x47	; 71
    318e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3192:	18 16       	cp	r1, r24
    3194:	4c f5       	brge	.+82     	; 0x31e8 <LCD_I2C_SendData+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3196:	6b 85       	ldd	r22, Y+11	; 0x0b
    3198:	7c 85       	ldd	r23, Y+12	; 0x0c
    319a:	8d 85       	ldd	r24, Y+13	; 0x0d
    319c:	9e 85       	ldd	r25, Y+14	; 0x0e
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	40 e2       	ldi	r20, 0x20	; 32
    31a4:	51 e4       	ldi	r21, 0x41	; 65
    31a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	bc 01       	movw	r22, r24
    31b0:	cd 01       	movw	r24, r26
    31b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	9e 83       	std	Y+6, r25	; 0x06
    31bc:	8d 83       	std	Y+5, r24	; 0x05
    31be:	0f c0       	rjmp	.+30     	; 0x31de <LCD_I2C_SendData+0x2a8>
    31c0:	80 e9       	ldi	r24, 0x90	; 144
    31c2:	91 e0       	ldi	r25, 0x01	; 1
    31c4:	9c 83       	std	Y+4, r25	; 0x04
    31c6:	8b 83       	std	Y+3, r24	; 0x03
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	9c 81       	ldd	r25, Y+4	; 0x04
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	f1 f7       	brne	.-4      	; 0x31cc <LCD_I2C_SendData+0x296>
    31d0:	9c 83       	std	Y+4, r25	; 0x04
    31d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d4:	8d 81       	ldd	r24, Y+5	; 0x05
    31d6:	9e 81       	ldd	r25, Y+6	; 0x06
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	9e 83       	std	Y+6, r25	; 0x06
    31dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31de:	8d 81       	ldd	r24, Y+5	; 0x05
    31e0:	9e 81       	ldd	r25, Y+6	; 0x06
    31e2:	00 97       	sbiw	r24, 0x00	; 0
    31e4:	69 f7       	brne	.-38     	; 0x31c0 <LCD_I2C_SendData+0x28a>
    31e6:	14 c0       	rjmp	.+40     	; 0x3210 <LCD_I2C_SendData+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ea:	78 85       	ldd	r23, Y+8	; 0x08
    31ec:	89 85       	ldd	r24, Y+9	; 0x09
    31ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	9e 83       	std	Y+6, r25	; 0x06
    31fa:	8d 83       	std	Y+5, r24	; 0x05
    31fc:	8d 81       	ldd	r24, Y+5	; 0x05
    31fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3200:	9a 83       	std	Y+2, r25	; 0x02
    3202:	89 83       	std	Y+1, r24	; 0x01
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <LCD_I2C_SendData+0x2d2>
    320c:	9a 83       	std	Y+2, r25	; 0x02
    320e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	I2C_stop();
    3210:	0e 94 bb 0c 	call	0x1976	; 0x1976 <I2C_stop>
}
    3214:	ab 96       	adiw	r28, 0x2b	; 43
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	cf 91       	pop	r28
    3222:	df 91       	pop	r29
    3224:	08 95       	ret

00003226 <LCD_I2C_SendFloat>:

void LCD_I2C_SendFloat(f32 Copy_f32Fnum,u8 Copy_u8res){
    3226:	ef 92       	push	r14
    3228:	ff 92       	push	r15
    322a:	0f 93       	push	r16
    322c:	1f 93       	push	r17
    322e:	df 93       	push	r29
    3230:	cf 93       	push	r28
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	62 97       	sbiw	r28, 0x12	; 18
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	f8 94       	cli
    323c:	de bf       	out	0x3e, r29	; 62
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	6e 87       	std	Y+14, r22	; 0x0e
    3244:	7f 87       	std	Y+15, r23	; 0x0f
    3246:	88 8b       	std	Y+16, r24	; 0x10
    3248:	99 8b       	std	Y+17, r25	; 0x11
    324a:	4a 8b       	std	Y+18, r20	; 0x12
	u32 e=1;
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	a0 e0       	ldi	r26, 0x00	; 0
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	8a 87       	std	Y+10, r24	; 0x0a
    3256:	9b 87       	std	Y+11, r25	; 0x0b
    3258:	ac 87       	std	Y+12, r26	; 0x0c
    325a:	bd 87       	std	Y+13, r27	; 0x0d
	s32 Int=(s32)Copy_f32Fnum;
    325c:	6e 85       	ldd	r22, Y+14	; 0x0e
    325e:	7f 85       	ldd	r23, Y+15	; 0x0f
    3260:	88 89       	ldd	r24, Y+16	; 0x10
    3262:	99 89       	ldd	r25, Y+17	; 0x11
    3264:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	8e 83       	std	Y+6, r24	; 0x06
    326e:	9f 83       	std	Y+7, r25	; 0x07
    3270:	a8 87       	std	Y+8, r26	; 0x08
    3272:	b9 87       	std	Y+9, r27	; 0x09
	for(u8 i=0;i<Copy_u8res;i++)
    3274:	19 82       	std	Y+1, r1	; 0x01
    3276:	15 c0       	rjmp	.+42     	; 0x32a2 <LCD_I2C_SendFloat+0x7c>
	{
		e=e*10;
    3278:	8a 85       	ldd	r24, Y+10	; 0x0a
    327a:	9b 85       	ldd	r25, Y+11	; 0x0b
    327c:	ac 85       	ldd	r26, Y+12	; 0x0c
    327e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3280:	2a e0       	ldi	r18, 0x0A	; 10
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	40 e0       	ldi	r20, 0x00	; 0
    3286:	50 e0       	ldi	r21, 0x00	; 0
    3288:	bc 01       	movw	r22, r24
    328a:	cd 01       	movw	r24, r26
    328c:	0e 94 24 24 	call	0x4848	; 0x4848 <__mulsi3>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	8a 87       	std	Y+10, r24	; 0x0a
    3296:	9b 87       	std	Y+11, r25	; 0x0b
    3298:	ac 87       	std	Y+12, r26	; 0x0c
    329a:	bd 87       	std	Y+13, r27	; 0x0d
}

void LCD_I2C_SendFloat(f32 Copy_f32Fnum,u8 Copy_u8res){
	u32 e=1;
	s32 Int=(s32)Copy_f32Fnum;
	for(u8 i=0;i<Copy_u8res;i++)
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	8f 5f       	subi	r24, 0xFF	; 255
    32a0:	89 83       	std	Y+1, r24	; 0x01
    32a2:	99 81       	ldd	r25, Y+1	; 0x01
    32a4:	8a 89       	ldd	r24, Y+18	; 0x12
    32a6:	98 17       	cp	r25, r24
    32a8:	38 f3       	brcs	.-50     	; 0x3278 <LCD_I2C_SendFloat+0x52>
	{
		e=e*10;
	}
	s32 Float=(s32) ((Copy_f32Fnum -(f32)Int) *e);
    32aa:	6e 81       	ldd	r22, Y+6	; 0x06
    32ac:	7f 81       	ldd	r23, Y+7	; 0x07
    32ae:	88 85       	ldd	r24, Y+8	; 0x08
    32b0:	99 85       	ldd	r25, Y+9	; 0x09
    32b2:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    32b6:	9b 01       	movw	r18, r22
    32b8:	ac 01       	movw	r20, r24
    32ba:	6e 85       	ldd	r22, Y+14	; 0x0e
    32bc:	7f 85       	ldd	r23, Y+15	; 0x0f
    32be:	88 89       	ldd	r24, Y+16	; 0x10
    32c0:	99 89       	ldd	r25, Y+17	; 0x11
    32c2:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	7c 01       	movw	r14, r24
    32cc:	8d 01       	movw	r16, r26
    32ce:	6a 85       	ldd	r22, Y+10	; 0x0a
    32d0:	7b 85       	ldd	r23, Y+11	; 0x0b
    32d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    32d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    32d6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__floatunsisf>
    32da:	9b 01       	movw	r18, r22
    32dc:	ac 01       	movw	r20, r24
    32de:	c8 01       	movw	r24, r16
    32e0:	b7 01       	movw	r22, r14
    32e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	bc 01       	movw	r22, r24
    32ec:	cd 01       	movw	r24, r26
    32ee:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	8a 83       	std	Y+2, r24	; 0x02
    32f8:	9b 83       	std	Y+3, r25	; 0x03
    32fa:	ac 83       	std	Y+4, r26	; 0x04
    32fc:	bd 83       	std	Y+5, r27	; 0x05
	if (Copy_f32Fnum<0)
    32fe:	6e 85       	ldd	r22, Y+14	; 0x0e
    3300:	7f 85       	ldd	r23, Y+15	; 0x0f
    3302:	88 89       	ldd	r24, Y+16	; 0x10
    3304:	99 89       	ldd	r25, Y+17	; 0x11
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 e0       	ldi	r20, 0x00	; 0
    330c:	50 e0       	ldi	r21, 0x00	; 0
    330e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3312:	88 23       	and	r24, r24
    3314:	7c f4       	brge	.+30     	; 0x3334 <LCD_I2C_SendFloat+0x10e>
	{
		Float *= -1;
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	9b 81       	ldd	r25, Y+3	; 0x03
    331a:	ac 81       	ldd	r26, Y+4	; 0x04
    331c:	bd 81       	ldd	r27, Y+5	; 0x05
    331e:	b0 95       	com	r27
    3320:	a0 95       	com	r26
    3322:	90 95       	com	r25
    3324:	81 95       	neg	r24
    3326:	9f 4f       	sbci	r25, 0xFF	; 255
    3328:	af 4f       	sbci	r26, 0xFF	; 255
    332a:	bf 4f       	sbci	r27, 0xFF	; 255
    332c:	8a 83       	std	Y+2, r24	; 0x02
    332e:	9b 83       	std	Y+3, r25	; 0x03
    3330:	ac 83       	std	Y+4, r26	; 0x04
    3332:	bd 83       	std	Y+5, r27	; 0x05
	}
	LCD_I2C_SendNum(Int);
    3334:	8e 81       	ldd	r24, Y+6	; 0x06
    3336:	9f 81       	ldd	r25, Y+7	; 0x07
    3338:	a8 85       	ldd	r26, Y+8	; 0x08
    333a:	b9 85       	ldd	r27, Y+9	; 0x09
    333c:	bc 01       	movw	r22, r24
    333e:	cd 01       	movw	r24, r26
    3340:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_I2C_SendNum>
	LCD_I2C_SendData('.');
    3344:	8e e2       	ldi	r24, 0x2E	; 46
    3346:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <LCD_I2C_SendData>
	LCD_I2C_SendNum(Float);
    334a:	8a 81       	ldd	r24, Y+2	; 0x02
    334c:	9b 81       	ldd	r25, Y+3	; 0x03
    334e:	ac 81       	ldd	r26, Y+4	; 0x04
    3350:	bd 81       	ldd	r27, Y+5	; 0x05
    3352:	bc 01       	movw	r22, r24
    3354:	cd 01       	movw	r24, r26
    3356:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_I2C_SendNum>
}
    335a:	62 96       	adiw	r28, 0x12	; 18
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	1f 91       	pop	r17
    336c:	0f 91       	pop	r16
    336e:	ff 90       	pop	r15
    3370:	ef 90       	pop	r14
    3372:	08 95       	ret

00003374 <LCD_I2C_SetPosition>:


void LCD_I2C_SetPosition(u8 Copy_U8PosX,u8 Copy_U8PosY){
    3374:	df 93       	push	r29
    3376:	cf 93       	push	r28
    3378:	00 d0       	rcall	.+0      	; 0x337a <LCD_I2C_SetPosition+0x6>
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    337e:	89 83       	std	Y+1, r24	; 0x01
    3380:	6a 83       	std	Y+2, r22	; 0x02
	if(0== Copy_U8PosX)
		LCD_send_command(128+Copy_U8PosY);
	else if(1==Copy_U8PosX)
		LCD_send_command(128+64+Copy_U8PosY);
*/
	LCD_I2C_SendCommand(0x80 | (Copy_U8PosX & 0x3F) | (GET_BIT(Copy_U8PosY,0) << 6));
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	8f 73       	andi	r24, 0x3F	; 63
    3386:	28 2f       	mov	r18, r24
    3388:	20 68       	ori	r18, 0x80	; 128
    338a:	8a 81       	ldd	r24, Y+2	; 0x02
    338c:	88 2f       	mov	r24, r24
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	81 70       	andi	r24, 0x01	; 1
    3392:	90 70       	andi	r25, 0x00	; 0
    3394:	00 24       	eor	r0, r0
    3396:	96 95       	lsr	r25
    3398:	87 95       	ror	r24
    339a:	07 94       	ror	r0
    339c:	96 95       	lsr	r25
    339e:	87 95       	ror	r24
    33a0:	07 94       	ror	r0
    33a2:	98 2f       	mov	r25, r24
    33a4:	80 2d       	mov	r24, r0
    33a6:	82 2b       	or	r24, r18
    33a8:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_I2C_SendCommand>
}
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	cf 91       	pop	r28
    33b2:	df 91       	pop	r29
    33b4:	08 95       	ret

000033b6 <LCD_I2C_SetCGRAMAdress>:


void LCD_I2C_SetCGRAMAdress(u8 Copy_U8Address){
    33b6:	df 93       	push	r29
    33b8:	cf 93       	push	r28
    33ba:	0f 92       	push	r0
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    33c0:	89 83       	std	Y+1, r24	; 0x01

	LCD_I2C_SendCommand	(0b01000000 | Copy_U8Address);
    33c2:	89 81       	ldd	r24, Y+1	; 0x01
    33c4:	80 64       	ori	r24, 0x40	; 64
    33c6:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_I2C_SendCommand>

}
    33ca:	0f 90       	pop	r0
    33cc:	cf 91       	pop	r28
    33ce:	df 91       	pop	r29
    33d0:	08 95       	ret

000033d2 <LCD_I2C_WriteInCGRAM>:


void LCD_I2C_WriteInCGRAM(u8 *Copy_U8ptr,u8 Copy_u8location)
{
    33d2:	0f 93       	push	r16
    33d4:	1f 93       	push	r17
    33d6:	df 93       	push	r29
    33d8:	cf 93       	push	r28
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
    33de:	c6 56       	subi	r28, 0x66	; 102
    33e0:	d0 40       	sbci	r29, 0x00	; 0
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	f8 94       	cli
    33e6:	de bf       	out	0x3e, r29	; 62
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	cd bf       	out	0x3d, r28	; 61
    33ec:	fe 01       	movw	r30, r28
    33ee:	ec 59       	subi	r30, 0x9C	; 156
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	91 83       	std	Z+1, r25	; 0x01
    33f4:	80 83       	st	Z, r24
    33f6:	fe 01       	movw	r30, r28
    33f8:	ea 59       	subi	r30, 0x9A	; 154
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	60 83       	st	Z, r22
//CGRAMData

	u8 i = 0;
    33fe:	fe 01       	movw	r30, r28
    3400:	ed 59       	subi	r30, 0x9D	; 157
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	10 82       	st	Z, r1
    3406:	fe 01       	movw	r30, r28
    3408:	e1 5a       	subi	r30, 0xA1	; 161
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	a0 e2       	ldi	r26, 0x20	; 32
    3412:	b2 e4       	ldi	r27, 0x42	; 66
    3414:	80 83       	st	Z, r24
    3416:	91 83       	std	Z+1, r25	; 0x01
    3418:	a2 83       	std	Z+2, r26	; 0x02
    341a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341c:	8e 01       	movw	r16, r28
    341e:	05 5a       	subi	r16, 0xA5	; 165
    3420:	1f 4f       	sbci	r17, 0xFF	; 255
    3422:	fe 01       	movw	r30, r28
    3424:	e1 5a       	subi	r30, 0xA1	; 161
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	60 81       	ld	r22, Z
    342a:	71 81       	ldd	r23, Z+1	; 0x01
    342c:	82 81       	ldd	r24, Z+2	; 0x02
    342e:	93 81       	ldd	r25, Z+3	; 0x03
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	4a e7       	ldi	r20, 0x7A	; 122
    3436:	55 e4       	ldi	r21, 0x45	; 69
    3438:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	f8 01       	movw	r30, r16
    3442:	80 83       	st	Z, r24
    3444:	91 83       	std	Z+1, r25	; 0x01
    3446:	a2 83       	std	Z+2, r26	; 0x02
    3448:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    344a:	fe 01       	movw	r30, r28
    344c:	e5 5a       	subi	r30, 0xA5	; 165
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	60 81       	ld	r22, Z
    3452:	71 81       	ldd	r23, Z+1	; 0x01
    3454:	82 81       	ldd	r24, Z+2	; 0x02
    3456:	93 81       	ldd	r25, Z+3	; 0x03
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	40 e8       	ldi	r20, 0x80	; 128
    345e:	5f e3       	ldi	r21, 0x3F	; 63
    3460:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3464:	88 23       	and	r24, r24
    3466:	44 f4       	brge	.+16     	; 0x3478 <LCD_I2C_WriteInCGRAM+0xa6>
		__ticks = 1;
    3468:	fe 01       	movw	r30, r28
    346a:	e7 5a       	subi	r30, 0xA7	; 167
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	91 83       	std	Z+1, r25	; 0x01
    3474:	80 83       	st	Z, r24
    3476:	64 c0       	rjmp	.+200    	; 0x3540 <LCD_I2C_WriteInCGRAM+0x16e>
	else if (__tmp > 65535)
    3478:	fe 01       	movw	r30, r28
    347a:	e5 5a       	subi	r30, 0xA5	; 165
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	60 81       	ld	r22, Z
    3480:	71 81       	ldd	r23, Z+1	; 0x01
    3482:	82 81       	ldd	r24, Z+2	; 0x02
    3484:	93 81       	ldd	r25, Z+3	; 0x03
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	3f ef       	ldi	r19, 0xFF	; 255
    348a:	4f e7       	ldi	r20, 0x7F	; 127
    348c:	57 e4       	ldi	r21, 0x47	; 71
    348e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3492:	18 16       	cp	r1, r24
    3494:	0c f0       	brlt	.+2      	; 0x3498 <LCD_I2C_WriteInCGRAM+0xc6>
    3496:	43 c0       	rjmp	.+134    	; 0x351e <LCD_I2C_WriteInCGRAM+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3498:	fe 01       	movw	r30, r28
    349a:	e1 5a       	subi	r30, 0xA1	; 161
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	60 81       	ld	r22, Z
    34a0:	71 81       	ldd	r23, Z+1	; 0x01
    34a2:	82 81       	ldd	r24, Z+2	; 0x02
    34a4:	93 81       	ldd	r25, Z+3	; 0x03
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	40 e2       	ldi	r20, 0x20	; 32
    34ac:	51 e4       	ldi	r21, 0x41	; 65
    34ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	8e 01       	movw	r16, r28
    34b8:	07 5a       	subi	r16, 0xA7	; 167
    34ba:	1f 4f       	sbci	r17, 0xFF	; 255
    34bc:	bc 01       	movw	r22, r24
    34be:	cd 01       	movw	r24, r26
    34c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	f8 01       	movw	r30, r16
    34ca:	91 83       	std	Z+1, r25	; 0x01
    34cc:	80 83       	st	Z, r24
    34ce:	1f c0       	rjmp	.+62     	; 0x350e <LCD_I2C_WriteInCGRAM+0x13c>
    34d0:	fe 01       	movw	r30, r28
    34d2:	e9 5a       	subi	r30, 0xA9	; 169
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	80 e9       	ldi	r24, 0x90	; 144
    34d8:	91 e0       	ldi	r25, 0x01	; 1
    34da:	91 83       	std	Z+1, r25	; 0x01
    34dc:	80 83       	st	Z, r24
    34de:	fe 01       	movw	r30, r28
    34e0:	e9 5a       	subi	r30, 0xA9	; 169
    34e2:	ff 4f       	sbci	r31, 0xFF	; 255
    34e4:	80 81       	ld	r24, Z
    34e6:	91 81       	ldd	r25, Z+1	; 0x01
    34e8:	01 97       	sbiw	r24, 0x01	; 1
    34ea:	f1 f7       	brne	.-4      	; 0x34e8 <LCD_I2C_WriteInCGRAM+0x116>
    34ec:	fe 01       	movw	r30, r28
    34ee:	e9 5a       	subi	r30, 0xA9	; 169
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	91 83       	std	Z+1, r25	; 0x01
    34f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f6:	de 01       	movw	r26, r28
    34f8:	a7 5a       	subi	r26, 0xA7	; 167
    34fa:	bf 4f       	sbci	r27, 0xFF	; 255
    34fc:	fe 01       	movw	r30, r28
    34fe:	e7 5a       	subi	r30, 0xA7	; 167
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	80 81       	ld	r24, Z
    3504:	91 81       	ldd	r25, Z+1	; 0x01
    3506:	01 97       	sbiw	r24, 0x01	; 1
    3508:	11 96       	adiw	r26, 0x01	; 1
    350a:	9c 93       	st	X, r25
    350c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    350e:	fe 01       	movw	r30, r28
    3510:	e7 5a       	subi	r30, 0xA7	; 167
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	80 81       	ld	r24, Z
    3516:	91 81       	ldd	r25, Z+1	; 0x01
    3518:	00 97       	sbiw	r24, 0x00	; 0
    351a:	d1 f6       	brne	.-76     	; 0x34d0 <LCD_I2C_WriteInCGRAM+0xfe>
    351c:	27 c0       	rjmp	.+78     	; 0x356c <LCD_I2C_WriteInCGRAM+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351e:	8e 01       	movw	r16, r28
    3520:	07 5a       	subi	r16, 0xA7	; 167
    3522:	1f 4f       	sbci	r17, 0xFF	; 255
    3524:	fe 01       	movw	r30, r28
    3526:	e5 5a       	subi	r30, 0xA5	; 165
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	60 81       	ld	r22, Z
    352c:	71 81       	ldd	r23, Z+1	; 0x01
    352e:	82 81       	ldd	r24, Z+2	; 0x02
    3530:	93 81       	ldd	r25, Z+3	; 0x03
    3532:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	f8 01       	movw	r30, r16
    353c:	91 83       	std	Z+1, r25	; 0x01
    353e:	80 83       	st	Z, r24
    3540:	de 01       	movw	r26, r28
    3542:	ab 5a       	subi	r26, 0xAB	; 171
    3544:	bf 4f       	sbci	r27, 0xFF	; 255
    3546:	fe 01       	movw	r30, r28
    3548:	e7 5a       	subi	r30, 0xA7	; 167
    354a:	ff 4f       	sbci	r31, 0xFF	; 255
    354c:	80 81       	ld	r24, Z
    354e:	91 81       	ldd	r25, Z+1	; 0x01
    3550:	8d 93       	st	X+, r24
    3552:	9c 93       	st	X, r25
    3554:	fe 01       	movw	r30, r28
    3556:	eb 5a       	subi	r30, 0xAB	; 171
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	80 81       	ld	r24, Z
    355c:	91 81       	ldd	r25, Z+1	; 0x01
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	f1 f7       	brne	.-4      	; 0x355e <LCD_I2C_WriteInCGRAM+0x18c>
    3562:	fe 01       	movw	r30, r28
    3564:	eb 5a       	subi	r30, 0xAB	; 171
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	91 83       	std	Z+1, r25	; 0x01
    356a:	80 83       	st	Z, r24
	_delay_ms(40);
	I2C_master_init();
    356c:	0e 94 c6 0c 	call	0x198c	; 0x198c <I2C_master_init>
    3570:	fe 01       	movw	r30, r28
    3572:	ef 5a       	subi	r30, 0xAF	; 175
    3574:	ff 4f       	sbci	r31, 0xFF	; 255
    3576:	80 e0       	ldi	r24, 0x00	; 0
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	a0 ef       	ldi	r26, 0xF0	; 240
    357c:	b2 e4       	ldi	r27, 0x42	; 66
    357e:	80 83       	st	Z, r24
    3580:	91 83       	std	Z+1, r25	; 0x01
    3582:	a2 83       	std	Z+2, r26	; 0x02
    3584:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3586:	8e 01       	movw	r16, r28
    3588:	03 5b       	subi	r16, 0xB3	; 179
    358a:	1f 4f       	sbci	r17, 0xFF	; 255
    358c:	fe 01       	movw	r30, r28
    358e:	ef 5a       	subi	r30, 0xAF	; 175
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	60 81       	ld	r22, Z
    3594:	71 81       	ldd	r23, Z+1	; 0x01
    3596:	82 81       	ldd	r24, Z+2	; 0x02
    3598:	93 81       	ldd	r25, Z+3	; 0x03
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	4a e7       	ldi	r20, 0x7A	; 122
    35a0:	55 e4       	ldi	r21, 0x45	; 69
    35a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	f8 01       	movw	r30, r16
    35ac:	80 83       	st	Z, r24
    35ae:	91 83       	std	Z+1, r25	; 0x01
    35b0:	a2 83       	std	Z+2, r26	; 0x02
    35b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35b4:	fe 01       	movw	r30, r28
    35b6:	e3 5b       	subi	r30, 0xB3	; 179
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	60 81       	ld	r22, Z
    35bc:	71 81       	ldd	r23, Z+1	; 0x01
    35be:	82 81       	ldd	r24, Z+2	; 0x02
    35c0:	93 81       	ldd	r25, Z+3	; 0x03
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 e8       	ldi	r20, 0x80	; 128
    35c8:	5f e3       	ldi	r21, 0x3F	; 63
    35ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    35ce:	88 23       	and	r24, r24
    35d0:	44 f4       	brge	.+16     	; 0x35e2 <LCD_I2C_WriteInCGRAM+0x210>
		__ticks = 1;
    35d2:	fe 01       	movw	r30, r28
    35d4:	e5 5b       	subi	r30, 0xB5	; 181
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	91 83       	std	Z+1, r25	; 0x01
    35de:	80 83       	st	Z, r24
    35e0:	64 c0       	rjmp	.+200    	; 0x36aa <LCD_I2C_WriteInCGRAM+0x2d8>
	else if (__tmp > 65535)
    35e2:	fe 01       	movw	r30, r28
    35e4:	e3 5b       	subi	r30, 0xB3	; 179
    35e6:	ff 4f       	sbci	r31, 0xFF	; 255
    35e8:	60 81       	ld	r22, Z
    35ea:	71 81       	ldd	r23, Z+1	; 0x01
    35ec:	82 81       	ldd	r24, Z+2	; 0x02
    35ee:	93 81       	ldd	r25, Z+3	; 0x03
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	3f ef       	ldi	r19, 0xFF	; 255
    35f4:	4f e7       	ldi	r20, 0x7F	; 127
    35f6:	57 e4       	ldi	r21, 0x47	; 71
    35f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    35fc:	18 16       	cp	r1, r24
    35fe:	0c f0       	brlt	.+2      	; 0x3602 <LCD_I2C_WriteInCGRAM+0x230>
    3600:	43 c0       	rjmp	.+134    	; 0x3688 <LCD_I2C_WriteInCGRAM+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3602:	fe 01       	movw	r30, r28
    3604:	ef 5a       	subi	r30, 0xAF	; 175
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	60 81       	ld	r22, Z
    360a:	71 81       	ldd	r23, Z+1	; 0x01
    360c:	82 81       	ldd	r24, Z+2	; 0x02
    360e:	93 81       	ldd	r25, Z+3	; 0x03
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	40 e2       	ldi	r20, 0x20	; 32
    3616:	51 e4       	ldi	r21, 0x41	; 65
    3618:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	8e 01       	movw	r16, r28
    3622:	05 5b       	subi	r16, 0xB5	; 181
    3624:	1f 4f       	sbci	r17, 0xFF	; 255
    3626:	bc 01       	movw	r22, r24
    3628:	cd 01       	movw	r24, r26
    362a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	f8 01       	movw	r30, r16
    3634:	91 83       	std	Z+1, r25	; 0x01
    3636:	80 83       	st	Z, r24
    3638:	1f c0       	rjmp	.+62     	; 0x3678 <LCD_I2C_WriteInCGRAM+0x2a6>
    363a:	fe 01       	movw	r30, r28
    363c:	e7 5b       	subi	r30, 0xB7	; 183
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	80 e9       	ldi	r24, 0x90	; 144
    3642:	91 e0       	ldi	r25, 0x01	; 1
    3644:	91 83       	std	Z+1, r25	; 0x01
    3646:	80 83       	st	Z, r24
    3648:	fe 01       	movw	r30, r28
    364a:	e7 5b       	subi	r30, 0xB7	; 183
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	80 81       	ld	r24, Z
    3650:	91 81       	ldd	r25, Z+1	; 0x01
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	f1 f7       	brne	.-4      	; 0x3652 <LCD_I2C_WriteInCGRAM+0x280>
    3656:	fe 01       	movw	r30, r28
    3658:	e7 5b       	subi	r30, 0xB7	; 183
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	91 83       	std	Z+1, r25	; 0x01
    365e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3660:	de 01       	movw	r26, r28
    3662:	a5 5b       	subi	r26, 0xB5	; 181
    3664:	bf 4f       	sbci	r27, 0xFF	; 255
    3666:	fe 01       	movw	r30, r28
    3668:	e5 5b       	subi	r30, 0xB5	; 181
    366a:	ff 4f       	sbci	r31, 0xFF	; 255
    366c:	80 81       	ld	r24, Z
    366e:	91 81       	ldd	r25, Z+1	; 0x01
    3670:	01 97       	sbiw	r24, 0x01	; 1
    3672:	11 96       	adiw	r26, 0x01	; 1
    3674:	9c 93       	st	X, r25
    3676:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3678:	fe 01       	movw	r30, r28
    367a:	e5 5b       	subi	r30, 0xB5	; 181
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	80 81       	ld	r24, Z
    3680:	91 81       	ldd	r25, Z+1	; 0x01
    3682:	00 97       	sbiw	r24, 0x00	; 0
    3684:	d1 f6       	brne	.-76     	; 0x363a <LCD_I2C_WriteInCGRAM+0x268>
    3686:	27 c0       	rjmp	.+78     	; 0x36d6 <LCD_I2C_WriteInCGRAM+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3688:	8e 01       	movw	r16, r28
    368a:	05 5b       	subi	r16, 0xB5	; 181
    368c:	1f 4f       	sbci	r17, 0xFF	; 255
    368e:	fe 01       	movw	r30, r28
    3690:	e3 5b       	subi	r30, 0xB3	; 179
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	60 81       	ld	r22, Z
    3696:	71 81       	ldd	r23, Z+1	; 0x01
    3698:	82 81       	ldd	r24, Z+2	; 0x02
    369a:	93 81       	ldd	r25, Z+3	; 0x03
    369c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36a0:	dc 01       	movw	r26, r24
    36a2:	cb 01       	movw	r24, r22
    36a4:	f8 01       	movw	r30, r16
    36a6:	91 83       	std	Z+1, r25	; 0x01
    36a8:	80 83       	st	Z, r24
    36aa:	de 01       	movw	r26, r28
    36ac:	a9 5b       	subi	r26, 0xB9	; 185
    36ae:	bf 4f       	sbci	r27, 0xFF	; 255
    36b0:	fe 01       	movw	r30, r28
    36b2:	e5 5b       	subi	r30, 0xB5	; 181
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	80 81       	ld	r24, Z
    36b8:	91 81       	ldd	r25, Z+1	; 0x01
    36ba:	8d 93       	st	X+, r24
    36bc:	9c 93       	st	X, r25
    36be:	fe 01       	movw	r30, r28
    36c0:	e9 5b       	subi	r30, 0xB9	; 185
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	80 81       	ld	r24, Z
    36c6:	91 81       	ldd	r25, Z+1	; 0x01
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	f1 f7       	brne	.-4      	; 0x36c8 <LCD_I2C_WriteInCGRAM+0x2f6>
    36cc:	fe 01       	movw	r30, r28
    36ce:	e9 5b       	subi	r30, 0xB9	; 185
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	80 83       	st	Z, r24
	_delay_ms(120);
	I2C_send_start();
    36d6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <I2C_send_start>
	I2C_select_slave(5,0);
    36da:	85 e0       	ldi	r24, 0x05	; 5
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	0e 94 0a 0c 	call	0x1814	; 0x1814 <I2C_select_slave>
    36e2:	fe 01       	movw	r30, r28
    36e4:	ed 5b       	subi	r30, 0xBD	; 189
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	a8 ec       	ldi	r26, 0xC8	; 200
    36ee:	b2 e4       	ldi	r27, 0x42	; 66
    36f0:	80 83       	st	Z, r24
    36f2:	91 83       	std	Z+1, r25	; 0x01
    36f4:	a2 83       	std	Z+2, r26	; 0x02
    36f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f8:	8e 01       	movw	r16, r28
    36fa:	01 5c       	subi	r16, 0xC1	; 193
    36fc:	1f 4f       	sbci	r17, 0xFF	; 255
    36fe:	fe 01       	movw	r30, r28
    3700:	ed 5b       	subi	r30, 0xBD	; 189
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	60 81       	ld	r22, Z
    3706:	71 81       	ldd	r23, Z+1	; 0x01
    3708:	82 81       	ldd	r24, Z+2	; 0x02
    370a:	93 81       	ldd	r25, Z+3	; 0x03
    370c:	20 e0       	ldi	r18, 0x00	; 0
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	4a e7       	ldi	r20, 0x7A	; 122
    3712:	55 e4       	ldi	r21, 0x45	; 69
    3714:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	f8 01       	movw	r30, r16
    371e:	80 83       	st	Z, r24
    3720:	91 83       	std	Z+1, r25	; 0x01
    3722:	a2 83       	std	Z+2, r26	; 0x02
    3724:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3726:	fe 01       	movw	r30, r28
    3728:	ff 96       	adiw	r30, 0x3f	; 63
    372a:	60 81       	ld	r22, Z
    372c:	71 81       	ldd	r23, Z+1	; 0x01
    372e:	82 81       	ldd	r24, Z+2	; 0x02
    3730:	93 81       	ldd	r25, Z+3	; 0x03
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e8       	ldi	r20, 0x80	; 128
    3738:	5f e3       	ldi	r21, 0x3F	; 63
    373a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    373e:	88 23       	and	r24, r24
    3740:	2c f4       	brge	.+10     	; 0x374c <LCD_I2C_WriteInCGRAM+0x37a>
		__ticks = 1;
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	9e af       	std	Y+62, r25	; 0x3e
    3748:	8d af       	std	Y+61, r24	; 0x3d
    374a:	46 c0       	rjmp	.+140    	; 0x37d8 <LCD_I2C_WriteInCGRAM+0x406>
	else if (__tmp > 65535)
    374c:	fe 01       	movw	r30, r28
    374e:	ff 96       	adiw	r30, 0x3f	; 63
    3750:	60 81       	ld	r22, Z
    3752:	71 81       	ldd	r23, Z+1	; 0x01
    3754:	82 81       	ldd	r24, Z+2	; 0x02
    3756:	93 81       	ldd	r25, Z+3	; 0x03
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	3f ef       	ldi	r19, 0xFF	; 255
    375c:	4f e7       	ldi	r20, 0x7F	; 127
    375e:	57 e4       	ldi	r21, 0x47	; 71
    3760:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3764:	18 16       	cp	r1, r24
    3766:	64 f5       	brge	.+88     	; 0x37c0 <LCD_I2C_WriteInCGRAM+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3768:	fe 01       	movw	r30, r28
    376a:	ed 5b       	subi	r30, 0xBD	; 189
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	60 81       	ld	r22, Z
    3770:	71 81       	ldd	r23, Z+1	; 0x01
    3772:	82 81       	ldd	r24, Z+2	; 0x02
    3774:	93 81       	ldd	r25, Z+3	; 0x03
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	40 e2       	ldi	r20, 0x20	; 32
    377c:	51 e4       	ldi	r21, 0x41	; 65
    377e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	bc 01       	movw	r22, r24
    3788:	cd 01       	movw	r24, r26
    378a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	9e af       	std	Y+62, r25	; 0x3e
    3794:	8d af       	std	Y+61, r24	; 0x3d
    3796:	0f c0       	rjmp	.+30     	; 0x37b6 <LCD_I2C_WriteInCGRAM+0x3e4>
    3798:	80 e9       	ldi	r24, 0x90	; 144
    379a:	91 e0       	ldi	r25, 0x01	; 1
    379c:	9c af       	std	Y+60, r25	; 0x3c
    379e:	8b af       	std	Y+59, r24	; 0x3b
    37a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    37a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	f1 f7       	brne	.-4      	; 0x37a4 <LCD_I2C_WriteInCGRAM+0x3d2>
    37a8:	9c af       	std	Y+60, r25	; 0x3c
    37aa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    37ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    37b0:	01 97       	sbiw	r24, 0x01	; 1
    37b2:	9e af       	std	Y+62, r25	; 0x3e
    37b4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    37b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    37ba:	00 97       	sbiw	r24, 0x00	; 0
    37bc:	69 f7       	brne	.-38     	; 0x3798 <LCD_I2C_WriteInCGRAM+0x3c6>
    37be:	16 c0       	rjmp	.+44     	; 0x37ec <LCD_I2C_WriteInCGRAM+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c0:	fe 01       	movw	r30, r28
    37c2:	ff 96       	adiw	r30, 0x3f	; 63
    37c4:	60 81       	ld	r22, Z
    37c6:	71 81       	ldd	r23, Z+1	; 0x01
    37c8:	82 81       	ldd	r24, Z+2	; 0x02
    37ca:	93 81       	ldd	r25, Z+3	; 0x03
    37cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37d0:	dc 01       	movw	r26, r24
    37d2:	cb 01       	movw	r24, r22
    37d4:	9e af       	std	Y+62, r25	; 0x3e
    37d6:	8d af       	std	Y+61, r24	; 0x3d
    37d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    37da:	9e ad       	ldd	r25, Y+62	; 0x3e
    37dc:	9a af       	std	Y+58, r25	; 0x3a
    37de:	89 af       	std	Y+57, r24	; 0x39
    37e0:	89 ad       	ldd	r24, Y+57	; 0x39
    37e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    37e4:	01 97       	sbiw	r24, 0x01	; 1
    37e6:	f1 f7       	brne	.-4      	; 0x37e4 <LCD_I2C_WriteInCGRAM+0x412>
    37e8:	9a af       	std	Y+58, r25	; 0x3a
    37ea:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);
	I2C_Master_send_data(LCD_I2C_CGRAMData);
    37ec:	87 e0       	ldi	r24, 0x07	; 7
    37ee:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	a8 ec       	ldi	r26, 0xC8	; 200
    37f8:	b2 e4       	ldi	r27, 0x42	; 66
    37fa:	8d ab       	std	Y+53, r24	; 0x35
    37fc:	9e ab       	std	Y+54, r25	; 0x36
    37fe:	af ab       	std	Y+55, r26	; 0x37
    3800:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3802:	6d a9       	ldd	r22, Y+53	; 0x35
    3804:	7e a9       	ldd	r23, Y+54	; 0x36
    3806:	8f a9       	ldd	r24, Y+55	; 0x37
    3808:	98 ad       	ldd	r25, Y+56	; 0x38
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	4a e7       	ldi	r20, 0x7A	; 122
    3810:	55 e4       	ldi	r21, 0x45	; 69
    3812:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	89 ab       	std	Y+49, r24	; 0x31
    381c:	9a ab       	std	Y+50, r25	; 0x32
    381e:	ab ab       	std	Y+51, r26	; 0x33
    3820:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3822:	69 a9       	ldd	r22, Y+49	; 0x31
    3824:	7a a9       	ldd	r23, Y+50	; 0x32
    3826:	8b a9       	ldd	r24, Y+51	; 0x33
    3828:	9c a9       	ldd	r25, Y+52	; 0x34
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	40 e8       	ldi	r20, 0x80	; 128
    3830:	5f e3       	ldi	r21, 0x3F	; 63
    3832:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3836:	88 23       	and	r24, r24
    3838:	2c f4       	brge	.+10     	; 0x3844 <LCD_I2C_WriteInCGRAM+0x472>
		__ticks = 1;
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	98 ab       	std	Y+48, r25	; 0x30
    3840:	8f a7       	std	Y+47, r24	; 0x2f
    3842:	3f c0       	rjmp	.+126    	; 0x38c2 <LCD_I2C_WriteInCGRAM+0x4f0>
	else if (__tmp > 65535)
    3844:	69 a9       	ldd	r22, Y+49	; 0x31
    3846:	7a a9       	ldd	r23, Y+50	; 0x32
    3848:	8b a9       	ldd	r24, Y+51	; 0x33
    384a:	9c a9       	ldd	r25, Y+52	; 0x34
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	3f ef       	ldi	r19, 0xFF	; 255
    3850:	4f e7       	ldi	r20, 0x7F	; 127
    3852:	57 e4       	ldi	r21, 0x47	; 71
    3854:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3858:	18 16       	cp	r1, r24
    385a:	4c f5       	brge	.+82     	; 0x38ae <LCD_I2C_WriteInCGRAM+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    385c:	6d a9       	ldd	r22, Y+53	; 0x35
    385e:	7e a9       	ldd	r23, Y+54	; 0x36
    3860:	8f a9       	ldd	r24, Y+55	; 0x37
    3862:	98 ad       	ldd	r25, Y+56	; 0x38
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	40 e2       	ldi	r20, 0x20	; 32
    386a:	51 e4       	ldi	r21, 0x41	; 65
    386c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3870:	dc 01       	movw	r26, r24
    3872:	cb 01       	movw	r24, r22
    3874:	bc 01       	movw	r22, r24
    3876:	cd 01       	movw	r24, r26
    3878:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	98 ab       	std	Y+48, r25	; 0x30
    3882:	8f a7       	std	Y+47, r24	; 0x2f
    3884:	0f c0       	rjmp	.+30     	; 0x38a4 <LCD_I2C_WriteInCGRAM+0x4d2>
    3886:	80 e9       	ldi	r24, 0x90	; 144
    3888:	91 e0       	ldi	r25, 0x01	; 1
    388a:	9e a7       	std	Y+46, r25	; 0x2e
    388c:	8d a7       	std	Y+45, r24	; 0x2d
    388e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3890:	9e a5       	ldd	r25, Y+46	; 0x2e
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	f1 f7       	brne	.-4      	; 0x3892 <LCD_I2C_WriteInCGRAM+0x4c0>
    3896:	9e a7       	std	Y+46, r25	; 0x2e
    3898:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    389a:	8f a5       	ldd	r24, Y+47	; 0x2f
    389c:	98 a9       	ldd	r25, Y+48	; 0x30
    389e:	01 97       	sbiw	r24, 0x01	; 1
    38a0:	98 ab       	std	Y+48, r25	; 0x30
    38a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    38a6:	98 a9       	ldd	r25, Y+48	; 0x30
    38a8:	00 97       	sbiw	r24, 0x00	; 0
    38aa:	69 f7       	brne	.-38     	; 0x3886 <LCD_I2C_WriteInCGRAM+0x4b4>
    38ac:	14 c0       	rjmp	.+40     	; 0x38d6 <LCD_I2C_WriteInCGRAM+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ae:	69 a9       	ldd	r22, Y+49	; 0x31
    38b0:	7a a9       	ldd	r23, Y+50	; 0x32
    38b2:	8b a9       	ldd	r24, Y+51	; 0x33
    38b4:	9c a9       	ldd	r25, Y+52	; 0x34
    38b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38ba:	dc 01       	movw	r26, r24
    38bc:	cb 01       	movw	r24, r22
    38be:	98 ab       	std	Y+48, r25	; 0x30
    38c0:	8f a7       	std	Y+47, r24	; 0x2f
    38c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    38c4:	98 a9       	ldd	r25, Y+48	; 0x30
    38c6:	9c a7       	std	Y+44, r25	; 0x2c
    38c8:	8b a7       	std	Y+43, r24	; 0x2b
    38ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    38cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    38ce:	01 97       	sbiw	r24, 0x01	; 1
    38d0:	f1 f7       	brne	.-4      	; 0x38ce <LCD_I2C_WriteInCGRAM+0x4fc>
    38d2:	9c a7       	std	Y+44, r25	; 0x2c
    38d4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	I2C_Master_send_data(Copy_u8location);
    38d6:	fe 01       	movw	r30, r28
    38d8:	ea 59       	subi	r30, 0x9A	; 154
    38da:	ff 4f       	sbci	r31, 0xFF	; 255
    38dc:	80 81       	ld	r24, Z
    38de:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
	for(i = 0; i<8;i++)
    38e2:	fe 01       	movw	r30, r28
    38e4:	ed 59       	subi	r30, 0x9D	; 157
    38e6:	ff 4f       	sbci	r31, 0xFF	; 255
    38e8:	10 82       	st	Z, r1
    38ea:	8c c0       	rjmp	.+280    	; 0x3a04 <LCD_I2C_WriteInCGRAM+0x632>
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	a8 ec       	ldi	r26, 0xC8	; 200
    38f2:	b2 e4       	ldi	r27, 0x42	; 66
    38f4:	8f a3       	std	Y+39, r24	; 0x27
    38f6:	98 a7       	std	Y+40, r25	; 0x28
    38f8:	a9 a7       	std	Y+41, r26	; 0x29
    38fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38fc:	6f a1       	ldd	r22, Y+39	; 0x27
    38fe:	78 a5       	ldd	r23, Y+40	; 0x28
    3900:	89 a5       	ldd	r24, Y+41	; 0x29
    3902:	9a a5       	ldd	r25, Y+42	; 0x2a
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	4a e7       	ldi	r20, 0x7A	; 122
    390a:	55 e4       	ldi	r21, 0x45	; 69
    390c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	8b a3       	std	Y+35, r24	; 0x23
    3916:	9c a3       	std	Y+36, r25	; 0x24
    3918:	ad a3       	std	Y+37, r26	; 0x25
    391a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    391c:	6b a1       	ldd	r22, Y+35	; 0x23
    391e:	7c a1       	ldd	r23, Y+36	; 0x24
    3920:	8d a1       	ldd	r24, Y+37	; 0x25
    3922:	9e a1       	ldd	r25, Y+38	; 0x26
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e8       	ldi	r20, 0x80	; 128
    392a:	5f e3       	ldi	r21, 0x3F	; 63
    392c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3930:	88 23       	and	r24, r24
    3932:	2c f4       	brge	.+10     	; 0x393e <LCD_I2C_WriteInCGRAM+0x56c>
		__ticks = 1;
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	9a a3       	std	Y+34, r25	; 0x22
    393a:	89 a3       	std	Y+33, r24	; 0x21
    393c:	3f c0       	rjmp	.+126    	; 0x39bc <LCD_I2C_WriteInCGRAM+0x5ea>
	else if (__tmp > 65535)
    393e:	6b a1       	ldd	r22, Y+35	; 0x23
    3940:	7c a1       	ldd	r23, Y+36	; 0x24
    3942:	8d a1       	ldd	r24, Y+37	; 0x25
    3944:	9e a1       	ldd	r25, Y+38	; 0x26
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	3f ef       	ldi	r19, 0xFF	; 255
    394a:	4f e7       	ldi	r20, 0x7F	; 127
    394c:	57 e4       	ldi	r21, 0x47	; 71
    394e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3952:	18 16       	cp	r1, r24
    3954:	4c f5       	brge	.+82     	; 0x39a8 <LCD_I2C_WriteInCGRAM+0x5d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3956:	6f a1       	ldd	r22, Y+39	; 0x27
    3958:	78 a5       	ldd	r23, Y+40	; 0x28
    395a:	89 a5       	ldd	r24, Y+41	; 0x29
    395c:	9a a5       	ldd	r25, Y+42	; 0x2a
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	40 e2       	ldi	r20, 0x20	; 32
    3964:	51 e4       	ldi	r21, 0x41	; 65
    3966:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	bc 01       	movw	r22, r24
    3970:	cd 01       	movw	r24, r26
    3972:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	9a a3       	std	Y+34, r25	; 0x22
    397c:	89 a3       	std	Y+33, r24	; 0x21
    397e:	0f c0       	rjmp	.+30     	; 0x399e <LCD_I2C_WriteInCGRAM+0x5cc>
    3980:	80 e9       	ldi	r24, 0x90	; 144
    3982:	91 e0       	ldi	r25, 0x01	; 1
    3984:	98 a3       	std	Y+32, r25	; 0x20
    3986:	8f 8f       	std	Y+31, r24	; 0x1f
    3988:	8f 8d       	ldd	r24, Y+31	; 0x1f
    398a:	98 a1       	ldd	r25, Y+32	; 0x20
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	f1 f7       	brne	.-4      	; 0x398c <LCD_I2C_WriteInCGRAM+0x5ba>
    3990:	98 a3       	std	Y+32, r25	; 0x20
    3992:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3994:	89 a1       	ldd	r24, Y+33	; 0x21
    3996:	9a a1       	ldd	r25, Y+34	; 0x22
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	9a a3       	std	Y+34, r25	; 0x22
    399c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    399e:	89 a1       	ldd	r24, Y+33	; 0x21
    39a0:	9a a1       	ldd	r25, Y+34	; 0x22
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	69 f7       	brne	.-38     	; 0x3980 <LCD_I2C_WriteInCGRAM+0x5ae>
    39a6:	14 c0       	rjmp	.+40     	; 0x39d0 <LCD_I2C_WriteInCGRAM+0x5fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a8:	6b a1       	ldd	r22, Y+35	; 0x23
    39aa:	7c a1       	ldd	r23, Y+36	; 0x24
    39ac:	8d a1       	ldd	r24, Y+37	; 0x25
    39ae:	9e a1       	ldd	r25, Y+38	; 0x26
    39b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	9a a3       	std	Y+34, r25	; 0x22
    39ba:	89 a3       	std	Y+33, r24	; 0x21
    39bc:	89 a1       	ldd	r24, Y+33	; 0x21
    39be:	9a a1       	ldd	r25, Y+34	; 0x22
    39c0:	9e 8f       	std	Y+30, r25	; 0x1e
    39c2:	8d 8f       	std	Y+29, r24	; 0x1d
    39c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	f1 f7       	brne	.-4      	; 0x39c8 <LCD_I2C_WriteInCGRAM+0x5f6>
    39cc:	9e 8f       	std	Y+30, r25	; 0x1e
    39ce:	8d 8f       	std	Y+29, r24	; 0x1d
	{
	_delay_ms(100);
	I2C_Master_send_data(Copy_U8ptr[i]);
    39d0:	fe 01       	movw	r30, r28
    39d2:	ed 59       	subi	r30, 0x9D	; 157
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	80 81       	ld	r24, Z
    39d8:	28 2f       	mov	r18, r24
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	fe 01       	movw	r30, r28
    39de:	ec 59       	subi	r30, 0x9C	; 156
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	80 81       	ld	r24, Z
    39e4:	91 81       	ldd	r25, Z+1	; 0x01
    39e6:	fc 01       	movw	r30, r24
    39e8:	e2 0f       	add	r30, r18
    39ea:	f3 1f       	adc	r31, r19
    39ec:	80 81       	ld	r24, Z
    39ee:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <I2C_Master_send_data>
	I2C_select_slave(5,0);
	_delay_ms(100);
	I2C_Master_send_data(LCD_I2C_CGRAMData);
	_delay_ms(100);
	I2C_Master_send_data(Copy_u8location);
	for(i = 0; i<8;i++)
    39f2:	de 01       	movw	r26, r28
    39f4:	ad 59       	subi	r26, 0x9D	; 157
    39f6:	bf 4f       	sbci	r27, 0xFF	; 255
    39f8:	fe 01       	movw	r30, r28
    39fa:	ed 59       	subi	r30, 0x9D	; 157
    39fc:	ff 4f       	sbci	r31, 0xFF	; 255
    39fe:	80 81       	ld	r24, Z
    3a00:	8f 5f       	subi	r24, 0xFF	; 255
    3a02:	8c 93       	st	X, r24
    3a04:	fe 01       	movw	r30, r28
    3a06:	ed 59       	subi	r30, 0x9D	; 157
    3a08:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0a:	80 81       	ld	r24, Z
    3a0c:	88 30       	cpi	r24, 0x08	; 8
    3a0e:	08 f4       	brcc	.+2      	; 0x3a12 <LCD_I2C_WriteInCGRAM+0x640>
    3a10:	6d cf       	rjmp	.-294    	; 0x38ec <LCD_I2C_WriteInCGRAM+0x51a>
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	a0 e2       	ldi	r26, 0x20	; 32
    3a18:	b1 e4       	ldi	r27, 0x41	; 65
    3a1a:	89 8f       	std	Y+25, r24	; 0x19
    3a1c:	9a 8f       	std	Y+26, r25	; 0x1a
    3a1e:	ab 8f       	std	Y+27, r26	; 0x1b
    3a20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a22:	69 8d       	ldd	r22, Y+25	; 0x19
    3a24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	4a e7       	ldi	r20, 0x7A	; 122
    3a30:	55 e4       	ldi	r21, 0x45	; 69
    3a32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	8d 8b       	std	Y+21, r24	; 0x15
    3a3c:	9e 8b       	std	Y+22, r25	; 0x16
    3a3e:	af 8b       	std	Y+23, r26	; 0x17
    3a40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a42:	6d 89       	ldd	r22, Y+21	; 0x15
    3a44:	7e 89       	ldd	r23, Y+22	; 0x16
    3a46:	8f 89       	ldd	r24, Y+23	; 0x17
    3a48:	98 8d       	ldd	r25, Y+24	; 0x18
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e8       	ldi	r20, 0x80	; 128
    3a50:	5f e3       	ldi	r21, 0x3F	; 63
    3a52:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3a56:	88 23       	and	r24, r24
    3a58:	2c f4       	brge	.+10     	; 0x3a64 <LCD_I2C_WriteInCGRAM+0x692>
		__ticks = 1;
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	9c 8b       	std	Y+20, r25	; 0x14
    3a60:	8b 8b       	std	Y+19, r24	; 0x13
    3a62:	3f c0       	rjmp	.+126    	; 0x3ae2 <LCD_I2C_WriteInCGRAM+0x710>
	else if (__tmp > 65535)
    3a64:	6d 89       	ldd	r22, Y+21	; 0x15
    3a66:	7e 89       	ldd	r23, Y+22	; 0x16
    3a68:	8f 89       	ldd	r24, Y+23	; 0x17
    3a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	3f ef       	ldi	r19, 0xFF	; 255
    3a70:	4f e7       	ldi	r20, 0x7F	; 127
    3a72:	57 e4       	ldi	r21, 0x47	; 71
    3a74:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3a78:	18 16       	cp	r1, r24
    3a7a:	4c f5       	brge	.+82     	; 0x3ace <LCD_I2C_WriteInCGRAM+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a7c:	69 8d       	ldd	r22, Y+25	; 0x19
    3a7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a84:	20 e0       	ldi	r18, 0x00	; 0
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	40 e2       	ldi	r20, 0x20	; 32
    3a8a:	51 e4       	ldi	r21, 0x41	; 65
    3a8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	bc 01       	movw	r22, r24
    3a96:	cd 01       	movw	r24, r26
    3a98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	9c 8b       	std	Y+20, r25	; 0x14
    3aa2:	8b 8b       	std	Y+19, r24	; 0x13
    3aa4:	0f c0       	rjmp	.+30     	; 0x3ac4 <LCD_I2C_WriteInCGRAM+0x6f2>
    3aa6:	80 e9       	ldi	r24, 0x90	; 144
    3aa8:	91 e0       	ldi	r25, 0x01	; 1
    3aaa:	9a 8b       	std	Y+18, r25	; 0x12
    3aac:	89 8b       	std	Y+17, r24	; 0x11
    3aae:	89 89       	ldd	r24, Y+17	; 0x11
    3ab0:	9a 89       	ldd	r25, Y+18	; 0x12
    3ab2:	01 97       	sbiw	r24, 0x01	; 1
    3ab4:	f1 f7       	brne	.-4      	; 0x3ab2 <LCD_I2C_WriteInCGRAM+0x6e0>
    3ab6:	9a 8b       	std	Y+18, r25	; 0x12
    3ab8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aba:	8b 89       	ldd	r24, Y+19	; 0x13
    3abc:	9c 89       	ldd	r25, Y+20	; 0x14
    3abe:	01 97       	sbiw	r24, 0x01	; 1
    3ac0:	9c 8b       	std	Y+20, r25	; 0x14
    3ac2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ac8:	00 97       	sbiw	r24, 0x00	; 0
    3aca:	69 f7       	brne	.-38     	; 0x3aa6 <LCD_I2C_WriteInCGRAM+0x6d4>
    3acc:	14 c0       	rjmp	.+40     	; 0x3af6 <LCD_I2C_WriteInCGRAM+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ace:	6d 89       	ldd	r22, Y+21	; 0x15
    3ad0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ad6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ada:	dc 01       	movw	r26, r24
    3adc:	cb 01       	movw	r24, r22
    3ade:	9c 8b       	std	Y+20, r25	; 0x14
    3ae0:	8b 8b       	std	Y+19, r24	; 0x13
    3ae2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ae4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ae6:	98 8b       	std	Y+16, r25	; 0x10
    3ae8:	8f 87       	std	Y+15, r24	; 0x0f
    3aea:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aec:	98 89       	ldd	r25, Y+16	; 0x10
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	f1 f7       	brne	.-4      	; 0x3aee <LCD_I2C_WriteInCGRAM+0x71c>
    3af2:	98 8b       	std	Y+16, r25	; 0x10
    3af4:	8f 87       	std	Y+15, r24	; 0x0f
	{
	_delay_ms(100);
	I2C_Master_send_data(Copy_U8ptr[i]);
	}
	_delay_ms(10);
	I2C_stop();
    3af6:	0e 94 bb 0c 	call	0x1976	; 0x1976 <I2C_stop>
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	a8 ec       	ldi	r26, 0xC8	; 200
    3b00:	b2 e4       	ldi	r27, 0x42	; 66
    3b02:	8b 87       	std	Y+11, r24	; 0x0b
    3b04:	9c 87       	std	Y+12, r25	; 0x0c
    3b06:	ad 87       	std	Y+13, r26	; 0x0d
    3b08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	4a e7       	ldi	r20, 0x7A	; 122
    3b18:	55 e4       	ldi	r21, 0x45	; 69
    3b1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	8f 83       	std	Y+7, r24	; 0x07
    3b24:	98 87       	std	Y+8, r25	; 0x08
    3b26:	a9 87       	std	Y+9, r26	; 0x09
    3b28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b2c:	78 85       	ldd	r23, Y+8	; 0x08
    3b2e:	89 85       	ldd	r24, Y+9	; 0x09
    3b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	40 e8       	ldi	r20, 0x80	; 128
    3b38:	5f e3       	ldi	r21, 0x3F	; 63
    3b3a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3b3e:	88 23       	and	r24, r24
    3b40:	2c f4       	brge	.+10     	; 0x3b4c <LCD_I2C_WriteInCGRAM+0x77a>
		__ticks = 1;
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	9e 83       	std	Y+6, r25	; 0x06
    3b48:	8d 83       	std	Y+5, r24	; 0x05
    3b4a:	3f c0       	rjmp	.+126    	; 0x3bca <LCD_I2C_WriteInCGRAM+0x7f8>
	else if (__tmp > 65535)
    3b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b4e:	78 85       	ldd	r23, Y+8	; 0x08
    3b50:	89 85       	ldd	r24, Y+9	; 0x09
    3b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	3f ef       	ldi	r19, 0xFF	; 255
    3b58:	4f e7       	ldi	r20, 0x7F	; 127
    3b5a:	57 e4       	ldi	r21, 0x47	; 71
    3b5c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3b60:	18 16       	cp	r1, r24
    3b62:	4c f5       	brge	.+82     	; 0x3bb6 <LCD_I2C_WriteInCGRAM+0x7e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b64:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b66:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b68:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	40 e2       	ldi	r20, 0x20	; 32
    3b72:	51 e4       	ldi	r21, 0x41	; 65
    3b74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b78:	dc 01       	movw	r26, r24
    3b7a:	cb 01       	movw	r24, r22
    3b7c:	bc 01       	movw	r22, r24
    3b7e:	cd 01       	movw	r24, r26
    3b80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	9e 83       	std	Y+6, r25	; 0x06
    3b8a:	8d 83       	std	Y+5, r24	; 0x05
    3b8c:	0f c0       	rjmp	.+30     	; 0x3bac <LCD_I2C_WriteInCGRAM+0x7da>
    3b8e:	80 e9       	ldi	r24, 0x90	; 144
    3b90:	91 e0       	ldi	r25, 0x01	; 1
    3b92:	9c 83       	std	Y+4, r25	; 0x04
    3b94:	8b 83       	std	Y+3, r24	; 0x03
    3b96:	8b 81       	ldd	r24, Y+3	; 0x03
    3b98:	9c 81       	ldd	r25, Y+4	; 0x04
    3b9a:	01 97       	sbiw	r24, 0x01	; 1
    3b9c:	f1 f7       	brne	.-4      	; 0x3b9a <LCD_I2C_WriteInCGRAM+0x7c8>
    3b9e:	9c 83       	std	Y+4, r25	; 0x04
    3ba0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	9e 83       	std	Y+6, r25	; 0x06
    3baa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bac:	8d 81       	ldd	r24, Y+5	; 0x05
    3bae:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb0:	00 97       	sbiw	r24, 0x00	; 0
    3bb2:	69 f7       	brne	.-38     	; 0x3b8e <LCD_I2C_WriteInCGRAM+0x7bc>
    3bb4:	14 c0       	rjmp	.+40     	; 0x3bde <LCD_I2C_WriteInCGRAM+0x80c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb8:	78 85       	ldd	r23, Y+8	; 0x08
    3bba:	89 85       	ldd	r24, Y+9	; 0x09
    3bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	9e 83       	std	Y+6, r25	; 0x06
    3bc8:	8d 83       	std	Y+5, r24	; 0x05
    3bca:	8d 81       	ldd	r24, Y+5	; 0x05
    3bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bce:	9a 83       	std	Y+2, r25	; 0x02
    3bd0:	89 83       	std	Y+1, r24	; 0x01
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd6:	01 97       	sbiw	r24, 0x01	; 1
    3bd8:	f1 f7       	brne	.-4      	; 0x3bd6 <LCD_I2C_WriteInCGRAM+0x804>
    3bda:	9a 83       	std	Y+2, r25	; 0x02
    3bdc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	LCD_I2C_SendCommand(0x80); /// set DDRam pointer
    3bde:	80 e8       	ldi	r24, 0x80	; 128
    3be0:	0e 94 23 16 	call	0x2c46	; 0x2c46 <LCD_I2C_SendCommand>
}
    3be4:	ca 59       	subi	r28, 0x9A	; 154
    3be6:	df 4f       	sbci	r29, 0xFF	; 255
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	cf 91       	pop	r28
    3bf4:	df 91       	pop	r29
    3bf6:	1f 91       	pop	r17
    3bf8:	0f 91       	pop	r16
    3bfa:	08 95       	ret

00003bfc <LCD_VidSendData>:
#include"DIO_Interface.h"
#include"LCD_interface.h"
#include "LCD_cofig.h"

void LCD_VidSendData(u8 Copy_u8Data)
{
    3bfc:	df 93       	push	r29
    3bfe:	cf 93       	push	r28
    3c00:	cd b7       	in	r28, 0x3d	; 61
    3c02:	de b7       	in	r29, 0x3e	; 62
    3c04:	6d 97       	sbiw	r28, 0x1d	; 29
    3c06:	0f b6       	in	r0, 0x3f	; 63
    3c08:	f8 94       	cli
    3c0a:	de bf       	out	0x3e, r29	; 62
    3c0c:	0f be       	out	0x3f, r0	; 63
    3c0e:	cd bf       	out	0x3d, r28	; 61
    3c10:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	60 e0       	ldi	r22, 0x00	; 0
    3c16:	41 e0       	ldi	r20, 0x01	; 1
    3c18:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	61 e0       	ldi	r22, 0x01	; 1
    3c20:	40 e0       	ldi	r20, 0x00	; 0
    3c22:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VidSetPin_Value>
	DIO_VidWriteOnPort(Data_Port,Copy_u8Data);
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3c2a:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	62 e0       	ldi	r22, 0x02	; 2
    3c32:	41 e0       	ldi	r20, 0x01	; 1
    3c34:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VidSetPin_Value>
    3c38:	80 e0       	ldi	r24, 0x00	; 0
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	a0 e2       	ldi	r26, 0x20	; 32
    3c3e:	b1 e4       	ldi	r27, 0x41	; 65
    3c40:	89 8f       	std	Y+25, r24	; 0x19
    3c42:	9a 8f       	std	Y+26, r25	; 0x1a
    3c44:	ab 8f       	std	Y+27, r26	; 0x1b
    3c46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c48:	69 8d       	ldd	r22, Y+25	; 0x19
    3c4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	4a e7       	ldi	r20, 0x7A	; 122
    3c56:	55 e4       	ldi	r21, 0x45	; 69
    3c58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	8d 8b       	std	Y+21, r24	; 0x15
    3c62:	9e 8b       	std	Y+22, r25	; 0x16
    3c64:	af 8b       	std	Y+23, r26	; 0x17
    3c66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c68:	6d 89       	ldd	r22, Y+21	; 0x15
    3c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c70:	20 e0       	ldi	r18, 0x00	; 0
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	40 e8       	ldi	r20, 0x80	; 128
    3c76:	5f e3       	ldi	r21, 0x3F	; 63
    3c78:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3c7c:	88 23       	and	r24, r24
    3c7e:	2c f4       	brge	.+10     	; 0x3c8a <LCD_VidSendData+0x8e>
		__ticks = 1;
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	9c 8b       	std	Y+20, r25	; 0x14
    3c86:	8b 8b       	std	Y+19, r24	; 0x13
    3c88:	3f c0       	rjmp	.+126    	; 0x3d08 <LCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    3c8a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c8c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c90:	98 8d       	ldd	r25, Y+24	; 0x18
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	3f ef       	ldi	r19, 0xFF	; 255
    3c96:	4f e7       	ldi	r20, 0x7F	; 127
    3c98:	57 e4       	ldi	r21, 0x47	; 71
    3c9a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3c9e:	18 16       	cp	r1, r24
    3ca0:	4c f5       	brge	.+82     	; 0x3cf4 <LCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ca2:	69 8d       	ldd	r22, Y+25	; 0x19
    3ca4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ca6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ca8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3caa:	20 e0       	ldi	r18, 0x00	; 0
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	40 e2       	ldi	r20, 0x20	; 32
    3cb0:	51 e4       	ldi	r21, 0x41	; 65
    3cb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	cb 01       	movw	r24, r22
    3cba:	bc 01       	movw	r22, r24
    3cbc:	cd 01       	movw	r24, r26
    3cbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	9c 8b       	std	Y+20, r25	; 0x14
    3cc8:	8b 8b       	std	Y+19, r24	; 0x13
    3cca:	0f c0       	rjmp	.+30     	; 0x3cea <LCD_VidSendData+0xee>
    3ccc:	80 e9       	ldi	r24, 0x90	; 144
    3cce:	91 e0       	ldi	r25, 0x01	; 1
    3cd0:	9a 8b       	std	Y+18, r25	; 0x12
    3cd2:	89 8b       	std	Y+17, r24	; 0x11
    3cd4:	89 89       	ldd	r24, Y+17	; 0x11
    3cd6:	9a 89       	ldd	r25, Y+18	; 0x12
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	f1 f7       	brne	.-4      	; 0x3cd8 <LCD_VidSendData+0xdc>
    3cdc:	9a 8b       	std	Y+18, r25	; 0x12
    3cde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ce0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ce2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ce4:	01 97       	sbiw	r24, 0x01	; 1
    3ce6:	9c 8b       	std	Y+20, r25	; 0x14
    3ce8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cea:	8b 89       	ldd	r24, Y+19	; 0x13
    3cec:	9c 89       	ldd	r25, Y+20	; 0x14
    3cee:	00 97       	sbiw	r24, 0x00	; 0
    3cf0:	69 f7       	brne	.-38     	; 0x3ccc <LCD_VidSendData+0xd0>
    3cf2:	14 c0       	rjmp	.+40     	; 0x3d1c <LCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cf4:	6d 89       	ldd	r22, Y+21	; 0x15
    3cf6:	7e 89       	ldd	r23, Y+22	; 0x16
    3cf8:	8f 89       	ldd	r24, Y+23	; 0x17
    3cfa:	98 8d       	ldd	r25, Y+24	; 0x18
    3cfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d00:	dc 01       	movw	r26, r24
    3d02:	cb 01       	movw	r24, r22
    3d04:	9c 8b       	std	Y+20, r25	; 0x14
    3d06:	8b 8b       	std	Y+19, r24	; 0x13
    3d08:	8b 89       	ldd	r24, Y+19	; 0x13
    3d0a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d0c:	98 8b       	std	Y+16, r25	; 0x10
    3d0e:	8f 87       	std	Y+15, r24	; 0x0f
    3d10:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d12:	98 89       	ldd	r25, Y+16	; 0x10
    3d14:	01 97       	sbiw	r24, 0x01	; 1
    3d16:	f1 f7       	brne	.-4      	; 0x3d14 <LCD_VidSendData+0x118>
    3d18:	98 8b       	std	Y+16, r25	; 0x10
    3d1a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	62 e0       	ldi	r22, 0x02	; 2
    3d20:	40 e0       	ldi	r20, 0x00	; 0
    3d22:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VidSetPin_Value>
    3d26:	80 e0       	ldi	r24, 0x00	; 0
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	a0 e2       	ldi	r26, 0x20	; 32
    3d2c:	b1 e4       	ldi	r27, 0x41	; 65
    3d2e:	8b 87       	std	Y+11, r24	; 0x0b
    3d30:	9c 87       	std	Y+12, r25	; 0x0c
    3d32:	ad 87       	std	Y+13, r26	; 0x0d
    3d34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	4a e7       	ldi	r20, 0x7A	; 122
    3d44:	55 e4       	ldi	r21, 0x45	; 69
    3d46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	8f 83       	std	Y+7, r24	; 0x07
    3d50:	98 87       	std	Y+8, r25	; 0x08
    3d52:	a9 87       	std	Y+9, r26	; 0x09
    3d54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d56:	6f 81       	ldd	r22, Y+7	; 0x07
    3d58:	78 85       	ldd	r23, Y+8	; 0x08
    3d5a:	89 85       	ldd	r24, Y+9	; 0x09
    3d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e8       	ldi	r20, 0x80	; 128
    3d64:	5f e3       	ldi	r21, 0x3F	; 63
    3d66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3d6a:	88 23       	and	r24, r24
    3d6c:	2c f4       	brge	.+10     	; 0x3d78 <LCD_VidSendData+0x17c>
		__ticks = 1;
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	9e 83       	std	Y+6, r25	; 0x06
    3d74:	8d 83       	std	Y+5, r24	; 0x05
    3d76:	3f c0       	rjmp	.+126    	; 0x3df6 <LCD_VidSendData+0x1fa>
	else if (__tmp > 65535)
    3d78:	6f 81       	ldd	r22, Y+7	; 0x07
    3d7a:	78 85       	ldd	r23, Y+8	; 0x08
    3d7c:	89 85       	ldd	r24, Y+9	; 0x09
    3d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	3f ef       	ldi	r19, 0xFF	; 255
    3d84:	4f e7       	ldi	r20, 0x7F	; 127
    3d86:	57 e4       	ldi	r21, 0x47	; 71
    3d88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3d8c:	18 16       	cp	r1, r24
    3d8e:	4c f5       	brge	.+82     	; 0x3de2 <LCD_VidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	40 e2       	ldi	r20, 0x20	; 32
    3d9e:	51 e4       	ldi	r21, 0x41	; 65
    3da0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	bc 01       	movw	r22, r24
    3daa:	cd 01       	movw	r24, r26
    3dac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	9e 83       	std	Y+6, r25	; 0x06
    3db6:	8d 83       	std	Y+5, r24	; 0x05
    3db8:	0f c0       	rjmp	.+30     	; 0x3dd8 <LCD_VidSendData+0x1dc>
    3dba:	80 e9       	ldi	r24, 0x90	; 144
    3dbc:	91 e0       	ldi	r25, 0x01	; 1
    3dbe:	9c 83       	std	Y+4, r25	; 0x04
    3dc0:	8b 83       	std	Y+3, r24	; 0x03
    3dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc6:	01 97       	sbiw	r24, 0x01	; 1
    3dc8:	f1 f7       	brne	.-4      	; 0x3dc6 <LCD_VidSendData+0x1ca>
    3dca:	9c 83       	std	Y+4, r25	; 0x04
    3dcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dce:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	9e 83       	std	Y+6, r25	; 0x06
    3dd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dda:	9e 81       	ldd	r25, Y+6	; 0x06
    3ddc:	00 97       	sbiw	r24, 0x00	; 0
    3dde:	69 f7       	brne	.-38     	; 0x3dba <LCD_VidSendData+0x1be>
    3de0:	14 c0       	rjmp	.+40     	; 0x3e0a <LCD_VidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3de2:	6f 81       	ldd	r22, Y+7	; 0x07
    3de4:	78 85       	ldd	r23, Y+8	; 0x08
    3de6:	89 85       	ldd	r24, Y+9	; 0x09
    3de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	9e 83       	std	Y+6, r25	; 0x06
    3df4:	8d 83       	std	Y+5, r24	; 0x05
    3df6:	8d 81       	ldd	r24, Y+5	; 0x05
    3df8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dfa:	9a 83       	std	Y+2, r25	; 0x02
    3dfc:	89 83       	std	Y+1, r24	; 0x01
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	9a 81       	ldd	r25, Y+2	; 0x02
    3e02:	01 97       	sbiw	r24, 0x01	; 1
    3e04:	f1 f7       	brne	.-4      	; 0x3e02 <LCD_VidSendData+0x206>
    3e06:	9a 83       	std	Y+2, r25	; 0x02
    3e08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    3e0a:	6d 96       	adiw	r28, 0x1d	; 29
    3e0c:	0f b6       	in	r0, 0x3f	; 63
    3e0e:	f8 94       	cli
    3e10:	de bf       	out	0x3e, r29	; 62
    3e12:	0f be       	out	0x3f, r0	; 63
    3e14:	cd bf       	out	0x3d, r28	; 61
    3e16:	cf 91       	pop	r28
    3e18:	df 91       	pop	r29
    3e1a:	08 95       	ret

00003e1c <LCD_VidSendCommand>:
void LCD_VidSendCommand(u8 Copy_u8Data)
{
    3e1c:	df 93       	push	r29
    3e1e:	cf 93       	push	r28
    3e20:	cd b7       	in	r28, 0x3d	; 61
    3e22:	de b7       	in	r29, 0x3e	; 62
    3e24:	6d 97       	sbiw	r28, 0x1d	; 29
    3e26:	0f b6       	in	r0, 0x3f	; 63
    3e28:	f8 94       	cli
    3e2a:	de bf       	out	0x3e, r29	; 62
    3e2c:	0f be       	out	0x3f, r0	; 63
    3e2e:	cd bf       	out	0x3d, r28	; 61
    3e30:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPin_Value(Control_Port,RS,0);   //rs=0   data
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	60 e0       	ldi	r22, 0x00	; 0
    3e36:	40 e0       	ldi	r20, 0x00	; 0
    3e38:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	61 e0       	ldi	r22, 0x01	; 1
    3e40:	40 e0       	ldi	r20, 0x00	; 0
    3e42:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VidSetPin_Value>
	DIO_VidWriteOnPort(Data_Port,Copy_u8Data);
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3e4a:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	62 e0       	ldi	r22, 0x02	; 2
    3e52:	41 e0       	ldi	r20, 0x01	; 1
    3e54:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VidSetPin_Value>
    3e58:	80 e0       	ldi	r24, 0x00	; 0
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	a0 e2       	ldi	r26, 0x20	; 32
    3e5e:	b1 e4       	ldi	r27, 0x41	; 65
    3e60:	89 8f       	std	Y+25, r24	; 0x19
    3e62:	9a 8f       	std	Y+26, r25	; 0x1a
    3e64:	ab 8f       	std	Y+27, r26	; 0x1b
    3e66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e68:	69 8d       	ldd	r22, Y+25	; 0x19
    3e6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e70:	20 e0       	ldi	r18, 0x00	; 0
    3e72:	30 e0       	ldi	r19, 0x00	; 0
    3e74:	4a e7       	ldi	r20, 0x7A	; 122
    3e76:	55 e4       	ldi	r21, 0x45	; 69
    3e78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e7c:	dc 01       	movw	r26, r24
    3e7e:	cb 01       	movw	r24, r22
    3e80:	8d 8b       	std	Y+21, r24	; 0x15
    3e82:	9e 8b       	std	Y+22, r25	; 0x16
    3e84:	af 8b       	std	Y+23, r26	; 0x17
    3e86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e88:	6d 89       	ldd	r22, Y+21	; 0x15
    3e8a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    3e90:	20 e0       	ldi	r18, 0x00	; 0
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	40 e8       	ldi	r20, 0x80	; 128
    3e96:	5f e3       	ldi	r21, 0x3F	; 63
    3e98:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3e9c:	88 23       	and	r24, r24
    3e9e:	2c f4       	brge	.+10     	; 0x3eaa <LCD_VidSendCommand+0x8e>
		__ticks = 1;
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	9c 8b       	std	Y+20, r25	; 0x14
    3ea6:	8b 8b       	std	Y+19, r24	; 0x13
    3ea8:	3f c0       	rjmp	.+126    	; 0x3f28 <LCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    3eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    3eac:	7e 89       	ldd	r23, Y+22	; 0x16
    3eae:	8f 89       	ldd	r24, Y+23	; 0x17
    3eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    3eb2:	20 e0       	ldi	r18, 0x00	; 0
    3eb4:	3f ef       	ldi	r19, 0xFF	; 255
    3eb6:	4f e7       	ldi	r20, 0x7F	; 127
    3eb8:	57 e4       	ldi	r21, 0x47	; 71
    3eba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3ebe:	18 16       	cp	r1, r24
    3ec0:	4c f5       	brge	.+82     	; 0x3f14 <LCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ec2:	69 8d       	ldd	r22, Y+25	; 0x19
    3ec4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3eca:	20 e0       	ldi	r18, 0x00	; 0
    3ecc:	30 e0       	ldi	r19, 0x00	; 0
    3ece:	40 e2       	ldi	r20, 0x20	; 32
    3ed0:	51 e4       	ldi	r21, 0x41	; 65
    3ed2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ed6:	dc 01       	movw	r26, r24
    3ed8:	cb 01       	movw	r24, r22
    3eda:	bc 01       	movw	r22, r24
    3edc:	cd 01       	movw	r24, r26
    3ede:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	cb 01       	movw	r24, r22
    3ee6:	9c 8b       	std	Y+20, r25	; 0x14
    3ee8:	8b 8b       	std	Y+19, r24	; 0x13
    3eea:	0f c0       	rjmp	.+30     	; 0x3f0a <LCD_VidSendCommand+0xee>
    3eec:	80 e9       	ldi	r24, 0x90	; 144
    3eee:	91 e0       	ldi	r25, 0x01	; 1
    3ef0:	9a 8b       	std	Y+18, r25	; 0x12
    3ef2:	89 8b       	std	Y+17, r24	; 0x11
    3ef4:	89 89       	ldd	r24, Y+17	; 0x11
    3ef6:	9a 89       	ldd	r25, Y+18	; 0x12
    3ef8:	01 97       	sbiw	r24, 0x01	; 1
    3efa:	f1 f7       	brne	.-4      	; 0x3ef8 <LCD_VidSendCommand+0xdc>
    3efc:	9a 8b       	std	Y+18, r25	; 0x12
    3efe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f00:	8b 89       	ldd	r24, Y+19	; 0x13
    3f02:	9c 89       	ldd	r25, Y+20	; 0x14
    3f04:	01 97       	sbiw	r24, 0x01	; 1
    3f06:	9c 8b       	std	Y+20, r25	; 0x14
    3f08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    3f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    3f0e:	00 97       	sbiw	r24, 0x00	; 0
    3f10:	69 f7       	brne	.-38     	; 0x3eec <LCD_VidSendCommand+0xd0>
    3f12:	14 c0       	rjmp	.+40     	; 0x3f3c <LCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f14:	6d 89       	ldd	r22, Y+21	; 0x15
    3f16:	7e 89       	ldd	r23, Y+22	; 0x16
    3f18:	8f 89       	ldd	r24, Y+23	; 0x17
    3f1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3f1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f20:	dc 01       	movw	r26, r24
    3f22:	cb 01       	movw	r24, r22
    3f24:	9c 8b       	std	Y+20, r25	; 0x14
    3f26:	8b 8b       	std	Y+19, r24	; 0x13
    3f28:	8b 89       	ldd	r24, Y+19	; 0x13
    3f2a:	9c 89       	ldd	r25, Y+20	; 0x14
    3f2c:	98 8b       	std	Y+16, r25	; 0x10
    3f2e:	8f 87       	std	Y+15, r24	; 0x0f
    3f30:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f32:	98 89       	ldd	r25, Y+16	; 0x10
    3f34:	01 97       	sbiw	r24, 0x01	; 1
    3f36:	f1 f7       	brne	.-4      	; 0x3f34 <LCD_VidSendCommand+0x118>
    3f38:	98 8b       	std	Y+16, r25	; 0x10
    3f3a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    3f3c:	81 e0       	ldi	r24, 0x01	; 1
    3f3e:	62 e0       	ldi	r22, 0x02	; 2
    3f40:	40 e0       	ldi	r20, 0x00	; 0
    3f42:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VidSetPin_Value>
    3f46:	80 e0       	ldi	r24, 0x00	; 0
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	a0 e2       	ldi	r26, 0x20	; 32
    3f4c:	b1 e4       	ldi	r27, 0x41	; 65
    3f4e:	8b 87       	std	Y+11, r24	; 0x0b
    3f50:	9c 87       	std	Y+12, r25	; 0x0c
    3f52:	ad 87       	std	Y+13, r26	; 0x0d
    3f54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f56:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f58:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	4a e7       	ldi	r20, 0x7A	; 122
    3f64:	55 e4       	ldi	r21, 0x45	; 69
    3f66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f6a:	dc 01       	movw	r26, r24
    3f6c:	cb 01       	movw	r24, r22
    3f6e:	8f 83       	std	Y+7, r24	; 0x07
    3f70:	98 87       	std	Y+8, r25	; 0x08
    3f72:	a9 87       	std	Y+9, r26	; 0x09
    3f74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f76:	6f 81       	ldd	r22, Y+7	; 0x07
    3f78:	78 85       	ldd	r23, Y+8	; 0x08
    3f7a:	89 85       	ldd	r24, Y+9	; 0x09
    3f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	40 e8       	ldi	r20, 0x80	; 128
    3f84:	5f e3       	ldi	r21, 0x3F	; 63
    3f86:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3f8a:	88 23       	and	r24, r24
    3f8c:	2c f4       	brge	.+10     	; 0x3f98 <LCD_VidSendCommand+0x17c>
		__ticks = 1;
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	9e 83       	std	Y+6, r25	; 0x06
    3f94:	8d 83       	std	Y+5, r24	; 0x05
    3f96:	3f c0       	rjmp	.+126    	; 0x4016 <LCD_VidSendCommand+0x1fa>
	else if (__tmp > 65535)
    3f98:	6f 81       	ldd	r22, Y+7	; 0x07
    3f9a:	78 85       	ldd	r23, Y+8	; 0x08
    3f9c:	89 85       	ldd	r24, Y+9	; 0x09
    3f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	3f ef       	ldi	r19, 0xFF	; 255
    3fa4:	4f e7       	ldi	r20, 0x7F	; 127
    3fa6:	57 e4       	ldi	r21, 0x47	; 71
    3fa8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3fac:	18 16       	cp	r1, r24
    3fae:	4c f5       	brge	.+82     	; 0x4002 <LCD_VidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	40 e2       	ldi	r20, 0x20	; 32
    3fbe:	51 e4       	ldi	r21, 0x41	; 65
    3fc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	bc 01       	movw	r22, r24
    3fca:	cd 01       	movw	r24, r26
    3fcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3fd0:	dc 01       	movw	r26, r24
    3fd2:	cb 01       	movw	r24, r22
    3fd4:	9e 83       	std	Y+6, r25	; 0x06
    3fd6:	8d 83       	std	Y+5, r24	; 0x05
    3fd8:	0f c0       	rjmp	.+30     	; 0x3ff8 <LCD_VidSendCommand+0x1dc>
    3fda:	80 e9       	ldi	r24, 0x90	; 144
    3fdc:	91 e0       	ldi	r25, 0x01	; 1
    3fde:	9c 83       	std	Y+4, r25	; 0x04
    3fe0:	8b 83       	std	Y+3, r24	; 0x03
    3fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fe6:	01 97       	sbiw	r24, 0x01	; 1
    3fe8:	f1 f7       	brne	.-4      	; 0x3fe6 <LCD_VidSendCommand+0x1ca>
    3fea:	9c 83       	std	Y+4, r25	; 0x04
    3fec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fee:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff2:	01 97       	sbiw	r24, 0x01	; 1
    3ff4:	9e 83       	std	Y+6, r25	; 0x06
    3ff6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    3ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    3ffc:	00 97       	sbiw	r24, 0x00	; 0
    3ffe:	69 f7       	brne	.-38     	; 0x3fda <LCD_VidSendCommand+0x1be>
    4000:	14 c0       	rjmp	.+40     	; 0x402a <LCD_VidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4002:	6f 81       	ldd	r22, Y+7	; 0x07
    4004:	78 85       	ldd	r23, Y+8	; 0x08
    4006:	89 85       	ldd	r24, Y+9	; 0x09
    4008:	9a 85       	ldd	r25, Y+10	; 0x0a
    400a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	9e 83       	std	Y+6, r25	; 0x06
    4014:	8d 83       	std	Y+5, r24	; 0x05
    4016:	8d 81       	ldd	r24, Y+5	; 0x05
    4018:	9e 81       	ldd	r25, Y+6	; 0x06
    401a:	9a 83       	std	Y+2, r25	; 0x02
    401c:	89 83       	std	Y+1, r24	; 0x01
    401e:	89 81       	ldd	r24, Y+1	; 0x01
    4020:	9a 81       	ldd	r25, Y+2	; 0x02
    4022:	01 97       	sbiw	r24, 0x01	; 1
    4024:	f1 f7       	brne	.-4      	; 0x4022 <LCD_VidSendCommand+0x206>
    4026:	9a 83       	std	Y+2, r25	; 0x02
    4028:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    402a:	6d 96       	adiw	r28, 0x1d	; 29
    402c:	0f b6       	in	r0, 0x3f	; 63
    402e:	f8 94       	cli
    4030:	de bf       	out	0x3e, r29	; 62
    4032:	0f be       	out	0x3f, r0	; 63
    4034:	cd bf       	out	0x3d, r28	; 61
    4036:	cf 91       	pop	r28
    4038:	df 91       	pop	r29
    403a:	08 95       	ret

0000403c <LCD_VidInt>:
void LCD_VidInt(void)
{	
    403c:	df 93       	push	r29
    403e:	cf 93       	push	r28
    4040:	cd b7       	in	r28, 0x3d	; 61
    4042:	de b7       	in	r29, 0x3e	; 62
    4044:	e8 97       	sbiw	r28, 0x38	; 56
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	f8 94       	cli
    404a:	de bf       	out	0x3e, r29	; 62
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPort_Direction(Data_Port,1);
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	61 e0       	ldi	r22, 0x01	; 1
    4054:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_VidSetPort_Direction>
	DIO_VidSetPin_Direction(Control_Port,RS,1);
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	60 e0       	ldi	r22, 0x00	; 0
    405c:	41 e0       	ldi	r20, 0x01	; 1
    405e:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_VidSetPin_Direction>
	DIO_VidSetPin_Direction(Control_Port,RW,1);
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	61 e0       	ldi	r22, 0x01	; 1
    4066:	41 e0       	ldi	r20, 0x01	; 1
    4068:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_VidSetPin_Direction>
	DIO_VidSetPin_Direction(Control_Port,E,1);
    406c:	81 e0       	ldi	r24, 0x01	; 1
    406e:	62 e0       	ldi	r22, 0x02	; 2
    4070:	41 e0       	ldi	r20, 0x01	; 1
    4072:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_VidSetPin_Direction>
    4076:	80 e0       	ldi	r24, 0x00	; 0
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	a0 e2       	ldi	r26, 0x20	; 32
    407c:	b2 e4       	ldi	r27, 0x42	; 66
    407e:	8d ab       	std	Y+53, r24	; 0x35
    4080:	9e ab       	std	Y+54, r25	; 0x36
    4082:	af ab       	std	Y+55, r26	; 0x37
    4084:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4086:	6d a9       	ldd	r22, Y+53	; 0x35
    4088:	7e a9       	ldd	r23, Y+54	; 0x36
    408a:	8f a9       	ldd	r24, Y+55	; 0x37
    408c:	98 ad       	ldd	r25, Y+56	; 0x38
    408e:	20 e0       	ldi	r18, 0x00	; 0
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	4a e7       	ldi	r20, 0x7A	; 122
    4094:	55 e4       	ldi	r21, 0x45	; 69
    4096:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    409a:	dc 01       	movw	r26, r24
    409c:	cb 01       	movw	r24, r22
    409e:	89 ab       	std	Y+49, r24	; 0x31
    40a0:	9a ab       	std	Y+50, r25	; 0x32
    40a2:	ab ab       	std	Y+51, r26	; 0x33
    40a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    40a6:	69 a9       	ldd	r22, Y+49	; 0x31
    40a8:	7a a9       	ldd	r23, Y+50	; 0x32
    40aa:	8b a9       	ldd	r24, Y+51	; 0x33
    40ac:	9c a9       	ldd	r25, Y+52	; 0x34
    40ae:	20 e0       	ldi	r18, 0x00	; 0
    40b0:	30 e0       	ldi	r19, 0x00	; 0
    40b2:	40 e8       	ldi	r20, 0x80	; 128
    40b4:	5f e3       	ldi	r21, 0x3F	; 63
    40b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    40ba:	88 23       	and	r24, r24
    40bc:	2c f4       	brge	.+10     	; 0x40c8 <LCD_VidInt+0x8c>
		__ticks = 1;
    40be:	81 e0       	ldi	r24, 0x01	; 1
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	98 ab       	std	Y+48, r25	; 0x30
    40c4:	8f a7       	std	Y+47, r24	; 0x2f
    40c6:	3f c0       	rjmp	.+126    	; 0x4146 <LCD_VidInt+0x10a>
	else if (__tmp > 65535)
    40c8:	69 a9       	ldd	r22, Y+49	; 0x31
    40ca:	7a a9       	ldd	r23, Y+50	; 0x32
    40cc:	8b a9       	ldd	r24, Y+51	; 0x33
    40ce:	9c a9       	ldd	r25, Y+52	; 0x34
    40d0:	20 e0       	ldi	r18, 0x00	; 0
    40d2:	3f ef       	ldi	r19, 0xFF	; 255
    40d4:	4f e7       	ldi	r20, 0x7F	; 127
    40d6:	57 e4       	ldi	r21, 0x47	; 71
    40d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    40dc:	18 16       	cp	r1, r24
    40de:	4c f5       	brge	.+82     	; 0x4132 <LCD_VidInt+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40e0:	6d a9       	ldd	r22, Y+53	; 0x35
    40e2:	7e a9       	ldd	r23, Y+54	; 0x36
    40e4:	8f a9       	ldd	r24, Y+55	; 0x37
    40e6:	98 ad       	ldd	r25, Y+56	; 0x38
    40e8:	20 e0       	ldi	r18, 0x00	; 0
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	40 e2       	ldi	r20, 0x20	; 32
    40ee:	51 e4       	ldi	r21, 0x41	; 65
    40f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    40f4:	dc 01       	movw	r26, r24
    40f6:	cb 01       	movw	r24, r22
    40f8:	bc 01       	movw	r22, r24
    40fa:	cd 01       	movw	r24, r26
    40fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	98 ab       	std	Y+48, r25	; 0x30
    4106:	8f a7       	std	Y+47, r24	; 0x2f
    4108:	0f c0       	rjmp	.+30     	; 0x4128 <LCD_VidInt+0xec>
    410a:	80 e9       	ldi	r24, 0x90	; 144
    410c:	91 e0       	ldi	r25, 0x01	; 1
    410e:	9e a7       	std	Y+46, r25	; 0x2e
    4110:	8d a7       	std	Y+45, r24	; 0x2d
    4112:	8d a5       	ldd	r24, Y+45	; 0x2d
    4114:	9e a5       	ldd	r25, Y+46	; 0x2e
    4116:	01 97       	sbiw	r24, 0x01	; 1
    4118:	f1 f7       	brne	.-4      	; 0x4116 <LCD_VidInt+0xda>
    411a:	9e a7       	std	Y+46, r25	; 0x2e
    411c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    411e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4120:	98 a9       	ldd	r25, Y+48	; 0x30
    4122:	01 97       	sbiw	r24, 0x01	; 1
    4124:	98 ab       	std	Y+48, r25	; 0x30
    4126:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4128:	8f a5       	ldd	r24, Y+47	; 0x2f
    412a:	98 a9       	ldd	r25, Y+48	; 0x30
    412c:	00 97       	sbiw	r24, 0x00	; 0
    412e:	69 f7       	brne	.-38     	; 0x410a <LCD_VidInt+0xce>
    4130:	14 c0       	rjmp	.+40     	; 0x415a <LCD_VidInt+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4132:	69 a9       	ldd	r22, Y+49	; 0x31
    4134:	7a a9       	ldd	r23, Y+50	; 0x32
    4136:	8b a9       	ldd	r24, Y+51	; 0x33
    4138:	9c a9       	ldd	r25, Y+52	; 0x34
    413a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    413e:	dc 01       	movw	r26, r24
    4140:	cb 01       	movw	r24, r22
    4142:	98 ab       	std	Y+48, r25	; 0x30
    4144:	8f a7       	std	Y+47, r24	; 0x2f
    4146:	8f a5       	ldd	r24, Y+47	; 0x2f
    4148:	98 a9       	ldd	r25, Y+48	; 0x30
    414a:	9c a7       	std	Y+44, r25	; 0x2c
    414c:	8b a7       	std	Y+43, r24	; 0x2b
    414e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4150:	9c a5       	ldd	r25, Y+44	; 0x2c
    4152:	01 97       	sbiw	r24, 0x01	; 1
    4154:	f1 f7       	brne	.-4      	; 0x4152 <LCD_VidInt+0x116>
    4156:	9c a7       	std	Y+44, r25	; 0x2c
    4158:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(40);
	LCD_VidSendCommand(0b00111000);
    415a:	88 e3       	ldi	r24, 0x38	; 56
    415c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <LCD_VidSendCommand>
    4160:	80 e0       	ldi	r24, 0x00	; 0
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	a0 e8       	ldi	r26, 0x80	; 128
    4166:	bf e3       	ldi	r27, 0x3F	; 63
    4168:	8f a3       	std	Y+39, r24	; 0x27
    416a:	98 a7       	std	Y+40, r25	; 0x28
    416c:	a9 a7       	std	Y+41, r26	; 0x29
    416e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4170:	6f a1       	ldd	r22, Y+39	; 0x27
    4172:	78 a5       	ldd	r23, Y+40	; 0x28
    4174:	89 a5       	ldd	r24, Y+41	; 0x29
    4176:	9a a5       	ldd	r25, Y+42	; 0x2a
    4178:	20 e0       	ldi	r18, 0x00	; 0
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	4a e7       	ldi	r20, 0x7A	; 122
    417e:	55 e4       	ldi	r21, 0x45	; 69
    4180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	8b a3       	std	Y+35, r24	; 0x23
    418a:	9c a3       	std	Y+36, r25	; 0x24
    418c:	ad a3       	std	Y+37, r26	; 0x25
    418e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4190:	6b a1       	ldd	r22, Y+35	; 0x23
    4192:	7c a1       	ldd	r23, Y+36	; 0x24
    4194:	8d a1       	ldd	r24, Y+37	; 0x25
    4196:	9e a1       	ldd	r25, Y+38	; 0x26
    4198:	20 e0       	ldi	r18, 0x00	; 0
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	40 e8       	ldi	r20, 0x80	; 128
    419e:	5f e3       	ldi	r21, 0x3F	; 63
    41a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    41a4:	88 23       	and	r24, r24
    41a6:	2c f4       	brge	.+10     	; 0x41b2 <LCD_VidInt+0x176>
		__ticks = 1;
    41a8:	81 e0       	ldi	r24, 0x01	; 1
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	9a a3       	std	Y+34, r25	; 0x22
    41ae:	89 a3       	std	Y+33, r24	; 0x21
    41b0:	3f c0       	rjmp	.+126    	; 0x4230 <LCD_VidInt+0x1f4>
	else if (__tmp > 65535)
    41b2:	6b a1       	ldd	r22, Y+35	; 0x23
    41b4:	7c a1       	ldd	r23, Y+36	; 0x24
    41b6:	8d a1       	ldd	r24, Y+37	; 0x25
    41b8:	9e a1       	ldd	r25, Y+38	; 0x26
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	3f ef       	ldi	r19, 0xFF	; 255
    41be:	4f e7       	ldi	r20, 0x7F	; 127
    41c0:	57 e4       	ldi	r21, 0x47	; 71
    41c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    41c6:	18 16       	cp	r1, r24
    41c8:	4c f5       	brge	.+82     	; 0x421c <LCD_VidInt+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ca:	6f a1       	ldd	r22, Y+39	; 0x27
    41cc:	78 a5       	ldd	r23, Y+40	; 0x28
    41ce:	89 a5       	ldd	r24, Y+41	; 0x29
    41d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    41d2:	20 e0       	ldi	r18, 0x00	; 0
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	40 e2       	ldi	r20, 0x20	; 32
    41d8:	51 e4       	ldi	r21, 0x41	; 65
    41da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	bc 01       	movw	r22, r24
    41e4:	cd 01       	movw	r24, r26
    41e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41ea:	dc 01       	movw	r26, r24
    41ec:	cb 01       	movw	r24, r22
    41ee:	9a a3       	std	Y+34, r25	; 0x22
    41f0:	89 a3       	std	Y+33, r24	; 0x21
    41f2:	0f c0       	rjmp	.+30     	; 0x4212 <LCD_VidInt+0x1d6>
    41f4:	80 e9       	ldi	r24, 0x90	; 144
    41f6:	91 e0       	ldi	r25, 0x01	; 1
    41f8:	98 a3       	std	Y+32, r25	; 0x20
    41fa:	8f 8f       	std	Y+31, r24	; 0x1f
    41fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41fe:	98 a1       	ldd	r25, Y+32	; 0x20
    4200:	01 97       	sbiw	r24, 0x01	; 1
    4202:	f1 f7       	brne	.-4      	; 0x4200 <LCD_VidInt+0x1c4>
    4204:	98 a3       	std	Y+32, r25	; 0x20
    4206:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4208:	89 a1       	ldd	r24, Y+33	; 0x21
    420a:	9a a1       	ldd	r25, Y+34	; 0x22
    420c:	01 97       	sbiw	r24, 0x01	; 1
    420e:	9a a3       	std	Y+34, r25	; 0x22
    4210:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4212:	89 a1       	ldd	r24, Y+33	; 0x21
    4214:	9a a1       	ldd	r25, Y+34	; 0x22
    4216:	00 97       	sbiw	r24, 0x00	; 0
    4218:	69 f7       	brne	.-38     	; 0x41f4 <LCD_VidInt+0x1b8>
    421a:	14 c0       	rjmp	.+40     	; 0x4244 <LCD_VidInt+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    421c:	6b a1       	ldd	r22, Y+35	; 0x23
    421e:	7c a1       	ldd	r23, Y+36	; 0x24
    4220:	8d a1       	ldd	r24, Y+37	; 0x25
    4222:	9e a1       	ldd	r25, Y+38	; 0x26
    4224:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4228:	dc 01       	movw	r26, r24
    422a:	cb 01       	movw	r24, r22
    422c:	9a a3       	std	Y+34, r25	; 0x22
    422e:	89 a3       	std	Y+33, r24	; 0x21
    4230:	89 a1       	ldd	r24, Y+33	; 0x21
    4232:	9a a1       	ldd	r25, Y+34	; 0x22
    4234:	9e 8f       	std	Y+30, r25	; 0x1e
    4236:	8d 8f       	std	Y+29, r24	; 0x1d
    4238:	8d 8d       	ldd	r24, Y+29	; 0x1d
    423a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    423c:	01 97       	sbiw	r24, 0x01	; 1
    423e:	f1 f7       	brne	.-4      	; 0x423c <LCD_VidInt+0x200>
    4240:	9e 8f       	std	Y+30, r25	; 0x1e
    4242:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
	LCD_VidSendCommand(0b00001100);
    4244:	8c e0       	ldi	r24, 0x0C	; 12
    4246:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <LCD_VidSendCommand>
    424a:	80 e0       	ldi	r24, 0x00	; 0
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	a0 e8       	ldi	r26, 0x80	; 128
    4250:	bf e3       	ldi	r27, 0x3F	; 63
    4252:	89 8f       	std	Y+25, r24	; 0x19
    4254:	9a 8f       	std	Y+26, r25	; 0x1a
    4256:	ab 8f       	std	Y+27, r26	; 0x1b
    4258:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    425a:	69 8d       	ldd	r22, Y+25	; 0x19
    425c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    425e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4260:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4262:	20 e0       	ldi	r18, 0x00	; 0
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	4a e7       	ldi	r20, 0x7A	; 122
    4268:	55 e4       	ldi	r21, 0x45	; 69
    426a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    426e:	dc 01       	movw	r26, r24
    4270:	cb 01       	movw	r24, r22
    4272:	8d 8b       	std	Y+21, r24	; 0x15
    4274:	9e 8b       	std	Y+22, r25	; 0x16
    4276:	af 8b       	std	Y+23, r26	; 0x17
    4278:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    427a:	6d 89       	ldd	r22, Y+21	; 0x15
    427c:	7e 89       	ldd	r23, Y+22	; 0x16
    427e:	8f 89       	ldd	r24, Y+23	; 0x17
    4280:	98 8d       	ldd	r25, Y+24	; 0x18
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	40 e8       	ldi	r20, 0x80	; 128
    4288:	5f e3       	ldi	r21, 0x3F	; 63
    428a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    428e:	88 23       	and	r24, r24
    4290:	2c f4       	brge	.+10     	; 0x429c <LCD_VidInt+0x260>
		__ticks = 1;
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	9c 8b       	std	Y+20, r25	; 0x14
    4298:	8b 8b       	std	Y+19, r24	; 0x13
    429a:	3f c0       	rjmp	.+126    	; 0x431a <LCD_VidInt+0x2de>
	else if (__tmp > 65535)
    429c:	6d 89       	ldd	r22, Y+21	; 0x15
    429e:	7e 89       	ldd	r23, Y+22	; 0x16
    42a0:	8f 89       	ldd	r24, Y+23	; 0x17
    42a2:	98 8d       	ldd	r25, Y+24	; 0x18
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	3f ef       	ldi	r19, 0xFF	; 255
    42a8:	4f e7       	ldi	r20, 0x7F	; 127
    42aa:	57 e4       	ldi	r21, 0x47	; 71
    42ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    42b0:	18 16       	cp	r1, r24
    42b2:	4c f5       	brge	.+82     	; 0x4306 <LCD_VidInt+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42b4:	69 8d       	ldd	r22, Y+25	; 0x19
    42b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42bc:	20 e0       	ldi	r18, 0x00	; 0
    42be:	30 e0       	ldi	r19, 0x00	; 0
    42c0:	40 e2       	ldi	r20, 0x20	; 32
    42c2:	51 e4       	ldi	r21, 0x41	; 65
    42c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    42c8:	dc 01       	movw	r26, r24
    42ca:	cb 01       	movw	r24, r22
    42cc:	bc 01       	movw	r22, r24
    42ce:	cd 01       	movw	r24, r26
    42d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	9c 8b       	std	Y+20, r25	; 0x14
    42da:	8b 8b       	std	Y+19, r24	; 0x13
    42dc:	0f c0       	rjmp	.+30     	; 0x42fc <LCD_VidInt+0x2c0>
    42de:	80 e9       	ldi	r24, 0x90	; 144
    42e0:	91 e0       	ldi	r25, 0x01	; 1
    42e2:	9a 8b       	std	Y+18, r25	; 0x12
    42e4:	89 8b       	std	Y+17, r24	; 0x11
    42e6:	89 89       	ldd	r24, Y+17	; 0x11
    42e8:	9a 89       	ldd	r25, Y+18	; 0x12
    42ea:	01 97       	sbiw	r24, 0x01	; 1
    42ec:	f1 f7       	brne	.-4      	; 0x42ea <LCD_VidInt+0x2ae>
    42ee:	9a 8b       	std	Y+18, r25	; 0x12
    42f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42f2:	8b 89       	ldd	r24, Y+19	; 0x13
    42f4:	9c 89       	ldd	r25, Y+20	; 0x14
    42f6:	01 97       	sbiw	r24, 0x01	; 1
    42f8:	9c 8b       	std	Y+20, r25	; 0x14
    42fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42fc:	8b 89       	ldd	r24, Y+19	; 0x13
    42fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4300:	00 97       	sbiw	r24, 0x00	; 0
    4302:	69 f7       	brne	.-38     	; 0x42de <LCD_VidInt+0x2a2>
    4304:	14 c0       	rjmp	.+40     	; 0x432e <LCD_VidInt+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4306:	6d 89       	ldd	r22, Y+21	; 0x15
    4308:	7e 89       	ldd	r23, Y+22	; 0x16
    430a:	8f 89       	ldd	r24, Y+23	; 0x17
    430c:	98 8d       	ldd	r25, Y+24	; 0x18
    430e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4312:	dc 01       	movw	r26, r24
    4314:	cb 01       	movw	r24, r22
    4316:	9c 8b       	std	Y+20, r25	; 0x14
    4318:	8b 8b       	std	Y+19, r24	; 0x13
    431a:	8b 89       	ldd	r24, Y+19	; 0x13
    431c:	9c 89       	ldd	r25, Y+20	; 0x14
    431e:	98 8b       	std	Y+16, r25	; 0x10
    4320:	8f 87       	std	Y+15, r24	; 0x0f
    4322:	8f 85       	ldd	r24, Y+15	; 0x0f
    4324:	98 89       	ldd	r25, Y+16	; 0x10
    4326:	01 97       	sbiw	r24, 0x01	; 1
    4328:	f1 f7       	brne	.-4      	; 0x4326 <LCD_VidInt+0x2ea>
    432a:	98 8b       	std	Y+16, r25	; 0x10
    432c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
	LCD_VidSendCommand(0b00000001);
    432e:	81 e0       	ldi	r24, 0x01	; 1
    4330:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <LCD_VidSendCommand>
    4334:	80 e0       	ldi	r24, 0x00	; 0
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	a0 e8       	ldi	r26, 0x80	; 128
    433a:	bf e3       	ldi	r27, 0x3F	; 63
    433c:	8b 87       	std	Y+11, r24	; 0x0b
    433e:	9c 87       	std	Y+12, r25	; 0x0c
    4340:	ad 87       	std	Y+13, r26	; 0x0d
    4342:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4344:	6b 85       	ldd	r22, Y+11	; 0x0b
    4346:	7c 85       	ldd	r23, Y+12	; 0x0c
    4348:	8d 85       	ldd	r24, Y+13	; 0x0d
    434a:	9e 85       	ldd	r25, Y+14	; 0x0e
    434c:	20 e0       	ldi	r18, 0x00	; 0
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	4a e7       	ldi	r20, 0x7A	; 122
    4352:	55 e4       	ldi	r21, 0x45	; 69
    4354:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4358:	dc 01       	movw	r26, r24
    435a:	cb 01       	movw	r24, r22
    435c:	8f 83       	std	Y+7, r24	; 0x07
    435e:	98 87       	std	Y+8, r25	; 0x08
    4360:	a9 87       	std	Y+9, r26	; 0x09
    4362:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4364:	6f 81       	ldd	r22, Y+7	; 0x07
    4366:	78 85       	ldd	r23, Y+8	; 0x08
    4368:	89 85       	ldd	r24, Y+9	; 0x09
    436a:	9a 85       	ldd	r25, Y+10	; 0x0a
    436c:	20 e0       	ldi	r18, 0x00	; 0
    436e:	30 e0       	ldi	r19, 0x00	; 0
    4370:	40 e8       	ldi	r20, 0x80	; 128
    4372:	5f e3       	ldi	r21, 0x3F	; 63
    4374:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4378:	88 23       	and	r24, r24
    437a:	2c f4       	brge	.+10     	; 0x4386 <LCD_VidInt+0x34a>
		__ticks = 1;
    437c:	81 e0       	ldi	r24, 0x01	; 1
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	9e 83       	std	Y+6, r25	; 0x06
    4382:	8d 83       	std	Y+5, r24	; 0x05
    4384:	3f c0       	rjmp	.+126    	; 0x4404 <LCD_VidInt+0x3c8>
	else if (__tmp > 65535)
    4386:	6f 81       	ldd	r22, Y+7	; 0x07
    4388:	78 85       	ldd	r23, Y+8	; 0x08
    438a:	89 85       	ldd	r24, Y+9	; 0x09
    438c:	9a 85       	ldd	r25, Y+10	; 0x0a
    438e:	20 e0       	ldi	r18, 0x00	; 0
    4390:	3f ef       	ldi	r19, 0xFF	; 255
    4392:	4f e7       	ldi	r20, 0x7F	; 127
    4394:	57 e4       	ldi	r21, 0x47	; 71
    4396:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    439a:	18 16       	cp	r1, r24
    439c:	4c f5       	brge	.+82     	; 0x43f0 <LCD_VidInt+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    439e:	6b 85       	ldd	r22, Y+11	; 0x0b
    43a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    43a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    43a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    43a6:	20 e0       	ldi	r18, 0x00	; 0
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	40 e2       	ldi	r20, 0x20	; 32
    43ac:	51 e4       	ldi	r21, 0x41	; 65
    43ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	bc 01       	movw	r22, r24
    43b8:	cd 01       	movw	r24, r26
    43ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43be:	dc 01       	movw	r26, r24
    43c0:	cb 01       	movw	r24, r22
    43c2:	9e 83       	std	Y+6, r25	; 0x06
    43c4:	8d 83       	std	Y+5, r24	; 0x05
    43c6:	0f c0       	rjmp	.+30     	; 0x43e6 <LCD_VidInt+0x3aa>
    43c8:	80 e9       	ldi	r24, 0x90	; 144
    43ca:	91 e0       	ldi	r25, 0x01	; 1
    43cc:	9c 83       	std	Y+4, r25	; 0x04
    43ce:	8b 83       	std	Y+3, r24	; 0x03
    43d0:	8b 81       	ldd	r24, Y+3	; 0x03
    43d2:	9c 81       	ldd	r25, Y+4	; 0x04
    43d4:	01 97       	sbiw	r24, 0x01	; 1
    43d6:	f1 f7       	brne	.-4      	; 0x43d4 <LCD_VidInt+0x398>
    43d8:	9c 83       	std	Y+4, r25	; 0x04
    43da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43dc:	8d 81       	ldd	r24, Y+5	; 0x05
    43de:	9e 81       	ldd	r25, Y+6	; 0x06
    43e0:	01 97       	sbiw	r24, 0x01	; 1
    43e2:	9e 83       	std	Y+6, r25	; 0x06
    43e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43e6:	8d 81       	ldd	r24, Y+5	; 0x05
    43e8:	9e 81       	ldd	r25, Y+6	; 0x06
    43ea:	00 97       	sbiw	r24, 0x00	; 0
    43ec:	69 f7       	brne	.-38     	; 0x43c8 <LCD_VidInt+0x38c>
    43ee:	14 c0       	rjmp	.+40     	; 0x4418 <LCD_VidInt+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43f0:	6f 81       	ldd	r22, Y+7	; 0x07
    43f2:	78 85       	ldd	r23, Y+8	; 0x08
    43f4:	89 85       	ldd	r24, Y+9	; 0x09
    43f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43fc:	dc 01       	movw	r26, r24
    43fe:	cb 01       	movw	r24, r22
    4400:	9e 83       	std	Y+6, r25	; 0x06
    4402:	8d 83       	std	Y+5, r24	; 0x05
    4404:	8d 81       	ldd	r24, Y+5	; 0x05
    4406:	9e 81       	ldd	r25, Y+6	; 0x06
    4408:	9a 83       	std	Y+2, r25	; 0x02
    440a:	89 83       	std	Y+1, r24	; 0x01
    440c:	89 81       	ldd	r24, Y+1	; 0x01
    440e:	9a 81       	ldd	r25, Y+2	; 0x02
    4410:	01 97       	sbiw	r24, 0x01	; 1
    4412:	f1 f7       	brne	.-4      	; 0x4410 <LCD_VidInt+0x3d4>
    4414:	9a 83       	std	Y+2, r25	; 0x02
    4416:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

}
    4418:	e8 96       	adiw	r28, 0x38	; 56
    441a:	0f b6       	in	r0, 0x3f	; 63
    441c:	f8 94       	cli
    441e:	de bf       	out	0x3e, r29	; 62
    4420:	0f be       	out	0x3f, r0	; 63
    4422:	cd bf       	out	0x3d, r28	; 61
    4424:	cf 91       	pop	r28
    4426:	df 91       	pop	r29
    4428:	08 95       	ret

0000442a <LCD_VidSendStr>:
void LCD_VidSendStr(u8* Copy_u8string)
{
    442a:	df 93       	push	r29
    442c:	cf 93       	push	r28
    442e:	cd b7       	in	r28, 0x3d	; 61
    4430:	de b7       	in	r29, 0x3e	; 62
    4432:	6e 97       	sbiw	r28, 0x1e	; 30
    4434:	0f b6       	in	r0, 0x3f	; 63
    4436:	f8 94       	cli
    4438:	de bf       	out	0x3e, r29	; 62
    443a:	0f be       	out	0x3f, r0	; 63
    443c:	cd bf       	out	0x3d, r28	; 61
    443e:	9e 8f       	std	Y+30, r25	; 0x1e
    4440:	8d 8f       	std	Y+29, r24	; 0x1d
	

	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
    4442:	81 e0       	ldi	r24, 0x01	; 1
    4444:	60 e0       	ldi	r22, 0x00	; 0
    4446:	41 e0       	ldi	r20, 0x01	; 1
    4448:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    444c:	81 e0       	ldi	r24, 0x01	; 1
    444e:	61 e0       	ldi	r22, 0x01	; 1
    4450:	40 e0       	ldi	r20, 0x00	; 0
    4452:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VidSetPin_Value>
    4456:	fa c0       	rjmp	.+500    	; 0x464c <LCD_VidSendStr+0x222>
	while(*Copy_u8string!='\0')
	{

	DIO_VidWriteOnPort(Data_Port,*Copy_u8string);
    4458:	ed 8d       	ldd	r30, Y+29	; 0x1d
    445a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    445c:	90 81       	ld	r25, Z
    445e:	80 e0       	ldi	r24, 0x00	; 0
    4460:	69 2f       	mov	r22, r25
    4462:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    4466:	81 e0       	ldi	r24, 0x01	; 1
    4468:	62 e0       	ldi	r22, 0x02	; 2
    446a:	41 e0       	ldi	r20, 0x01	; 1
    446c:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VidSetPin_Value>
    4470:	80 e0       	ldi	r24, 0x00	; 0
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	a0 e2       	ldi	r26, 0x20	; 32
    4476:	b1 e4       	ldi	r27, 0x41	; 65
    4478:	89 8f       	std	Y+25, r24	; 0x19
    447a:	9a 8f       	std	Y+26, r25	; 0x1a
    447c:	ab 8f       	std	Y+27, r26	; 0x1b
    447e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4480:	69 8d       	ldd	r22, Y+25	; 0x19
    4482:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4484:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4486:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4488:	20 e0       	ldi	r18, 0x00	; 0
    448a:	30 e0       	ldi	r19, 0x00	; 0
    448c:	4a e7       	ldi	r20, 0x7A	; 122
    448e:	55 e4       	ldi	r21, 0x45	; 69
    4490:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4494:	dc 01       	movw	r26, r24
    4496:	cb 01       	movw	r24, r22
    4498:	8d 8b       	std	Y+21, r24	; 0x15
    449a:	9e 8b       	std	Y+22, r25	; 0x16
    449c:	af 8b       	std	Y+23, r26	; 0x17
    449e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44a0:	6d 89       	ldd	r22, Y+21	; 0x15
    44a2:	7e 89       	ldd	r23, Y+22	; 0x16
    44a4:	8f 89       	ldd	r24, Y+23	; 0x17
    44a6:	98 8d       	ldd	r25, Y+24	; 0x18
    44a8:	20 e0       	ldi	r18, 0x00	; 0
    44aa:	30 e0       	ldi	r19, 0x00	; 0
    44ac:	40 e8       	ldi	r20, 0x80	; 128
    44ae:	5f e3       	ldi	r21, 0x3F	; 63
    44b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    44b4:	88 23       	and	r24, r24
    44b6:	2c f4       	brge	.+10     	; 0x44c2 <LCD_VidSendStr+0x98>
		__ticks = 1;
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	90 e0       	ldi	r25, 0x00	; 0
    44bc:	9c 8b       	std	Y+20, r25	; 0x14
    44be:	8b 8b       	std	Y+19, r24	; 0x13
    44c0:	3f c0       	rjmp	.+126    	; 0x4540 <LCD_VidSendStr+0x116>
	else if (__tmp > 65535)
    44c2:	6d 89       	ldd	r22, Y+21	; 0x15
    44c4:	7e 89       	ldd	r23, Y+22	; 0x16
    44c6:	8f 89       	ldd	r24, Y+23	; 0x17
    44c8:	98 8d       	ldd	r25, Y+24	; 0x18
    44ca:	20 e0       	ldi	r18, 0x00	; 0
    44cc:	3f ef       	ldi	r19, 0xFF	; 255
    44ce:	4f e7       	ldi	r20, 0x7F	; 127
    44d0:	57 e4       	ldi	r21, 0x47	; 71
    44d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    44d6:	18 16       	cp	r1, r24
    44d8:	4c f5       	brge	.+82     	; 0x452c <LCD_VidSendStr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44da:	69 8d       	ldd	r22, Y+25	; 0x19
    44dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44e2:	20 e0       	ldi	r18, 0x00	; 0
    44e4:	30 e0       	ldi	r19, 0x00	; 0
    44e6:	40 e2       	ldi	r20, 0x20	; 32
    44e8:	51 e4       	ldi	r21, 0x41	; 65
    44ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    44ee:	dc 01       	movw	r26, r24
    44f0:	cb 01       	movw	r24, r22
    44f2:	bc 01       	movw	r22, r24
    44f4:	cd 01       	movw	r24, r26
    44f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44fa:	dc 01       	movw	r26, r24
    44fc:	cb 01       	movw	r24, r22
    44fe:	9c 8b       	std	Y+20, r25	; 0x14
    4500:	8b 8b       	std	Y+19, r24	; 0x13
    4502:	0f c0       	rjmp	.+30     	; 0x4522 <LCD_VidSendStr+0xf8>
    4504:	80 e9       	ldi	r24, 0x90	; 144
    4506:	91 e0       	ldi	r25, 0x01	; 1
    4508:	9a 8b       	std	Y+18, r25	; 0x12
    450a:	89 8b       	std	Y+17, r24	; 0x11
    450c:	89 89       	ldd	r24, Y+17	; 0x11
    450e:	9a 89       	ldd	r25, Y+18	; 0x12
    4510:	01 97       	sbiw	r24, 0x01	; 1
    4512:	f1 f7       	brne	.-4      	; 0x4510 <LCD_VidSendStr+0xe6>
    4514:	9a 8b       	std	Y+18, r25	; 0x12
    4516:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4518:	8b 89       	ldd	r24, Y+19	; 0x13
    451a:	9c 89       	ldd	r25, Y+20	; 0x14
    451c:	01 97       	sbiw	r24, 0x01	; 1
    451e:	9c 8b       	std	Y+20, r25	; 0x14
    4520:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4522:	8b 89       	ldd	r24, Y+19	; 0x13
    4524:	9c 89       	ldd	r25, Y+20	; 0x14
    4526:	00 97       	sbiw	r24, 0x00	; 0
    4528:	69 f7       	brne	.-38     	; 0x4504 <LCD_VidSendStr+0xda>
    452a:	14 c0       	rjmp	.+40     	; 0x4554 <LCD_VidSendStr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    452c:	6d 89       	ldd	r22, Y+21	; 0x15
    452e:	7e 89       	ldd	r23, Y+22	; 0x16
    4530:	8f 89       	ldd	r24, Y+23	; 0x17
    4532:	98 8d       	ldd	r25, Y+24	; 0x18
    4534:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	9c 8b       	std	Y+20, r25	; 0x14
    453e:	8b 8b       	std	Y+19, r24	; 0x13
    4540:	8b 89       	ldd	r24, Y+19	; 0x13
    4542:	9c 89       	ldd	r25, Y+20	; 0x14
    4544:	98 8b       	std	Y+16, r25	; 0x10
    4546:	8f 87       	std	Y+15, r24	; 0x0f
    4548:	8f 85       	ldd	r24, Y+15	; 0x0f
    454a:	98 89       	ldd	r25, Y+16	; 0x10
    454c:	01 97       	sbiw	r24, 0x01	; 1
    454e:	f1 f7       	brne	.-4      	; 0x454c <LCD_VidSendStr+0x122>
    4550:	98 8b       	std	Y+16, r25	; 0x10
    4552:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	62 e0       	ldi	r22, 0x02	; 2
    4558:	40 e0       	ldi	r20, 0x00	; 0
    455a:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_VidSetPin_Value>
    455e:	80 e0       	ldi	r24, 0x00	; 0
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	a0 e2       	ldi	r26, 0x20	; 32
    4564:	b1 e4       	ldi	r27, 0x41	; 65
    4566:	8b 87       	std	Y+11, r24	; 0x0b
    4568:	9c 87       	std	Y+12, r25	; 0x0c
    456a:	ad 87       	std	Y+13, r26	; 0x0d
    456c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    456e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4570:	7c 85       	ldd	r23, Y+12	; 0x0c
    4572:	8d 85       	ldd	r24, Y+13	; 0x0d
    4574:	9e 85       	ldd	r25, Y+14	; 0x0e
    4576:	20 e0       	ldi	r18, 0x00	; 0
    4578:	30 e0       	ldi	r19, 0x00	; 0
    457a:	4a e7       	ldi	r20, 0x7A	; 122
    457c:	55 e4       	ldi	r21, 0x45	; 69
    457e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4582:	dc 01       	movw	r26, r24
    4584:	cb 01       	movw	r24, r22
    4586:	8f 83       	std	Y+7, r24	; 0x07
    4588:	98 87       	std	Y+8, r25	; 0x08
    458a:	a9 87       	std	Y+9, r26	; 0x09
    458c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    458e:	6f 81       	ldd	r22, Y+7	; 0x07
    4590:	78 85       	ldd	r23, Y+8	; 0x08
    4592:	89 85       	ldd	r24, Y+9	; 0x09
    4594:	9a 85       	ldd	r25, Y+10	; 0x0a
    4596:	20 e0       	ldi	r18, 0x00	; 0
    4598:	30 e0       	ldi	r19, 0x00	; 0
    459a:	40 e8       	ldi	r20, 0x80	; 128
    459c:	5f e3       	ldi	r21, 0x3F	; 63
    459e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    45a2:	88 23       	and	r24, r24
    45a4:	2c f4       	brge	.+10     	; 0x45b0 <LCD_VidSendStr+0x186>
		__ticks = 1;
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	9e 83       	std	Y+6, r25	; 0x06
    45ac:	8d 83       	std	Y+5, r24	; 0x05
    45ae:	3f c0       	rjmp	.+126    	; 0x462e <LCD_VidSendStr+0x204>
	else if (__tmp > 65535)
    45b0:	6f 81       	ldd	r22, Y+7	; 0x07
    45b2:	78 85       	ldd	r23, Y+8	; 0x08
    45b4:	89 85       	ldd	r24, Y+9	; 0x09
    45b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    45b8:	20 e0       	ldi	r18, 0x00	; 0
    45ba:	3f ef       	ldi	r19, 0xFF	; 255
    45bc:	4f e7       	ldi	r20, 0x7F	; 127
    45be:	57 e4       	ldi	r21, 0x47	; 71
    45c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    45c4:	18 16       	cp	r1, r24
    45c6:	4c f5       	brge	.+82     	; 0x461a <LCD_VidSendStr+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    45ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    45cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    45ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    45d0:	20 e0       	ldi	r18, 0x00	; 0
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	40 e2       	ldi	r20, 0x20	; 32
    45d6:	51 e4       	ldi	r21, 0x41	; 65
    45d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	bc 01       	movw	r22, r24
    45e2:	cd 01       	movw	r24, r26
    45e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    45e8:	dc 01       	movw	r26, r24
    45ea:	cb 01       	movw	r24, r22
    45ec:	9e 83       	std	Y+6, r25	; 0x06
    45ee:	8d 83       	std	Y+5, r24	; 0x05
    45f0:	0f c0       	rjmp	.+30     	; 0x4610 <LCD_VidSendStr+0x1e6>
    45f2:	80 e9       	ldi	r24, 0x90	; 144
    45f4:	91 e0       	ldi	r25, 0x01	; 1
    45f6:	9c 83       	std	Y+4, r25	; 0x04
    45f8:	8b 83       	std	Y+3, r24	; 0x03
    45fa:	8b 81       	ldd	r24, Y+3	; 0x03
    45fc:	9c 81       	ldd	r25, Y+4	; 0x04
    45fe:	01 97       	sbiw	r24, 0x01	; 1
    4600:	f1 f7       	brne	.-4      	; 0x45fe <LCD_VidSendStr+0x1d4>
    4602:	9c 83       	std	Y+4, r25	; 0x04
    4604:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4606:	8d 81       	ldd	r24, Y+5	; 0x05
    4608:	9e 81       	ldd	r25, Y+6	; 0x06
    460a:	01 97       	sbiw	r24, 0x01	; 1
    460c:	9e 83       	std	Y+6, r25	; 0x06
    460e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4610:	8d 81       	ldd	r24, Y+5	; 0x05
    4612:	9e 81       	ldd	r25, Y+6	; 0x06
    4614:	00 97       	sbiw	r24, 0x00	; 0
    4616:	69 f7       	brne	.-38     	; 0x45f2 <LCD_VidSendStr+0x1c8>
    4618:	14 c0       	rjmp	.+40     	; 0x4642 <LCD_VidSendStr+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    461a:	6f 81       	ldd	r22, Y+7	; 0x07
    461c:	78 85       	ldd	r23, Y+8	; 0x08
    461e:	89 85       	ldd	r24, Y+9	; 0x09
    4620:	9a 85       	ldd	r25, Y+10	; 0x0a
    4622:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4626:	dc 01       	movw	r26, r24
    4628:	cb 01       	movw	r24, r22
    462a:	9e 83       	std	Y+6, r25	; 0x06
    462c:	8d 83       	std	Y+5, r24	; 0x05
    462e:	8d 81       	ldd	r24, Y+5	; 0x05
    4630:	9e 81       	ldd	r25, Y+6	; 0x06
    4632:	9a 83       	std	Y+2, r25	; 0x02
    4634:	89 83       	std	Y+1, r24	; 0x01
    4636:	89 81       	ldd	r24, Y+1	; 0x01
    4638:	9a 81       	ldd	r25, Y+2	; 0x02
    463a:	01 97       	sbiw	r24, 0x01	; 1
    463c:	f1 f7       	brne	.-4      	; 0x463a <LCD_VidSendStr+0x210>
    463e:	9a 83       	std	Y+2, r25	; 0x02
    4640:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	Copy_u8string++;
    4642:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4644:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4646:	01 96       	adiw	r24, 0x01	; 1
    4648:	9e 8f       	std	Y+30, r25	; 0x1e
    464a:	8d 8f       	std	Y+29, r24	; 0x1d
{
	

	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
	while(*Copy_u8string!='\0')
    464c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    464e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    4650:	80 81       	ld	r24, Z
    4652:	88 23       	and	r24, r24
    4654:	09 f0       	breq	.+2      	; 0x4658 <LCD_VidSendStr+0x22e>
    4656:	00 cf       	rjmp	.-512    	; 0x4458 <LCD_VidSendStr+0x2e>
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
	_delay_ms(10);
	Copy_u8string++;
	}
}
    4658:	6e 96       	adiw	r28, 0x1e	; 30
    465a:	0f b6       	in	r0, 0x3f	; 63
    465c:	f8 94       	cli
    465e:	de bf       	out	0x3e, r29	; 62
    4660:	0f be       	out	0x3f, r0	; 63
    4662:	cd bf       	out	0x3d, r28	; 61
    4664:	cf 91       	pop	r28
    4666:	df 91       	pop	r29
    4668:	08 95       	ret

0000466a <LCD_VidSendNum>:
void LCD_VidSendNum(u16 Copy_u16Num)
{	u16 rev=0;
    466a:	df 93       	push	r29
    466c:	cf 93       	push	r28
    466e:	00 d0       	rcall	.+0      	; 0x4670 <LCD_VidSendNum+0x6>
    4670:	00 d0       	rcall	.+0      	; 0x4672 <LCD_VidSendNum+0x8>
    4672:	00 d0       	rcall	.+0      	; 0x4674 <LCD_VidSendNum+0xa>
    4674:	cd b7       	in	r28, 0x3d	; 61
    4676:	de b7       	in	r29, 0x3e	; 62
    4678:	9e 83       	std	Y+6, r25	; 0x06
    467a:	8d 83       	std	Y+5, r24	; 0x05
    467c:	1c 82       	std	Y+4, r1	; 0x04
    467e:	1b 82       	std	Y+3, r1	; 0x03
	u8 zeros=0;
    4680:	1a 82       	std	Y+2, r1	; 0x02
	if (Copy_u16Num!=0)
    4682:	8d 81       	ldd	r24, Y+5	; 0x05
    4684:	9e 81       	ldd	r25, Y+6	; 0x06
    4686:	00 97       	sbiw	r24, 0x00	; 0
    4688:	09 f4       	brne	.+2      	; 0x468c <LCD_VidSendNum+0x22>
    468a:	53 c0       	rjmp	.+166    	; 0x4732 <LCD_VidSendNum+0xc8>
    468c:	25 c0       	rjmp	.+74     	; 0x46d8 <LCD_VidSendNum+0x6e>
	{
	while(Copy_u16Num>0)
		{
		 rev=(rev*10)+(Copy_u16Num % 10);
    468e:	8b 81       	ldd	r24, Y+3	; 0x03
    4690:	9c 81       	ldd	r25, Y+4	; 0x04
    4692:	9c 01       	movw	r18, r24
    4694:	22 0f       	add	r18, r18
    4696:	33 1f       	adc	r19, r19
    4698:	c9 01       	movw	r24, r18
    469a:	88 0f       	add	r24, r24
    469c:	99 1f       	adc	r25, r25
    469e:	88 0f       	add	r24, r24
    46a0:	99 1f       	adc	r25, r25
    46a2:	f9 01       	movw	r30, r18
    46a4:	e8 0f       	add	r30, r24
    46a6:	f9 1f       	adc	r31, r25
    46a8:	8d 81       	ldd	r24, Y+5	; 0x05
    46aa:	9e 81       	ldd	r25, Y+6	; 0x06
    46ac:	2a e0       	ldi	r18, 0x0A	; 10
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	b9 01       	movw	r22, r18
    46b2:	0e 94 43 24 	call	0x4886	; 0x4886 <__udivmodhi4>
    46b6:	8e 0f       	add	r24, r30
    46b8:	9f 1f       	adc	r25, r31
    46ba:	9c 83       	std	Y+4, r25	; 0x04
    46bc:	8b 83       	std	Y+3, r24	; 0x03
		Copy_u16Num/=10;
    46be:	8d 81       	ldd	r24, Y+5	; 0x05
    46c0:	9e 81       	ldd	r25, Y+6	; 0x06
    46c2:	2a e0       	ldi	r18, 0x0A	; 10
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    46c6:	b9 01       	movw	r22, r18
    46c8:	0e 94 43 24 	call	0x4886	; 0x4886 <__udivmodhi4>
    46cc:	cb 01       	movw	r24, r22
    46ce:	9e 83       	std	Y+6, r25	; 0x06
    46d0:	8d 83       	std	Y+5, r24	; 0x05
		zeros++;
    46d2:	8a 81       	ldd	r24, Y+2	; 0x02
    46d4:	8f 5f       	subi	r24, 0xFF	; 255
    46d6:	8a 83       	std	Y+2, r24	; 0x02
void LCD_VidSendNum(u16 Copy_u16Num)
{	u16 rev=0;
	u8 zeros=0;
	if (Copy_u16Num!=0)
	{
	while(Copy_u16Num>0)
    46d8:	8d 81       	ldd	r24, Y+5	; 0x05
    46da:	9e 81       	ldd	r25, Y+6	; 0x06
    46dc:	00 97       	sbiw	r24, 0x00	; 0
    46de:	b9 f6       	brne	.-82     	; 0x468e <LCD_VidSendNum+0x24>
    46e0:	19 c0       	rjmp	.+50     	; 0x4714 <LCD_VidSendNum+0xaa>
		Copy_u16Num/=10;
		zeros++;
		};
	while(rev!=0)
	{
	u8 rem=rev%10;
    46e2:	8b 81       	ldd	r24, Y+3	; 0x03
    46e4:	9c 81       	ldd	r25, Y+4	; 0x04
    46e6:	2a e0       	ldi	r18, 0x0A	; 10
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    46ea:	b9 01       	movw	r22, r18
    46ec:	0e 94 43 24 	call	0x4886	; 0x4886 <__udivmodhi4>
    46f0:	89 83       	std	Y+1, r24	; 0x01
	rev/=10;
    46f2:	8b 81       	ldd	r24, Y+3	; 0x03
    46f4:	9c 81       	ldd	r25, Y+4	; 0x04
    46f6:	2a e0       	ldi	r18, 0x0A	; 10
    46f8:	30 e0       	ldi	r19, 0x00	; 0
    46fa:	b9 01       	movw	r22, r18
    46fc:	0e 94 43 24 	call	0x4886	; 0x4886 <__udivmodhi4>
    4700:	cb 01       	movw	r24, r22
    4702:	9c 83       	std	Y+4, r25	; 0x04
    4704:	8b 83       	std	Y+3, r24	; 0x03
	LCD_VidSendData((48+rem));//+48 to have aski code
    4706:	89 81       	ldd	r24, Y+1	; 0x01
    4708:	80 5d       	subi	r24, 0xD0	; 208
    470a:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <LCD_VidSendData>
	zeros--;
    470e:	8a 81       	ldd	r24, Y+2	; 0x02
    4710:	81 50       	subi	r24, 0x01	; 1
    4712:	8a 83       	std	Y+2, r24	; 0x02
		{
		 rev=(rev*10)+(Copy_u16Num % 10);
		Copy_u16Num/=10;
		zeros++;
		};
	while(rev!=0)
    4714:	8b 81       	ldd	r24, Y+3	; 0x03
    4716:	9c 81       	ldd	r25, Y+4	; 0x04
    4718:	00 97       	sbiw	r24, 0x00	; 0
    471a:	19 f7       	brne	.-58     	; 0x46e2 <LCD_VidSendNum+0x78>
    471c:	06 c0       	rjmp	.+12     	; 0x472a <LCD_VidSendNum+0xc0>
	LCD_VidSendData((48+rem));//+48 to have aski code
	zeros--;
	}
	while(zeros>0)
	{
	LCD_VidSendData((48+0));
    471e:	80 e3       	ldi	r24, 0x30	; 48
    4720:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <LCD_VidSendData>
	zeros--;
    4724:	8a 81       	ldd	r24, Y+2	; 0x02
    4726:	81 50       	subi	r24, 0x01	; 1
    4728:	8a 83       	std	Y+2, r24	; 0x02
	u8 rem=rev%10;
	rev/=10;
	LCD_VidSendData((48+rem));//+48 to have aski code
	zeros--;
	}
	while(zeros>0)
    472a:	8a 81       	ldd	r24, Y+2	; 0x02
    472c:	88 23       	and	r24, r24
    472e:	b9 f7       	brne	.-18     	; 0x471e <LCD_VidSendNum+0xb4>
    4730:	03 c0       	rjmp	.+6      	; 0x4738 <LCD_VidSendNum+0xce>
	}
	}
	else
	{

		LCD_VidSendData((48+0));
    4732:	80 e3       	ldi	r24, 0x30	; 48
    4734:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <LCD_VidSendData>
	}
}
    4738:	26 96       	adiw	r28, 0x06	; 6
    473a:	0f b6       	in	r0, 0x3f	; 63
    473c:	f8 94       	cli
    473e:	de bf       	out	0x3e, r29	; 62
    4740:	0f be       	out	0x3f, r0	; 63
    4742:	cd bf       	out	0x3d, r28	; 61
    4744:	cf 91       	pop	r28
    4746:	df 91       	pop	r29
    4748:	08 95       	ret

0000474a <LCD_VidShiftDispaly>:

void LCD_VidShiftDispaly(u8 Copy_u8Line,u8 Copy_u8Column)
{u8 shift=0,offset=0;
    474a:	df 93       	push	r29
    474c:	cf 93       	push	r28
    474e:	00 d0       	rcall	.+0      	; 0x4750 <LCD_VidShiftDispaly+0x6>
    4750:	00 d0       	rcall	.+0      	; 0x4752 <LCD_VidShiftDispaly+0x8>
    4752:	00 d0       	rcall	.+0      	; 0x4754 <LCD_VidShiftDispaly+0xa>
    4754:	cd b7       	in	r28, 0x3d	; 61
    4756:	de b7       	in	r29, 0x3e	; 62
    4758:	8b 83       	std	Y+3, r24	; 0x03
    475a:	6c 83       	std	Y+4, r22	; 0x04
    475c:	1a 82       	std	Y+2, r1	; 0x02
    475e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Line)
    4760:	8b 81       	ldd	r24, Y+3	; 0x03
    4762:	28 2f       	mov	r18, r24
    4764:	30 e0       	ldi	r19, 0x00	; 0
    4766:	3e 83       	std	Y+6, r19	; 0x06
    4768:	2d 83       	std	Y+5, r18	; 0x05
    476a:	8d 81       	ldd	r24, Y+5	; 0x05
    476c:	9e 81       	ldd	r25, Y+6	; 0x06
    476e:	81 30       	cpi	r24, 0x01	; 1
    4770:	91 05       	cpc	r25, r1
    4772:	31 f0       	breq	.+12     	; 0x4780 <LCD_VidShiftDispaly+0x36>
    4774:	2d 81       	ldd	r18, Y+5	; 0x05
    4776:	3e 81       	ldd	r19, Y+6	; 0x06
    4778:	22 30       	cpi	r18, 0x02	; 2
    477a:	31 05       	cpc	r19, r1
    477c:	21 f0       	breq	.+8      	; 0x4786 <LCD_VidShiftDispaly+0x3c>
    477e:	05 c0       	rjmp	.+10     	; 0x478a <LCD_VidShiftDispaly+0x40>
	{case 1:
		offset=128;
    4780:	80 e8       	ldi	r24, 0x80	; 128
    4782:	89 83       	std	Y+1, r24	; 0x01
    4784:	02 c0       	rjmp	.+4      	; 0x478a <LCD_VidShiftDispaly+0x40>
	break;
	case 2:
		offset=128+64;
    4786:	80 ec       	ldi	r24, 0xC0	; 192
    4788:	89 83       	std	Y+1, r24	; 0x01
	}
	shift=offset+Copy_u8Column;
    478a:	89 81       	ldd	r24, Y+1	; 0x01
    478c:	9c 81       	ldd	r25, Y+4	; 0x04
    478e:	89 0f       	add	r24, r25
    4790:	8a 83       	std	Y+2, r24	; 0x02
	LCD_VidSendCommand(shift);
    4792:	8a 81       	ldd	r24, Y+2	; 0x02
    4794:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <LCD_VidSendCommand>
}
    4798:	26 96       	adiw	r28, 0x06	; 6
    479a:	0f b6       	in	r0, 0x3f	; 63
    479c:	f8 94       	cli
    479e:	de bf       	out	0x3e, r29	; 62
    47a0:	0f be       	out	0x3f, r0	; 63
    47a2:	cd bf       	out	0x3d, r28	; 61
    47a4:	cf 91       	pop	r28
    47a6:	df 91       	pop	r29
    47a8:	08 95       	ret

000047aa <LCD_VidCLR>:


void LCD_VidCLR(void)
{
    47aa:	df 93       	push	r29
    47ac:	cf 93       	push	r28
    47ae:	cd b7       	in	r28, 0x3d	; 61
    47b0:	de b7       	in	r29, 0x3e	; 62

	LCD_VidSendCommand(0b00000001);
    47b2:	81 e0       	ldi	r24, 0x01	; 1
    47b4:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <LCD_VidSendCommand>

}
    47b8:	cf 91       	pop	r28
    47ba:	df 91       	pop	r29
    47bc:	08 95       	ret

000047be <LCD_SetCGRam>:

void LCD_SetCGRam(u8 Copy_u8location )  //start from 0:7
{	u8 offset=64+Copy_u8location;
    47be:	df 93       	push	r29
    47c0:	cf 93       	push	r28
    47c2:	00 d0       	rcall	.+0      	; 0x47c4 <LCD_SetCGRam+0x6>
    47c4:	cd b7       	in	r28, 0x3d	; 61
    47c6:	de b7       	in	r29, 0x3e	; 62
    47c8:	8a 83       	std	Y+2, r24	; 0x02
    47ca:	8a 81       	ldd	r24, Y+2	; 0x02
    47cc:	80 5c       	subi	r24, 0xC0	; 192
    47ce:	89 83       	std	Y+1, r24	; 0x01

	LCD_VidSendCommand(offset);
    47d0:	89 81       	ldd	r24, Y+1	; 0x01
    47d2:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <LCD_VidSendCommand>

}
    47d6:	0f 90       	pop	r0
    47d8:	0f 90       	pop	r0
    47da:	cf 91       	pop	r28
    47dc:	df 91       	pop	r29
    47de:	08 95       	ret

000047e0 <LCD_SetDDRam>:

void LCD_SetDDRam(void)
{	u8 offset=128;
    47e0:	df 93       	push	r29
    47e2:	cf 93       	push	r28
    47e4:	0f 92       	push	r0
    47e6:	cd b7       	in	r28, 0x3d	; 61
    47e8:	de b7       	in	r29, 0x3e	; 62
    47ea:	80 e8       	ldi	r24, 0x80	; 128
    47ec:	89 83       	std	Y+1, r24	; 0x01

	LCD_VidSendCommand(offset);
    47ee:	89 81       	ldd	r24, Y+1	; 0x01
    47f0:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <LCD_VidSendCommand>

}
    47f4:	0f 90       	pop	r0
    47f6:	cf 91       	pop	r28
    47f8:	df 91       	pop	r29
    47fa:	08 95       	ret

000047fc <LCD_VidSendCharToCGRam>:


void LCD_VidSendCharToCGRam(u8* Copy_u8Ptr)
{
    47fc:	df 93       	push	r29
    47fe:	cf 93       	push	r28
    4800:	00 d0       	rcall	.+0      	; 0x4802 <LCD_VidSendCharToCGRam+0x6>
    4802:	00 d0       	rcall	.+0      	; 0x4804 <LCD_VidSendCharToCGRam+0x8>
    4804:	cd b7       	in	r28, 0x3d	; 61
    4806:	de b7       	in	r29, 0x3e	; 62
    4808:	9c 83       	std	Y+4, r25	; 0x04
    480a:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;i<8;i++)
    480c:	1a 82       	std	Y+2, r1	; 0x02
    480e:	19 82       	std	Y+1, r1	; 0x01
    4810:	0f c0       	rjmp	.+30     	; 0x4830 <LCD_VidSendCharToCGRam+0x34>
	{
		LCD_VidSendData(*Copy_u8Ptr);
    4812:	eb 81       	ldd	r30, Y+3	; 0x03
    4814:	fc 81       	ldd	r31, Y+4	; 0x04
    4816:	80 81       	ld	r24, Z
    4818:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <LCD_VidSendData>
		Copy_u8Ptr++;
    481c:	8b 81       	ldd	r24, Y+3	; 0x03
    481e:	9c 81       	ldd	r25, Y+4	; 0x04
    4820:	01 96       	adiw	r24, 0x01	; 1
    4822:	9c 83       	std	Y+4, r25	; 0x04
    4824:	8b 83       	std	Y+3, r24	; 0x03
}


void LCD_VidSendCharToCGRam(u8* Copy_u8Ptr)
{
	for(int i=0;i<8;i++)
    4826:	89 81       	ldd	r24, Y+1	; 0x01
    4828:	9a 81       	ldd	r25, Y+2	; 0x02
    482a:	01 96       	adiw	r24, 0x01	; 1
    482c:	9a 83       	std	Y+2, r25	; 0x02
    482e:	89 83       	std	Y+1, r24	; 0x01
    4830:	89 81       	ldd	r24, Y+1	; 0x01
    4832:	9a 81       	ldd	r25, Y+2	; 0x02
    4834:	88 30       	cpi	r24, 0x08	; 8
    4836:	91 05       	cpc	r25, r1
    4838:	64 f3       	brlt	.-40     	; 0x4812 <LCD_VidSendCharToCGRam+0x16>
		LCD_VidSendData(*Copy_u8Ptr);
		Copy_u8Ptr++;
	}


}
    483a:	0f 90       	pop	r0
    483c:	0f 90       	pop	r0
    483e:	0f 90       	pop	r0
    4840:	0f 90       	pop	r0
    4842:	cf 91       	pop	r28
    4844:	df 91       	pop	r29
    4846:	08 95       	ret

00004848 <__mulsi3>:
    4848:	62 9f       	mul	r22, r18
    484a:	d0 01       	movw	r26, r0
    484c:	73 9f       	mul	r23, r19
    484e:	f0 01       	movw	r30, r0
    4850:	82 9f       	mul	r24, r18
    4852:	e0 0d       	add	r30, r0
    4854:	f1 1d       	adc	r31, r1
    4856:	64 9f       	mul	r22, r20
    4858:	e0 0d       	add	r30, r0
    485a:	f1 1d       	adc	r31, r1
    485c:	92 9f       	mul	r25, r18
    485e:	f0 0d       	add	r31, r0
    4860:	83 9f       	mul	r24, r19
    4862:	f0 0d       	add	r31, r0
    4864:	74 9f       	mul	r23, r20
    4866:	f0 0d       	add	r31, r0
    4868:	65 9f       	mul	r22, r21
    486a:	f0 0d       	add	r31, r0
    486c:	99 27       	eor	r25, r25
    486e:	72 9f       	mul	r23, r18
    4870:	b0 0d       	add	r27, r0
    4872:	e1 1d       	adc	r30, r1
    4874:	f9 1f       	adc	r31, r25
    4876:	63 9f       	mul	r22, r19
    4878:	b0 0d       	add	r27, r0
    487a:	e1 1d       	adc	r30, r1
    487c:	f9 1f       	adc	r31, r25
    487e:	bd 01       	movw	r22, r26
    4880:	cf 01       	movw	r24, r30
    4882:	11 24       	eor	r1, r1
    4884:	08 95       	ret

00004886 <__udivmodhi4>:
    4886:	aa 1b       	sub	r26, r26
    4888:	bb 1b       	sub	r27, r27
    488a:	51 e1       	ldi	r21, 0x11	; 17
    488c:	07 c0       	rjmp	.+14     	; 0x489c <__udivmodhi4_ep>

0000488e <__udivmodhi4_loop>:
    488e:	aa 1f       	adc	r26, r26
    4890:	bb 1f       	adc	r27, r27
    4892:	a6 17       	cp	r26, r22
    4894:	b7 07       	cpc	r27, r23
    4896:	10 f0       	brcs	.+4      	; 0x489c <__udivmodhi4_ep>
    4898:	a6 1b       	sub	r26, r22
    489a:	b7 0b       	sbc	r27, r23

0000489c <__udivmodhi4_ep>:
    489c:	88 1f       	adc	r24, r24
    489e:	99 1f       	adc	r25, r25
    48a0:	5a 95       	dec	r21
    48a2:	a9 f7       	brne	.-22     	; 0x488e <__udivmodhi4_loop>
    48a4:	80 95       	com	r24
    48a6:	90 95       	com	r25
    48a8:	bc 01       	movw	r22, r24
    48aa:	cd 01       	movw	r24, r26
    48ac:	08 95       	ret

000048ae <__prologue_saves__>:
    48ae:	2f 92       	push	r2
    48b0:	3f 92       	push	r3
    48b2:	4f 92       	push	r4
    48b4:	5f 92       	push	r5
    48b6:	6f 92       	push	r6
    48b8:	7f 92       	push	r7
    48ba:	8f 92       	push	r8
    48bc:	9f 92       	push	r9
    48be:	af 92       	push	r10
    48c0:	bf 92       	push	r11
    48c2:	cf 92       	push	r12
    48c4:	df 92       	push	r13
    48c6:	ef 92       	push	r14
    48c8:	ff 92       	push	r15
    48ca:	0f 93       	push	r16
    48cc:	1f 93       	push	r17
    48ce:	cf 93       	push	r28
    48d0:	df 93       	push	r29
    48d2:	cd b7       	in	r28, 0x3d	; 61
    48d4:	de b7       	in	r29, 0x3e	; 62
    48d6:	ca 1b       	sub	r28, r26
    48d8:	db 0b       	sbc	r29, r27
    48da:	0f b6       	in	r0, 0x3f	; 63
    48dc:	f8 94       	cli
    48de:	de bf       	out	0x3e, r29	; 62
    48e0:	0f be       	out	0x3f, r0	; 63
    48e2:	cd bf       	out	0x3d, r28	; 61
    48e4:	09 94       	ijmp

000048e6 <__epilogue_restores__>:
    48e6:	2a 88       	ldd	r2, Y+18	; 0x12
    48e8:	39 88       	ldd	r3, Y+17	; 0x11
    48ea:	48 88       	ldd	r4, Y+16	; 0x10
    48ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    48ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    48f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    48f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    48f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    48f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    48f8:	b9 84       	ldd	r11, Y+9	; 0x09
    48fa:	c8 84       	ldd	r12, Y+8	; 0x08
    48fc:	df 80       	ldd	r13, Y+7	; 0x07
    48fe:	ee 80       	ldd	r14, Y+6	; 0x06
    4900:	fd 80       	ldd	r15, Y+5	; 0x05
    4902:	0c 81       	ldd	r16, Y+4	; 0x04
    4904:	1b 81       	ldd	r17, Y+3	; 0x03
    4906:	aa 81       	ldd	r26, Y+2	; 0x02
    4908:	b9 81       	ldd	r27, Y+1	; 0x01
    490a:	ce 0f       	add	r28, r30
    490c:	d1 1d       	adc	r29, r1
    490e:	0f b6       	in	r0, 0x3f	; 63
    4910:	f8 94       	cli
    4912:	de bf       	out	0x3e, r29	; 62
    4914:	0f be       	out	0x3f, r0	; 63
    4916:	cd bf       	out	0x3d, r28	; 61
    4918:	ed 01       	movw	r28, r26
    491a:	08 95       	ret

0000491c <itoa>:
    491c:	fb 01       	movw	r30, r22
    491e:	9f 01       	movw	r18, r30
    4920:	e8 94       	clt
    4922:	42 30       	cpi	r20, 0x02	; 2
    4924:	c4 f0       	brlt	.+48     	; 0x4956 <itoa+0x3a>
    4926:	45 32       	cpi	r20, 0x25	; 37
    4928:	b4 f4       	brge	.+44     	; 0x4956 <itoa+0x3a>
    492a:	4a 30       	cpi	r20, 0x0A	; 10
    492c:	29 f4       	brne	.+10     	; 0x4938 <itoa+0x1c>
    492e:	97 fb       	bst	r25, 7
    4930:	1e f4       	brtc	.+6      	; 0x4938 <itoa+0x1c>
    4932:	90 95       	com	r25
    4934:	81 95       	neg	r24
    4936:	9f 4f       	sbci	r25, 0xFF	; 255
    4938:	64 2f       	mov	r22, r20
    493a:	77 27       	eor	r23, r23
    493c:	0e 94 43 24 	call	0x4886	; 0x4886 <__udivmodhi4>
    4940:	80 5d       	subi	r24, 0xD0	; 208
    4942:	8a 33       	cpi	r24, 0x3A	; 58
    4944:	0c f0       	brlt	.+2      	; 0x4948 <itoa+0x2c>
    4946:	89 5d       	subi	r24, 0xD9	; 217
    4948:	81 93       	st	Z+, r24
    494a:	cb 01       	movw	r24, r22
    494c:	00 97       	sbiw	r24, 0x00	; 0
    494e:	a1 f7       	brne	.-24     	; 0x4938 <itoa+0x1c>
    4950:	16 f4       	brtc	.+4      	; 0x4956 <itoa+0x3a>
    4952:	5d e2       	ldi	r21, 0x2D	; 45
    4954:	51 93       	st	Z+, r21
    4956:	10 82       	st	Z, r1
    4958:	c9 01       	movw	r24, r18
    495a:	0c 94 af 24 	jmp	0x495e	; 0x495e <strrev>

0000495e <strrev>:
    495e:	dc 01       	movw	r26, r24
    4960:	fc 01       	movw	r30, r24
    4962:	67 2f       	mov	r22, r23
    4964:	71 91       	ld	r23, Z+
    4966:	77 23       	and	r23, r23
    4968:	e1 f7       	brne	.-8      	; 0x4962 <strrev+0x4>
    496a:	32 97       	sbiw	r30, 0x02	; 2
    496c:	04 c0       	rjmp	.+8      	; 0x4976 <strrev+0x18>
    496e:	7c 91       	ld	r23, X
    4970:	6d 93       	st	X+, r22
    4972:	70 83       	st	Z, r23
    4974:	62 91       	ld	r22, -Z
    4976:	ae 17       	cp	r26, r30
    4978:	bf 07       	cpc	r27, r31
    497a:	c8 f3       	brcs	.-14     	; 0x496e <strrev+0x10>
    497c:	08 95       	ret

0000497e <_exit>:
    497e:	f8 94       	cli

00004980 <__stop_program>:
    4980:	ff cf       	rjmp	.-2      	; 0x4980 <__stop_program>
