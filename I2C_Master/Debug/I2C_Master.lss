
I2C_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000489a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  0000489a  0000490e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003900  00000000  00000000  00004a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dac  00000000  00000000  00008324  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  000090d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  00009250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  00009421  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  0000b431  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  0000c592  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000d598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  0000d738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  0000d9f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e304  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <main>
      7a:	0c 94 4b 24 	jmp	0x4896	; 0x4896 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 14 24 	jmp	0x4828	; 0x4828 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e6       	ldi	r26, 0x68	; 104
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 30 24 	jmp	0x4860	; 0x4860 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3c 24 	jmp	0x4878	; 0x4878 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3c 24 	jmp	0x4878	; 0x4878 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 14 24 	jmp	0x4828	; 0x4828 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 30 24 	jmp	0x4860	; 0x4860 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 3c 24 	jmp	0x4878	; 0x4878 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 3c 24 	jmp	0x4878	; 0x4878 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 20 24 	jmp	0x4840	; 0x4840 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 3c 24 	jmp	0x4878	; 0x4878 <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 1d 24 	jmp	0x483a	; 0x483a <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 39 24 	jmp	0x4872	; 0x4872 <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 24 24 	jmp	0x4848	; 0x4848 <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 40 24 	jmp	0x4880	; 0x4880 <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	e0 59       	subi	r30, 0x90	; 144
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <DIO_VidSetPin_Direction>:




void DIO_VidSetPin_Direction(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8State)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	27 97       	sbiw	r28, 0x07	; 7
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	6a 83       	std	Y+2, r22	; 0x02
     ca8:	4b 83       	std	Y+3, r20	; 0x03
	if (1==Copy_u8State)
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	09 f0       	breq	.+2      	; 0xcb2 <DIO_VidSetPin_Direction+0x22>
     cb0:	6f c0       	rjmp	.+222    	; 0xd90 <DIO_VidSetPin_Direction+0x100>
	{
		switch (Copy_u8Port)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3f 83       	std	Y+7, r19	; 0x07
     cba:	2e 83       	std	Y+6, r18	; 0x06
     cbc:	8e 81       	ldd	r24, Y+6	; 0x06
     cbe:	9f 81       	ldd	r25, Y+7	; 0x07
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	49 f1       	breq	.+82     	; 0xd18 <DIO_VidSetPin_Direction+0x88>
     cc6:	2e 81       	ldd	r18, Y+6	; 0x06
     cc8:	3f 81       	ldd	r19, Y+7	; 0x07
     cca:	22 30       	cpi	r18, 0x02	; 2
     ccc:	31 05       	cpc	r19, r1
     cce:	2c f4       	brge	.+10     	; 0xcda <DIO_VidSetPin_Direction+0x4a>
     cd0:	8e 81       	ldd	r24, Y+6	; 0x06
     cd2:	9f 81       	ldd	r25, Y+7	; 0x07
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	61 f0       	breq	.+24     	; 0xcf0 <DIO_VidSetPin_Direction+0x60>
     cd8:	d2 c0       	rjmp	.+420    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
     cda:	2e 81       	ldd	r18, Y+6	; 0x06
     cdc:	3f 81       	ldd	r19, Y+7	; 0x07
     cde:	22 30       	cpi	r18, 0x02	; 2
     ce0:	31 05       	cpc	r19, r1
     ce2:	71 f1       	breq	.+92     	; 0xd40 <DIO_VidSetPin_Direction+0xb0>
     ce4:	8e 81       	ldd	r24, Y+6	; 0x06
     ce6:	9f 81       	ldd	r25, Y+7	; 0x07
     ce8:	83 30       	cpi	r24, 0x03	; 3
     cea:	91 05       	cpc	r25, r1
     cec:	e9 f1       	breq	.+122    	; 0xd68 <DIO_VidSetPin_Direction+0xd8>
     cee:	c7 c0       	rjmp	.+398    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			{case 0:
			SET_BIT( DDRA,Copy_u8Pin); break;
     cf0:	aa e3       	ldi	r26, 0x3A	; 58
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	ea e3       	ldi	r30, 0x3A	; 58
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	48 2f       	mov	r20, r24
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	02 2e       	mov	r0, r18
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <DIO_VidSetPin_Direction+0x7e>
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	0a 94       	dec	r0
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <DIO_VidSetPin_Direction+0x7a>
     d12:	84 2b       	or	r24, r20
     d14:	8c 93       	st	X, r24
     d16:	b3 c0       	rjmp	.+358    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			case 1:
			SET_BIT( DDRB,Copy_u8Pin); break;
     d18:	a7 e3       	ldi	r26, 0x37	; 55
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e7 e3       	ldi	r30, 0x37	; 55
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	48 2f       	mov	r20, r24
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <DIO_VidSetPin_Direction+0xa6>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <DIO_VidSetPin_Direction+0xa2>
     d3a:	84 2b       	or	r24, r20
     d3c:	8c 93       	st	X, r24
     d3e:	9f c0       	rjmp	.+318    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			case 2:
			SET_BIT( DDRC,Copy_u8Pin); break;
     d40:	a4 e3       	ldi	r26, 0x34	; 52
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e4 e3       	ldi	r30, 0x34	; 52
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	48 2f       	mov	r20, r24
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	02 2e       	mov	r0, r18
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <DIO_VidSetPin_Direction+0xce>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	0a 94       	dec	r0
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <DIO_VidSetPin_Direction+0xca>
     d62:	84 2b       	or	r24, r20
     d64:	8c 93       	st	X, r24
     d66:	8b c0       	rjmp	.+278    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			case 3:
			SET_BIT( DDRD,Copy_u8Pin); break;
     d68:	a1 e3       	ldi	r26, 0x31	; 49
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e1 e3       	ldi	r30, 0x31	; 49
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	48 2f       	mov	r20, r24
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	02 2e       	mov	r0, r18
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <DIO_VidSetPin_Direction+0xf6>
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	0a 94       	dec	r0
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <DIO_VidSetPin_Direction+0xf2>
     d8a:	84 2b       	or	r24, r20
     d8c:	8c 93       	st	X, r24
     d8e:	77 c0       	rjmp	.+238    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
	}}
	else if (0==Copy_u8State)
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	88 23       	and	r24, r24
     d94:	09 f0       	breq	.+2      	; 0xd98 <DIO_VidSetPin_Direction+0x108>
     d96:	73 c0       	rjmp	.+230    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
	{	switch(Copy_u8Port)
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	3d 83       	std	Y+5, r19	; 0x05
     da0:	2c 83       	std	Y+4, r18	; 0x04
     da2:	8c 81       	ldd	r24, Y+4	; 0x04
     da4:	9d 81       	ldd	r25, Y+5	; 0x05
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	91 05       	cpc	r25, r1
     daa:	59 f1       	breq	.+86     	; 0xe02 <DIO_VidSetPin_Direction+0x172>
     dac:	2c 81       	ldd	r18, Y+4	; 0x04
     dae:	3d 81       	ldd	r19, Y+5	; 0x05
     db0:	22 30       	cpi	r18, 0x02	; 2
     db2:	31 05       	cpc	r19, r1
     db4:	2c f4       	brge	.+10     	; 0xdc0 <DIO_VidSetPin_Direction+0x130>
     db6:	8c 81       	ldd	r24, Y+4	; 0x04
     db8:	9d 81       	ldd	r25, Y+5	; 0x05
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	69 f0       	breq	.+26     	; 0xdd8 <DIO_VidSetPin_Direction+0x148>
     dbe:	5f c0       	rjmp	.+190    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
     dc0:	2c 81       	ldd	r18, Y+4	; 0x04
     dc2:	3d 81       	ldd	r19, Y+5	; 0x05
     dc4:	22 30       	cpi	r18, 0x02	; 2
     dc6:	31 05       	cpc	r19, r1
     dc8:	89 f1       	breq	.+98     	; 0xe2c <DIO_VidSetPin_Direction+0x19c>
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	83 30       	cpi	r24, 0x03	; 3
     dd0:	91 05       	cpc	r25, r1
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <DIO_VidSetPin_Direction+0x146>
     dd4:	40 c0       	rjmp	.+128    	; 0xe56 <DIO_VidSetPin_Direction+0x1c6>
     dd6:	53 c0       	rjmp	.+166    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			{case 0:
			CLR_BIT( DDRA,Copy_u8Pin); break;
     dd8:	aa e3       	ldi	r26, 0x3A	; 58
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	ea e3       	ldi	r30, 0x3A	; 58
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_VidSetPin_Direction+0x166>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_VidSetPin_Direction+0x162>
     dfa:	80 95       	com	r24
     dfc:	84 23       	and	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	3e c0       	rjmp	.+124    	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			case 1:
			CLR_BIT( DDRB,Copy_u8Pin); break;
     e02:	a7 e3       	ldi	r26, 0x37	; 55
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e7 e3       	ldi	r30, 0x37	; 55
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <DIO_VidSetPin_Direction+0x190>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <DIO_VidSetPin_Direction+0x18c>
     e24:	80 95       	com	r24
     e26:	84 23       	and	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	29 c0       	rjmp	.+82     	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			case 2:
			CLR_BIT( DDRC,Copy_u8Pin); break;
     e2c:	a4 e3       	ldi	r26, 0x34	; 52
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e4 e3       	ldi	r30, 0x34	; 52
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <DIO_VidSetPin_Direction+0x1ba>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <DIO_VidSetPin_Direction+0x1b6>
     e4e:	80 95       	com	r24
     e50:	84 23       	and	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	14 c0       	rjmp	.+40     	; 0xe7e <DIO_VidSetPin_Direction+0x1ee>
			case 3:
			CLR_BIT( DDRD,Copy_u8Pin); break;
     e56:	a1 e3       	ldi	r26, 0x31	; 49
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e1 e3       	ldi	r30, 0x31	; 49
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_VidSetPin_Direction+0x1e4>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_VidSetPin_Direction+0x1e0>
     e78:	80 95       	com	r24
     e7a:	84 23       	and	r24, r20
     e7c:	8c 93       	st	X, r24
	}}

	}
     e7e:	27 96       	adiw	r28, 0x07	; 7
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <DIO_VidSetPin_Value>:
	
	
void DIO_VidSetPin_Value(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	27 97       	sbiw	r28, 0x07	; 7
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	6a 83       	std	Y+2, r22	; 0x02
     ea8:	4b 83       	std	Y+3, r20	; 0x03
	if(0==Copy_u8Value)
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	88 23       	and	r24, r24
     eae:	09 f0       	breq	.+2      	; 0xeb2 <DIO_VidSetPin_Value+0x22>
     eb0:	74 c0       	rjmp	.+232    	; 0xf9a <DIO_VidSetPin_Value+0x10a>
	
	{switch(Copy_u8Port)
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	3f 83       	std	Y+7, r19	; 0x07
     eba:	2e 83       	std	Y+6, r18	; 0x06
     ebc:	8e 81       	ldd	r24, Y+6	; 0x06
     ebe:	9f 81       	ldd	r25, Y+7	; 0x07
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	91 05       	cpc	r25, r1
     ec4:	59 f1       	breq	.+86     	; 0xf1c <DIO_VidSetPin_Value+0x8c>
     ec6:	2e 81       	ldd	r18, Y+6	; 0x06
     ec8:	3f 81       	ldd	r19, Y+7	; 0x07
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	31 05       	cpc	r19, r1
     ece:	2c f4       	brge	.+10     	; 0xeda <DIO_VidSetPin_Value+0x4a>
     ed0:	8e 81       	ldd	r24, Y+6	; 0x06
     ed2:	9f 81       	ldd	r25, Y+7	; 0x07
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	69 f0       	breq	.+26     	; 0xef2 <DIO_VidSetPin_Value+0x62>
     ed8:	d2 c0       	rjmp	.+420    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
     eda:	2e 81       	ldd	r18, Y+6	; 0x06
     edc:	3f 81       	ldd	r19, Y+7	; 0x07
     ede:	22 30       	cpi	r18, 0x02	; 2
     ee0:	31 05       	cpc	r19, r1
     ee2:	89 f1       	breq	.+98     	; 0xf46 <DIO_VidSetPin_Value+0xb6>
     ee4:	8e 81       	ldd	r24, Y+6	; 0x06
     ee6:	9f 81       	ldd	r25, Y+7	; 0x07
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	91 05       	cpc	r25, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <DIO_VidSetPin_Value+0x60>
     eee:	40 c0       	rjmp	.+128    	; 0xf70 <DIO_VidSetPin_Value+0xe0>
     ef0:	c6 c0       	rjmp	.+396    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		{case 0:
		CLR_BIT( PORTA,Copy_u8Pin) ;break;
     ef2:	ab e3       	ldi	r26, 0x3B	; 59
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	eb e3       	ldi	r30, 0x3B	; 59
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 2e       	mov	r0, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_VidSetPin_Value+0x80>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DIO_VidSetPin_Value+0x7c>
     f14:	80 95       	com	r24
     f16:	84 23       	and	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	b1 c0       	rjmp	.+354    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		case 1:
		CLR_BIT( PORTB,Copy_u8Pin) ;break;
     f1c:	a8 e3       	ldi	r26, 0x38	; 56
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e8 e3       	ldi	r30, 0x38	; 56
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_VidSetPin_Value+0xaa>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_VidSetPin_Value+0xa6>
     f3e:	80 95       	com	r24
     f40:	84 23       	and	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	9c c0       	rjmp	.+312    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		case 2:
		CLR_BIT( PORTC,Copy_u8Pin) ;break;
     f46:	a5 e3       	ldi	r26, 0x35	; 53
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e5 e3       	ldi	r30, 0x35	; 53
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_VidSetPin_Value+0xd4>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_VidSetPin_Value+0xd0>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	87 c0       	rjmp	.+270    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		case 3:
		CLR_BIT( PORTD,Copy_u8Pin) ;break;
     f70:	a2 e3       	ldi	r26, 0x32	; 50
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e2 e3       	ldi	r30, 0x32	; 50
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_VidSetPin_Value+0xfe>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_VidSetPin_Value+0xfa>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	72 c0       	rjmp	.+228    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
	}}
	else if (1==Copy_u8Value)
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <DIO_VidSetPin_Value+0x112>
     fa0:	6e c0       	rjmp	.+220    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
	{switch(Copy_u8Port)
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	3d 83       	std	Y+5, r19	; 0x05
     faa:	2c 83       	std	Y+4, r18	; 0x04
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	9d 81       	ldd	r25, Y+5	; 0x05
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	91 05       	cpc	r25, r1
     fb4:	49 f1       	breq	.+82     	; 0x1008 <DIO_VidSetPin_Value+0x178>
     fb6:	2c 81       	ldd	r18, Y+4	; 0x04
     fb8:	3d 81       	ldd	r19, Y+5	; 0x05
     fba:	22 30       	cpi	r18, 0x02	; 2
     fbc:	31 05       	cpc	r19, r1
     fbe:	2c f4       	brge	.+10     	; 0xfca <DIO_VidSetPin_Value+0x13a>
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	61 f0       	breq	.+24     	; 0xfe0 <DIO_VidSetPin_Value+0x150>
     fc8:	5a c0       	rjmp	.+180    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
     fca:	2c 81       	ldd	r18, Y+4	; 0x04
     fcc:	3d 81       	ldd	r19, Y+5	; 0x05
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	71 f1       	breq	.+92     	; 0x1030 <DIO_VidSetPin_Value+0x1a0>
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	9d 81       	ldd	r25, Y+5	; 0x05
     fd8:	83 30       	cpi	r24, 0x03	; 3
     fda:	91 05       	cpc	r25, r1
     fdc:	e9 f1       	breq	.+122    	; 0x1058 <DIO_VidSetPin_Value+0x1c8>
     fde:	4f c0       	rjmp	.+158    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		{case 0:
		SET_BIT( PORTA,Copy_u8Pin) ;break;
     fe0:	ab e3       	ldi	r26, 0x3B	; 59
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	eb e3       	ldi	r30, 0x3B	; 59
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_VidSetPin_Value+0x16e>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_VidSetPin_Value+0x16a>
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	3b c0       	rjmp	.+118    	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		case 1:
		SET_BIT( PORTB,Copy_u8Pin) ;break;
    1008:	a8 e3       	ldi	r26, 0x38	; 56
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e8 e3       	ldi	r30, 0x38	; 56
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_VidSetPin_Value+0x196>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_VidSetPin_Value+0x192>
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	27 c0       	rjmp	.+78     	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		case 2:
		SET_BIT( PORTC,Copy_u8Pin) ;break;
    1030:	a5 e3       	ldi	r26, 0x35	; 53
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e5 e3       	ldi	r30, 0x35	; 53
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_VidSetPin_Value+0x1be>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_VidSetPin_Value+0x1ba>
    1052:	84 2b       	or	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	13 c0       	rjmp	.+38     	; 0x107e <DIO_VidSetPin_Value+0x1ee>
		case 3:
		SET_BIT( PORTD,Copy_u8Pin) ;break;
    1058:	a2 e3       	ldi	r26, 0x32	; 50
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e2 e3       	ldi	r30, 0x32	; 50
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_VidSetPin_Value+0x1e6>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_VidSetPin_Value+0x1e2>
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
	}}
		
		
}
    107e:	27 96       	adiw	r28, 0x07	; 7
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <DIO_VidGetPin>:
	
	u8 DIO_VidGetPin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{	u8 bit;
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <DIO_VidGetPin+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <DIO_VidGetPin+0x8>
    1098:	0f 92       	push	r0
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	8a 83       	std	Y+2, r24	; 0x02
    10a0:	6b 83       	std	Y+3, r22	; 0x03
		switch(Copy_u8Port)
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	3d 83       	std	Y+5, r19	; 0x05
    10aa:	2c 83       	std	Y+4, r18	; 0x04
    10ac:	4c 81       	ldd	r20, Y+4	; 0x04
    10ae:	5d 81       	ldd	r21, Y+5	; 0x05
    10b0:	41 30       	cpi	r20, 0x01	; 1
    10b2:	51 05       	cpc	r21, r1
    10b4:	41 f1       	breq	.+80     	; 0x1106 <DIO_VidGetPin+0x76>
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	82 30       	cpi	r24, 0x02	; 2
    10bc:	91 05       	cpc	r25, r1
    10be:	34 f4       	brge	.+12     	; 0x10cc <DIO_VidGetPin+0x3c>
    10c0:	2c 81       	ldd	r18, Y+4	; 0x04
    10c2:	3d 81       	ldd	r19, Y+5	; 0x05
    10c4:	21 15       	cp	r18, r1
    10c6:	31 05       	cpc	r19, r1
    10c8:	61 f0       	breq	.+24     	; 0x10e2 <DIO_VidGetPin+0x52>
    10ca:	52 c0       	rjmp	.+164    	; 0x1170 <DIO_VidGetPin+0xe0>
    10cc:	4c 81       	ldd	r20, Y+4	; 0x04
    10ce:	5d 81       	ldd	r21, Y+5	; 0x05
    10d0:	42 30       	cpi	r20, 0x02	; 2
    10d2:	51 05       	cpc	r21, r1
    10d4:	51 f1       	breq	.+84     	; 0x112a <DIO_VidGetPin+0x9a>
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	91 05       	cpc	r25, r1
    10de:	b9 f1       	breq	.+110    	; 0x114e <DIO_VidGetPin+0xbe>
    10e0:	47 c0       	rjmp	.+142    	; 0x1170 <DIO_VidGetPin+0xe0>
		{case 0:
		bit=GET_BIT( PINA,Copy_u8Pin) ;break;
    10e2:	e9 e3       	ldi	r30, 0x39	; 57
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	a9 01       	movw	r20, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <DIO_VidGetPin+0x6a>
    10f6:	55 95       	asr	r21
    10f8:	47 95       	ror	r20
    10fa:	8a 95       	dec	r24
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <DIO_VidGetPin+0x66>
    10fe:	ca 01       	movw	r24, r20
    1100:	81 70       	andi	r24, 0x01	; 1
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	35 c0       	rjmp	.+106    	; 0x1170 <DIO_VidGetPin+0xe0>
		case 1:
		bit=GET_BIT( PINB,Copy_u8Pin) ;break;
    1106:	e6 e3       	ldi	r30, 0x36	; 54
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	a9 01       	movw	r20, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_VidGetPin+0x8e>
    111a:	55 95       	asr	r21
    111c:	47 95       	ror	r20
    111e:	8a 95       	dec	r24
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_VidGetPin+0x8a>
    1122:	ca 01       	movw	r24, r20
    1124:	81 70       	andi	r24, 0x01	; 1
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	23 c0       	rjmp	.+70     	; 0x1170 <DIO_VidGetPin+0xe0>
		case 2:
		bit=GET_BIT( PINC,Copy_u8Pin) ;break;
    112a:	e3 e3       	ldi	r30, 0x33	; 51
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a9 01       	movw	r20, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_VidGetPin+0xb2>
    113e:	55 95       	asr	r21
    1140:	47 95       	ror	r20
    1142:	8a 95       	dec	r24
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_VidGetPin+0xae>
    1146:	ca 01       	movw	r24, r20
    1148:	81 70       	andi	r24, 0x01	; 1
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	11 c0       	rjmp	.+34     	; 0x1170 <DIO_VidGetPin+0xe0>
		case 3:
		bit=GET_BIT( PIND,Copy_u8Pin) ;break;
    114e:	e0 e3       	ldi	r30, 0x30	; 48
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a9 01       	movw	r20, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_VidGetPin+0xd6>
    1162:	55 95       	asr	r21
    1164:	47 95       	ror	r20
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_VidGetPin+0xd2>
    116a:	ca 01       	movw	r24, r20
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	89 83       	std	Y+1, r24	; 0x01
		}
		return bit;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
				
		
	}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <DIO_VidToggelPin>:

	
	
	void DIO_VidToggelPin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <DIO_VidToggelPin+0x6>
    1188:	00 d0       	rcall	.+0      	; 0x118a <DIO_VidToggelPin+0x8>
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3c 83       	std	Y+4, r19	; 0x04
    119a:	2b 83       	std	Y+3, r18	; 0x03
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	91 05       	cpc	r25, r1
    11a4:	49 f1       	breq	.+82     	; 0x11f8 <DIO_VidToggelPin+0x76>
    11a6:	2b 81       	ldd	r18, Y+3	; 0x03
    11a8:	3c 81       	ldd	r19, Y+4	; 0x04
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	2c f4       	brge	.+10     	; 0x11ba <DIO_VidToggelPin+0x38>
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	61 f0       	breq	.+24     	; 0x11d0 <DIO_VidToggelPin+0x4e>
    11b8:	5a c0       	rjmp	.+180    	; 0x126e <DIO_VidToggelPin+0xec>
    11ba:	2b 81       	ldd	r18, Y+3	; 0x03
    11bc:	3c 81       	ldd	r19, Y+4	; 0x04
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	71 f1       	breq	.+92     	; 0x1220 <DIO_VidToggelPin+0x9e>
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	91 05       	cpc	r25, r1
    11cc:	e9 f1       	breq	.+122    	; 0x1248 <DIO_VidToggelPin+0xc6>
    11ce:	4f c0       	rjmp	.+158    	; 0x126e <DIO_VidToggelPin+0xec>
		{
			case 0:   TOGGLE_BIT( PORTA,Copy_u8Pin); break;
    11d0:	ab e3       	ldi	r26, 0x3B	; 59
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	eb e3       	ldi	r30, 0x3B	; 59
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_VidToggelPin+0x6c>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <DIO_VidToggelPin+0x68>
    11f2:	84 27       	eor	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	3b c0       	rjmp	.+118    	; 0x126e <DIO_VidToggelPin+0xec>
			case 1:   TOGGLE_BIT( PORTB,Copy_u8Pin); break;
    11f8:	a8 e3       	ldi	r26, 0x38	; 56
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e8 e3       	ldi	r30, 0x38	; 56
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO_VidToggelPin+0x94>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO_VidToggelPin+0x90>
    121a:	84 27       	eor	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	27 c0       	rjmp	.+78     	; 0x126e <DIO_VidToggelPin+0xec>
			case 2:   TOGGLE_BIT( PORTC,Copy_u8Pin); break;
    1220:	a5 e3       	ldi	r26, 0x35	; 53
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e5 e3       	ldi	r30, 0x35	; 53
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_VidToggelPin+0xbc>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_VidToggelPin+0xb8>
    1242:	84 27       	eor	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	13 c0       	rjmp	.+38     	; 0x126e <DIO_VidToggelPin+0xec>
			case 3:   TOGGLE_BIT( PORTD,Copy_u8Pin); break;
    1248:	a2 e3       	ldi	r26, 0x32	; 50
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e2 e3       	ldi	r30, 0x32	; 50
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <DIO_VidToggelPin+0xe4>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <DIO_VidToggelPin+0xe0>
    126a:	84 27       	eor	r24, r20
    126c:	8c 93       	st	X, r24
		}
			
		
	}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <DIO_VidSetPort_Direction>:
	
	void DIO_VidSetPort_Direction(u8 Copy_u8Port,u8 Copy_u8State)
	{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <DIO_VidSetPort_Direction+0x6>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <DIO_VidSetPort_Direction+0x8>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <DIO_VidSetPort_Direction+0xa>
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	6a 83       	std	Y+2, r22	; 0x02
		
		if (1==Copy_u8State)
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	99 f5       	brne	.+102    	; 0x12fa <DIO_VidSetPort_Direction+0x7e>
		{
			switch(Copy_u8Port)
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	3e 83       	std	Y+6, r19	; 0x06
    129c:	2d 83       	std	Y+5, r18	; 0x05
    129e:	8d 81       	ldd	r24, Y+5	; 0x05
    12a0:	9e 81       	ldd	r25, Y+6	; 0x06
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	91 05       	cpc	r25, r1
    12a6:	d1 f0       	breq	.+52     	; 0x12dc <DIO_VidSetPort_Direction+0x60>
    12a8:	2d 81       	ldd	r18, Y+5	; 0x05
    12aa:	3e 81       	ldd	r19, Y+6	; 0x06
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	2c f4       	brge	.+10     	; 0x12bc <DIO_VidSetPort_Direction+0x40>
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	9e 81       	ldd	r25, Y+6	; 0x06
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <DIO_VidSetPort_Direction+0x56>
    12ba:	50 c0       	rjmp	.+160    	; 0x135c <DIO_VidSetPort_Direction+0xe0>
    12bc:	2d 81       	ldd	r18, Y+5	; 0x05
    12be:	3e 81       	ldd	r19, Y+6	; 0x06
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <DIO_VidSetPort_Direction+0x6a>
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	91 05       	cpc	r25, r1
    12ce:	81 f0       	breq	.+32     	; 0x12f0 <DIO_VidSetPort_Direction+0x74>
    12d0:	45 c0       	rjmp	.+138    	; 0x135c <DIO_VidSetPort_Direction+0xe0>
			{
				case 0: SET_PORT(DDRA);   break;
    12d2:	ea e3       	ldi	r30, 0x3A	; 58
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8f ef       	ldi	r24, 0xFF	; 255
    12d8:	80 83       	st	Z, r24
    12da:	40 c0       	rjmp	.+128    	; 0x135c <DIO_VidSetPort_Direction+0xe0>
				case 1: SET_PORT(DDRB);   break;
    12dc:	e7 e3       	ldi	r30, 0x37	; 55
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	80 83       	st	Z, r24
    12e4:	3b c0       	rjmp	.+118    	; 0x135c <DIO_VidSetPort_Direction+0xe0>
				case 2: SET_PORT(DDRC);   break;
    12e6:	e4 e3       	ldi	r30, 0x34	; 52
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	80 83       	st	Z, r24
    12ee:	36 c0       	rjmp	.+108    	; 0x135c <DIO_VidSetPort_Direction+0xe0>
				case 3: SET_PORT(DDRD);   break;
    12f0:	e1 e3       	ldi	r30, 0x31	; 49
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	80 83       	st	Z, r24
    12f8:	31 c0       	rjmp	.+98     	; 0x135c <DIO_VidSetPort_Direction+0xe0>
			}
			
		}
		else if(0==Copy_u8State)
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	88 23       	and	r24, r24
    12fe:	71 f5       	brne	.+92     	; 0x135c <DIO_VidSetPort_Direction+0xe0>
		
		{
			switch(Copy_u8Port)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3c 83       	std	Y+4, r19	; 0x04
    1308:	2b 83       	std	Y+3, r18	; 0x03
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	c9 f0       	breq	.+50     	; 0x1346 <DIO_VidSetPort_Direction+0xca>
    1314:	2b 81       	ldd	r18, Y+3	; 0x03
    1316:	3c 81       	ldd	r19, Y+4	; 0x04
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <DIO_VidSetPort_Direction+0xac>
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <DIO_VidSetPort_Direction+0xc2>
    1326:	1a c0       	rjmp	.+52     	; 0x135c <DIO_VidSetPort_Direction+0xe0>
    1328:	2b 81       	ldd	r18, Y+3	; 0x03
    132a:	3c 81       	ldd	r19, Y+4	; 0x04
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	71 f0       	breq	.+28     	; 0x134e <DIO_VidSetPort_Direction+0xd2>
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	69 f0       	breq	.+26     	; 0x1356 <DIO_VidSetPort_Direction+0xda>
    133c:	0f c0       	rjmp	.+30     	; 0x135c <DIO_VidSetPort_Direction+0xe0>
			{
				case 0: CLR_PORT(DDRA);   break;
    133e:	ea e3       	ldi	r30, 0x3A	; 58
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	10 82       	st	Z, r1
    1344:	0b c0       	rjmp	.+22     	; 0x135c <DIO_VidSetPort_Direction+0xe0>
				case 1: CLR_PORT(DDRB);   break;
    1346:	e7 e3       	ldi	r30, 0x37	; 55
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	10 82       	st	Z, r1
    134c:	07 c0       	rjmp	.+14     	; 0x135c <DIO_VidSetPort_Direction+0xe0>
				case 2: CLR_PORT(DDRC);   break;
    134e:	e4 e3       	ldi	r30, 0x34	; 52
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	10 82       	st	Z, r1
    1354:	03 c0       	rjmp	.+6      	; 0x135c <DIO_VidSetPort_Direction+0xe0>
				case 3: CLR_PORT(DDRD);   break;
    1356:	e1 e3       	ldi	r30, 0x31	; 49
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	10 82       	st	Z, r1
			}	
		}
		
	}
    135c:	26 96       	adiw	r28, 0x06	; 6
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <DIO_VidWriteOnPort>:

	void DIO_VidWriteOnPort(u8 Copy_u8Port,u8 Copy_u8Value)
	{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	00 d0       	rcall	.+0      	; 0x1374 <DIO_VidWriteOnPort+0x6>
    1374:	00 d0       	rcall	.+0      	; 0x1376 <DIO_VidWriteOnPort+0x8>
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	3c 83       	std	Y+4, r19	; 0x04
    1386:	2b 83       	std	Y+3, r18	; 0x03
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	d1 f0       	breq	.+52     	; 0x13c6 <DIO_VidWriteOnPort+0x58>
    1392:	2b 81       	ldd	r18, Y+3	; 0x03
    1394:	3c 81       	ldd	r19, Y+4	; 0x04
    1396:	22 30       	cpi	r18, 0x02	; 2
    1398:	31 05       	cpc	r19, r1
    139a:	2c f4       	brge	.+10     	; 0x13a6 <DIO_VidWriteOnPort+0x38>
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	61 f0       	breq	.+24     	; 0x13bc <DIO_VidWriteOnPort+0x4e>
    13a4:	1e c0       	rjmp	.+60     	; 0x13e2 <DIO_VidWriteOnPort+0x74>
    13a6:	2b 81       	ldd	r18, Y+3	; 0x03
    13a8:	3c 81       	ldd	r19, Y+4	; 0x04
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	81 f0       	breq	.+32     	; 0x13d0 <DIO_VidWriteOnPort+0x62>
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	83 30       	cpi	r24, 0x03	; 3
    13b6:	91 05       	cpc	r25, r1
    13b8:	81 f0       	breq	.+32     	; 0x13da <DIO_VidWriteOnPort+0x6c>
    13ba:	13 c0       	rjmp	.+38     	; 0x13e2 <DIO_VidWriteOnPort+0x74>
		{
			case 0: WRITEON_PORT(PORTA,Copy_u8Value); break;
    13bc:	eb e3       	ldi	r30, 0x3B	; 59
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	80 83       	st	Z, r24
    13c4:	0e c0       	rjmp	.+28     	; 0x13e2 <DIO_VidWriteOnPort+0x74>
			case 1: WRITEON_PORT(PORTB,Copy_u8Value); break;
    13c6:	e8 e3       	ldi	r30, 0x38	; 56
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	80 83       	st	Z, r24
    13ce:	09 c0       	rjmp	.+18     	; 0x13e2 <DIO_VidWriteOnPort+0x74>
			case 2: WRITEON_PORT(PORTC,Copy_u8Value); break;
    13d0:	e5 e3       	ldi	r30, 0x35	; 53
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	80 83       	st	Z, r24
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <DIO_VidWriteOnPort+0x74>
			case 3: WRITEON_PORT(PORTD,Copy_u8Value); break;
    13da:	e2 e3       	ldi	r30, 0x32	; 50
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	80 83       	st	Z, r24
		}
		
	}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <DIO_VidPullUp_Pin>:


	
	void DIO_VidPullUp_Pin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <DIO_VidPullUp_Pin+0x6>
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <DIO_VidPullUp_Pin+0x8>
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3c 83       	std	Y+4, r19	; 0x04
    1408:	2b 83       	std	Y+3, r18	; 0x03
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	91 05       	cpc	r25, r1
    1412:	49 f1       	breq	.+82     	; 0x1466 <DIO_VidPullUp_Pin+0x76>
    1414:	2b 81       	ldd	r18, Y+3	; 0x03
    1416:	3c 81       	ldd	r19, Y+4	; 0x04
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	2c f4       	brge	.+10     	; 0x1428 <DIO_VidPullUp_Pin+0x38>
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	61 f0       	breq	.+24     	; 0x143e <DIO_VidPullUp_Pin+0x4e>
    1426:	5a c0       	rjmp	.+180    	; 0x14dc <DIO_VidPullUp_Pin+0xec>
    1428:	2b 81       	ldd	r18, Y+3	; 0x03
    142a:	3c 81       	ldd	r19, Y+4	; 0x04
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	71 f1       	breq	.+92     	; 0x148e <DIO_VidPullUp_Pin+0x9e>
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	e9 f1       	breq	.+122    	; 0x14b6 <DIO_VidPullUp_Pin+0xc6>
    143c:	4f c0       	rjmp	.+158    	; 0x14dc <DIO_VidPullUp_Pin+0xec>
		{
			case 0: SET_BIT(PORTA,Copy_u8Pin); break;
    143e:	ab e3       	ldi	r26, 0x3B	; 59
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	eb e3       	ldi	r30, 0x3B	; 59
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_VidPullUp_Pin+0x6c>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_VidPullUp_Pin+0x68>
    1460:	84 2b       	or	r24, r20
    1462:	8c 93       	st	X, r24
    1464:	3b c0       	rjmp	.+118    	; 0x14dc <DIO_VidPullUp_Pin+0xec>
			case 1: SET_BIT(PORTB,Copy_u8Pin); break;
    1466:	a8 e3       	ldi	r26, 0x38	; 56
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e8 e3       	ldi	r30, 0x38	; 56
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_VidPullUp_Pin+0x94>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_VidPullUp_Pin+0x90>
    1488:	84 2b       	or	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	27 c0       	rjmp	.+78     	; 0x14dc <DIO_VidPullUp_Pin+0xec>
			case 2: SET_BIT(PORTC,Copy_u8Pin); break;
    148e:	a5 e3       	ldi	r26, 0x35	; 53
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e5 e3       	ldi	r30, 0x35	; 53
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_VidPullUp_Pin+0xbc>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_VidPullUp_Pin+0xb8>
    14b0:	84 2b       	or	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	13 c0       	rjmp	.+38     	; 0x14dc <DIO_VidPullUp_Pin+0xec>
			case 3: SET_BIT(PORTD,Copy_u8Pin); break;
    14b6:	a2 e3       	ldi	r26, 0x32	; 50
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e2 e3       	ldi	r30, 0x32	; 50
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_VidPullUp_Pin+0xe4>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_VidPullUp_Pin+0xe0>
    14d8:	84 2b       	or	r24, r20
    14da:	8c 93       	st	X, r24
			
		}
		
	}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <DIO_VidPullDown_Pin>:
	
	void DIO_VidPullDown_Pin(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <DIO_VidPullDown_Pin+0x6>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <DIO_VidPullDown_Pin+0x8>
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	6a 83       	std	Y+2, r22	; 0x02
		
		switch(Copy_u8Port)
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	3c 83       	std	Y+4, r19	; 0x04
    1502:	2b 83       	std	Y+3, r18	; 0x03
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	91 05       	cpc	r25, r1
    150c:	59 f1       	breq	.+86     	; 0x1564 <DIO_VidPullDown_Pin+0x7a>
    150e:	2b 81       	ldd	r18, Y+3	; 0x03
    1510:	3c 81       	ldd	r19, Y+4	; 0x04
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	31 05       	cpc	r19, r1
    1516:	2c f4       	brge	.+10     	; 0x1522 <DIO_VidPullDown_Pin+0x38>
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	69 f0       	breq	.+26     	; 0x153a <DIO_VidPullDown_Pin+0x50>
    1520:	5f c0       	rjmp	.+190    	; 0x15e0 <DIO_VidPullDown_Pin+0xf6>
    1522:	2b 81       	ldd	r18, Y+3	; 0x03
    1524:	3c 81       	ldd	r19, Y+4	; 0x04
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	31 05       	cpc	r19, r1
    152a:	89 f1       	breq	.+98     	; 0x158e <DIO_VidPullDown_Pin+0xa4>
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	83 30       	cpi	r24, 0x03	; 3
    1532:	91 05       	cpc	r25, r1
    1534:	09 f4       	brne	.+2      	; 0x1538 <DIO_VidPullDown_Pin+0x4e>
    1536:	40 c0       	rjmp	.+128    	; 0x15b8 <DIO_VidPullDown_Pin+0xce>
    1538:	53 c0       	rjmp	.+166    	; 0x15e0 <DIO_VidPullDown_Pin+0xf6>
		{
			case 0: CLR_BIT(PORTA,Copy_u8Pin); break;
    153a:	ab e3       	ldi	r26, 0x3B	; 59
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	eb e3       	ldi	r30, 0x3B	; 59
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_VidPullDown_Pin+0x6e>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DIO_VidPullDown_Pin+0x6a>
    155c:	80 95       	com	r24
    155e:	84 23       	and	r24, r20
    1560:	8c 93       	st	X, r24
    1562:	3e c0       	rjmp	.+124    	; 0x15e0 <DIO_VidPullDown_Pin+0xf6>
			case 1: CLR_BIT(PORTB,Copy_u8Pin); break;
    1564:	a8 e3       	ldi	r26, 0x38	; 56
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e8 e3       	ldi	r30, 0x38	; 56
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <DIO_VidPullDown_Pin+0x98>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <DIO_VidPullDown_Pin+0x94>
    1586:	80 95       	com	r24
    1588:	84 23       	and	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	29 c0       	rjmp	.+82     	; 0x15e0 <DIO_VidPullDown_Pin+0xf6>
			case 2: CLR_BIT(PORTC,Copy_u8Pin); break;
    158e:	a5 e3       	ldi	r26, 0x35	; 53
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e5 e3       	ldi	r30, 0x35	; 53
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_VidPullDown_Pin+0xc2>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DIO_VidPullDown_Pin+0xbe>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	14 c0       	rjmp	.+40     	; 0x15e0 <DIO_VidPullDown_Pin+0xf6>
			case 3: CLR_BIT(PORTD,Copy_u8Pin); break;
    15b8:	a2 e3       	ldi	r26, 0x32	; 50
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e2 e3       	ldi	r30, 0x32	; 50
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_VidPullDown_Pin+0xec>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_VidPullDown_Pin+0xe8>
    15da:	80 95       	com	r24
    15dc:	84 23       	and	r24, r20
    15de:	8c 93       	st	X, r24
			
		}
	}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <DIO_VidSetPort_Value>:

	void DIO_VidSetPort_Value(u8 Copy_u8Port,u8 Copy_u8Value)

	{if (Copy_u8Value==1)
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <DIO_VidSetPort_Value+0x6>
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <DIO_VidSetPort_Value+0x8>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <DIO_VidSetPort_Value+0xa>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	6a 83       	std	Y+2, r22	; 0x02
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	99 f5       	brne	.+102    	; 0x166c <DIO_VidSetPort_Value+0x7e>
		{switch(Copy_u8Port)
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	3e 83       	std	Y+6, r19	; 0x06
    160e:	2d 83       	std	Y+5, r18	; 0x05
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	91 05       	cpc	r25, r1
    1618:	d1 f0       	breq	.+52     	; 0x164e <DIO_VidSetPort_Value+0x60>
    161a:	2d 81       	ldd	r18, Y+5	; 0x05
    161c:	3e 81       	ldd	r19, Y+6	; 0x06
    161e:	22 30       	cpi	r18, 0x02	; 2
    1620:	31 05       	cpc	r19, r1
    1622:	2c f4       	brge	.+10     	; 0x162e <DIO_VidSetPort_Value+0x40>
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	9e 81       	ldd	r25, Y+6	; 0x06
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	61 f0       	breq	.+24     	; 0x1644 <DIO_VidSetPort_Value+0x56>
    162c:	50 c0       	rjmp	.+160    	; 0x16ce <DIO_VidSetPort_Value+0xe0>
    162e:	2d 81       	ldd	r18, Y+5	; 0x05
    1630:	3e 81       	ldd	r19, Y+6	; 0x06
    1632:	22 30       	cpi	r18, 0x02	; 2
    1634:	31 05       	cpc	r19, r1
    1636:	81 f0       	breq	.+32     	; 0x1658 <DIO_VidSetPort_Value+0x6a>
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	83 30       	cpi	r24, 0x03	; 3
    163e:	91 05       	cpc	r25, r1
    1640:	81 f0       	breq	.+32     	; 0x1662 <DIO_VidSetPort_Value+0x74>
    1642:	45 c0       	rjmp	.+138    	; 0x16ce <DIO_VidSetPort_Value+0xe0>
				{
					case 0: SET_PORT(PORTA); break;
    1644:	eb e3       	ldi	r30, 0x3B	; 59
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	80 83       	st	Z, r24
    164c:	40 c0       	rjmp	.+128    	; 0x16ce <DIO_VidSetPort_Value+0xe0>
					case 1: SET_PORT(PORTB); break;
    164e:	e8 e3       	ldi	r30, 0x38	; 56
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	8f ef       	ldi	r24, 0xFF	; 255
    1654:	80 83       	st	Z, r24
    1656:	3b c0       	rjmp	.+118    	; 0x16ce <DIO_VidSetPort_Value+0xe0>
					case 2: SET_PORT(PORTC); break;
    1658:	e5 e3       	ldi	r30, 0x35	; 53
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	8f ef       	ldi	r24, 0xFF	; 255
    165e:	80 83       	st	Z, r24
    1660:	36 c0       	rjmp	.+108    	; 0x16ce <DIO_VidSetPort_Value+0xe0>
					case 3: SET_PORT(PORTD); break;
    1662:	e2 e3       	ldi	r30, 0x32	; 50
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	8f ef       	ldi	r24, 0xFF	; 255
    1668:	80 83       	st	Z, r24
    166a:	31 c0       	rjmp	.+98     	; 0x16ce <DIO_VidSetPort_Value+0xe0>

				}
		}
	else if(Copy_u8Value==0)
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	88 23       	and	r24, r24
    1670:	71 f5       	brne	.+92     	; 0x16ce <DIO_VidSetPort_Value+0xe0>
	{

		switch(Copy_u8Port)
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	3c 83       	std	Y+4, r19	; 0x04
    167a:	2b 83       	std	Y+3, r18	; 0x03
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	91 05       	cpc	r25, r1
    1684:	c9 f0       	breq	.+50     	; 0x16b8 <DIO_VidSetPort_Value+0xca>
    1686:	2b 81       	ldd	r18, Y+3	; 0x03
    1688:	3c 81       	ldd	r19, Y+4	; 0x04
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	2c f4       	brge	.+10     	; 0x169a <DIO_VidSetPort_Value+0xac>
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	61 f0       	breq	.+24     	; 0x16b0 <DIO_VidSetPort_Value+0xc2>
    1698:	1a c0       	rjmp	.+52     	; 0x16ce <DIO_VidSetPort_Value+0xe0>
    169a:	2b 81       	ldd	r18, Y+3	; 0x03
    169c:	3c 81       	ldd	r19, Y+4	; 0x04
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	71 f0       	breq	.+28     	; 0x16c0 <DIO_VidSetPort_Value+0xd2>
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	83 30       	cpi	r24, 0x03	; 3
    16aa:	91 05       	cpc	r25, r1
    16ac:	69 f0       	breq	.+26     	; 0x16c8 <DIO_VidSetPort_Value+0xda>
    16ae:	0f c0       	rjmp	.+30     	; 0x16ce <DIO_VidSetPort_Value+0xe0>
						{
							case 0: CLR_PORT(PORTA); break;
    16b0:	eb e3       	ldi	r30, 0x3B	; 59
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	10 82       	st	Z, r1
    16b6:	0b c0       	rjmp	.+22     	; 0x16ce <DIO_VidSetPort_Value+0xe0>
							case 1: CLR_PORT(PORTB); break;
    16b8:	e8 e3       	ldi	r30, 0x38	; 56
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	10 82       	st	Z, r1
    16be:	07 c0       	rjmp	.+14     	; 0x16ce <DIO_VidSetPort_Value+0xe0>
							case 2: CLR_PORT(PORTC); break;
    16c0:	e5 e3       	ldi	r30, 0x35	; 53
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	10 82       	st	Z, r1
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <DIO_VidSetPort_Value+0xe0>
							case 3: CLR_PORT(PORTD); break;
    16c8:	e2 e3       	ldi	r30, 0x32	; 50
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	10 82       	st	Z, r1

						}
	}
	}
    16ce:	26 96       	adiw	r28, 0x06	; 6
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <I2C_send_start>:
#include "DIO_Interface.h"
#include"I2C_PRIVATE.h"
#include "I2C_config.h"
#include "avr/delay.h"
 u8 I2C_send_start(void )
 {
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	0f 92       	push	r0
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
	 // start bit condition
	 TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    16ea:	e6 e5       	ldi	r30, 0x56	; 86
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	84 ea       	ldi	r24, 0xA4	; 164
    16f0:	80 83       	st	Z, r24
	 while(GET_BIT(TWCR,TWINT)==0);  // wait the flag
    16f2:	e6 e5       	ldi	r30, 0x56	; 86
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	88 23       	and	r24, r24
    16fa:	dc f7       	brge	.-10     	; 0x16f2 <I2C_send_start+0x12>
	 if ((TWSR & 0xF8) != 0x08){return 0;}
    16fc:	e1 e2       	ldi	r30, 0x21	; 33
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	88 7f       	andi	r24, 0xF8	; 248
    1708:	90 70       	andi	r25, 0x00	; 0
    170a:	88 30       	cpi	r24, 0x08	; 8
    170c:	91 05       	cpc	r25, r1
    170e:	11 f0       	breq	.+4      	; 0x1714 <I2C_send_start+0x34>
    1710:	19 82       	std	Y+1, r1	; 0x01
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <I2C_send_start+0x38>
	 else{return 1;}
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	89 81       	ldd	r24, Y+1	; 0x01
 }
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <I2C_select_slave>:
 u8 I2C_select_slave(u8 Copy_slave_add,u8 Copy_W_R)
 {u8 status=0;
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	00 d0       	rcall	.+0      	; 0x1728 <I2C_select_slave+0x6>
    1728:	00 d0       	rcall	.+0      	; 0x172a <I2C_select_slave+0x8>
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	8a 83       	std	Y+2, r24	; 0x02
    1730:	6b 83       	std	Y+3, r22	; 0x03
    1732:	19 82       	std	Y+1, r1	; 0x01
	 if (Copy_W_R==0)         // write
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	88 23       	and	r24, r24
    1738:	99 f4       	brne	.+38     	; 0x1760 <I2C_select_slave+0x3e>
	 {TWDR=(Copy_slave_add<<1);
    173a:	e3 e2       	ldi	r30, 0x23	; 35
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	88 0f       	add	r24, r24
    1742:	80 83       	st	Z, r24
	  TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1744:	e6 e5       	ldi	r30, 0x56	; 86
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	84 ec       	ldi	r24, 0xC4	; 196
    174a:	80 83       	st	Z, r24
	  while(GET_BIT(TWCR,TWINT)==0);  // wait the flag
    174c:	e6 e5       	ldi	r30, 0x56	; 86
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	88 23       	and	r24, r24
    1754:	dc f7       	brge	.-10     	; 0x174c <I2C_select_slave+0x2a>
	  if ((TWSR & 0xF8) != 18) {status= 0;}   // no ACK
    1756:	e1 e2       	ldi	r30, 0x21	; 33
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	19 82       	std	Y+1, r1	; 0x01
    175e:	23 c0       	rjmp	.+70     	; 0x17a6 <I2C_select_slave+0x84>
	  else {status= 1;}
	 }
	 else if(Copy_W_R==1)   // read
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	81 30       	cpi	r24, 0x01	; 1
    1764:	01 f5       	brne	.+64     	; 0x17a6 <I2C_select_slave+0x84>
	 {TWDR=(Copy_slave_add<<1)|1;
    1766:	e3 e2       	ldi	r30, 0x23	; 35
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	88 2f       	mov	r24, r24
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	81 60       	ori	r24, 0x01	; 1
    1776:	80 83       	st	Z, r24
	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1778:	e6 e5       	ldi	r30, 0x56	; 86
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	84 ec       	ldi	r24, 0xC4	; 196
    177e:	80 83       	st	Z, r24
	 while(GET_BIT(TWCR,7)==0);  // wait the flag
    1780:	e6 e5       	ldi	r30, 0x56	; 86
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	88 23       	and	r24, r24
    1788:	dc f7       	brge	.-10     	; 0x1780 <I2C_select_slave+0x5e>
	 if ((TWSR & 0xF8) != 40) {status= 0;}   // no ACK
    178a:	e1 e2       	ldi	r30, 0x21	; 33
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	88 7f       	andi	r24, 0xF8	; 248
    1796:	90 70       	andi	r25, 0x00	; 0
    1798:	88 32       	cpi	r24, 0x28	; 40
    179a:	91 05       	cpc	r25, r1
    179c:	11 f0       	breq	.+4      	; 0x17a2 <I2C_select_slave+0x80>
    179e:	19 82       	std	Y+1, r1	; 0x01
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <I2C_select_slave+0x84>
	 else {status= 1;}
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	89 83       	std	Y+1, r24	; 0x01
	 }
	 return status;
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
 }
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <I2C_Master_send_data>:

 u8 I2C_Master_send_data(u8 Copy_data)
 {
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <I2C_Master_send_data+0x6>
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	89 83       	std	Y+1, r24	; 0x01

	 TWDR =Copy_data;
    17c2:	e3 e2       	ldi	r30, 0x23	; 35
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	80 83       	st	Z, r24
	 TWCR=(1<<TWINT)|(1<<TWEN);
    17ca:	e6 e5       	ldi	r30, 0x56	; 86
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	84 e8       	ldi	r24, 0x84	; 132
    17d0:	80 83       	st	Z, r24
	 while (GET_BIT(TWCR,TWINT)==0);        // wait flag
    17d2:	e6 e5       	ldi	r30, 0x56	; 86
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	88 23       	and	r24, r24
    17da:	dc f7       	brge	.-10     	; 0x17d2 <I2C_Master_send_data+0x1c>
	 if ((TWSR & 0xF8) != 28){return 0;}
    17dc:	e1 e2       	ldi	r30, 0x21	; 33
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	80 e0       	ldi	r24, 0x00	; 0
	 else{return 1;}

 }
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <I2C_Slave_recive_data>:


 u8 I2C_Slave_recive_data(u8 *status)
  {u8 Temp=0;
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <I2C_Slave_recive_data+0x6>
    17f4:	0f 92       	push	r0
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	9b 83       	std	Y+3, r25	; 0x03
    17fc:	8a 83       	std	Y+2, r24	; 0x02
    17fe:	19 82       	std	Y+1, r1	; 0x01


  	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA)  ;
    1800:	e6 e5       	ldi	r30, 0x56	; 86
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	84 ec       	ldi	r24, 0xC4	; 196
    1806:	80 83       	st	Z, r24
  	 while (GET_BIT(TWCR,TWINT)==0);  // wait flag
    1808:	e6 e5       	ldi	r30, 0x56	; 86
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	88 23       	and	r24, r24
    1810:	dc f7       	brge	.-10     	; 0x1808 <I2C_Slave_recive_data+0x1a>

  	 if((TWSR & 0xf8) == 0x60)   // status =received address
    1812:	e1 e2       	ldi	r30, 0x21	; 33
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	88 2f       	mov	r24, r24
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	88 7f       	andi	r24, 0xF8	; 248
    181e:	90 70       	andi	r25, 0x00	; 0
    1820:	80 36       	cpi	r24, 0x60	; 96
    1822:	91 05       	cpc	r25, r1
    1824:	71 f4       	brne	.+28     	; 0x1842 <I2C_Slave_recive_data+0x54>
  	 {
  		 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA)  ;  //start again to skip the address byte
    1826:	e6 e5       	ldi	r30, 0x56	; 86
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	84 ec       	ldi	r24, 0xC4	; 196
    182c:	80 83       	st	Z, r24
  		 while (GET_BIT(TWCR,TWINT)==0);  // wait flag
    182e:	e6 e5       	ldi	r30, 0x56	; 86
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	88 23       	and	r24, r24
    1836:	dc f7       	brge	.-10     	; 0x182e <I2C_Slave_recive_data+0x40>
  		 Temp=TWDR;
    1838:	e3 e2       	ldi	r30, 0x23	; 35
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	04 c0       	rjmp	.+8      	; 0x184a <I2C_Slave_recive_data+0x5c>
  	 }
  	 else
  	 {Temp=TWDR;}
    1842:	e3 e2       	ldi	r30, 0x23	; 35
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	89 83       	std	Y+1, r24	; 0x01

  	if (status!= NULL)
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	9b 81       	ldd	r25, Y+3	; 0x03
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	91 f0       	breq	.+36     	; 0x1876 <I2C_Slave_recive_data+0x88>
  	{if ((TWSR & 0xF8) != 80){*status= 0;}
    1852:	e1 e2       	ldi	r30, 0x21	; 33
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	88 7f       	andi	r24, 0xF8	; 248
    185e:	90 70       	andi	r25, 0x00	; 0
    1860:	80 35       	cpi	r24, 0x50	; 80
    1862:	91 05       	cpc	r25, r1
    1864:	21 f0       	breq	.+8      	; 0x186e <I2C_Slave_recive_data+0x80>
    1866:	ea 81       	ldd	r30, Y+2	; 0x02
    1868:	fb 81       	ldd	r31, Y+3	; 0x03
    186a:	10 82       	st	Z, r1
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <I2C_Slave_recive_data+0x88>
  	else{*status= 1;}
    186e:	ea 81       	ldd	r30, Y+2	; 0x02
    1870:	fb 81       	ldd	r31, Y+3	; 0x03
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	80 83       	st	Z, r24
  	}
  	return Temp;
    1876:	89 81       	ldd	r24, Y+1	; 0x01
  }
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <I2C_stop>:
void I2C_stop(void )
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    188c:	e6 e5       	ldi	r30, 0x56	; 86
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	84 e9       	ldi	r24, 0x94	; 148
    1892:	80 83       	st	Z, r24
}
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <I2C_master_init>:

void I2C_master_init(void )
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
	TWSR=(0<<TWPS0)|(0<<TWPS1);     //prescaler
    18a2:	e1 e2       	ldi	r30, 0x21	; 33
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	10 82       	st	Z, r1
	TWBR=32;		  // bit rate
    18a8:	e0 e2       	ldi	r30, 0x20	; 32
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 e2       	ldi	r24, 0x20	; 32
    18ae:	80 83       	st	Z, r24
	TWAR=10;       /// any address except 0000 or 1111
    18b0:	e2 e2       	ldi	r30, 0x22	; 34
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	8a e0       	ldi	r24, 0x0A	; 10
    18b6:	80 83       	st	Z, r24
}
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <I2C_slave_init>:


void I2C_slave_init(void )
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	TWAR=5<<1;                     /// 0000 or 1111   address
    18c6:	e2 e2       	ldi	r30, 0x22	; 34
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	8a e0       	ldi	r24, 0x0A	; 10
    18cc:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    18ce:	e6 e5       	ldi	r30, 0x56	; 86
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	84 ec       	ldi	r24, 0xC4	; 196
    18d4:	80 83       	st	Z, r24

}
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <main>:
#include "I2C_PRIVATE.h"
#include "LCD_interface.h"
#include "LCD_I2C_Interface.h"

void main (void)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	28 97       	sbiw	r28, 0x08	; 8
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
	u8 init_array[]= {
			0b00111000,
			0b00001100,
			0b00000001

	};
    18f0:	ce 01       	movw	r24, r28
    18f2:	01 96       	adiw	r24, 0x01	; 1
    18f4:	9d 83       	std	Y+5, r25	; 0x05
    18f6:	8c 83       	std	Y+4, r24	; 0x04
    18f8:	e0 e7       	ldi	r30, 0x70	; 112
    18fa:	f1 e0       	ldi	r31, 0x01	; 1
    18fc:	ff 83       	std	Y+7, r31	; 0x07
    18fe:	ee 83       	std	Y+6, r30	; 0x06
    1900:	f3 e0       	ldi	r31, 0x03	; 3
    1902:	f8 87       	std	Y+8, r31	; 0x08
    1904:	ee 81       	ldd	r30, Y+6	; 0x06
    1906:	ff 81       	ldd	r31, Y+7	; 0x07
    1908:	00 80       	ld	r0, Z
    190a:	8e 81       	ldd	r24, Y+6	; 0x06
    190c:	9f 81       	ldd	r25, Y+7	; 0x07
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	9f 83       	std	Y+7, r25	; 0x07
    1912:	8e 83       	std	Y+6, r24	; 0x06
    1914:	ec 81       	ldd	r30, Y+4	; 0x04
    1916:	fd 81       	ldd	r31, Y+5	; 0x05
    1918:	00 82       	st	Z, r0
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	9d 81       	ldd	r25, Y+5	; 0x05
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	9d 83       	std	Y+5, r25	; 0x05
    1922:	8c 83       	std	Y+4, r24	; 0x04
    1924:	98 85       	ldd	r25, Y+8	; 0x08
    1926:	91 50       	subi	r25, 0x01	; 1
    1928:	98 87       	std	Y+8, r25	; 0x08
    192a:	e8 85       	ldd	r30, Y+8	; 0x08
    192c:	ee 23       	and	r30, r30
    192e:	51 f7       	brne	.-44     	; 0x1904 <main+0x28>
	LCD_I2C_init(init_array,3);
    1930:	ce 01       	movw	r24, r28
    1932:	01 96       	adiw	r24, 0x01	; 1
    1934:	63 e0       	ldi	r22, 0x03	; 3
    1936:	0e 94 aa 0c 	call	0x1954	; 0x1954 <LCD_I2C_init>
		LCD_I2C_SendNum(125);
    193a:	8d e7       	ldi	r24, 0x7D	; 125
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_I2C_SendNum>
		LCD_I2C_SendString("/");
    1942:	80 e6       	ldi	r24, 0x60	; 96
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 19 12 	call	0x2432	; 0x2432 <LCD_I2C_SendString>
		LCD_I2C_SendString("Ahmed");
    194a:	82 e6       	ldi	r24, 0x62	; 98
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 19 12 	call	0x2432	; 0x2432 <LCD_I2C_SendString>
    1952:	ff cf       	rjmp	.-2      	; 0x1952 <main+0x76>

00001954 <LCD_I2C_init>:
#define LCD_I2C_Data 						6

#define LCD_I2C_CGRAMData			7

void LCD_I2C_init(u8 *Copy_u8CommandArray,u8 Copy_u8Size)
{
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	c8 55       	subi	r28, 0x58	; 88
    1962:	d0 40       	sbci	r29, 0x00	; 0
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	fe 01       	movw	r30, r28
    1970:	ea 5a       	subi	r30, 0xAA	; 170
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
    1978:	fe 01       	movw	r30, r28
    197a:	e8 5a       	subi	r30, 0xA8	; 168
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	60 83       	st	Z, r22
	u8 i = 0;
    1980:	fe 01       	movw	r30, r28
    1982:	eb 5a       	subi	r30, 0xAB	; 171
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	10 82       	st	Z, r1
    1988:	fe 01       	movw	r30, r28
    198a:	ef 5a       	subi	r30, 0xAF	; 175
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	a0 e2       	ldi	r26, 0x20	; 32
    1994:	b2 e4       	ldi	r27, 0x42	; 66
    1996:	80 83       	st	Z, r24
    1998:	91 83       	std	Z+1, r25	; 0x01
    199a:	a2 83       	std	Z+2, r26	; 0x02
    199c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199e:	8e 01       	movw	r16, r28
    19a0:	03 5b       	subi	r16, 0xB3	; 179
    19a2:	1f 4f       	sbci	r17, 0xFF	; 255
    19a4:	fe 01       	movw	r30, r28
    19a6:	ef 5a       	subi	r30, 0xAF	; 175
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	60 81       	ld	r22, Z
    19ac:	71 81       	ldd	r23, Z+1	; 0x01
    19ae:	82 81       	ldd	r24, Z+2	; 0x02
    19b0:	93 81       	ldd	r25, Z+3	; 0x03
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	4a ef       	ldi	r20, 0xFA	; 250
    19b8:	54 e4       	ldi	r21, 0x44	; 68
    19ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	f8 01       	movw	r30, r16
    19c4:	80 83       	st	Z, r24
    19c6:	91 83       	std	Z+1, r25	; 0x01
    19c8:	a2 83       	std	Z+2, r26	; 0x02
    19ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19cc:	fe 01       	movw	r30, r28
    19ce:	e3 5b       	subi	r30, 0xB3	; 179
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	60 81       	ld	r22, Z
    19d4:	71 81       	ldd	r23, Z+1	; 0x01
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	44 f4       	brge	.+16     	; 0x19fa <LCD_I2C_init+0xa6>
		__ticks = 1;
    19ea:	fe 01       	movw	r30, r28
    19ec:	e5 5b       	subi	r30, 0xB5	; 181
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	91 83       	std	Z+1, r25	; 0x01
    19f6:	80 83       	st	Z, r24
    19f8:	64 c0       	rjmp	.+200    	; 0x1ac2 <LCD_I2C_init+0x16e>
	else if (__tmp > 65535)
    19fa:	fe 01       	movw	r30, r28
    19fc:	e3 5b       	subi	r30, 0xB3	; 179
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	3f ef       	ldi	r19, 0xFF	; 255
    1a0c:	4f e7       	ldi	r20, 0x7F	; 127
    1a0e:	57 e4       	ldi	r21, 0x47	; 71
    1a10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a14:	18 16       	cp	r1, r24
    1a16:	0c f0       	brlt	.+2      	; 0x1a1a <LCD_I2C_init+0xc6>
    1a18:	43 c0       	rjmp	.+134    	; 0x1aa0 <LCD_I2C_init+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	ef 5a       	subi	r30, 0xAF	; 175
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	60 81       	ld	r22, Z
    1a22:	71 81       	ldd	r23, Z+1	; 0x01
    1a24:	82 81       	ldd	r24, Z+2	; 0x02
    1a26:	93 81       	ldd	r25, Z+3	; 0x03
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e2       	ldi	r20, 0x20	; 32
    1a2e:	51 e4       	ldi	r21, 0x41	; 65
    1a30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	8e 01       	movw	r16, r28
    1a3a:	05 5b       	subi	r16, 0xB5	; 181
    1a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	80 83       	st	Z, r24
    1a50:	1f c0       	rjmp	.+62     	; 0x1a90 <LCD_I2C_init+0x13c>
    1a52:	fe 01       	movw	r30, r28
    1a54:	e7 5b       	subi	r30, 0xB7	; 183
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	88 ec       	ldi	r24, 0xC8	; 200
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a60:	fe 01       	movw	r30, r28
    1a62:	e7 5b       	subi	r30, 0xB7	; 183
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	80 81       	ld	r24, Z
    1a68:	91 81       	ldd	r25, Z+1	; 0x01
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	f1 f7       	brne	.-4      	; 0x1a6a <LCD_I2C_init+0x116>
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e7 5b       	subi	r30, 0xB7	; 183
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	91 83       	std	Z+1, r25	; 0x01
    1a76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a78:	de 01       	movw	r26, r28
    1a7a:	a5 5b       	subi	r26, 0xB5	; 181
    1a7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a7e:	fe 01       	movw	r30, r28
    1a80:	e5 5b       	subi	r30, 0xB5	; 181
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	80 81       	ld	r24, Z
    1a86:	91 81       	ldd	r25, Z+1	; 0x01
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	11 96       	adiw	r26, 0x01	; 1
    1a8c:	9c 93       	st	X, r25
    1a8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a90:	fe 01       	movw	r30, r28
    1a92:	e5 5b       	subi	r30, 0xB5	; 181
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	80 81       	ld	r24, Z
    1a98:	91 81       	ldd	r25, Z+1	; 0x01
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	d1 f6       	brne	.-76     	; 0x1a52 <LCD_I2C_init+0xfe>
    1a9e:	27 c0       	rjmp	.+78     	; 0x1aee <LCD_I2C_init+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa0:	8e 01       	movw	r16, r28
    1aa2:	05 5b       	subi	r16, 0xB5	; 181
    1aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e3 5b       	subi	r30, 0xB3	; 179
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	60 81       	ld	r22, Z
    1aae:	71 81       	ldd	r23, Z+1	; 0x01
    1ab0:	82 81       	ldd	r24, Z+2	; 0x02
    1ab2:	93 81       	ldd	r25, Z+3	; 0x03
    1ab4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	f8 01       	movw	r30, r16
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
    1ac2:	de 01       	movw	r26, r28
    1ac4:	a9 5b       	subi	r26, 0xB9	; 185
    1ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e5 5b       	subi	r30, 0xB5	; 181
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 81       	ld	r24, Z
    1ad0:	91 81       	ldd	r25, Z+1	; 0x01
    1ad2:	8d 93       	st	X+, r24
    1ad4:	9c 93       	st	X, r25
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e9 5b       	subi	r30, 0xB9	; 185
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <LCD_I2C_init+0x18c>
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e9 5b       	subi	r30, 0xB9	; 185
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	91 83       	std	Z+1, r25	; 0x01
    1aec:	80 83       	st	Z, r24
	_delay_ms(40);
	I2C_master_init();
    1aee:	0e 94 4d 0c 	call	0x189a	; 0x189a <I2C_master_init>
    1af2:	fe 01       	movw	r30, r28
    1af4:	ed 5b       	subi	r30, 0xBD	; 189
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	a0 ef       	ldi	r26, 0xF0	; 240
    1afe:	b2 e4       	ldi	r27, 0x42	; 66
    1b00:	80 83       	st	Z, r24
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	a2 83       	std	Z+2, r26	; 0x02
    1b06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b08:	8e 01       	movw	r16, r28
    1b0a:	01 5c       	subi	r16, 0xC1	; 193
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	fe 01       	movw	r30, r28
    1b10:	ed 5b       	subi	r30, 0xBD	; 189
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	60 81       	ld	r22, Z
    1b16:	71 81       	ldd	r23, Z+1	; 0x01
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	4a ef       	ldi	r20, 0xFA	; 250
    1b22:	54 e4       	ldi	r21, 0x44	; 68
    1b24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	f8 01       	movw	r30, r16
    1b2e:	80 83       	st	Z, r24
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	a2 83       	std	Z+2, r26	; 0x02
    1b34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b36:	fe 01       	movw	r30, r28
    1b38:	ff 96       	adiw	r30, 0x3f	; 63
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	5f e3       	ldi	r21, 0x3F	; 63
    1b4a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b4e:	88 23       	and	r24, r24
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <LCD_I2C_init+0x208>
		__ticks = 1;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9e af       	std	Y+62, r25	; 0x3e
    1b58:	8d af       	std	Y+61, r24	; 0x3d
    1b5a:	46 c0       	rjmp	.+140    	; 0x1be8 <LCD_I2C_init+0x294>
	else if (__tmp > 65535)
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ff 96       	adiw	r30, 0x3f	; 63
    1b60:	60 81       	ld	r22, Z
    1b62:	71 81       	ldd	r23, Z+1	; 0x01
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	93 81       	ldd	r25, Z+3	; 0x03
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	3f ef       	ldi	r19, 0xFF	; 255
    1b6c:	4f e7       	ldi	r20, 0x7F	; 127
    1b6e:	57 e4       	ldi	r21, 0x47	; 71
    1b70:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b74:	18 16       	cp	r1, r24
    1b76:	64 f5       	brge	.+88     	; 0x1bd0 <LCD_I2C_init+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b78:	fe 01       	movw	r30, r28
    1b7a:	ed 5b       	subi	r30, 0xBD	; 189
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	60 81       	ld	r22, Z
    1b80:	71 81       	ldd	r23, Z+1	; 0x01
    1b82:	82 81       	ldd	r24, Z+2	; 0x02
    1b84:	93 81       	ldd	r25, Z+3	; 0x03
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e2       	ldi	r20, 0x20	; 32
    1b8c:	51 e4       	ldi	r21, 0x41	; 65
    1b8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	bc 01       	movw	r22, r24
    1b98:	cd 01       	movw	r24, r26
    1b9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	9e af       	std	Y+62, r25	; 0x3e
    1ba4:	8d af       	std	Y+61, r24	; 0x3d
    1ba6:	0f c0       	rjmp	.+30     	; 0x1bc6 <LCD_I2C_init+0x272>
    1ba8:	88 ec       	ldi	r24, 0xC8	; 200
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9c af       	std	Y+60, r25	; 0x3c
    1bae:	8b af       	std	Y+59, r24	; 0x3b
    1bb0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bb2:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <LCD_I2C_init+0x260>
    1bb8:	9c af       	std	Y+60, r25	; 0x3c
    1bba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bbe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	9e af       	std	Y+62, r25	; 0x3e
    1bc4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	69 f7       	brne	.-38     	; 0x1ba8 <LCD_I2C_init+0x254>
    1bce:	16 c0       	rjmp	.+44     	; 0x1bfc <LCD_I2C_init+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	ff 96       	adiw	r30, 0x3f	; 63
    1bd4:	60 81       	ld	r22, Z
    1bd6:	71 81       	ldd	r23, Z+1	; 0x01
    1bd8:	82 81       	ldd	r24, Z+2	; 0x02
    1bda:	93 81       	ldd	r25, Z+3	; 0x03
    1bdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	9e af       	std	Y+62, r25	; 0x3e
    1be6:	8d af       	std	Y+61, r24	; 0x3d
    1be8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bea:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bec:	9a af       	std	Y+58, r25	; 0x3a
    1bee:	89 af       	std	Y+57, r24	; 0x39
    1bf0:	89 ad       	ldd	r24, Y+57	; 0x39
    1bf2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <LCD_I2C_init+0x2a0>
    1bf8:	9a af       	std	Y+58, r25	; 0x3a
    1bfa:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(120);
	I2C_send_start();
    1bfc:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_send_start>
	I2C_select_slave(LCD_I2C_Slave_Address,0);
    1c00:	85 e0       	ldi	r24, 0x05	; 5
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	0e 94 91 0b 	call	0x1722	; 0x1722 <I2C_select_slave>
	_delay_ms(100);
	I2C_Master_send_data(command);
	_delay_ms(100);
	I2C_Master_send_data(0b00000001);
	*/
	for(i = 0; i<Copy_u8Size;i++){
    1c08:	fe 01       	movw	r30, r28
    1c0a:	eb 5a       	subi	r30, 0xAB	; 171
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	10 82       	st	Z, r1
    1c10:	73 c1       	rjmp	.+742    	; 0x1ef8 <LCD_I2C_init+0x5a4>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a8 ec       	ldi	r26, 0xC8	; 200
    1c18:	b2 e4       	ldi	r27, 0x42	; 66
    1c1a:	8d ab       	std	Y+53, r24	; 0x35
    1c1c:	9e ab       	std	Y+54, r25	; 0x36
    1c1e:	af ab       	std	Y+55, r26	; 0x37
    1c20:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c22:	6d a9       	ldd	r22, Y+53	; 0x35
    1c24:	7e a9       	ldd	r23, Y+54	; 0x36
    1c26:	8f a9       	ldd	r24, Y+55	; 0x37
    1c28:	98 ad       	ldd	r25, Y+56	; 0x38
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a ef       	ldi	r20, 0xFA	; 250
    1c30:	54 e4       	ldi	r21, 0x44	; 68
    1c32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	89 ab       	std	Y+49, r24	; 0x31
    1c3c:	9a ab       	std	Y+50, r25	; 0x32
    1c3e:	ab ab       	std	Y+51, r26	; 0x33
    1c40:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c42:	69 a9       	ldd	r22, Y+49	; 0x31
    1c44:	7a a9       	ldd	r23, Y+50	; 0x32
    1c46:	8b a9       	ldd	r24, Y+51	; 0x33
    1c48:	9c a9       	ldd	r25, Y+52	; 0x34
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e8       	ldi	r20, 0x80	; 128
    1c50:	5f e3       	ldi	r21, 0x3F	; 63
    1c52:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c56:	88 23       	and	r24, r24
    1c58:	2c f4       	brge	.+10     	; 0x1c64 <LCD_I2C_init+0x310>
		__ticks = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	98 ab       	std	Y+48, r25	; 0x30
    1c60:	8f a7       	std	Y+47, r24	; 0x2f
    1c62:	3f c0       	rjmp	.+126    	; 0x1ce2 <LCD_I2C_init+0x38e>
	else if (__tmp > 65535)
    1c64:	69 a9       	ldd	r22, Y+49	; 0x31
    1c66:	7a a9       	ldd	r23, Y+50	; 0x32
    1c68:	8b a9       	ldd	r24, Y+51	; 0x33
    1c6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
    1c70:	4f e7       	ldi	r20, 0x7F	; 127
    1c72:	57 e4       	ldi	r21, 0x47	; 71
    1c74:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c78:	18 16       	cp	r1, r24
    1c7a:	4c f5       	brge	.+82     	; 0x1cce <LCD_I2C_init+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c7e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c80:	8f a9       	ldd	r24, Y+55	; 0x37
    1c82:	98 ad       	ldd	r25, Y+56	; 0x38
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e2       	ldi	r20, 0x20	; 32
    1c8a:	51 e4       	ldi	r21, 0x41	; 65
    1c8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	bc 01       	movw	r22, r24
    1c96:	cd 01       	movw	r24, r26
    1c98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	98 ab       	std	Y+48, r25	; 0x30
    1ca2:	8f a7       	std	Y+47, r24	; 0x2f
    1ca4:	0f c0       	rjmp	.+30     	; 0x1cc4 <LCD_I2C_init+0x370>
    1ca6:	88 ec       	ldi	r24, 0xC8	; 200
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9e a7       	std	Y+46, r25	; 0x2e
    1cac:	8d a7       	std	Y+45, r24	; 0x2d
    1cae:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cb0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <LCD_I2C_init+0x35e>
    1cb6:	9e a7       	std	Y+46, r25	; 0x2e
    1cb8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cbc:	98 a9       	ldd	r25, Y+48	; 0x30
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	98 ab       	std	Y+48, r25	; 0x30
    1cc2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cc6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	69 f7       	brne	.-38     	; 0x1ca6 <LCD_I2C_init+0x352>
    1ccc:	14 c0       	rjmp	.+40     	; 0x1cf6 <LCD_I2C_init+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cce:	69 a9       	ldd	r22, Y+49	; 0x31
    1cd0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cd2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cd4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	98 ab       	std	Y+48, r25	; 0x30
    1ce0:	8f a7       	std	Y+47, r24	; 0x2f
    1ce2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ce4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ce6:	9c a7       	std	Y+44, r25	; 0x2c
    1ce8:	8b a7       	std	Y+43, r24	; 0x2b
    1cea:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cec:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <LCD_I2C_init+0x39a>
    1cf2:	9c a7       	std	Y+44, r25	; 0x2c
    1cf4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		I2C_Master_send_data(LCD_I2C_Command);
    1cf6:	85 e0       	ldi	r24, 0x05	; 5
    1cf8:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	a8 ec       	ldi	r26, 0xC8	; 200
    1d02:	b2 e4       	ldi	r27, 0x42	; 66
    1d04:	8f a3       	std	Y+39, r24	; 0x27
    1d06:	98 a7       	std	Y+40, r25	; 0x28
    1d08:	a9 a7       	std	Y+41, r26	; 0x29
    1d0a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d0e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d10:	89 a5       	ldd	r24, Y+41	; 0x29
    1d12:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4a ef       	ldi	r20, 0xFA	; 250
    1d1a:	54 e4       	ldi	r21, 0x44	; 68
    1d1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	8b a3       	std	Y+35, r24	; 0x23
    1d26:	9c a3       	std	Y+36, r25	; 0x24
    1d28:	ad a3       	std	Y+37, r26	; 0x25
    1d2a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d30:	8d a1       	ldd	r24, Y+37	; 0x25
    1d32:	9e a1       	ldd	r25, Y+38	; 0x26
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e8       	ldi	r20, 0x80	; 128
    1d3a:	5f e3       	ldi	r21, 0x3F	; 63
    1d3c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d40:	88 23       	and	r24, r24
    1d42:	2c f4       	brge	.+10     	; 0x1d4e <LCD_I2C_init+0x3fa>
		__ticks = 1;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9a a3       	std	Y+34, r25	; 0x22
    1d4a:	89 a3       	std	Y+33, r24	; 0x21
    1d4c:	3f c0       	rjmp	.+126    	; 0x1dcc <LCD_I2C_init+0x478>
	else if (__tmp > 65535)
    1d4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d50:	7c a1       	ldd	r23, Y+36	; 0x24
    1d52:	8d a1       	ldd	r24, Y+37	; 0x25
    1d54:	9e a1       	ldd	r25, Y+38	; 0x26
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	3f ef       	ldi	r19, 0xFF	; 255
    1d5a:	4f e7       	ldi	r20, 0x7F	; 127
    1d5c:	57 e4       	ldi	r21, 0x47	; 71
    1d5e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d62:	18 16       	cp	r1, r24
    1d64:	4c f5       	brge	.+82     	; 0x1db8 <LCD_I2C_init+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d66:	6f a1       	ldd	r22, Y+39	; 0x27
    1d68:	78 a5       	ldd	r23, Y+40	; 0x28
    1d6a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e2       	ldi	r20, 0x20	; 32
    1d74:	51 e4       	ldi	r21, 0x41	; 65
    1d76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9a a3       	std	Y+34, r25	; 0x22
    1d8c:	89 a3       	std	Y+33, r24	; 0x21
    1d8e:	0f c0       	rjmp	.+30     	; 0x1dae <LCD_I2C_init+0x45a>
    1d90:	88 ec       	ldi	r24, 0xC8	; 200
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	98 a3       	std	Y+32, r25	; 0x20
    1d96:	8f 8f       	std	Y+31, r24	; 0x1f
    1d98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d9a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <LCD_I2C_init+0x448>
    1da0:	98 a3       	std	Y+32, r25	; 0x20
    1da2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da4:	89 a1       	ldd	r24, Y+33	; 0x21
    1da6:	9a a1       	ldd	r25, Y+34	; 0x22
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	9a a3       	std	Y+34, r25	; 0x22
    1dac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dae:	89 a1       	ldd	r24, Y+33	; 0x21
    1db0:	9a a1       	ldd	r25, Y+34	; 0x22
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	69 f7       	brne	.-38     	; 0x1d90 <LCD_I2C_init+0x43c>
    1db6:	14 c0       	rjmp	.+40     	; 0x1de0 <LCD_I2C_init+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dba:	7c a1       	ldd	r23, Y+36	; 0x24
    1dbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9a a3       	std	Y+34, r25	; 0x22
    1dca:	89 a3       	std	Y+33, r24	; 0x21
    1dcc:	89 a1       	ldd	r24, Y+33	; 0x21
    1dce:	9a a1       	ldd	r25, Y+34	; 0x22
    1dd0:	9e 8f       	std	Y+30, r25	; 0x1e
    1dd2:	8d 8f       	std	Y+29, r24	; 0x1d
    1dd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <LCD_I2C_init+0x484>
    1ddc:	9e 8f       	std	Y+30, r25	; 0x1e
    1dde:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		I2C_Master_send_data(Copy_u8CommandArray[i]);
    1de0:	fe 01       	movw	r30, r28
    1de2:	eb 5a       	subi	r30, 0xAB	; 171
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 81       	ld	r24, Z
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	fe 01       	movw	r30, r28
    1dee:	ea 5a       	subi	r30, 0xAA	; 170
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	80 81       	ld	r24, Z
    1df4:	91 81       	ldd	r25, Z+1	; 0x01
    1df6:	fc 01       	movw	r30, r24
    1df8:	e2 0f       	add	r30, r18
    1dfa:	f3 1f       	adc	r31, r19
    1dfc:	80 81       	ld	r24, Z
    1dfe:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	a0 e2       	ldi	r26, 0x20	; 32
    1e08:	b1 e4       	ldi	r27, 0x41	; 65
    1e0a:	89 8f       	std	Y+25, r24	; 0x19
    1e0c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e0e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e12:	69 8d       	ldd	r22, Y+25	; 0x19
    1e14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	4a ef       	ldi	r20, 0xFA	; 250
    1e20:	54 e4       	ldi	r21, 0x44	; 68
    1e22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	8d 8b       	std	Y+21, r24	; 0x15
    1e2c:	9e 8b       	std	Y+22, r25	; 0x16
    1e2e:	af 8b       	std	Y+23, r26	; 0x17
    1e30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e32:	6d 89       	ldd	r22, Y+21	; 0x15
    1e34:	7e 89       	ldd	r23, Y+22	; 0x16
    1e36:	8f 89       	ldd	r24, Y+23	; 0x17
    1e38:	98 8d       	ldd	r25, Y+24	; 0x18
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e8       	ldi	r20, 0x80	; 128
    1e40:	5f e3       	ldi	r21, 0x3F	; 63
    1e42:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e46:	88 23       	and	r24, r24
    1e48:	2c f4       	brge	.+10     	; 0x1e54 <LCD_I2C_init+0x500>
		__ticks = 1;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	9c 8b       	std	Y+20, r25	; 0x14
    1e50:	8b 8b       	std	Y+19, r24	; 0x13
    1e52:	3f c0       	rjmp	.+126    	; 0x1ed2 <LCD_I2C_init+0x57e>
	else if (__tmp > 65535)
    1e54:	6d 89       	ldd	r22, Y+21	; 0x15
    1e56:	7e 89       	ldd	r23, Y+22	; 0x16
    1e58:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	3f ef       	ldi	r19, 0xFF	; 255
    1e60:	4f e7       	ldi	r20, 0x7F	; 127
    1e62:	57 e4       	ldi	r21, 0x47	; 71
    1e64:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e68:	18 16       	cp	r1, r24
    1e6a:	4c f5       	brge	.+82     	; 0x1ebe <LCD_I2C_init+0x56a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e2       	ldi	r20, 0x20	; 32
    1e7a:	51 e4       	ldi	r21, 0x41	; 65
    1e7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	9c 8b       	std	Y+20, r25	; 0x14
    1e92:	8b 8b       	std	Y+19, r24	; 0x13
    1e94:	0f c0       	rjmp	.+30     	; 0x1eb4 <LCD_I2C_init+0x560>
    1e96:	88 ec       	ldi	r24, 0xC8	; 200
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9a 8b       	std	Y+18, r25	; 0x12
    1e9c:	89 8b       	std	Y+17, r24	; 0x11
    1e9e:	89 89       	ldd	r24, Y+17	; 0x11
    1ea0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <LCD_I2C_init+0x54e>
    1ea6:	9a 8b       	std	Y+18, r25	; 0x12
    1ea8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eaa:	8b 89       	ldd	r24, Y+19	; 0x13
    1eac:	9c 89       	ldd	r25, Y+20	; 0x14
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	9c 8b       	std	Y+20, r25	; 0x14
    1eb2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	69 f7       	brne	.-38     	; 0x1e96 <LCD_I2C_init+0x542>
    1ebc:	14 c0       	rjmp	.+40     	; 0x1ee6 <LCD_I2C_init+0x592>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebe:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	9c 8b       	std	Y+20, r25	; 0x14
    1ed0:	8b 8b       	std	Y+19, r24	; 0x13
    1ed2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed6:	98 8b       	std	Y+16, r25	; 0x10
    1ed8:	8f 87       	std	Y+15, r24	; 0x0f
    1eda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1edc:	98 89       	ldd	r25, Y+16	; 0x10
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <LCD_I2C_init+0x58a>
    1ee2:	98 8b       	std	Y+16, r25	; 0x10
    1ee4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	I2C_Master_send_data(command);
	_delay_ms(100);
	I2C_Master_send_data(0b00000001);
	*/
	for(i = 0; i<Copy_u8Size;i++){
    1ee6:	de 01       	movw	r26, r28
    1ee8:	ab 5a       	subi	r26, 0xAB	; 171
    1eea:	bf 4f       	sbci	r27, 0xFF	; 255
    1eec:	fe 01       	movw	r30, r28
    1eee:	eb 5a       	subi	r30, 0xAB	; 171
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	80 81       	ld	r24, Z
    1ef4:	8f 5f       	subi	r24, 0xFF	; 255
    1ef6:	8c 93       	st	X, r24
    1ef8:	fe 01       	movw	r30, r28
    1efa:	eb 5a       	subi	r30, 0xAB	; 171
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	de 01       	movw	r26, r28
    1f00:	a8 5a       	subi	r26, 0xA8	; 168
    1f02:	bf 4f       	sbci	r27, 0xFF	; 255
    1f04:	90 81       	ld	r25, Z
    1f06:	8c 91       	ld	r24, X
    1f08:	98 17       	cp	r25, r24
    1f0a:	08 f4       	brcc	.+2      	; 0x1f0e <LCD_I2C_init+0x5ba>
    1f0c:	82 ce       	rjmp	.-764    	; 0x1c12 <LCD_I2C_init+0x2be>
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a0 e2       	ldi	r26, 0x20	; 32
    1f14:	b1 e4       	ldi	r27, 0x41	; 65
    1f16:	8b 87       	std	Y+11, r24	; 0x0b
    1f18:	9c 87       	std	Y+12, r25	; 0x0c
    1f1a:	ad 87       	std	Y+13, r26	; 0x0d
    1f1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4a ef       	ldi	r20, 0xFA	; 250
    1f2c:	54 e4       	ldi	r21, 0x44	; 68
    1f2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	8f 83       	std	Y+7, r24	; 0x07
    1f38:	98 87       	std	Y+8, r25	; 0x08
    1f3a:	a9 87       	std	Y+9, r26	; 0x09
    1f3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f40:	78 85       	ldd	r23, Y+8	; 0x08
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e8       	ldi	r20, 0x80	; 128
    1f4c:	5f e3       	ldi	r21, 0x3F	; 63
    1f4e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f52:	88 23       	and	r24, r24
    1f54:	2c f4       	brge	.+10     	; 0x1f60 <LCD_I2C_init+0x60c>
		__ticks = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
    1f5e:	3f c0       	rjmp	.+126    	; 0x1fde <LCD_I2C_init+0x68a>
	else if (__tmp > 65535)
    1f60:	6f 81       	ldd	r22, Y+7	; 0x07
    1f62:	78 85       	ldd	r23, Y+8	; 0x08
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	3f ef       	ldi	r19, 0xFF	; 255
    1f6c:	4f e7       	ldi	r20, 0x7F	; 127
    1f6e:	57 e4       	ldi	r21, 0x47	; 71
    1f70:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f74:	18 16       	cp	r1, r24
    1f76:	4c f5       	brge	.+82     	; 0x1fca <LCD_I2C_init+0x676>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e2       	ldi	r20, 0x20	; 32
    1f86:	51 e4       	ldi	r21, 0x41	; 65
    1f88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	9e 83       	std	Y+6, r25	; 0x06
    1f9e:	8d 83       	std	Y+5, r24	; 0x05
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <LCD_I2C_init+0x66c>
    1fa2:	88 ec       	ldi	r24, 0xC8	; 200
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	9c 83       	std	Y+4, r25	; 0x04
    1fa8:	8b 83       	std	Y+3, r24	; 0x03
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <LCD_I2C_init+0x65a>
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	69 f7       	brne	.-38     	; 0x1fa2 <LCD_I2C_init+0x64e>
    1fc8:	14 c0       	rjmp	.+40     	; 0x1ff2 <LCD_I2C_init+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_I2C_init+0x696>
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
		I2C_Master_send_data(Copy_u8CommandArray[i]);
		_delay_ms(10);
	//	I2C_send_start();
	}
	_delay_ms(10);
	I2C_stop();
    1ff2:	0e 94 42 0c 	call	0x1884	; 0x1884 <I2C_stop>
}
    1ff6:	c8 5a       	subi	r28, 0xA8	; 168
    1ff8:	df 4f       	sbci	r29, 0xFF	; 255
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	08 95       	ret

0000200e <LCD_I2C_SendNum>:
void LCD_I2C_SendNum(s16 Copy_u16num){
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	ed 97       	sbiw	r28, 0x3d	; 61
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	9d af       	std	Y+61, r25	; 0x3d
    2024:	8c af       	std	Y+60, r24	; 0x3c

	// For checking if the number is negative or not
	u8 signindicate = (Copy_u16num<0)? 1:0;
    2026:	1b ae       	std	Y+59, r1	; 0x3b
    2028:	8c ad       	ldd	r24, Y+60	; 0x3c
    202a:	9d ad       	ldd	r25, Y+61	; 0x3d
    202c:	99 23       	and	r25, r25
    202e:	14 f4       	brge	.+4      	; 0x2034 <LCD_I2C_SendNum+0x26>
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	8b af       	std	Y+59, r24	; 0x3b

	if(signindicate){
    2034:	8b ad       	ldd	r24, Y+59	; 0x3b
    2036:	88 23       	and	r24, r24
    2038:	39 f0       	breq	.+14     	; 0x2048 <LCD_I2C_SendNum+0x3a>
		// The number is -ve
		Copy_u16num = Copy_u16num * -1;
    203a:	8c ad       	ldd	r24, Y+60	; 0x3c
    203c:	9d ad       	ldd	r25, Y+61	; 0x3d
    203e:	90 95       	com	r25
    2040:	81 95       	neg	r24
    2042:	9f 4f       	sbci	r25, 0xFF	; 255
    2044:	9d af       	std	Y+61, r25	; 0x3d
    2046:	8c af       	std	Y+60, r24	; 0x3c
	}
	u8 LSB=(u8)Copy_u16num;
    2048:	8c ad       	ldd	r24, Y+60	; 0x3c
    204a:	8a af       	std	Y+58, r24	; 0x3a
	u8 MSB= (u8)(Copy_u16num>>8);
    204c:	8c ad       	ldd	r24, Y+60	; 0x3c
    204e:	9d ad       	ldd	r25, Y+61	; 0x3d
    2050:	89 2f       	mov	r24, r25
    2052:	99 0f       	add	r25, r25
    2054:	99 0b       	sbc	r25, r25
    2056:	89 af       	std	Y+57, r24	; 0x39
	// Start the transmission
	I2C_send_start();
    2058:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_send_start>
	I2C_select_slave(LCD_I2C_Slave_Address,0);
    205c:	85 e0       	ldi	r24, 0x05	; 5
    205e:	60 e0       	ldi	r22, 0x00	; 0
    2060:	0e 94 91 0b 	call	0x1722	; 0x1722 <I2C_select_slave>
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	a8 e4       	ldi	r26, 0x48	; 72
    206a:	b3 e4       	ldi	r27, 0x43	; 67
    206c:	8d ab       	std	Y+53, r24	; 0x35
    206e:	9e ab       	std	Y+54, r25	; 0x36
    2070:	af ab       	std	Y+55, r26	; 0x37
    2072:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2074:	6d a9       	ldd	r22, Y+53	; 0x35
    2076:	7e a9       	ldd	r23, Y+54	; 0x36
    2078:	8f a9       	ldd	r24, Y+55	; 0x37
    207a:	98 ad       	ldd	r25, Y+56	; 0x38
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	4a ef       	ldi	r20, 0xFA	; 250
    2082:	54 e4       	ldi	r21, 0x44	; 68
    2084:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	89 ab       	std	Y+49, r24	; 0x31
    208e:	9a ab       	std	Y+50, r25	; 0x32
    2090:	ab ab       	std	Y+51, r26	; 0x33
    2092:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2094:	69 a9       	ldd	r22, Y+49	; 0x31
    2096:	7a a9       	ldd	r23, Y+50	; 0x32
    2098:	8b a9       	ldd	r24, Y+51	; 0x33
    209a:	9c a9       	ldd	r25, Y+52	; 0x34
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e8       	ldi	r20, 0x80	; 128
    20a2:	5f e3       	ldi	r21, 0x3F	; 63
    20a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20a8:	88 23       	and	r24, r24
    20aa:	2c f4       	brge	.+10     	; 0x20b6 <LCD_I2C_SendNum+0xa8>
		__ticks = 1;
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	98 ab       	std	Y+48, r25	; 0x30
    20b2:	8f a7       	std	Y+47, r24	; 0x2f
    20b4:	3f c0       	rjmp	.+126    	; 0x2134 <LCD_I2C_SendNum+0x126>
	else if (__tmp > 65535)
    20b6:	69 a9       	ldd	r22, Y+49	; 0x31
    20b8:	7a a9       	ldd	r23, Y+50	; 0x32
    20ba:	8b a9       	ldd	r24, Y+51	; 0x33
    20bc:	9c a9       	ldd	r25, Y+52	; 0x34
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	3f ef       	ldi	r19, 0xFF	; 255
    20c2:	4f e7       	ldi	r20, 0x7F	; 127
    20c4:	57 e4       	ldi	r21, 0x47	; 71
    20c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20ca:	18 16       	cp	r1, r24
    20cc:	4c f5       	brge	.+82     	; 0x2120 <LCD_I2C_SendNum+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ce:	6d a9       	ldd	r22, Y+53	; 0x35
    20d0:	7e a9       	ldd	r23, Y+54	; 0x36
    20d2:	8f a9       	ldd	r24, Y+55	; 0x37
    20d4:	98 ad       	ldd	r25, Y+56	; 0x38
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e2       	ldi	r20, 0x20	; 32
    20dc:	51 e4       	ldi	r21, 0x41	; 65
    20de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	bc 01       	movw	r22, r24
    20e8:	cd 01       	movw	r24, r26
    20ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	98 ab       	std	Y+48, r25	; 0x30
    20f4:	8f a7       	std	Y+47, r24	; 0x2f
    20f6:	0f c0       	rjmp	.+30     	; 0x2116 <LCD_I2C_SendNum+0x108>
    20f8:	88 ec       	ldi	r24, 0xC8	; 200
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9e a7       	std	Y+46, r25	; 0x2e
    20fe:	8d a7       	std	Y+45, r24	; 0x2d
    2100:	8d a5       	ldd	r24, Y+45	; 0x2d
    2102:	9e a5       	ldd	r25, Y+46	; 0x2e
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <LCD_I2C_SendNum+0xf6>
    2108:	9e a7       	std	Y+46, r25	; 0x2e
    210a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210c:	8f a5       	ldd	r24, Y+47	; 0x2f
    210e:	98 a9       	ldd	r25, Y+48	; 0x30
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	98 ab       	std	Y+48, r25	; 0x30
    2114:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2116:	8f a5       	ldd	r24, Y+47	; 0x2f
    2118:	98 a9       	ldd	r25, Y+48	; 0x30
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	69 f7       	brne	.-38     	; 0x20f8 <LCD_I2C_SendNum+0xea>
    211e:	14 c0       	rjmp	.+40     	; 0x2148 <LCD_I2C_SendNum+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2120:	69 a9       	ldd	r22, Y+49	; 0x31
    2122:	7a a9       	ldd	r23, Y+50	; 0x32
    2124:	8b a9       	ldd	r24, Y+51	; 0x33
    2126:	9c a9       	ldd	r25, Y+52	; 0x34
    2128:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	98 ab       	std	Y+48, r25	; 0x30
    2132:	8f a7       	std	Y+47, r24	; 0x2f
    2134:	8f a5       	ldd	r24, Y+47	; 0x2f
    2136:	98 a9       	ldd	r25, Y+48	; 0x30
    2138:	9c a7       	std	Y+44, r25	; 0x2c
    213a:	8b a7       	std	Y+43, r24	; 0x2b
    213c:	8b a5       	ldd	r24, Y+43	; 0x2b
    213e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	f1 f7       	brne	.-4      	; 0x2140 <LCD_I2C_SendNum+0x132>
    2144:	9c a7       	std	Y+44, r25	; 0x2c
    2146:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);

	if(signindicate){
    2148:	8b ad       	ldd	r24, Y+59	; 0x3b
    214a:	88 23       	and	r24, r24
    214c:	21 f0       	breq	.+8      	; 0x2156 <LCD_I2C_SendNum+0x148>
		// The number is -ve
		I2C_Master_send_data(LCD_I2C_SignedInteger);
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    2154:	03 c0       	rjmp	.+6      	; 0x215c <LCD_I2C_SendNum+0x14e>
	}
	else{
		// The number is +ve
		I2C_Master_send_data(LCD_I2C_UnsignedInteger);
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	a8 e4       	ldi	r26, 0x48	; 72
    2162:	b3 e4       	ldi	r27, 0x43	; 67
    2164:	8f a3       	std	Y+39, r24	; 0x27
    2166:	98 a7       	std	Y+40, r25	; 0x28
    2168:	a9 a7       	std	Y+41, r26	; 0x29
    216a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216c:	6f a1       	ldd	r22, Y+39	; 0x27
    216e:	78 a5       	ldd	r23, Y+40	; 0x28
    2170:	89 a5       	ldd	r24, Y+41	; 0x29
    2172:	9a a5       	ldd	r25, Y+42	; 0x2a
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	4a ef       	ldi	r20, 0xFA	; 250
    217a:	54 e4       	ldi	r21, 0x44	; 68
    217c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	8b a3       	std	Y+35, r24	; 0x23
    2186:	9c a3       	std	Y+36, r25	; 0x24
    2188:	ad a3       	std	Y+37, r26	; 0x25
    218a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    218c:	6b a1       	ldd	r22, Y+35	; 0x23
    218e:	7c a1       	ldd	r23, Y+36	; 0x24
    2190:	8d a1       	ldd	r24, Y+37	; 0x25
    2192:	9e a1       	ldd	r25, Y+38	; 0x26
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e8       	ldi	r20, 0x80	; 128
    219a:	5f e3       	ldi	r21, 0x3F	; 63
    219c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21a0:	88 23       	and	r24, r24
    21a2:	2c f4       	brge	.+10     	; 0x21ae <LCD_I2C_SendNum+0x1a0>
		__ticks = 1;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9a a3       	std	Y+34, r25	; 0x22
    21aa:	89 a3       	std	Y+33, r24	; 0x21
    21ac:	3f c0       	rjmp	.+126    	; 0x222c <LCD_I2C_SendNum+0x21e>
	else if (__tmp > 65535)
    21ae:	6b a1       	ldd	r22, Y+35	; 0x23
    21b0:	7c a1       	ldd	r23, Y+36	; 0x24
    21b2:	8d a1       	ldd	r24, Y+37	; 0x25
    21b4:	9e a1       	ldd	r25, Y+38	; 0x26
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	3f ef       	ldi	r19, 0xFF	; 255
    21ba:	4f e7       	ldi	r20, 0x7F	; 127
    21bc:	57 e4       	ldi	r21, 0x47	; 71
    21be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21c2:	18 16       	cp	r1, r24
    21c4:	4c f5       	brge	.+82     	; 0x2218 <LCD_I2C_SendNum+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c6:	6f a1       	ldd	r22, Y+39	; 0x27
    21c8:	78 a5       	ldd	r23, Y+40	; 0x28
    21ca:	89 a5       	ldd	r24, Y+41	; 0x29
    21cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e2       	ldi	r20, 0x20	; 32
    21d4:	51 e4       	ldi	r21, 0x41	; 65
    21d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	9a a3       	std	Y+34, r25	; 0x22
    21ec:	89 a3       	std	Y+33, r24	; 0x21
    21ee:	0f c0       	rjmp	.+30     	; 0x220e <LCD_I2C_SendNum+0x200>
    21f0:	88 ec       	ldi	r24, 0xC8	; 200
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	98 a3       	std	Y+32, r25	; 0x20
    21f6:	8f 8f       	std	Y+31, r24	; 0x1f
    21f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21fa:	98 a1       	ldd	r25, Y+32	; 0x20
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD_I2C_SendNum+0x1ee>
    2200:	98 a3       	std	Y+32, r25	; 0x20
    2202:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2204:	89 a1       	ldd	r24, Y+33	; 0x21
    2206:	9a a1       	ldd	r25, Y+34	; 0x22
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	9a a3       	std	Y+34, r25	; 0x22
    220c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220e:	89 a1       	ldd	r24, Y+33	; 0x21
    2210:	9a a1       	ldd	r25, Y+34	; 0x22
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	69 f7       	brne	.-38     	; 0x21f0 <LCD_I2C_SendNum+0x1e2>
    2216:	14 c0       	rjmp	.+40     	; 0x2240 <LCD_I2C_SendNum+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2218:	6b a1       	ldd	r22, Y+35	; 0x23
    221a:	7c a1       	ldd	r23, Y+36	; 0x24
    221c:	8d a1       	ldd	r24, Y+37	; 0x25
    221e:	9e a1       	ldd	r25, Y+38	; 0x26
    2220:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	9a a3       	std	Y+34, r25	; 0x22
    222a:	89 a3       	std	Y+33, r24	; 0x21
    222c:	89 a1       	ldd	r24, Y+33	; 0x21
    222e:	9a a1       	ldd	r25, Y+34	; 0x22
    2230:	9e 8f       	std	Y+30, r25	; 0x1e
    2232:	8d 8f       	std	Y+29, r24	; 0x1d
    2234:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2236:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <LCD_I2C_SendNum+0x22a>
    223c:	9e 8f       	std	Y+30, r25	; 0x1e
    223e:	8d 8f       	std	Y+29, r24	; 0x1d
	}

	_delay_ms(200);
	I2C_Master_send_data(LSB);
    2240:	8a ad       	ldd	r24, Y+58	; 0x3a
    2242:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
	if (MSB==0)
    2246:	89 ad       	ldd	r24, Y+57	; 0x39
    2248:	88 23       	and	r24, r24
    224a:	09 f4       	brne	.+2      	; 0x224e <LCD_I2C_SendNum+0x240>
    224c:	75 c0       	rjmp	.+234    	; 0x2338 <LCD_I2C_SendNum+0x32a>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a8 e4       	ldi	r26, 0x48	; 72
    2254:	b3 e4       	ldi	r27, 0x43	; 67
    2256:	89 8f       	std	Y+25, r24	; 0x19
    2258:	9a 8f       	std	Y+26, r25	; 0x1a
    225a:	ab 8f       	std	Y+27, r26	; 0x1b
    225c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225e:	69 8d       	ldd	r22, Y+25	; 0x19
    2260:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2262:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2264:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	4a ef       	ldi	r20, 0xFA	; 250
    226c:	54 e4       	ldi	r21, 0x44	; 68
    226e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	8d 8b       	std	Y+21, r24	; 0x15
    2278:	9e 8b       	std	Y+22, r25	; 0x16
    227a:	af 8b       	std	Y+23, r26	; 0x17
    227c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    227e:	6d 89       	ldd	r22, Y+21	; 0x15
    2280:	7e 89       	ldd	r23, Y+22	; 0x16
    2282:	8f 89       	ldd	r24, Y+23	; 0x17
    2284:	98 8d       	ldd	r25, Y+24	; 0x18
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e8       	ldi	r20, 0x80	; 128
    228c:	5f e3       	ldi	r21, 0x3F	; 63
    228e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2292:	88 23       	and	r24, r24
    2294:	2c f4       	brge	.+10     	; 0x22a0 <LCD_I2C_SendNum+0x292>
		__ticks = 1;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	9c 8b       	std	Y+20, r25	; 0x14
    229c:	8b 8b       	std	Y+19, r24	; 0x13
    229e:	3f c0       	rjmp	.+126    	; 0x231e <LCD_I2C_SendNum+0x310>
	else if (__tmp > 65535)
    22a0:	6d 89       	ldd	r22, Y+21	; 0x15
    22a2:	7e 89       	ldd	r23, Y+22	; 0x16
    22a4:	8f 89       	ldd	r24, Y+23	; 0x17
    22a6:	98 8d       	ldd	r25, Y+24	; 0x18
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	3f ef       	ldi	r19, 0xFF	; 255
    22ac:	4f e7       	ldi	r20, 0x7F	; 127
    22ae:	57 e4       	ldi	r21, 0x47	; 71
    22b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22b4:	18 16       	cp	r1, r24
    22b6:	4c f5       	brge	.+82     	; 0x230a <LCD_I2C_SendNum+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b8:	69 8d       	ldd	r22, Y+25	; 0x19
    22ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e2       	ldi	r20, 0x20	; 32
    22c6:	51 e4       	ldi	r21, 0x41	; 65
    22c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	bc 01       	movw	r22, r24
    22d2:	cd 01       	movw	r24, r26
    22d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	9c 8b       	std	Y+20, r25	; 0x14
    22de:	8b 8b       	std	Y+19, r24	; 0x13
    22e0:	0f c0       	rjmp	.+30     	; 0x2300 <LCD_I2C_SendNum+0x2f2>
    22e2:	88 ec       	ldi	r24, 0xC8	; 200
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	9a 8b       	std	Y+18, r25	; 0x12
    22e8:	89 8b       	std	Y+17, r24	; 0x11
    22ea:	89 89       	ldd	r24, Y+17	; 0x11
    22ec:	9a 89       	ldd	r25, Y+18	; 0x12
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <LCD_I2C_SendNum+0x2e0>
    22f2:	9a 8b       	std	Y+18, r25	; 0x12
    22f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f6:	8b 89       	ldd	r24, Y+19	; 0x13
    22f8:	9c 89       	ldd	r25, Y+20	; 0x14
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	9c 8b       	std	Y+20, r25	; 0x14
    22fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2300:	8b 89       	ldd	r24, Y+19	; 0x13
    2302:	9c 89       	ldd	r25, Y+20	; 0x14
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	69 f7       	brne	.-38     	; 0x22e2 <LCD_I2C_SendNum+0x2d4>
    2308:	14 c0       	rjmp	.+40     	; 0x2332 <LCD_I2C_SendNum+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230a:	6d 89       	ldd	r22, Y+21	; 0x15
    230c:	7e 89       	ldd	r23, Y+22	; 0x16
    230e:	8f 89       	ldd	r24, Y+23	; 0x17
    2310:	98 8d       	ldd	r25, Y+24	; 0x18
    2312:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9c 8b       	std	Y+20, r25	; 0x14
    231c:	8b 8b       	std	Y+19, r24	; 0x13
    231e:	8b 89       	ldd	r24, Y+19	; 0x13
    2320:	9c 89       	ldd	r25, Y+20	; 0x14
    2322:	98 8b       	std	Y+16, r25	; 0x10
    2324:	8f 87       	std	Y+15, r24	; 0x0f
    2326:	8f 85       	ldd	r24, Y+15	; 0x0f
    2328:	98 89       	ldd	r25, Y+16	; 0x10
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <LCD_I2C_SendNum+0x31c>
    232e:	98 8b       	std	Y+16, r25	; 0x10
    2330:	8f 87       	std	Y+15, r24	; 0x0f

	}
	else
	{
		_delay_ms(200);
		I2C_Master_send_data(MSB);
    2332:	89 ad       	ldd	r24, Y+57	; 0x39
    2334:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a0 e2       	ldi	r26, 0x20	; 32
    233e:	b1 e4       	ldi	r27, 0x41	; 65
    2340:	8b 87       	std	Y+11, r24	; 0x0b
    2342:	9c 87       	std	Y+12, r25	; 0x0c
    2344:	ad 87       	std	Y+13, r26	; 0x0d
    2346:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	6b 85       	ldd	r22, Y+11	; 0x0b
    234a:	7c 85       	ldd	r23, Y+12	; 0x0c
    234c:	8d 85       	ldd	r24, Y+13	; 0x0d
    234e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a ef       	ldi	r20, 0xFA	; 250
    2356:	54 e4       	ldi	r21, 0x44	; 68
    2358:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8f 83       	std	Y+7, r24	; 0x07
    2362:	98 87       	std	Y+8, r25	; 0x08
    2364:	a9 87       	std	Y+9, r26	; 0x09
    2366:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2368:	6f 81       	ldd	r22, Y+7	; 0x07
    236a:	78 85       	ldd	r23, Y+8	; 0x08
    236c:	89 85       	ldd	r24, Y+9	; 0x09
    236e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    237c:	88 23       	and	r24, r24
    237e:	2c f4       	brge	.+10     	; 0x238a <LCD_I2C_SendNum+0x37c>
		__ticks = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	3f c0       	rjmp	.+126    	; 0x2408 <LCD_I2C_SendNum+0x3fa>
	else if (__tmp > 65535)
    238a:	6f 81       	ldd	r22, Y+7	; 0x07
    238c:	78 85       	ldd	r23, Y+8	; 0x08
    238e:	89 85       	ldd	r24, Y+9	; 0x09
    2390:	9a 85       	ldd	r25, Y+10	; 0x0a
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	3f ef       	ldi	r19, 0xFF	; 255
    2396:	4f e7       	ldi	r20, 0x7F	; 127
    2398:	57 e4       	ldi	r21, 0x47	; 71
    239a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    239e:	18 16       	cp	r1, r24
    23a0:	4c f5       	brge	.+82     	; 0x23f4 <LCD_I2C_SendNum+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e2       	ldi	r20, 0x20	; 32
    23b0:	51 e4       	ldi	r21, 0x41	; 65
    23b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <LCD_I2C_SendNum+0x3dc>
    23cc:	88 ec       	ldi	r24, 0xC8	; 200
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9c 83       	std	Y+4, r25	; 0x04
    23d2:	8b 83       	std	Y+3, r24	; 0x03
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <LCD_I2C_SendNum+0x3ca>
    23dc:	9c 83       	std	Y+4, r25	; 0x04
    23de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	9e 81       	ldd	r25, Y+6	; 0x06
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	9e 83       	std	Y+6, r25	; 0x06
    23e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ea:	8d 81       	ldd	r24, Y+5	; 0x05
    23ec:	9e 81       	ldd	r25, Y+6	; 0x06
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	69 f7       	brne	.-38     	; 0x23cc <LCD_I2C_SendNum+0x3be>
    23f2:	14 c0       	rjmp	.+40     	; 0x241c <LCD_I2C_SendNum+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	6f 81       	ldd	r22, Y+7	; 0x07
    23f6:	78 85       	ldd	r23, Y+8	; 0x08
    23f8:	89 85       	ldd	r24, Y+9	; 0x09
    23fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9e 83       	std	Y+6, r25	; 0x06
    2406:	8d 83       	std	Y+5, r24	; 0x05
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	9a 83       	std	Y+2, r25	; 0x02
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	9a 81       	ldd	r25, Y+2	; 0x02
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <LCD_I2C_SendNum+0x406>
    2418:	9a 83       	std	Y+2, r25	; 0x02
    241a:	89 83       	std	Y+1, r24	; 0x01

	}
	_delay_ms(10);
	I2C_stop();
    241c:	0e 94 42 0c 	call	0x1884	; 0x1884 <I2C_stop>
}
    2420:	ed 96       	adiw	r28, 0x3d	; 61
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <LCD_I2C_SendString>:
void LCD_I2C_SendString(u8* Copy_u8str)
{
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	eb 97       	sbiw	r28, 0x3b	; 59
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	9b af       	std	Y+59, r25	; 0x3b
    2448:	8a af       	std	Y+58, r24	; 0x3a

	u8 i=0;
    244a:	19 ae       	std	Y+57, r1	; 0x39
	I2C_send_start();
    244c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_send_start>
	I2C_select_slave(5,0);
    2450:	85 e0       	ldi	r24, 0x05	; 5
    2452:	60 e0       	ldi	r22, 0x00	; 0
    2454:	0e 94 91 0b 	call	0x1722	; 0x1722 <I2C_select_slave>
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	a8 ec       	ldi	r26, 0xC8	; 200
    245e:	b2 e4       	ldi	r27, 0x42	; 66
    2460:	8d ab       	std	Y+53, r24	; 0x35
    2462:	9e ab       	std	Y+54, r25	; 0x36
    2464:	af ab       	std	Y+55, r26	; 0x37
    2466:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2468:	6d a9       	ldd	r22, Y+53	; 0x35
    246a:	7e a9       	ldd	r23, Y+54	; 0x36
    246c:	8f a9       	ldd	r24, Y+55	; 0x37
    246e:	98 ad       	ldd	r25, Y+56	; 0x38
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	4a ef       	ldi	r20, 0xFA	; 250
    2476:	54 e4       	ldi	r21, 0x44	; 68
    2478:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	89 ab       	std	Y+49, r24	; 0x31
    2482:	9a ab       	std	Y+50, r25	; 0x32
    2484:	ab ab       	std	Y+51, r26	; 0x33
    2486:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2488:	69 a9       	ldd	r22, Y+49	; 0x31
    248a:	7a a9       	ldd	r23, Y+50	; 0x32
    248c:	8b a9       	ldd	r24, Y+51	; 0x33
    248e:	9c a9       	ldd	r25, Y+52	; 0x34
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e8       	ldi	r20, 0x80	; 128
    2496:	5f e3       	ldi	r21, 0x3F	; 63
    2498:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    249c:	88 23       	and	r24, r24
    249e:	2c f4       	brge	.+10     	; 0x24aa <LCD_I2C_SendString+0x78>
		__ticks = 1;
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	98 ab       	std	Y+48, r25	; 0x30
    24a6:	8f a7       	std	Y+47, r24	; 0x2f
    24a8:	3f c0       	rjmp	.+126    	; 0x2528 <LCD_I2C_SendString+0xf6>
	else if (__tmp > 65535)
    24aa:	69 a9       	ldd	r22, Y+49	; 0x31
    24ac:	7a a9       	ldd	r23, Y+50	; 0x32
    24ae:	8b a9       	ldd	r24, Y+51	; 0x33
    24b0:	9c a9       	ldd	r25, Y+52	; 0x34
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	3f ef       	ldi	r19, 0xFF	; 255
    24b6:	4f e7       	ldi	r20, 0x7F	; 127
    24b8:	57 e4       	ldi	r21, 0x47	; 71
    24ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24be:	18 16       	cp	r1, r24
    24c0:	4c f5       	brge	.+82     	; 0x2514 <LCD_I2C_SendString+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c2:	6d a9       	ldd	r22, Y+53	; 0x35
    24c4:	7e a9       	ldd	r23, Y+54	; 0x36
    24c6:	8f a9       	ldd	r24, Y+55	; 0x37
    24c8:	98 ad       	ldd	r25, Y+56	; 0x38
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e2       	ldi	r20, 0x20	; 32
    24d0:	51 e4       	ldi	r21, 0x41	; 65
    24d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	98 ab       	std	Y+48, r25	; 0x30
    24e8:	8f a7       	std	Y+47, r24	; 0x2f
    24ea:	0f c0       	rjmp	.+30     	; 0x250a <LCD_I2C_SendString+0xd8>
    24ec:	88 ec       	ldi	r24, 0xC8	; 200
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9e a7       	std	Y+46, r25	; 0x2e
    24f2:	8d a7       	std	Y+45, r24	; 0x2d
    24f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    24f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <LCD_I2C_SendString+0xc6>
    24fc:	9e a7       	std	Y+46, r25	; 0x2e
    24fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2500:	8f a5       	ldd	r24, Y+47	; 0x2f
    2502:	98 a9       	ldd	r25, Y+48	; 0x30
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	98 ab       	std	Y+48, r25	; 0x30
    2508:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250a:	8f a5       	ldd	r24, Y+47	; 0x2f
    250c:	98 a9       	ldd	r25, Y+48	; 0x30
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	69 f7       	brne	.-38     	; 0x24ec <LCD_I2C_SendString+0xba>
    2512:	14 c0       	rjmp	.+40     	; 0x253c <LCD_I2C_SendString+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2514:	69 a9       	ldd	r22, Y+49	; 0x31
    2516:	7a a9       	ldd	r23, Y+50	; 0x32
    2518:	8b a9       	ldd	r24, Y+51	; 0x33
    251a:	9c a9       	ldd	r25, Y+52	; 0x34
    251c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	98 ab       	std	Y+48, r25	; 0x30
    2526:	8f a7       	std	Y+47, r24	; 0x2f
    2528:	8f a5       	ldd	r24, Y+47	; 0x2f
    252a:	98 a9       	ldd	r25, Y+48	; 0x30
    252c:	9c a7       	std	Y+44, r25	; 0x2c
    252e:	8b a7       	std	Y+43, r24	; 0x2b
    2530:	8b a5       	ldd	r24, Y+43	; 0x2b
    2532:	9c a5       	ldd	r25, Y+44	; 0x2c
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_I2C_SendString+0x102>
    2538:	9c a7       	std	Y+44, r25	; 0x2c
    253a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);

	I2C_Master_send_data(LCD_I2C_String);
    253c:	84 e0       	ldi	r24, 0x04	; 4
    253e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	a8 ec       	ldi	r26, 0xC8	; 200
    2548:	b2 e4       	ldi	r27, 0x42	; 66
    254a:	8f a3       	std	Y+39, r24	; 0x27
    254c:	98 a7       	std	Y+40, r25	; 0x28
    254e:	a9 a7       	std	Y+41, r26	; 0x29
    2550:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2552:	6f a1       	ldd	r22, Y+39	; 0x27
    2554:	78 a5       	ldd	r23, Y+40	; 0x28
    2556:	89 a5       	ldd	r24, Y+41	; 0x29
    2558:	9a a5       	ldd	r25, Y+42	; 0x2a
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	4a ef       	ldi	r20, 0xFA	; 250
    2560:	54 e4       	ldi	r21, 0x44	; 68
    2562:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	8b a3       	std	Y+35, r24	; 0x23
    256c:	9c a3       	std	Y+36, r25	; 0x24
    256e:	ad a3       	std	Y+37, r26	; 0x25
    2570:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2572:	6b a1       	ldd	r22, Y+35	; 0x23
    2574:	7c a1       	ldd	r23, Y+36	; 0x24
    2576:	8d a1       	ldd	r24, Y+37	; 0x25
    2578:	9e a1       	ldd	r25, Y+38	; 0x26
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e8       	ldi	r20, 0x80	; 128
    2580:	5f e3       	ldi	r21, 0x3F	; 63
    2582:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2586:	88 23       	and	r24, r24
    2588:	2c f4       	brge	.+10     	; 0x2594 <LCD_I2C_SendString+0x162>
		__ticks = 1;
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	9a a3       	std	Y+34, r25	; 0x22
    2590:	89 a3       	std	Y+33, r24	; 0x21
    2592:	3f c0       	rjmp	.+126    	; 0x2612 <LCD_I2C_SendString+0x1e0>
	else if (__tmp > 65535)
    2594:	6b a1       	ldd	r22, Y+35	; 0x23
    2596:	7c a1       	ldd	r23, Y+36	; 0x24
    2598:	8d a1       	ldd	r24, Y+37	; 0x25
    259a:	9e a1       	ldd	r25, Y+38	; 0x26
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	3f ef       	ldi	r19, 0xFF	; 255
    25a0:	4f e7       	ldi	r20, 0x7F	; 127
    25a2:	57 e4       	ldi	r21, 0x47	; 71
    25a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25a8:	18 16       	cp	r1, r24
    25aa:	4c f5       	brge	.+82     	; 0x25fe <LCD_I2C_SendString+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ac:	6f a1       	ldd	r22, Y+39	; 0x27
    25ae:	78 a5       	ldd	r23, Y+40	; 0x28
    25b0:	89 a5       	ldd	r24, Y+41	; 0x29
    25b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e2       	ldi	r20, 0x20	; 32
    25ba:	51 e4       	ldi	r21, 0x41	; 65
    25bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	bc 01       	movw	r22, r24
    25c6:	cd 01       	movw	r24, r26
    25c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	9a a3       	std	Y+34, r25	; 0x22
    25d2:	89 a3       	std	Y+33, r24	; 0x21
    25d4:	0f c0       	rjmp	.+30     	; 0x25f4 <LCD_I2C_SendString+0x1c2>
    25d6:	88 ec       	ldi	r24, 0xC8	; 200
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	98 a3       	std	Y+32, r25	; 0x20
    25dc:	8f 8f       	std	Y+31, r24	; 0x1f
    25de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25e0:	98 a1       	ldd	r25, Y+32	; 0x20
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <LCD_I2C_SendString+0x1b0>
    25e6:	98 a3       	std	Y+32, r25	; 0x20
    25e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ea:	89 a1       	ldd	r24, Y+33	; 0x21
    25ec:	9a a1       	ldd	r25, Y+34	; 0x22
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	9a a3       	std	Y+34, r25	; 0x22
    25f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f4:	89 a1       	ldd	r24, Y+33	; 0x21
    25f6:	9a a1       	ldd	r25, Y+34	; 0x22
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	69 f7       	brne	.-38     	; 0x25d6 <LCD_I2C_SendString+0x1a4>
    25fc:	96 c0       	rjmp	.+300    	; 0x272a <LCD_I2C_SendString+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2600:	7c a1       	ldd	r23, Y+36	; 0x24
    2602:	8d a1       	ldd	r24, Y+37	; 0x25
    2604:	9e a1       	ldd	r25, Y+38	; 0x26
    2606:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	9a a3       	std	Y+34, r25	; 0x22
    2610:	89 a3       	std	Y+33, r24	; 0x21
    2612:	89 a1       	ldd	r24, Y+33	; 0x21
    2614:	9a a1       	ldd	r25, Y+34	; 0x22
    2616:	9e 8f       	std	Y+30, r25	; 0x1e
    2618:	8d 8f       	std	Y+29, r24	; 0x1d
    261a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    261c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <LCD_I2C_SendString+0x1ec>
    2622:	9e 8f       	std	Y+30, r25	; 0x1e
    2624:	8d 8f       	std	Y+29, r24	; 0x1d
    2626:	81 c0       	rjmp	.+258    	; 0x272a <LCD_I2C_SendString+0x2f8>
	_delay_ms(100);

	while(Copy_u8str[i]!='\0')
	{
		I2C_Master_send_data(Copy_u8str[i++]);
    2628:	89 ad       	ldd	r24, Y+57	; 0x39
    262a:	28 2f       	mov	r18, r24
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2630:	9b ad       	ldd	r25, Y+59	; 0x3b
    2632:	fc 01       	movw	r30, r24
    2634:	e2 0f       	add	r30, r18
    2636:	f3 1f       	adc	r31, r19
    2638:	90 81       	ld	r25, Z
    263a:	89 ad       	ldd	r24, Y+57	; 0x39
    263c:	8f 5f       	subi	r24, 0xFF	; 255
    263e:	89 af       	std	Y+57, r24	; 0x39
    2640:	89 2f       	mov	r24, r25
    2642:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a8 ec       	ldi	r26, 0xC8	; 200
    264c:	b2 e4       	ldi	r27, 0x42	; 66
    264e:	89 8f       	std	Y+25, r24	; 0x19
    2650:	9a 8f       	std	Y+26, r25	; 0x1a
    2652:	ab 8f       	std	Y+27, r26	; 0x1b
    2654:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2656:	69 8d       	ldd	r22, Y+25	; 0x19
    2658:	7a 8d       	ldd	r23, Y+26	; 0x1a
    265a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    265c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	4a ef       	ldi	r20, 0xFA	; 250
    2664:	54 e4       	ldi	r21, 0x44	; 68
    2666:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	8d 8b       	std	Y+21, r24	; 0x15
    2670:	9e 8b       	std	Y+22, r25	; 0x16
    2672:	af 8b       	std	Y+23, r26	; 0x17
    2674:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2676:	6d 89       	ldd	r22, Y+21	; 0x15
    2678:	7e 89       	ldd	r23, Y+22	; 0x16
    267a:	8f 89       	ldd	r24, Y+23	; 0x17
    267c:	98 8d       	ldd	r25, Y+24	; 0x18
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e8       	ldi	r20, 0x80	; 128
    2684:	5f e3       	ldi	r21, 0x3F	; 63
    2686:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    268a:	88 23       	and	r24, r24
    268c:	2c f4       	brge	.+10     	; 0x2698 <LCD_I2C_SendString+0x266>
		__ticks = 1;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9c 8b       	std	Y+20, r25	; 0x14
    2694:	8b 8b       	std	Y+19, r24	; 0x13
    2696:	3f c0       	rjmp	.+126    	; 0x2716 <LCD_I2C_SendString+0x2e4>
	else if (__tmp > 65535)
    2698:	6d 89       	ldd	r22, Y+21	; 0x15
    269a:	7e 89       	ldd	r23, Y+22	; 0x16
    269c:	8f 89       	ldd	r24, Y+23	; 0x17
    269e:	98 8d       	ldd	r25, Y+24	; 0x18
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	3f ef       	ldi	r19, 0xFF	; 255
    26a4:	4f e7       	ldi	r20, 0x7F	; 127
    26a6:	57 e4       	ldi	r21, 0x47	; 71
    26a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26ac:	18 16       	cp	r1, r24
    26ae:	4c f5       	brge	.+82     	; 0x2702 <LCD_I2C_SendString+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b0:	69 8d       	ldd	r22, Y+25	; 0x19
    26b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e2       	ldi	r20, 0x20	; 32
    26be:	51 e4       	ldi	r21, 0x41	; 65
    26c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	9c 8b       	std	Y+20, r25	; 0x14
    26d6:	8b 8b       	std	Y+19, r24	; 0x13
    26d8:	0f c0       	rjmp	.+30     	; 0x26f8 <LCD_I2C_SendString+0x2c6>
    26da:	88 ec       	ldi	r24, 0xC8	; 200
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	9a 8b       	std	Y+18, r25	; 0x12
    26e0:	89 8b       	std	Y+17, r24	; 0x11
    26e2:	89 89       	ldd	r24, Y+17	; 0x11
    26e4:	9a 89       	ldd	r25, Y+18	; 0x12
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_I2C_SendString+0x2b4>
    26ea:	9a 8b       	std	Y+18, r25	; 0x12
    26ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ee:	8b 89       	ldd	r24, Y+19	; 0x13
    26f0:	9c 89       	ldd	r25, Y+20	; 0x14
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	9c 8b       	std	Y+20, r25	; 0x14
    26f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f8:	8b 89       	ldd	r24, Y+19	; 0x13
    26fa:	9c 89       	ldd	r25, Y+20	; 0x14
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	69 f7       	brne	.-38     	; 0x26da <LCD_I2C_SendString+0x2a8>
    2700:	14 c0       	rjmp	.+40     	; 0x272a <LCD_I2C_SendString+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2702:	6d 89       	ldd	r22, Y+21	; 0x15
    2704:	7e 89       	ldd	r23, Y+22	; 0x16
    2706:	8f 89       	ldd	r24, Y+23	; 0x17
    2708:	98 8d       	ldd	r25, Y+24	; 0x18
    270a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	9c 8b       	std	Y+20, r25	; 0x14
    2714:	8b 8b       	std	Y+19, r24	; 0x13
    2716:	8b 89       	ldd	r24, Y+19	; 0x13
    2718:	9c 89       	ldd	r25, Y+20	; 0x14
    271a:	98 8b       	std	Y+16, r25	; 0x10
    271c:	8f 87       	std	Y+15, r24	; 0x0f
    271e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2720:	98 89       	ldd	r25, Y+16	; 0x10
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <LCD_I2C_SendString+0x2f0>
    2726:	98 8b       	std	Y+16, r25	; 0x10
    2728:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);

	I2C_Master_send_data(LCD_I2C_String);
	_delay_ms(100);

	while(Copy_u8str[i]!='\0')
    272a:	89 ad       	ldd	r24, Y+57	; 0x39
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	8a ad       	ldd	r24, Y+58	; 0x3a
    2732:	9b ad       	ldd	r25, Y+59	; 0x3b
    2734:	fc 01       	movw	r30, r24
    2736:	e2 0f       	add	r30, r18
    2738:	f3 1f       	adc	r31, r19
    273a:	80 81       	ld	r24, Z
    273c:	88 23       	and	r24, r24
    273e:	09 f0       	breq	.+2      	; 0x2742 <LCD_I2C_SendString+0x310>
    2740:	73 cf       	rjmp	.-282    	; 0x2628 <LCD_I2C_SendString+0x1f6>
	{
		I2C_Master_send_data(Copy_u8str[i++]);
		_delay_ms(100);
	}

	I2C_Master_send_data('\0');
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a0 e2       	ldi	r26, 0x20	; 32
    274e:	b1 e4       	ldi	r27, 0x41	; 65
    2750:	8b 87       	std	Y+11, r24	; 0x0b
    2752:	9c 87       	std	Y+12, r25	; 0x0c
    2754:	ad 87       	std	Y+13, r26	; 0x0d
    2756:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a ef       	ldi	r20, 0xFA	; 250
    2766:	54 e4       	ldi	r21, 0x44	; 68
    2768:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8f 83       	std	Y+7, r24	; 0x07
    2772:	98 87       	std	Y+8, r25	; 0x08
    2774:	a9 87       	std	Y+9, r26	; 0x09
    2776:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2778:	6f 81       	ldd	r22, Y+7	; 0x07
    277a:	78 85       	ldd	r23, Y+8	; 0x08
    277c:	89 85       	ldd	r24, Y+9	; 0x09
    277e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    278c:	88 23       	and	r24, r24
    278e:	2c f4       	brge	.+10     	; 0x279a <LCD_I2C_SendString+0x368>
		__ticks = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9e 83       	std	Y+6, r25	; 0x06
    2796:	8d 83       	std	Y+5, r24	; 0x05
    2798:	3f c0       	rjmp	.+126    	; 0x2818 <LCD_I2C_SendString+0x3e6>
	else if (__tmp > 65535)
    279a:	6f 81       	ldd	r22, Y+7	; 0x07
    279c:	78 85       	ldd	r23, Y+8	; 0x08
    279e:	89 85       	ldd	r24, Y+9	; 0x09
    27a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	57 e4       	ldi	r21, 0x47	; 71
    27aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	4c f5       	brge	.+82     	; 0x2804 <LCD_I2C_SendString+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	0f c0       	rjmp	.+30     	; 0x27fa <LCD_I2C_SendString+0x3c8>
    27dc:	88 ec       	ldi	r24, 0xC8	; 200
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	9c 83       	std	Y+4, r25	; 0x04
    27e2:	8b 83       	std	Y+3, r24	; 0x03
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	9c 81       	ldd	r25, Y+4	; 0x04
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <LCD_I2C_SendString+0x3b6>
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f0:	8d 81       	ldd	r24, Y+5	; 0x05
    27f2:	9e 81       	ldd	r25, Y+6	; 0x06
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	69 f7       	brne	.-38     	; 0x27dc <LCD_I2C_SendString+0x3aa>
    2802:	14 c0       	rjmp	.+40     	; 0x282c <LCD_I2C_SendString+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2804:	6f 81       	ldd	r22, Y+7	; 0x07
    2806:	78 85       	ldd	r23, Y+8	; 0x08
    2808:	89 85       	ldd	r24, Y+9	; 0x09
    280a:	9a 85       	ldd	r25, Y+10	; 0x0a
    280c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9e 83       	std	Y+6, r25	; 0x06
    2816:	8d 83       	std	Y+5, r24	; 0x05
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	9a 83       	std	Y+2, r25	; 0x02
    281e:	89 83       	std	Y+1, r24	; 0x01
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <LCD_I2C_SendString+0x3f2>
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	I2C_stop();
    282c:	0e 94 42 0c 	call	0x1884	; 0x1884 <I2C_stop>
}
    2830:	eb 96       	adiw	r28, 0x3b	; 59
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	cd bf       	out	0x3d, r28	; 61
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	08 95       	ret

00002842 <LCD_I2C_SendCommand>:
void LCD_I2C_SendCommand(u8 Copy_u8Command)
{
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	ab 97       	sbiw	r28, 0x2b	; 43
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	cd bf       	out	0x3d, r28	; 61
    2856:	8b a7       	std	Y+43, r24	; 0x2b
	I2C_send_start();
    2858:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_send_start>
	I2C_select_slave(LCD_I2C_Slave_Address,0);
    285c:	85 e0       	ldi	r24, 0x05	; 5
    285e:	60 e0       	ldi	r22, 0x00	; 0
    2860:	0e 94 91 0b 	call	0x1722	; 0x1722 <I2C_select_slave>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	a8 ec       	ldi	r26, 0xC8	; 200
    286a:	b2 e4       	ldi	r27, 0x42	; 66
    286c:	8f a3       	std	Y+39, r24	; 0x27
    286e:	98 a7       	std	Y+40, r25	; 0x28
    2870:	a9 a7       	std	Y+41, r26	; 0x29
    2872:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2874:	6f a1       	ldd	r22, Y+39	; 0x27
    2876:	78 a5       	ldd	r23, Y+40	; 0x28
    2878:	89 a5       	ldd	r24, Y+41	; 0x29
    287a:	9a a5       	ldd	r25, Y+42	; 0x2a
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	4a ef       	ldi	r20, 0xFA	; 250
    2882:	54 e4       	ldi	r21, 0x44	; 68
    2884:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	8b a3       	std	Y+35, r24	; 0x23
    288e:	9c a3       	std	Y+36, r25	; 0x24
    2890:	ad a3       	std	Y+37, r26	; 0x25
    2892:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2894:	6b a1       	ldd	r22, Y+35	; 0x23
    2896:	7c a1       	ldd	r23, Y+36	; 0x24
    2898:	8d a1       	ldd	r24, Y+37	; 0x25
    289a:	9e a1       	ldd	r25, Y+38	; 0x26
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e8       	ldi	r20, 0x80	; 128
    28a2:	5f e3       	ldi	r21, 0x3F	; 63
    28a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28a8:	88 23       	and	r24, r24
    28aa:	2c f4       	brge	.+10     	; 0x28b6 <LCD_I2C_SendCommand+0x74>
		__ticks = 1;
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	9a a3       	std	Y+34, r25	; 0x22
    28b2:	89 a3       	std	Y+33, r24	; 0x21
    28b4:	3f c0       	rjmp	.+126    	; 0x2934 <LCD_I2C_SendCommand+0xf2>
	else if (__tmp > 65535)
    28b6:	6b a1       	ldd	r22, Y+35	; 0x23
    28b8:	7c a1       	ldd	r23, Y+36	; 0x24
    28ba:	8d a1       	ldd	r24, Y+37	; 0x25
    28bc:	9e a1       	ldd	r25, Y+38	; 0x26
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	3f ef       	ldi	r19, 0xFF	; 255
    28c2:	4f e7       	ldi	r20, 0x7F	; 127
    28c4:	57 e4       	ldi	r21, 0x47	; 71
    28c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28ca:	18 16       	cp	r1, r24
    28cc:	4c f5       	brge	.+82     	; 0x2920 <LCD_I2C_SendCommand+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ce:	6f a1       	ldd	r22, Y+39	; 0x27
    28d0:	78 a5       	ldd	r23, Y+40	; 0x28
    28d2:	89 a5       	ldd	r24, Y+41	; 0x29
    28d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e2       	ldi	r20, 0x20	; 32
    28dc:	51 e4       	ldi	r21, 0x41	; 65
    28de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	9a a3       	std	Y+34, r25	; 0x22
    28f4:	89 a3       	std	Y+33, r24	; 0x21
    28f6:	0f c0       	rjmp	.+30     	; 0x2916 <LCD_I2C_SendCommand+0xd4>
    28f8:	88 ec       	ldi	r24, 0xC8	; 200
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	98 a3       	std	Y+32, r25	; 0x20
    28fe:	8f 8f       	std	Y+31, r24	; 0x1f
    2900:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2902:	98 a1       	ldd	r25, Y+32	; 0x20
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <LCD_I2C_SendCommand+0xc2>
    2908:	98 a3       	std	Y+32, r25	; 0x20
    290a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290c:	89 a1       	ldd	r24, Y+33	; 0x21
    290e:	9a a1       	ldd	r25, Y+34	; 0x22
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	9a a3       	std	Y+34, r25	; 0x22
    2914:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2916:	89 a1       	ldd	r24, Y+33	; 0x21
    2918:	9a a1       	ldd	r25, Y+34	; 0x22
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	69 f7       	brne	.-38     	; 0x28f8 <LCD_I2C_SendCommand+0xb6>
    291e:	14 c0       	rjmp	.+40     	; 0x2948 <LCD_I2C_SendCommand+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2920:	6b a1       	ldd	r22, Y+35	; 0x23
    2922:	7c a1       	ldd	r23, Y+36	; 0x24
    2924:	8d a1       	ldd	r24, Y+37	; 0x25
    2926:	9e a1       	ldd	r25, Y+38	; 0x26
    2928:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	9a a3       	std	Y+34, r25	; 0x22
    2932:	89 a3       	std	Y+33, r24	; 0x21
    2934:	89 a1       	ldd	r24, Y+33	; 0x21
    2936:	9a a1       	ldd	r25, Y+34	; 0x22
    2938:	9e 8f       	std	Y+30, r25	; 0x1e
    293a:	8d 8f       	std	Y+29, r24	; 0x1d
    293c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    293e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f1 f7       	brne	.-4      	; 0x2940 <LCD_I2C_SendCommand+0xfe>
    2944:	9e 8f       	std	Y+30, r25	; 0x1e
    2946:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	I2C_Master_send_data(LCD_I2C_Command);
    2948:	85 e0       	ldi	r24, 0x05	; 5
    294a:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a8 ec       	ldi	r26, 0xC8	; 200
    2954:	b2 e4       	ldi	r27, 0x42	; 66
    2956:	89 8f       	std	Y+25, r24	; 0x19
    2958:	9a 8f       	std	Y+26, r25	; 0x1a
    295a:	ab 8f       	std	Y+27, r26	; 0x1b
    295c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295e:	69 8d       	ldd	r22, Y+25	; 0x19
    2960:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2962:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2964:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	4a ef       	ldi	r20, 0xFA	; 250
    296c:	54 e4       	ldi	r21, 0x44	; 68
    296e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	8d 8b       	std	Y+21, r24	; 0x15
    2978:	9e 8b       	std	Y+22, r25	; 0x16
    297a:	af 8b       	std	Y+23, r26	; 0x17
    297c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    297e:	6d 89       	ldd	r22, Y+21	; 0x15
    2980:	7e 89       	ldd	r23, Y+22	; 0x16
    2982:	8f 89       	ldd	r24, Y+23	; 0x17
    2984:	98 8d       	ldd	r25, Y+24	; 0x18
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2992:	88 23       	and	r24, r24
    2994:	2c f4       	brge	.+10     	; 0x29a0 <LCD_I2C_SendCommand+0x15e>
		__ticks = 1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9c 8b       	std	Y+20, r25	; 0x14
    299c:	8b 8b       	std	Y+19, r24	; 0x13
    299e:	3f c0       	rjmp	.+126    	; 0x2a1e <LCD_I2C_SendCommand+0x1dc>
	else if (__tmp > 65535)
    29a0:	6d 89       	ldd	r22, Y+21	; 0x15
    29a2:	7e 89       	ldd	r23, Y+22	; 0x16
    29a4:	8f 89       	ldd	r24, Y+23	; 0x17
    29a6:	98 8d       	ldd	r25, Y+24	; 0x18
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	3f ef       	ldi	r19, 0xFF	; 255
    29ac:	4f e7       	ldi	r20, 0x7F	; 127
    29ae:	57 e4       	ldi	r21, 0x47	; 71
    29b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29b4:	18 16       	cp	r1, r24
    29b6:	4c f5       	brge	.+82     	; 0x2a0a <LCD_I2C_SendCommand+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b8:	69 8d       	ldd	r22, Y+25	; 0x19
    29ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e2       	ldi	r20, 0x20	; 32
    29c6:	51 e4       	ldi	r21, 0x41	; 65
    29c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	9c 8b       	std	Y+20, r25	; 0x14
    29de:	8b 8b       	std	Y+19, r24	; 0x13
    29e0:	0f c0       	rjmp	.+30     	; 0x2a00 <LCD_I2C_SendCommand+0x1be>
    29e2:	88 ec       	ldi	r24, 0xC8	; 200
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9a 8b       	std	Y+18, r25	; 0x12
    29e8:	89 8b       	std	Y+17, r24	; 0x11
    29ea:	89 89       	ldd	r24, Y+17	; 0x11
    29ec:	9a 89       	ldd	r25, Y+18	; 0x12
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <LCD_I2C_SendCommand+0x1ac>
    29f2:	9a 8b       	std	Y+18, r25	; 0x12
    29f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f6:	8b 89       	ldd	r24, Y+19	; 0x13
    29f8:	9c 89       	ldd	r25, Y+20	; 0x14
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	9c 8b       	std	Y+20, r25	; 0x14
    29fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a00:	8b 89       	ldd	r24, Y+19	; 0x13
    2a02:	9c 89       	ldd	r25, Y+20	; 0x14
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	69 f7       	brne	.-38     	; 0x29e2 <LCD_I2C_SendCommand+0x1a0>
    2a08:	14 c0       	rjmp	.+40     	; 0x2a32 <LCD_I2C_SendCommand+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a10:	98 8d       	ldd	r25, Y+24	; 0x18
    2a12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9c 8b       	std	Y+20, r25	; 0x14
    2a1c:	8b 8b       	std	Y+19, r24	; 0x13
    2a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a20:	9c 89       	ldd	r25, Y+20	; 0x14
    2a22:	98 8b       	std	Y+16, r25	; 0x10
    2a24:	8f 87       	std	Y+15, r24	; 0x0f
    2a26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a28:	98 89       	ldd	r25, Y+16	; 0x10
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <LCD_I2C_SendCommand+0x1e8>
    2a2e:	98 8b       	std	Y+16, r25	; 0x10
    2a30:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);

	I2C_Master_send_data(Copy_u8Command);
    2a32:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a34:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	a0 e2       	ldi	r26, 0x20	; 32
    2a3e:	b1 e4       	ldi	r27, 0x41	; 65
    2a40:	8b 87       	std	Y+11, r24	; 0x0b
    2a42:	9c 87       	std	Y+12, r25	; 0x0c
    2a44:	ad 87       	std	Y+13, r26	; 0x0d
    2a46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	4a ef       	ldi	r20, 0xFA	; 250
    2a56:	54 e4       	ldi	r21, 0x44	; 68
    2a58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	8f 83       	std	Y+7, r24	; 0x07
    2a62:	98 87       	std	Y+8, r25	; 0x08
    2a64:	a9 87       	std	Y+9, r26	; 0x09
    2a66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a68:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6a:	78 85       	ldd	r23, Y+8	; 0x08
    2a6c:	89 85       	ldd	r24, Y+9	; 0x09
    2a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e8       	ldi	r20, 0x80	; 128
    2a76:	5f e3       	ldi	r21, 0x3F	; 63
    2a78:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a7c:	88 23       	and	r24, r24
    2a7e:	2c f4       	brge	.+10     	; 0x2a8a <LCD_I2C_SendCommand+0x248>
		__ticks = 1;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	9e 83       	std	Y+6, r25	; 0x06
    2a86:	8d 83       	std	Y+5, r24	; 0x05
    2a88:	3f c0       	rjmp	.+126    	; 0x2b08 <LCD_I2C_SendCommand+0x2c6>
	else if (__tmp > 65535)
    2a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8c:	78 85       	ldd	r23, Y+8	; 0x08
    2a8e:	89 85       	ldd	r24, Y+9	; 0x09
    2a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	3f ef       	ldi	r19, 0xFF	; 255
    2a96:	4f e7       	ldi	r20, 0x7F	; 127
    2a98:	57 e4       	ldi	r21, 0x47	; 71
    2a9a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a9e:	18 16       	cp	r1, r24
    2aa0:	4c f5       	brge	.+82     	; 0x2af4 <LCD_I2C_SendCommand+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e2       	ldi	r20, 0x20	; 32
    2ab0:	51 e4       	ldi	r21, 0x41	; 65
    2ab2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	bc 01       	movw	r22, r24
    2abc:	cd 01       	movw	r24, r26
    2abe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
    2aca:	0f c0       	rjmp	.+30     	; 0x2aea <LCD_I2C_SendCommand+0x2a8>
    2acc:	88 ec       	ldi	r24, 0xC8	; 200
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	9c 83       	std	Y+4, r25	; 0x04
    2ad2:	8b 83       	std	Y+3, r24	; 0x03
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <LCD_I2C_SendCommand+0x296>
    2adc:	9c 83       	std	Y+4, r25	; 0x04
    2ade:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	9e 83       	std	Y+6, r25	; 0x06
    2ae8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aea:	8d 81       	ldd	r24, Y+5	; 0x05
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	00 97       	sbiw	r24, 0x00	; 0
    2af0:	69 f7       	brne	.-38     	; 0x2acc <LCD_I2C_SendCommand+0x28a>
    2af2:	14 c0       	rjmp	.+40     	; 0x2b1c <LCD_I2C_SendCommand+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af4:	6f 81       	ldd	r22, Y+7	; 0x07
    2af6:	78 85       	ldd	r23, Y+8	; 0x08
    2af8:	89 85       	ldd	r24, Y+9	; 0x09
    2afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	9e 83       	std	Y+6, r25	; 0x06
    2b06:	8d 83       	std	Y+5, r24	; 0x05
    2b08:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0c:	9a 83       	std	Y+2, r25	; 0x02
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	9a 81       	ldd	r25, Y+2	; 0x02
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <LCD_I2C_SendCommand+0x2d2>
    2b18:	9a 83       	std	Y+2, r25	; 0x02
    2b1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	I2C_stop();
    2b1c:	0e 94 42 0c 	call	0x1884	; 0x1884 <I2C_stop>
}
    2b20:	ab 96       	adiw	r28, 0x2b	; 43
    2b22:	0f b6       	in	r0, 0x3f	; 63
    2b24:	f8 94       	cli
    2b26:	de bf       	out	0x3e, r29	; 62
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	cd bf       	out	0x3d, r28	; 61
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	08 95       	ret

00002b32 <LCD_I2C_SendData>:

void LCD_I2C_SendData(u8 Copy_u8Data)
{
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	ab 97       	sbiw	r28, 0x2b	; 43
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	f8 94       	cli
    2b40:	de bf       	out	0x3e, r29	; 62
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	8b a7       	std	Y+43, r24	; 0x2b
	I2C_send_start();
    2b48:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_send_start>
	I2C_select_slave(LCD_I2C_Slave_Address,0);
    2b4c:	85 e0       	ldi	r24, 0x05	; 5
    2b4e:	60 e0       	ldi	r22, 0x00	; 0
    2b50:	0e 94 91 0b 	call	0x1722	; 0x1722 <I2C_select_slave>
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	a8 ec       	ldi	r26, 0xC8	; 200
    2b5a:	b2 e4       	ldi	r27, 0x42	; 66
    2b5c:	8f a3       	std	Y+39, r24	; 0x27
    2b5e:	98 a7       	std	Y+40, r25	; 0x28
    2b60:	a9 a7       	std	Y+41, r26	; 0x29
    2b62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b64:	6f a1       	ldd	r22, Y+39	; 0x27
    2b66:	78 a5       	ldd	r23, Y+40	; 0x28
    2b68:	89 a5       	ldd	r24, Y+41	; 0x29
    2b6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	4a ef       	ldi	r20, 0xFA	; 250
    2b72:	54 e4       	ldi	r21, 0x44	; 68
    2b74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	8b a3       	std	Y+35, r24	; 0x23
    2b7e:	9c a3       	std	Y+36, r25	; 0x24
    2b80:	ad a3       	std	Y+37, r26	; 0x25
    2b82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b84:	6b a1       	ldd	r22, Y+35	; 0x23
    2b86:	7c a1       	ldd	r23, Y+36	; 0x24
    2b88:	8d a1       	ldd	r24, Y+37	; 0x25
    2b8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e8       	ldi	r20, 0x80	; 128
    2b92:	5f e3       	ldi	r21, 0x3F	; 63
    2b94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b98:	88 23       	and	r24, r24
    2b9a:	2c f4       	brge	.+10     	; 0x2ba6 <LCD_I2C_SendData+0x74>
		__ticks = 1;
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	9a a3       	std	Y+34, r25	; 0x22
    2ba2:	89 a3       	std	Y+33, r24	; 0x21
    2ba4:	3f c0       	rjmp	.+126    	; 0x2c24 <LCD_I2C_SendData+0xf2>
	else if (__tmp > 65535)
    2ba6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba8:	7c a1       	ldd	r23, Y+36	; 0x24
    2baa:	8d a1       	ldd	r24, Y+37	; 0x25
    2bac:	9e a1       	ldd	r25, Y+38	; 0x26
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	3f ef       	ldi	r19, 0xFF	; 255
    2bb2:	4f e7       	ldi	r20, 0x7F	; 127
    2bb4:	57 e4       	ldi	r21, 0x47	; 71
    2bb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bba:	18 16       	cp	r1, r24
    2bbc:	4c f5       	brge	.+82     	; 0x2c10 <LCD_I2C_SendData+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbe:	6f a1       	ldd	r22, Y+39	; 0x27
    2bc0:	78 a5       	ldd	r23, Y+40	; 0x28
    2bc2:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e2       	ldi	r20, 0x20	; 32
    2bcc:	51 e4       	ldi	r21, 0x41	; 65
    2bce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	bc 01       	movw	r22, r24
    2bd8:	cd 01       	movw	r24, r26
    2bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	9a a3       	std	Y+34, r25	; 0x22
    2be4:	89 a3       	std	Y+33, r24	; 0x21
    2be6:	0f c0       	rjmp	.+30     	; 0x2c06 <LCD_I2C_SendData+0xd4>
    2be8:	88 ec       	ldi	r24, 0xC8	; 200
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	98 a3       	std	Y+32, r25	; 0x20
    2bee:	8f 8f       	std	Y+31, r24	; 0x1f
    2bf0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bf2:	98 a1       	ldd	r25, Y+32	; 0x20
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <LCD_I2C_SendData+0xc2>
    2bf8:	98 a3       	std	Y+32, r25	; 0x20
    2bfa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfe:	9a a1       	ldd	r25, Y+34	; 0x22
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	9a a3       	std	Y+34, r25	; 0x22
    2c04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c06:	89 a1       	ldd	r24, Y+33	; 0x21
    2c08:	9a a1       	ldd	r25, Y+34	; 0x22
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	69 f7       	brne	.-38     	; 0x2be8 <LCD_I2C_SendData+0xb6>
    2c0e:	14 c0       	rjmp	.+40     	; 0x2c38 <LCD_I2C_SendData+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c10:	6b a1       	ldd	r22, Y+35	; 0x23
    2c12:	7c a1       	ldd	r23, Y+36	; 0x24
    2c14:	8d a1       	ldd	r24, Y+37	; 0x25
    2c16:	9e a1       	ldd	r25, Y+38	; 0x26
    2c18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	9a a3       	std	Y+34, r25	; 0x22
    2c22:	89 a3       	std	Y+33, r24	; 0x21
    2c24:	89 a1       	ldd	r24, Y+33	; 0x21
    2c26:	9a a1       	ldd	r25, Y+34	; 0x22
    2c28:	9e 8f       	std	Y+30, r25	; 0x1e
    2c2a:	8d 8f       	std	Y+29, r24	; 0x1d
    2c2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	f1 f7       	brne	.-4      	; 0x2c30 <LCD_I2C_SendData+0xfe>
    2c34:	9e 8f       	std	Y+30, r25	; 0x1e
    2c36:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);

	I2C_Master_send_data(LCD_I2C_Data);
    2c38:	86 e0       	ldi	r24, 0x06	; 6
    2c3a:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	a8 ec       	ldi	r26, 0xC8	; 200
    2c44:	b2 e4       	ldi	r27, 0x42	; 66
    2c46:	89 8f       	std	Y+25, r24	; 0x19
    2c48:	9a 8f       	std	Y+26, r25	; 0x1a
    2c4a:	ab 8f       	std	Y+27, r26	; 0x1b
    2c4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	4a ef       	ldi	r20, 0xFA	; 250
    2c5c:	54 e4       	ldi	r21, 0x44	; 68
    2c5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	8d 8b       	std	Y+21, r24	; 0x15
    2c68:	9e 8b       	std	Y+22, r25	; 0x16
    2c6a:	af 8b       	std	Y+23, r26	; 0x17
    2c6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c70:	7e 89       	ldd	r23, Y+22	; 0x16
    2c72:	8f 89       	ldd	r24, Y+23	; 0x17
    2c74:	98 8d       	ldd	r25, Y+24	; 0x18
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e8       	ldi	r20, 0x80	; 128
    2c7c:	5f e3       	ldi	r21, 0x3F	; 63
    2c7e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c82:	88 23       	and	r24, r24
    2c84:	2c f4       	brge	.+10     	; 0x2c90 <LCD_I2C_SendData+0x15e>
		__ticks = 1;
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	9c 8b       	std	Y+20, r25	; 0x14
    2c8c:	8b 8b       	std	Y+19, r24	; 0x13
    2c8e:	3f c0       	rjmp	.+126    	; 0x2d0e <LCD_I2C_SendData+0x1dc>
	else if (__tmp > 65535)
    2c90:	6d 89       	ldd	r22, Y+21	; 0x15
    2c92:	7e 89       	ldd	r23, Y+22	; 0x16
    2c94:	8f 89       	ldd	r24, Y+23	; 0x17
    2c96:	98 8d       	ldd	r25, Y+24	; 0x18
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	3f ef       	ldi	r19, 0xFF	; 255
    2c9c:	4f e7       	ldi	r20, 0x7F	; 127
    2c9e:	57 e4       	ldi	r21, 0x47	; 71
    2ca0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ca4:	18 16       	cp	r1, r24
    2ca6:	4c f5       	brge	.+82     	; 0x2cfa <LCD_I2C_SendData+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca8:	69 8d       	ldd	r22, Y+25	; 0x19
    2caa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e2       	ldi	r20, 0x20	; 32
    2cb6:	51 e4       	ldi	r21, 0x41	; 65
    2cb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	bc 01       	movw	r22, r24
    2cc2:	cd 01       	movw	r24, r26
    2cc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	9c 8b       	std	Y+20, r25	; 0x14
    2cce:	8b 8b       	std	Y+19, r24	; 0x13
    2cd0:	0f c0       	rjmp	.+30     	; 0x2cf0 <LCD_I2C_SendData+0x1be>
    2cd2:	88 ec       	ldi	r24, 0xC8	; 200
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	9a 8b       	std	Y+18, r25	; 0x12
    2cd8:	89 8b       	std	Y+17, r24	; 0x11
    2cda:	89 89       	ldd	r24, Y+17	; 0x11
    2cdc:	9a 89       	ldd	r25, Y+18	; 0x12
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	f1 f7       	brne	.-4      	; 0x2cde <LCD_I2C_SendData+0x1ac>
    2ce2:	9a 8b       	std	Y+18, r25	; 0x12
    2ce4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	9c 8b       	std	Y+20, r25	; 0x14
    2cee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf4:	00 97       	sbiw	r24, 0x00	; 0
    2cf6:	69 f7       	brne	.-38     	; 0x2cd2 <LCD_I2C_SendData+0x1a0>
    2cf8:	14 c0       	rjmp	.+40     	; 0x2d22 <LCD_I2C_SendData+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    2cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    2d00:	98 8d       	ldd	r25, Y+24	; 0x18
    2d02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	9c 8b       	std	Y+20, r25	; 0x14
    2d0c:	8b 8b       	std	Y+19, r24	; 0x13
    2d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d10:	9c 89       	ldd	r25, Y+20	; 0x14
    2d12:	98 8b       	std	Y+16, r25	; 0x10
    2d14:	8f 87       	std	Y+15, r24	; 0x0f
    2d16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d18:	98 89       	ldd	r25, Y+16	; 0x10
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	f1 f7       	brne	.-4      	; 0x2d1a <LCD_I2C_SendData+0x1e8>
    2d1e:	98 8b       	std	Y+16, r25	; 0x10
    2d20:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);

	I2C_Master_send_data(Copy_u8Data);
    2d22:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d24:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	a0 e2       	ldi	r26, 0x20	; 32
    2d2e:	b1 e4       	ldi	r27, 0x41	; 65
    2d30:	8b 87       	std	Y+11, r24	; 0x0b
    2d32:	9c 87       	std	Y+12, r25	; 0x0c
    2d34:	ad 87       	std	Y+13, r26	; 0x0d
    2d36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	4a ef       	ldi	r20, 0xFA	; 250
    2d46:	54 e4       	ldi	r21, 0x44	; 68
    2d48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	8f 83       	std	Y+7, r24	; 0x07
    2d52:	98 87       	std	Y+8, r25	; 0x08
    2d54:	a9 87       	std	Y+9, r26	; 0x09
    2d56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d58:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5a:	78 85       	ldd	r23, Y+8	; 0x08
    2d5c:	89 85       	ldd	r24, Y+9	; 0x09
    2d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e8       	ldi	r20, 0x80	; 128
    2d66:	5f e3       	ldi	r21, 0x3F	; 63
    2d68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d6c:	88 23       	and	r24, r24
    2d6e:	2c f4       	brge	.+10     	; 0x2d7a <LCD_I2C_SendData+0x248>
		__ticks = 1;
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9e 83       	std	Y+6, r25	; 0x06
    2d76:	8d 83       	std	Y+5, r24	; 0x05
    2d78:	3f c0       	rjmp	.+126    	; 0x2df8 <LCD_I2C_SendData+0x2c6>
	else if (__tmp > 65535)
    2d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7c:	78 85       	ldd	r23, Y+8	; 0x08
    2d7e:	89 85       	ldd	r24, Y+9	; 0x09
    2d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	3f ef       	ldi	r19, 0xFF	; 255
    2d86:	4f e7       	ldi	r20, 0x7F	; 127
    2d88:	57 e4       	ldi	r21, 0x47	; 71
    2d8a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d8e:	18 16       	cp	r1, r24
    2d90:	4c f5       	brge	.+82     	; 0x2de4 <LCD_I2C_SendData+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e2       	ldi	r20, 0x20	; 32
    2da0:	51 e4       	ldi	r21, 0x41	; 65
    2da2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
    2dba:	0f c0       	rjmp	.+30     	; 0x2dda <LCD_I2C_SendData+0x2a8>
    2dbc:	88 ec       	ldi	r24, 0xC8	; 200
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	9c 83       	std	Y+4, r25	; 0x04
    2dc2:	8b 83       	std	Y+3, r24	; 0x03
    2dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <LCD_I2C_SendData+0x296>
    2dcc:	9c 83       	std	Y+4, r25	; 0x04
    2dce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dda:	8d 81       	ldd	r24, Y+5	; 0x05
    2ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	69 f7       	brne	.-38     	; 0x2dbc <LCD_I2C_SendData+0x28a>
    2de2:	14 c0       	rjmp	.+40     	; 0x2e0c <LCD_I2C_SendData+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de4:	6f 81       	ldd	r22, Y+7	; 0x07
    2de6:	78 85       	ldd	r23, Y+8	; 0x08
    2de8:	89 85       	ldd	r24, Y+9	; 0x09
    2dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9e 83       	std	Y+6, r25	; 0x06
    2df6:	8d 83       	std	Y+5, r24	; 0x05
    2df8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfc:	9a 83       	std	Y+2, r25	; 0x02
    2dfe:	89 83       	std	Y+1, r24	; 0x01
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	9a 81       	ldd	r25, Y+2	; 0x02
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <LCD_I2C_SendData+0x2d2>
    2e08:	9a 83       	std	Y+2, r25	; 0x02
    2e0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	I2C_stop();
    2e0c:	0e 94 42 0c 	call	0x1884	; 0x1884 <I2C_stop>
}
    2e10:	ab 96       	adiw	r28, 0x2b	; 43
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	f8 94       	cli
    2e16:	de bf       	out	0x3e, r29	; 62
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	cd bf       	out	0x3d, r28	; 61
    2e1c:	cf 91       	pop	r28
    2e1e:	df 91       	pop	r29
    2e20:	08 95       	ret

00002e22 <LCD_I2C_SendFloat>:

void LCD_I2C_SendFloat(f32 Copy_u8Fnum){
    2e22:	ef 92       	push	r14
    2e24:	ff 92       	push	r15
    2e26:	0f 93       	push	r16
    2e28:	1f 93       	push	r17
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	c2 56       	subi	r28, 0x62	; 98
    2e34:	d0 40       	sbci	r29, 0x00	; 0
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	f8 94       	cli
    2e3a:	de bf       	out	0x3e, r29	; 62
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	cd bf       	out	0x3d, r28	; 61
    2e40:	fe 01       	movw	r30, r28
    2e42:	e3 5a       	subi	r30, 0xA3	; 163
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	60 83       	st	Z, r22
    2e48:	71 83       	std	Z+1, r23	; 0x01
    2e4a:	82 83       	std	Z+2, r24	; 0x02
    2e4c:	93 83       	std	Z+3, r25	; 0x03
	// For checking if the number is negative or not
	u8 signindicate = (Copy_u8Fnum<0)? 1:0;
    2e4e:	fe 01       	movw	r30, r28
    2e50:	e3 5a       	subi	r30, 0xA3	; 163
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	80 81       	ld	r24, Z
    2e56:	91 81       	ldd	r25, Z+1	; 0x01
    2e58:	a2 81       	ldd	r26, Z+2	; 0x02
    2e5a:	b3 81       	ldd	r27, Z+3	; 0x03
    2e5c:	9e 01       	movw	r18, r28
    2e5e:	24 5a       	subi	r18, 0xA4	; 164
    2e60:	3f 4f       	sbci	r19, 0xFF	; 255
    2e62:	a3 96       	adiw	r28, 0x23	; 35
    2e64:	3f af       	std	Y+63, r19	; 0x3f
    2e66:	2e af       	std	Y+62, r18	; 0x3e
    2e68:	a3 97       	sbiw	r28, 0x23	; 35
    2e6a:	a3 96       	adiw	r28, 0x23	; 35
    2e6c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e6e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e70:	a3 97       	sbiw	r28, 0x23	; 35
    2e72:	10 82       	st	Z, r1
    2e74:	bc 01       	movw	r22, r24
    2e76:	cd 01       	movw	r24, r26
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	40 e0       	ldi	r20, 0x00	; 0
    2e7e:	50 e0       	ldi	r21, 0x00	; 0
    2e80:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e84:	88 23       	and	r24, r24
    2e86:	34 f4       	brge	.+12     	; 0x2e94 <LCD_I2C_SendFloat+0x72>
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	a3 96       	adiw	r28, 0x23	; 35
    2e8c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e8e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e90:	a3 97       	sbiw	r28, 0x23	; 35
    2e92:	80 83       	st	Z, r24

	if(signindicate){
    2e94:	fe 01       	movw	r30, r28
    2e96:	e4 5a       	subi	r30, 0xA4	; 164
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	80 81       	ld	r24, Z
    2e9c:	88 23       	and	r24, r24
    2e9e:	79 f0       	breq	.+30     	; 0x2ebe <LCD_I2C_SendFloat+0x9c>

		Copy_u8Fnum = Copy_u8Fnum*-1;
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e3 5a       	subi	r30, 0xA3	; 163
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	80 81       	ld	r24, Z
    2ea8:	91 81       	ldd	r25, Z+1	; 0x01
    2eaa:	a2 81       	ldd	r26, Z+2	; 0x02
    2eac:	b3 81       	ldd	r27, Z+3	; 0x03
    2eae:	b0 58       	subi	r27, 0x80	; 128
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	e3 5a       	subi	r30, 0xA3	; 163
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	80 83       	st	Z, r24
    2eb8:	91 83       	std	Z+1, r25	; 0x01
    2eba:	a2 83       	std	Z+2, r26	; 0x02
    2ebc:	b3 83       	std	Z+3, r27	; 0x03
	}
	u8 LSB_Int=(u8)Copy_u8Fnum;
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e3 5a       	subi	r30, 0xA3	; 163
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	80 81       	ld	r24, Z
    2ec6:	91 81       	ldd	r25, Z+1	; 0x01
    2ec8:	a2 81       	ldd	r26, Z+2	; 0x02
    2eca:	b3 81       	ldd	r27, Z+3	; 0x03
    2ecc:	8e 01       	movw	r16, r28
    2ece:	05 5a       	subi	r16, 0xA5	; 165
    2ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed2:	bc 01       	movw	r22, r24
    2ed4:	cd 01       	movw	r24, r26
    2ed6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	f8 01       	movw	r30, r16
    2ee0:	80 83       	st	Z, r24
	u8 MSB_Int= (u8)(((s16)Copy_u8Fnum)>>8);
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	e3 5a       	subi	r30, 0xA3	; 163
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	80 81       	ld	r24, Z
    2eea:	91 81       	ldd	r25, Z+1	; 0x01
    2eec:	a2 81       	ldd	r26, Z+2	; 0x02
    2eee:	b3 81       	ldd	r27, Z+3	; 0x03
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	cd 01       	movw	r24, r26
    2ef4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	89 2f       	mov	r24, r25
    2efe:	99 0f       	add	r25, r25
    2f00:	99 0b       	sbc	r25, r25
    2f02:	fe 01       	movw	r30, r28
    2f04:	e6 5a       	subi	r30, 0xA6	; 166
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	80 83       	st	Z, r24

	u8 _Float=(u8) ((Copy_u8Fnum - (s32)Copy_u8Fnum) *100);
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	e3 5a       	subi	r30, 0xA3	; 163
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	e0 80       	ld	r14, Z
    2f12:	f1 80       	ldd	r15, Z+1	; 0x01
    2f14:	02 81       	ldd	r16, Z+2	; 0x02
    2f16:	13 81       	ldd	r17, Z+3	; 0x03
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e3 5a       	subi	r30, 0xA3	; 163
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	80 81       	ld	r24, Z
    2f20:	91 81       	ldd	r25, Z+1	; 0x01
    2f22:	a2 81       	ldd	r26, Z+2	; 0x02
    2f24:	b3 81       	ldd	r27, Z+3	; 0x03
    2f26:	bc 01       	movw	r22, r24
    2f28:	cd 01       	movw	r24, r26
    2f2a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	bc 01       	movw	r22, r24
    2f34:	cd 01       	movw	r24, r26
    2f36:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    2f3a:	9b 01       	movw	r18, r22
    2f3c:	ac 01       	movw	r20, r24
    2f3e:	c8 01       	movw	r24, r16
    2f40:	b7 01       	movw	r22, r14
    2f42:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	bc 01       	movw	r22, r24
    2f4c:	cd 01       	movw	r24, r26
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	48 ec       	ldi	r20, 0xC8	; 200
    2f54:	52 e4       	ldi	r21, 0x42	; 66
    2f56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	8e 01       	movw	r16, r28
    2f60:	07 5a       	subi	r16, 0xA7	; 167
    2f62:	1f 4f       	sbci	r17, 0xFF	; 255
    2f64:	bc 01       	movw	r22, r24
    2f66:	cd 01       	movw	r24, r26
    2f68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	f8 01       	movw	r30, r16
    2f72:	80 83       	st	Z, r24


	long mantissa = *( long * ) & Copy_u8Fnum;
    2f74:	fe 01       	movw	r30, r28
    2f76:	e3 5a       	subi	r30, 0xA3	; 163
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	9e 01       	movw	r18, r28
    2f7c:	2b 5a       	subi	r18, 0xAB	; 171
    2f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f80:	80 81       	ld	r24, Z
    2f82:	91 81       	ldd	r25, Z+1	; 0x01
    2f84:	a2 81       	ldd	r26, Z+2	; 0x02
    2f86:	b3 81       	ldd	r27, Z+3	; 0x03
    2f88:	f9 01       	movw	r30, r18
    2f8a:	80 83       	st	Z, r24
    2f8c:	91 83       	std	Z+1, r25	; 0x01
    2f8e:	a2 83       	std	Z+2, r26	; 0x02
    2f90:	b3 83       	std	Z+3, r27	; 0x03
	// NOT SURE OF THE MASKING
	//mantissa = mantissa & 0x000007FFFFF;
	// Start the transmission
	I2C_send_start();
    2f92:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_send_start>
	I2C_select_slave(LCD_I2C_Slave_Address,0);
    2f96:	85 e0       	ldi	r24, 0x05	; 5
    2f98:	60 e0       	ldi	r22, 0x00	; 0
    2f9a:	0e 94 91 0b 	call	0x1722	; 0x1722 <I2C_select_slave>
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	ef 5a       	subi	r30, 0xAF	; 175
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	a8 e4       	ldi	r26, 0x48	; 72
    2faa:	b3 e4       	ldi	r27, 0x43	; 67
    2fac:	80 83       	st	Z, r24
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	a2 83       	std	Z+2, r26	; 0x02
    2fb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb4:	8e 01       	movw	r16, r28
    2fb6:	03 5b       	subi	r16, 0xB3	; 179
    2fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fba:	fe 01       	movw	r30, r28
    2fbc:	ef 5a       	subi	r30, 0xAF	; 175
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	60 81       	ld	r22, Z
    2fc2:	71 81       	ldd	r23, Z+1	; 0x01
    2fc4:	82 81       	ldd	r24, Z+2	; 0x02
    2fc6:	93 81       	ldd	r25, Z+3	; 0x03
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	4a ef       	ldi	r20, 0xFA	; 250
    2fce:	54 e4       	ldi	r21, 0x44	; 68
    2fd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	f8 01       	movw	r30, r16
    2fda:	80 83       	st	Z, r24
    2fdc:	91 83       	std	Z+1, r25	; 0x01
    2fde:	a2 83       	std	Z+2, r26	; 0x02
    2fe0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	e3 5b       	subi	r30, 0xB3	; 179
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	60 81       	ld	r22, Z
    2fea:	71 81       	ldd	r23, Z+1	; 0x01
    2fec:	82 81       	ldd	r24, Z+2	; 0x02
    2fee:	93 81       	ldd	r25, Z+3	; 0x03
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e8       	ldi	r20, 0x80	; 128
    2ff6:	5f e3       	ldi	r21, 0x3F	; 63
    2ff8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ffc:	88 23       	and	r24, r24
    2ffe:	44 f4       	brge	.+16     	; 0x3010 <LCD_I2C_SendFloat+0x1ee>
		__ticks = 1;
    3000:	fe 01       	movw	r30, r28
    3002:	e5 5b       	subi	r30, 0xB5	; 181
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	91 83       	std	Z+1, r25	; 0x01
    300c:	80 83       	st	Z, r24
    300e:	64 c0       	rjmp	.+200    	; 0x30d8 <LCD_I2C_SendFloat+0x2b6>
	else if (__tmp > 65535)
    3010:	fe 01       	movw	r30, r28
    3012:	e3 5b       	subi	r30, 0xB3	; 179
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	60 81       	ld	r22, Z
    3018:	71 81       	ldd	r23, Z+1	; 0x01
    301a:	82 81       	ldd	r24, Z+2	; 0x02
    301c:	93 81       	ldd	r25, Z+3	; 0x03
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	3f ef       	ldi	r19, 0xFF	; 255
    3022:	4f e7       	ldi	r20, 0x7F	; 127
    3024:	57 e4       	ldi	r21, 0x47	; 71
    3026:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    302a:	18 16       	cp	r1, r24
    302c:	0c f0       	brlt	.+2      	; 0x3030 <LCD_I2C_SendFloat+0x20e>
    302e:	43 c0       	rjmp	.+134    	; 0x30b6 <LCD_I2C_SendFloat+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3030:	fe 01       	movw	r30, r28
    3032:	ef 5a       	subi	r30, 0xAF	; 175
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	60 81       	ld	r22, Z
    3038:	71 81       	ldd	r23, Z+1	; 0x01
    303a:	82 81       	ldd	r24, Z+2	; 0x02
    303c:	93 81       	ldd	r25, Z+3	; 0x03
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	40 e2       	ldi	r20, 0x20	; 32
    3044:	51 e4       	ldi	r21, 0x41	; 65
    3046:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	8e 01       	movw	r16, r28
    3050:	05 5b       	subi	r16, 0xB5	; 181
    3052:	1f 4f       	sbci	r17, 0xFF	; 255
    3054:	bc 01       	movw	r22, r24
    3056:	cd 01       	movw	r24, r26
    3058:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	f8 01       	movw	r30, r16
    3062:	91 83       	std	Z+1, r25	; 0x01
    3064:	80 83       	st	Z, r24
    3066:	1f c0       	rjmp	.+62     	; 0x30a6 <LCD_I2C_SendFloat+0x284>
    3068:	fe 01       	movw	r30, r28
    306a:	e7 5b       	subi	r30, 0xB7	; 183
    306c:	ff 4f       	sbci	r31, 0xFF	; 255
    306e:	88 ec       	ldi	r24, 0xC8	; 200
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	91 83       	std	Z+1, r25	; 0x01
    3074:	80 83       	st	Z, r24
    3076:	fe 01       	movw	r30, r28
    3078:	e7 5b       	subi	r30, 0xB7	; 183
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	80 81       	ld	r24, Z
    307e:	91 81       	ldd	r25, Z+1	; 0x01
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	f1 f7       	brne	.-4      	; 0x3080 <LCD_I2C_SendFloat+0x25e>
    3084:	fe 01       	movw	r30, r28
    3086:	e7 5b       	subi	r30, 0xB7	; 183
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	91 83       	std	Z+1, r25	; 0x01
    308c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308e:	de 01       	movw	r26, r28
    3090:	a5 5b       	subi	r26, 0xB5	; 181
    3092:	bf 4f       	sbci	r27, 0xFF	; 255
    3094:	fe 01       	movw	r30, r28
    3096:	e5 5b       	subi	r30, 0xB5	; 181
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	80 81       	ld	r24, Z
    309c:	91 81       	ldd	r25, Z+1	; 0x01
    309e:	01 97       	sbiw	r24, 0x01	; 1
    30a0:	11 96       	adiw	r26, 0x01	; 1
    30a2:	9c 93       	st	X, r25
    30a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a6:	fe 01       	movw	r30, r28
    30a8:	e5 5b       	subi	r30, 0xB5	; 181
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	80 81       	ld	r24, Z
    30ae:	91 81       	ldd	r25, Z+1	; 0x01
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	d1 f6       	brne	.-76     	; 0x3068 <LCD_I2C_SendFloat+0x246>
    30b4:	28 c0       	rjmp	.+80     	; 0x3106 <LCD_I2C_SendFloat+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b6:	8e 01       	movw	r16, r28
    30b8:	05 5b       	subi	r16, 0xB5	; 181
    30ba:	1f 4f       	sbci	r17, 0xFF	; 255
    30bc:	fe 01       	movw	r30, r28
    30be:	e3 5b       	subi	r30, 0xB3	; 179
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	60 81       	ld	r22, Z
    30c4:	71 81       	ldd	r23, Z+1	; 0x01
    30c6:	82 81       	ldd	r24, Z+2	; 0x02
    30c8:	93 81       	ldd	r25, Z+3	; 0x03
    30ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	f8 01       	movw	r30, r16
    30d4:	91 83       	std	Z+1, r25	; 0x01
    30d6:	80 83       	st	Z, r24
    30d8:	de 01       	movw	r26, r28
    30da:	a9 5b       	subi	r26, 0xB9	; 185
    30dc:	bf 4f       	sbci	r27, 0xFF	; 255
    30de:	fe 01       	movw	r30, r28
    30e0:	e5 5b       	subi	r30, 0xB5	; 181
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 81       	ld	r24, Z
    30e6:	91 81       	ldd	r25, Z+1	; 0x01
    30e8:	11 96       	adiw	r26, 0x01	; 1
    30ea:	9c 93       	st	X, r25
    30ec:	8e 93       	st	-X, r24
    30ee:	fe 01       	movw	r30, r28
    30f0:	e9 5b       	subi	r30, 0xB9	; 185
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	80 81       	ld	r24, Z
    30f6:	91 81       	ldd	r25, Z+1	; 0x01
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	f1 f7       	brne	.-4      	; 0x30f8 <LCD_I2C_SendFloat+0x2d6>
    30fc:	fe 01       	movw	r30, r28
    30fe:	e9 5b       	subi	r30, 0xB9	; 185
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	91 83       	std	Z+1, r25	; 0x01
    3104:	80 83       	st	Z, r24
	_delay_ms(200);

	if(signindicate){
    3106:	fe 01       	movw	r30, r28
    3108:	e4 5a       	subi	r30, 0xA4	; 164
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	80 81       	ld	r24, Z
    310e:	88 23       	and	r24, r24
    3110:	21 f0       	breq	.+8      	; 0x311a <LCD_I2C_SendFloat+0x2f8>
		// The number is -ve
		I2C_Master_send_data(LCD_I2C_SignedFloat);
    3112:	83 e0       	ldi	r24, 0x03	; 3
    3114:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    3118:	03 c0       	rjmp	.+6      	; 0x3120 <LCD_I2C_SendFloat+0x2fe>
	}
	else{
		// The number is +ve
		I2C_Master_send_data(LCD_I2C_UnsignedFloat);
    311a:	82 e0       	ldi	r24, 0x02	; 2
    311c:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    3120:	fe 01       	movw	r30, r28
    3122:	ed 5b       	subi	r30, 0xBD	; 189
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	a8 e4       	ldi	r26, 0x48	; 72
    312c:	b3 e4       	ldi	r27, 0x43	; 67
    312e:	80 83       	st	Z, r24
    3130:	91 83       	std	Z+1, r25	; 0x01
    3132:	a2 83       	std	Z+2, r26	; 0x02
    3134:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3136:	8e 01       	movw	r16, r28
    3138:	01 5c       	subi	r16, 0xC1	; 193
    313a:	1f 4f       	sbci	r17, 0xFF	; 255
    313c:	fe 01       	movw	r30, r28
    313e:	ed 5b       	subi	r30, 0xBD	; 189
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	60 81       	ld	r22, Z
    3144:	71 81       	ldd	r23, Z+1	; 0x01
    3146:	82 81       	ldd	r24, Z+2	; 0x02
    3148:	93 81       	ldd	r25, Z+3	; 0x03
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	4a ef       	ldi	r20, 0xFA	; 250
    3150:	54 e4       	ldi	r21, 0x44	; 68
    3152:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	f8 01       	movw	r30, r16
    315c:	80 83       	st	Z, r24
    315e:	91 83       	std	Z+1, r25	; 0x01
    3160:	a2 83       	std	Z+2, r26	; 0x02
    3162:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3164:	fe 01       	movw	r30, r28
    3166:	ff 96       	adiw	r30, 0x3f	; 63
    3168:	60 81       	ld	r22, Z
    316a:	71 81       	ldd	r23, Z+1	; 0x01
    316c:	82 81       	ldd	r24, Z+2	; 0x02
    316e:	93 81       	ldd	r25, Z+3	; 0x03
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e8       	ldi	r20, 0x80	; 128
    3176:	5f e3       	ldi	r21, 0x3F	; 63
    3178:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    317c:	88 23       	and	r24, r24
    317e:	2c f4       	brge	.+10     	; 0x318a <LCD_I2C_SendFloat+0x368>
		__ticks = 1;
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	9e af       	std	Y+62, r25	; 0x3e
    3186:	8d af       	std	Y+61, r24	; 0x3d
    3188:	46 c0       	rjmp	.+140    	; 0x3216 <LCD_I2C_SendFloat+0x3f4>
	else if (__tmp > 65535)
    318a:	fe 01       	movw	r30, r28
    318c:	ff 96       	adiw	r30, 0x3f	; 63
    318e:	60 81       	ld	r22, Z
    3190:	71 81       	ldd	r23, Z+1	; 0x01
    3192:	82 81       	ldd	r24, Z+2	; 0x02
    3194:	93 81       	ldd	r25, Z+3	; 0x03
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	3f ef       	ldi	r19, 0xFF	; 255
    319a:	4f e7       	ldi	r20, 0x7F	; 127
    319c:	57 e4       	ldi	r21, 0x47	; 71
    319e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    31a2:	18 16       	cp	r1, r24
    31a4:	64 f5       	brge	.+88     	; 0x31fe <LCD_I2C_SendFloat+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a6:	fe 01       	movw	r30, r28
    31a8:	ed 5b       	subi	r30, 0xBD	; 189
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	60 81       	ld	r22, Z
    31ae:	71 81       	ldd	r23, Z+1	; 0x01
    31b0:	82 81       	ldd	r24, Z+2	; 0x02
    31b2:	93 81       	ldd	r25, Z+3	; 0x03
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e2       	ldi	r20, 0x20	; 32
    31ba:	51 e4       	ldi	r21, 0x41	; 65
    31bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	9e af       	std	Y+62, r25	; 0x3e
    31d2:	8d af       	std	Y+61, r24	; 0x3d
    31d4:	0f c0       	rjmp	.+30     	; 0x31f4 <LCD_I2C_SendFloat+0x3d2>
    31d6:	88 ec       	ldi	r24, 0xC8	; 200
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	9c af       	std	Y+60, r25	; 0x3c
    31dc:	8b af       	std	Y+59, r24	; 0x3b
    31de:	8b ad       	ldd	r24, Y+59	; 0x3b
    31e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <LCD_I2C_SendFloat+0x3c0>
    31e6:	9c af       	std	Y+60, r25	; 0x3c
    31e8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    31ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	9e af       	std	Y+62, r25	; 0x3e
    31f2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    31f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	69 f7       	brne	.-38     	; 0x31d6 <LCD_I2C_SendFloat+0x3b4>
    31fc:	16 c0       	rjmp	.+44     	; 0x322a <LCD_I2C_SendFloat+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fe:	fe 01       	movw	r30, r28
    3200:	ff 96       	adiw	r30, 0x3f	; 63
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	93 81       	ldd	r25, Z+3	; 0x03
    320a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9e af       	std	Y+62, r25	; 0x3e
    3214:	8d af       	std	Y+61, r24	; 0x3d
    3216:	8d ad       	ldd	r24, Y+61	; 0x3d
    3218:	9e ad       	ldd	r25, Y+62	; 0x3e
    321a:	9a af       	std	Y+58, r25	; 0x3a
    321c:	89 af       	std	Y+57, r24	; 0x39
    321e:	89 ad       	ldd	r24, Y+57	; 0x39
    3220:	9a ad       	ldd	r25, Y+58	; 0x3a
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <LCD_I2C_SendFloat+0x400>
    3226:	9a af       	std	Y+58, r25	; 0x3a
    3228:	89 af       	std	Y+57, r24	; 0x39
	}

	_delay_ms(200);
	I2C_Master_send_data(LSB_Int);
    322a:	fe 01       	movw	r30, r28
    322c:	e5 5a       	subi	r30, 0xA5	; 165
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	80 81       	ld	r24, Z
    3232:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>

	if (MSB_Int==0)
    3236:	fe 01       	movw	r30, r28
    3238:	e6 5a       	subi	r30, 0xA6	; 166
    323a:	ff 4f       	sbci	r31, 0xFF	; 255
    323c:	80 81       	ld	r24, Z
    323e:	88 23       	and	r24, r24
    3240:	09 f4       	brne	.+2      	; 0x3244 <LCD_I2C_SendFloat+0x422>
    3242:	78 c0       	rjmp	.+240    	; 0x3334 <LCD_I2C_SendFloat+0x512>
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	a8 e4       	ldi	r26, 0x48	; 72
    324a:	b3 e4       	ldi	r27, 0x43	; 67
    324c:	8d ab       	std	Y+53, r24	; 0x35
    324e:	9e ab       	std	Y+54, r25	; 0x36
    3250:	af ab       	std	Y+55, r26	; 0x37
    3252:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3254:	6d a9       	ldd	r22, Y+53	; 0x35
    3256:	7e a9       	ldd	r23, Y+54	; 0x36
    3258:	8f a9       	ldd	r24, Y+55	; 0x37
    325a:	98 ad       	ldd	r25, Y+56	; 0x38
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	4a ef       	ldi	r20, 0xFA	; 250
    3262:	54 e4       	ldi	r21, 0x44	; 68
    3264:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	89 ab       	std	Y+49, r24	; 0x31
    326e:	9a ab       	std	Y+50, r25	; 0x32
    3270:	ab ab       	std	Y+51, r26	; 0x33
    3272:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3274:	69 a9       	ldd	r22, Y+49	; 0x31
    3276:	7a a9       	ldd	r23, Y+50	; 0x32
    3278:	8b a9       	ldd	r24, Y+51	; 0x33
    327a:	9c a9       	ldd	r25, Y+52	; 0x34
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	40 e8       	ldi	r20, 0x80	; 128
    3282:	5f e3       	ldi	r21, 0x3F	; 63
    3284:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3288:	88 23       	and	r24, r24
    328a:	2c f4       	brge	.+10     	; 0x3296 <LCD_I2C_SendFloat+0x474>
		__ticks = 1;
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	98 ab       	std	Y+48, r25	; 0x30
    3292:	8f a7       	std	Y+47, r24	; 0x2f
    3294:	3f c0       	rjmp	.+126    	; 0x3314 <LCD_I2C_SendFloat+0x4f2>
	else if (__tmp > 65535)
    3296:	69 a9       	ldd	r22, Y+49	; 0x31
    3298:	7a a9       	ldd	r23, Y+50	; 0x32
    329a:	8b a9       	ldd	r24, Y+51	; 0x33
    329c:	9c a9       	ldd	r25, Y+52	; 0x34
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	3f ef       	ldi	r19, 0xFF	; 255
    32a2:	4f e7       	ldi	r20, 0x7F	; 127
    32a4:	57 e4       	ldi	r21, 0x47	; 71
    32a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    32aa:	18 16       	cp	r1, r24
    32ac:	4c f5       	brge	.+82     	; 0x3300 <LCD_I2C_SendFloat+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ae:	6d a9       	ldd	r22, Y+53	; 0x35
    32b0:	7e a9       	ldd	r23, Y+54	; 0x36
    32b2:	8f a9       	ldd	r24, Y+55	; 0x37
    32b4:	98 ad       	ldd	r25, Y+56	; 0x38
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	40 e2       	ldi	r20, 0x20	; 32
    32bc:	51 e4       	ldi	r21, 0x41	; 65
    32be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	bc 01       	movw	r22, r24
    32c8:	cd 01       	movw	r24, r26
    32ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	98 ab       	std	Y+48, r25	; 0x30
    32d4:	8f a7       	std	Y+47, r24	; 0x2f
    32d6:	0f c0       	rjmp	.+30     	; 0x32f6 <LCD_I2C_SendFloat+0x4d4>
    32d8:	88 ec       	ldi	r24, 0xC8	; 200
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	9e a7       	std	Y+46, r25	; 0x2e
    32de:	8d a7       	std	Y+45, r24	; 0x2d
    32e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    32e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <LCD_I2C_SendFloat+0x4c2>
    32e8:	9e a7       	std	Y+46, r25	; 0x2e
    32ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ee:	98 a9       	ldd	r25, Y+48	; 0x30
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	98 ab       	std	Y+48, r25	; 0x30
    32f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    32f8:	98 a9       	ldd	r25, Y+48	; 0x30
    32fa:	00 97       	sbiw	r24, 0x00	; 0
    32fc:	69 f7       	brne	.-38     	; 0x32d8 <LCD_I2C_SendFloat+0x4b6>
    32fe:	14 c0       	rjmp	.+40     	; 0x3328 <LCD_I2C_SendFloat+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3300:	69 a9       	ldd	r22, Y+49	; 0x31
    3302:	7a a9       	ldd	r23, Y+50	; 0x32
    3304:	8b a9       	ldd	r24, Y+51	; 0x33
    3306:	9c a9       	ldd	r25, Y+52	; 0x34
    3308:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	98 ab       	std	Y+48, r25	; 0x30
    3312:	8f a7       	std	Y+47, r24	; 0x2f
    3314:	8f a5       	ldd	r24, Y+47	; 0x2f
    3316:	98 a9       	ldd	r25, Y+48	; 0x30
    3318:	9c a7       	std	Y+44, r25	; 0x2c
    331a:	8b a7       	std	Y+43, r24	; 0x2b
    331c:	8b a5       	ldd	r24, Y+43	; 0x2b
    331e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	f1 f7       	brne	.-4      	; 0x3320 <LCD_I2C_SendFloat+0x4fe>
    3324:	9c a7       	std	Y+44, r25	; 0x2c
    3326:	8b a7       	std	Y+43, r24	; 0x2b

	}
	else
	{
		_delay_ms(200);
		I2C_Master_send_data(MSB_Int);
    3328:	fe 01       	movw	r30, r28
    332a:	e6 5a       	subi	r30, 0xA6	; 166
    332c:	ff 4f       	sbci	r31, 0xFF	; 255
    332e:	80 81       	ld	r24, Z
    3330:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    3334:	80 e0       	ldi	r24, 0x00	; 0
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	a8 e4       	ldi	r26, 0x48	; 72
    333a:	b3 e4       	ldi	r27, 0x43	; 67
    333c:	8f a3       	std	Y+39, r24	; 0x27
    333e:	98 a7       	std	Y+40, r25	; 0x28
    3340:	a9 a7       	std	Y+41, r26	; 0x29
    3342:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3344:	6f a1       	ldd	r22, Y+39	; 0x27
    3346:	78 a5       	ldd	r23, Y+40	; 0x28
    3348:	89 a5       	ldd	r24, Y+41	; 0x29
    334a:	9a a5       	ldd	r25, Y+42	; 0x2a
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	4a ef       	ldi	r20, 0xFA	; 250
    3352:	54 e4       	ldi	r21, 0x44	; 68
    3354:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	8b a3       	std	Y+35, r24	; 0x23
    335e:	9c a3       	std	Y+36, r25	; 0x24
    3360:	ad a3       	std	Y+37, r26	; 0x25
    3362:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3364:	6b a1       	ldd	r22, Y+35	; 0x23
    3366:	7c a1       	ldd	r23, Y+36	; 0x24
    3368:	8d a1       	ldd	r24, Y+37	; 0x25
    336a:	9e a1       	ldd	r25, Y+38	; 0x26
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	40 e8       	ldi	r20, 0x80	; 128
    3372:	5f e3       	ldi	r21, 0x3F	; 63
    3374:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3378:	88 23       	and	r24, r24
    337a:	2c f4       	brge	.+10     	; 0x3386 <LCD_I2C_SendFloat+0x564>
		__ticks = 1;
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	9a a3       	std	Y+34, r25	; 0x22
    3382:	89 a3       	std	Y+33, r24	; 0x21
    3384:	3f c0       	rjmp	.+126    	; 0x3404 <LCD_I2C_SendFloat+0x5e2>
	else if (__tmp > 65535)
    3386:	6b a1       	ldd	r22, Y+35	; 0x23
    3388:	7c a1       	ldd	r23, Y+36	; 0x24
    338a:	8d a1       	ldd	r24, Y+37	; 0x25
    338c:	9e a1       	ldd	r25, Y+38	; 0x26
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	3f ef       	ldi	r19, 0xFF	; 255
    3392:	4f e7       	ldi	r20, 0x7F	; 127
    3394:	57 e4       	ldi	r21, 0x47	; 71
    3396:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    339a:	18 16       	cp	r1, r24
    339c:	4c f5       	brge	.+82     	; 0x33f0 <LCD_I2C_SendFloat+0x5ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339e:	6f a1       	ldd	r22, Y+39	; 0x27
    33a0:	78 a5       	ldd	r23, Y+40	; 0x28
    33a2:	89 a5       	ldd	r24, Y+41	; 0x29
    33a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	40 e2       	ldi	r20, 0x20	; 32
    33ac:	51 e4       	ldi	r21, 0x41	; 65
    33ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	bc 01       	movw	r22, r24
    33b8:	cd 01       	movw	r24, r26
    33ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	9a a3       	std	Y+34, r25	; 0x22
    33c4:	89 a3       	std	Y+33, r24	; 0x21
    33c6:	0f c0       	rjmp	.+30     	; 0x33e6 <LCD_I2C_SendFloat+0x5c4>
    33c8:	88 ec       	ldi	r24, 0xC8	; 200
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	98 a3       	std	Y+32, r25	; 0x20
    33ce:	8f 8f       	std	Y+31, r24	; 0x1f
    33d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33d2:	98 a1       	ldd	r25, Y+32	; 0x20
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	f1 f7       	brne	.-4      	; 0x33d4 <LCD_I2C_SendFloat+0x5b2>
    33d8:	98 a3       	std	Y+32, r25	; 0x20
    33da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33dc:	89 a1       	ldd	r24, Y+33	; 0x21
    33de:	9a a1       	ldd	r25, Y+34	; 0x22
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	9a a3       	std	Y+34, r25	; 0x22
    33e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e6:	89 a1       	ldd	r24, Y+33	; 0x21
    33e8:	9a a1       	ldd	r25, Y+34	; 0x22
    33ea:	00 97       	sbiw	r24, 0x00	; 0
    33ec:	69 f7       	brne	.-38     	; 0x33c8 <LCD_I2C_SendFloat+0x5a6>
    33ee:	14 c0       	rjmp	.+40     	; 0x3418 <LCD_I2C_SendFloat+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f0:	6b a1       	ldd	r22, Y+35	; 0x23
    33f2:	7c a1       	ldd	r23, Y+36	; 0x24
    33f4:	8d a1       	ldd	r24, Y+37	; 0x25
    33f6:	9e a1       	ldd	r25, Y+38	; 0x26
    33f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	9a a3       	std	Y+34, r25	; 0x22
    3402:	89 a3       	std	Y+33, r24	; 0x21
    3404:	89 a1       	ldd	r24, Y+33	; 0x21
    3406:	9a a1       	ldd	r25, Y+34	; 0x22
    3408:	9e 8f       	std	Y+30, r25	; 0x1e
    340a:	8d 8f       	std	Y+29, r24	; 0x1d
    340c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    340e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	f1 f7       	brne	.-4      	; 0x3410 <LCD_I2C_SendFloat+0x5ee>
    3414:	9e 8f       	std	Y+30, r25	; 0x1e
    3416:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	_delay_ms(200);
	// Send the floating point
	I2C_Master_send_data('.');
    3418:	8e e2       	ldi	r24, 0x2E	; 46
    341a:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	a8 e4       	ldi	r26, 0x48	; 72
    3424:	b3 e4       	ldi	r27, 0x43	; 67
    3426:	89 8f       	std	Y+25, r24	; 0x19
    3428:	9a 8f       	std	Y+26, r25	; 0x1a
    342a:	ab 8f       	std	Y+27, r26	; 0x1b
    342c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    342e:	69 8d       	ldd	r22, Y+25	; 0x19
    3430:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3432:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3434:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	4a ef       	ldi	r20, 0xFA	; 250
    343c:	54 e4       	ldi	r21, 0x44	; 68
    343e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	8d 8b       	std	Y+21, r24	; 0x15
    3448:	9e 8b       	std	Y+22, r25	; 0x16
    344a:	af 8b       	std	Y+23, r26	; 0x17
    344c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    344e:	6d 89       	ldd	r22, Y+21	; 0x15
    3450:	7e 89       	ldd	r23, Y+22	; 0x16
    3452:	8f 89       	ldd	r24, Y+23	; 0x17
    3454:	98 8d       	ldd	r25, Y+24	; 0x18
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	40 e8       	ldi	r20, 0x80	; 128
    345c:	5f e3       	ldi	r21, 0x3F	; 63
    345e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3462:	88 23       	and	r24, r24
    3464:	2c f4       	brge	.+10     	; 0x3470 <LCD_I2C_SendFloat+0x64e>
		__ticks = 1;
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	9c 8b       	std	Y+20, r25	; 0x14
    346c:	8b 8b       	std	Y+19, r24	; 0x13
    346e:	3f c0       	rjmp	.+126    	; 0x34ee <LCD_I2C_SendFloat+0x6cc>
	else if (__tmp > 65535)
    3470:	6d 89       	ldd	r22, Y+21	; 0x15
    3472:	7e 89       	ldd	r23, Y+22	; 0x16
    3474:	8f 89       	ldd	r24, Y+23	; 0x17
    3476:	98 8d       	ldd	r25, Y+24	; 0x18
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	3f ef       	ldi	r19, 0xFF	; 255
    347c:	4f e7       	ldi	r20, 0x7F	; 127
    347e:	57 e4       	ldi	r21, 0x47	; 71
    3480:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3484:	18 16       	cp	r1, r24
    3486:	4c f5       	brge	.+82     	; 0x34da <LCD_I2C_SendFloat+0x6b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3488:	69 8d       	ldd	r22, Y+25	; 0x19
    348a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    348c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    348e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	40 e2       	ldi	r20, 0x20	; 32
    3496:	51 e4       	ldi	r21, 0x41	; 65
    3498:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	bc 01       	movw	r22, r24
    34a2:	cd 01       	movw	r24, r26
    34a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	9c 8b       	std	Y+20, r25	; 0x14
    34ae:	8b 8b       	std	Y+19, r24	; 0x13
    34b0:	0f c0       	rjmp	.+30     	; 0x34d0 <LCD_I2C_SendFloat+0x6ae>
    34b2:	88 ec       	ldi	r24, 0xC8	; 200
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	9a 8b       	std	Y+18, r25	; 0x12
    34b8:	89 8b       	std	Y+17, r24	; 0x11
    34ba:	89 89       	ldd	r24, Y+17	; 0x11
    34bc:	9a 89       	ldd	r25, Y+18	; 0x12
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	f1 f7       	brne	.-4      	; 0x34be <LCD_I2C_SendFloat+0x69c>
    34c2:	9a 8b       	std	Y+18, r25	; 0x12
    34c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34c6:	8b 89       	ldd	r24, Y+19	; 0x13
    34c8:	9c 89       	ldd	r25, Y+20	; 0x14
    34ca:	01 97       	sbiw	r24, 0x01	; 1
    34cc:	9c 8b       	std	Y+20, r25	; 0x14
    34ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d0:	8b 89       	ldd	r24, Y+19	; 0x13
    34d2:	9c 89       	ldd	r25, Y+20	; 0x14
    34d4:	00 97       	sbiw	r24, 0x00	; 0
    34d6:	69 f7       	brne	.-38     	; 0x34b2 <LCD_I2C_SendFloat+0x690>
    34d8:	14 c0       	rjmp	.+40     	; 0x3502 <LCD_I2C_SendFloat+0x6e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34da:	6d 89       	ldd	r22, Y+21	; 0x15
    34dc:	7e 89       	ldd	r23, Y+22	; 0x16
    34de:	8f 89       	ldd	r24, Y+23	; 0x17
    34e0:	98 8d       	ldd	r25, Y+24	; 0x18
    34e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	9c 8b       	std	Y+20, r25	; 0x14
    34ec:	8b 8b       	std	Y+19, r24	; 0x13
    34ee:	8b 89       	ldd	r24, Y+19	; 0x13
    34f0:	9c 89       	ldd	r25, Y+20	; 0x14
    34f2:	98 8b       	std	Y+16, r25	; 0x10
    34f4:	8f 87       	std	Y+15, r24	; 0x0f
    34f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34f8:	98 89       	ldd	r25, Y+16	; 0x10
    34fa:	01 97       	sbiw	r24, 0x01	; 1
    34fc:	f1 f7       	brne	.-4      	; 0x34fa <LCD_I2C_SendFloat+0x6d8>
    34fe:	98 8b       	std	Y+16, r25	; 0x10
    3500:	8f 87       	std	Y+15, r24	; 0x0f

	// Send the floating number
	_delay_ms(200);


	I2C_Master_send_data(_Float);
    3502:	fe 01       	movw	r30, r28
    3504:	e7 5a       	subi	r30, 0xA7	; 167
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	80 81       	ld	r24, Z
    350a:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	a0 e2       	ldi	r26, 0x20	; 32
    3514:	b1 e4       	ldi	r27, 0x41	; 65
    3516:	8b 87       	std	Y+11, r24	; 0x0b
    3518:	9c 87       	std	Y+12, r25	; 0x0c
    351a:	ad 87       	std	Y+13, r26	; 0x0d
    351c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    351e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3520:	7c 85       	ldd	r23, Y+12	; 0x0c
    3522:	8d 85       	ldd	r24, Y+13	; 0x0d
    3524:	9e 85       	ldd	r25, Y+14	; 0x0e
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	4a ef       	ldi	r20, 0xFA	; 250
    352c:	54 e4       	ldi	r21, 0x44	; 68
    352e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	8f 83       	std	Y+7, r24	; 0x07
    3538:	98 87       	std	Y+8, r25	; 0x08
    353a:	a9 87       	std	Y+9, r26	; 0x09
    353c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    353e:	6f 81       	ldd	r22, Y+7	; 0x07
    3540:	78 85       	ldd	r23, Y+8	; 0x08
    3542:	89 85       	ldd	r24, Y+9	; 0x09
    3544:	9a 85       	ldd	r25, Y+10	; 0x0a
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	40 e8       	ldi	r20, 0x80	; 128
    354c:	5f e3       	ldi	r21, 0x3F	; 63
    354e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3552:	88 23       	and	r24, r24
    3554:	2c f4       	brge	.+10     	; 0x3560 <LCD_I2C_SendFloat+0x73e>
		__ticks = 1;
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	9e 83       	std	Y+6, r25	; 0x06
    355c:	8d 83       	std	Y+5, r24	; 0x05
    355e:	3f c0       	rjmp	.+126    	; 0x35de <LCD_I2C_SendFloat+0x7bc>
	else if (__tmp > 65535)
    3560:	6f 81       	ldd	r22, Y+7	; 0x07
    3562:	78 85       	ldd	r23, Y+8	; 0x08
    3564:	89 85       	ldd	r24, Y+9	; 0x09
    3566:	9a 85       	ldd	r25, Y+10	; 0x0a
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	3f ef       	ldi	r19, 0xFF	; 255
    356c:	4f e7       	ldi	r20, 0x7F	; 127
    356e:	57 e4       	ldi	r21, 0x47	; 71
    3570:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3574:	18 16       	cp	r1, r24
    3576:	4c f5       	brge	.+82     	; 0x35ca <LCD_I2C_SendFloat+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3578:	6b 85       	ldd	r22, Y+11	; 0x0b
    357a:	7c 85       	ldd	r23, Y+12	; 0x0c
    357c:	8d 85       	ldd	r24, Y+13	; 0x0d
    357e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	40 e2       	ldi	r20, 0x20	; 32
    3586:	51 e4       	ldi	r21, 0x41	; 65
    3588:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	bc 01       	movw	r22, r24
    3592:	cd 01       	movw	r24, r26
    3594:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	9e 83       	std	Y+6, r25	; 0x06
    359e:	8d 83       	std	Y+5, r24	; 0x05
    35a0:	0f c0       	rjmp	.+30     	; 0x35c0 <LCD_I2C_SendFloat+0x79e>
    35a2:	88 ec       	ldi	r24, 0xC8	; 200
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	9c 83       	std	Y+4, r25	; 0x04
    35a8:	8b 83       	std	Y+3, r24	; 0x03
    35aa:	8b 81       	ldd	r24, Y+3	; 0x03
    35ac:	9c 81       	ldd	r25, Y+4	; 0x04
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	f1 f7       	brne	.-4      	; 0x35ae <LCD_I2C_SendFloat+0x78c>
    35b2:	9c 83       	std	Y+4, r25	; 0x04
    35b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b6:	8d 81       	ldd	r24, Y+5	; 0x05
    35b8:	9e 81       	ldd	r25, Y+6	; 0x06
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	9e 83       	std	Y+6, r25	; 0x06
    35be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c0:	8d 81       	ldd	r24, Y+5	; 0x05
    35c2:	9e 81       	ldd	r25, Y+6	; 0x06
    35c4:	00 97       	sbiw	r24, 0x00	; 0
    35c6:	69 f7       	brne	.-38     	; 0x35a2 <LCD_I2C_SendFloat+0x780>
    35c8:	14 c0       	rjmp	.+40     	; 0x35f2 <LCD_I2C_SendFloat+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ca:	6f 81       	ldd	r22, Y+7	; 0x07
    35cc:	78 85       	ldd	r23, Y+8	; 0x08
    35ce:	89 85       	ldd	r24, Y+9	; 0x09
    35d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	9e 83       	std	Y+6, r25	; 0x06
    35dc:	8d 83       	std	Y+5, r24	; 0x05
    35de:	8d 81       	ldd	r24, Y+5	; 0x05
    35e0:	9e 81       	ldd	r25, Y+6	; 0x06
    35e2:	9a 83       	std	Y+2, r25	; 0x02
    35e4:	89 83       	std	Y+1, r24	; 0x01
    35e6:	89 81       	ldd	r24, Y+1	; 0x01
    35e8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ea:	01 97       	sbiw	r24, 0x01	; 1
    35ec:	f1 f7       	brne	.-4      	; 0x35ea <LCD_I2C_SendFloat+0x7c8>
    35ee:	9a 83       	std	Y+2, r25	; 0x02
    35f0:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
	I2C_stop();
    35f2:	0e 94 42 0c 	call	0x1884	; 0x1884 <I2C_stop>
}
    35f6:	ce 59       	subi	r28, 0x9E	; 158
    35f8:	df 4f       	sbci	r29, 0xFF	; 255
    35fa:	0f b6       	in	r0, 0x3f	; 63
    35fc:	f8 94       	cli
    35fe:	de bf       	out	0x3e, r29	; 62
    3600:	0f be       	out	0x3f, r0	; 63
    3602:	cd bf       	out	0x3d, r28	; 61
    3604:	cf 91       	pop	r28
    3606:	df 91       	pop	r29
    3608:	1f 91       	pop	r17
    360a:	0f 91       	pop	r16
    360c:	ff 90       	pop	r15
    360e:	ef 90       	pop	r14
    3610:	08 95       	ret

00003612 <LCD_I2C_SetPosition>:


void LCD_I2C_SetPosition(u8 Copy_U8PosX,u8 Copy_U8PosY){
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	00 d0       	rcall	.+0      	; 0x3618 <LCD_I2C_SetPosition+0x6>
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
    361c:	89 83       	std	Y+1, r24	; 0x01
    361e:	6a 83       	std	Y+2, r22	; 0x02
	if(0== Copy_U8PosX)
		LCD_send_command(128+Copy_U8PosY);
	else if(1==Copy_U8PosX)
		LCD_send_command(128+64+Copy_U8PosY);
*/
	LCD_I2C_SendCommand(0x80 | (Copy_U8PosX & 0x3F) | (GET_BIT(Copy_U8PosY,0) << 6));
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	8f 73       	andi	r24, 0x3F	; 63
    3624:	28 2f       	mov	r18, r24
    3626:	20 68       	ori	r18, 0x80	; 128
    3628:	8a 81       	ldd	r24, Y+2	; 0x02
    362a:	88 2f       	mov	r24, r24
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	81 70       	andi	r24, 0x01	; 1
    3630:	90 70       	andi	r25, 0x00	; 0
    3632:	00 24       	eor	r0, r0
    3634:	96 95       	lsr	r25
    3636:	87 95       	ror	r24
    3638:	07 94       	ror	r0
    363a:	96 95       	lsr	r25
    363c:	87 95       	ror	r24
    363e:	07 94       	ror	r0
    3640:	98 2f       	mov	r25, r24
    3642:	80 2d       	mov	r24, r0
    3644:	82 2b       	or	r24, r18
    3646:	0e 94 21 14 	call	0x2842	; 0x2842 <LCD_I2C_SendCommand>
}
    364a:	0f 90       	pop	r0
    364c:	0f 90       	pop	r0
    364e:	cf 91       	pop	r28
    3650:	df 91       	pop	r29
    3652:	08 95       	ret

00003654 <LCD_I2C_SetCGRAMAdress>:


void LCD_I2C_SetCGRAMAdress(u8 Copy_U8Address){
    3654:	df 93       	push	r29
    3656:	cf 93       	push	r28
    3658:	0f 92       	push	r0
    365a:	cd b7       	in	r28, 0x3d	; 61
    365c:	de b7       	in	r29, 0x3e	; 62
    365e:	89 83       	std	Y+1, r24	; 0x01

	LCD_I2C_SendCommand	(0b01000000 | Copy_U8Address);
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	80 64       	ori	r24, 0x40	; 64
    3664:	0e 94 21 14 	call	0x2842	; 0x2842 <LCD_I2C_SendCommand>

}
    3668:	0f 90       	pop	r0
    366a:	cf 91       	pop	r28
    366c:	df 91       	pop	r29
    366e:	08 95       	ret

00003670 <LCD_I2C_WriteInCGRAM>:


void LCD_I2C_WriteInCGRAM(u8 *Copy_U8ptr)
{
    3670:	0f 93       	push	r16
    3672:	1f 93       	push	r17
    3674:	df 93       	push	r29
    3676:	cf 93       	push	r28
    3678:	cd b7       	in	r28, 0x3d	; 61
    367a:	de b7       	in	r29, 0x3e	; 62
    367c:	c9 54       	subi	r28, 0x49	; 73
    367e:	d0 40       	sbci	r29, 0x00	; 0
    3680:	0f b6       	in	r0, 0x3f	; 63
    3682:	f8 94       	cli
    3684:	de bf       	out	0x3e, r29	; 62
    3686:	0f be       	out	0x3f, r0	; 63
    3688:	cd bf       	out	0x3d, r28	; 61
    368a:	fe 01       	movw	r30, r28
    368c:	e8 5b       	subi	r30, 0xB8	; 184
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	91 83       	std	Z+1, r25	; 0x01
    3692:	80 83       	st	Z, r24
//CGRAMData

	u8 i = 0;
    3694:	fe 01       	movw	r30, r28
    3696:	e9 5b       	subi	r30, 0xB9	; 185
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	10 82       	st	Z, r1
    369c:	fe 01       	movw	r30, r28
    369e:	ed 5b       	subi	r30, 0xBD	; 189
    36a0:	ff 4f       	sbci	r31, 0xFF	; 255
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	a0 e2       	ldi	r26, 0x20	; 32
    36a8:	b2 e4       	ldi	r27, 0x42	; 66
    36aa:	80 83       	st	Z, r24
    36ac:	91 83       	std	Z+1, r25	; 0x01
    36ae:	a2 83       	std	Z+2, r26	; 0x02
    36b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b2:	8e 01       	movw	r16, r28
    36b4:	01 5c       	subi	r16, 0xC1	; 193
    36b6:	1f 4f       	sbci	r17, 0xFF	; 255
    36b8:	fe 01       	movw	r30, r28
    36ba:	ed 5b       	subi	r30, 0xBD	; 189
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	60 81       	ld	r22, Z
    36c0:	71 81       	ldd	r23, Z+1	; 0x01
    36c2:	82 81       	ldd	r24, Z+2	; 0x02
    36c4:	93 81       	ldd	r25, Z+3	; 0x03
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	4a ef       	ldi	r20, 0xFA	; 250
    36cc:	54 e4       	ldi	r21, 0x44	; 68
    36ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	f8 01       	movw	r30, r16
    36d8:	80 83       	st	Z, r24
    36da:	91 83       	std	Z+1, r25	; 0x01
    36dc:	a2 83       	std	Z+2, r26	; 0x02
    36de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36e0:	fe 01       	movw	r30, r28
    36e2:	ff 96       	adiw	r30, 0x3f	; 63
    36e4:	60 81       	ld	r22, Z
    36e6:	71 81       	ldd	r23, Z+1	; 0x01
    36e8:	82 81       	ldd	r24, Z+2	; 0x02
    36ea:	93 81       	ldd	r25, Z+3	; 0x03
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	40 e8       	ldi	r20, 0x80	; 128
    36f2:	5f e3       	ldi	r21, 0x3F	; 63
    36f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    36f8:	88 23       	and	r24, r24
    36fa:	2c f4       	brge	.+10     	; 0x3706 <LCD_I2C_WriteInCGRAM+0x96>
		__ticks = 1;
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	9e af       	std	Y+62, r25	; 0x3e
    3702:	8d af       	std	Y+61, r24	; 0x3d
    3704:	46 c0       	rjmp	.+140    	; 0x3792 <LCD_I2C_WriteInCGRAM+0x122>
	else if (__tmp > 65535)
    3706:	fe 01       	movw	r30, r28
    3708:	ff 96       	adiw	r30, 0x3f	; 63
    370a:	60 81       	ld	r22, Z
    370c:	71 81       	ldd	r23, Z+1	; 0x01
    370e:	82 81       	ldd	r24, Z+2	; 0x02
    3710:	93 81       	ldd	r25, Z+3	; 0x03
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	3f ef       	ldi	r19, 0xFF	; 255
    3716:	4f e7       	ldi	r20, 0x7F	; 127
    3718:	57 e4       	ldi	r21, 0x47	; 71
    371a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    371e:	18 16       	cp	r1, r24
    3720:	64 f5       	brge	.+88     	; 0x377a <LCD_I2C_WriteInCGRAM+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3722:	fe 01       	movw	r30, r28
    3724:	ed 5b       	subi	r30, 0xBD	; 189
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	60 81       	ld	r22, Z
    372a:	71 81       	ldd	r23, Z+1	; 0x01
    372c:	82 81       	ldd	r24, Z+2	; 0x02
    372e:	93 81       	ldd	r25, Z+3	; 0x03
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	40 e2       	ldi	r20, 0x20	; 32
    3736:	51 e4       	ldi	r21, 0x41	; 65
    3738:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	bc 01       	movw	r22, r24
    3742:	cd 01       	movw	r24, r26
    3744:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	9e af       	std	Y+62, r25	; 0x3e
    374e:	8d af       	std	Y+61, r24	; 0x3d
    3750:	0f c0       	rjmp	.+30     	; 0x3770 <LCD_I2C_WriteInCGRAM+0x100>
    3752:	88 ec       	ldi	r24, 0xC8	; 200
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	9c af       	std	Y+60, r25	; 0x3c
    3758:	8b af       	std	Y+59, r24	; 0x3b
    375a:	8b ad       	ldd	r24, Y+59	; 0x3b
    375c:	9c ad       	ldd	r25, Y+60	; 0x3c
    375e:	01 97       	sbiw	r24, 0x01	; 1
    3760:	f1 f7       	brne	.-4      	; 0x375e <LCD_I2C_WriteInCGRAM+0xee>
    3762:	9c af       	std	Y+60, r25	; 0x3c
    3764:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3766:	8d ad       	ldd	r24, Y+61	; 0x3d
    3768:	9e ad       	ldd	r25, Y+62	; 0x3e
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	9e af       	std	Y+62, r25	; 0x3e
    376e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3770:	8d ad       	ldd	r24, Y+61	; 0x3d
    3772:	9e ad       	ldd	r25, Y+62	; 0x3e
    3774:	00 97       	sbiw	r24, 0x00	; 0
    3776:	69 f7       	brne	.-38     	; 0x3752 <LCD_I2C_WriteInCGRAM+0xe2>
    3778:	16 c0       	rjmp	.+44     	; 0x37a6 <LCD_I2C_WriteInCGRAM+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    377a:	fe 01       	movw	r30, r28
    377c:	ff 96       	adiw	r30, 0x3f	; 63
    377e:	60 81       	ld	r22, Z
    3780:	71 81       	ldd	r23, Z+1	; 0x01
    3782:	82 81       	ldd	r24, Z+2	; 0x02
    3784:	93 81       	ldd	r25, Z+3	; 0x03
    3786:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	9e af       	std	Y+62, r25	; 0x3e
    3790:	8d af       	std	Y+61, r24	; 0x3d
    3792:	8d ad       	ldd	r24, Y+61	; 0x3d
    3794:	9e ad       	ldd	r25, Y+62	; 0x3e
    3796:	9a af       	std	Y+58, r25	; 0x3a
    3798:	89 af       	std	Y+57, r24	; 0x39
    379a:	89 ad       	ldd	r24, Y+57	; 0x39
    379c:	9a ad       	ldd	r25, Y+58	; 0x3a
    379e:	01 97       	sbiw	r24, 0x01	; 1
    37a0:	f1 f7       	brne	.-4      	; 0x379e <LCD_I2C_WriteInCGRAM+0x12e>
    37a2:	9a af       	std	Y+58, r25	; 0x3a
    37a4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);
	I2C_master_init();
    37a6:	0e 94 4d 0c 	call	0x189a	; 0x189a <I2C_master_init>
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	a0 ef       	ldi	r26, 0xF0	; 240
    37b0:	b2 e4       	ldi	r27, 0x42	; 66
    37b2:	8d ab       	std	Y+53, r24	; 0x35
    37b4:	9e ab       	std	Y+54, r25	; 0x36
    37b6:	af ab       	std	Y+55, r26	; 0x37
    37b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ba:	6d a9       	ldd	r22, Y+53	; 0x35
    37bc:	7e a9       	ldd	r23, Y+54	; 0x36
    37be:	8f a9       	ldd	r24, Y+55	; 0x37
    37c0:	98 ad       	ldd	r25, Y+56	; 0x38
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	4a ef       	ldi	r20, 0xFA	; 250
    37c8:	54 e4       	ldi	r21, 0x44	; 68
    37ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	89 ab       	std	Y+49, r24	; 0x31
    37d4:	9a ab       	std	Y+50, r25	; 0x32
    37d6:	ab ab       	std	Y+51, r26	; 0x33
    37d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37da:	69 a9       	ldd	r22, Y+49	; 0x31
    37dc:	7a a9       	ldd	r23, Y+50	; 0x32
    37de:	8b a9       	ldd	r24, Y+51	; 0x33
    37e0:	9c a9       	ldd	r25, Y+52	; 0x34
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	40 e8       	ldi	r20, 0x80	; 128
    37e8:	5f e3       	ldi	r21, 0x3F	; 63
    37ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    37ee:	88 23       	and	r24, r24
    37f0:	2c f4       	brge	.+10     	; 0x37fc <LCD_I2C_WriteInCGRAM+0x18c>
		__ticks = 1;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	98 ab       	std	Y+48, r25	; 0x30
    37f8:	8f a7       	std	Y+47, r24	; 0x2f
    37fa:	3f c0       	rjmp	.+126    	; 0x387a <LCD_I2C_WriteInCGRAM+0x20a>
	else if (__tmp > 65535)
    37fc:	69 a9       	ldd	r22, Y+49	; 0x31
    37fe:	7a a9       	ldd	r23, Y+50	; 0x32
    3800:	8b a9       	ldd	r24, Y+51	; 0x33
    3802:	9c a9       	ldd	r25, Y+52	; 0x34
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	3f ef       	ldi	r19, 0xFF	; 255
    3808:	4f e7       	ldi	r20, 0x7F	; 127
    380a:	57 e4       	ldi	r21, 0x47	; 71
    380c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3810:	18 16       	cp	r1, r24
    3812:	4c f5       	brge	.+82     	; 0x3866 <LCD_I2C_WriteInCGRAM+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3814:	6d a9       	ldd	r22, Y+53	; 0x35
    3816:	7e a9       	ldd	r23, Y+54	; 0x36
    3818:	8f a9       	ldd	r24, Y+55	; 0x37
    381a:	98 ad       	ldd	r25, Y+56	; 0x38
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e2       	ldi	r20, 0x20	; 32
    3822:	51 e4       	ldi	r21, 0x41	; 65
    3824:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	98 ab       	std	Y+48, r25	; 0x30
    383a:	8f a7       	std	Y+47, r24	; 0x2f
    383c:	0f c0       	rjmp	.+30     	; 0x385c <LCD_I2C_WriteInCGRAM+0x1ec>
    383e:	88 ec       	ldi	r24, 0xC8	; 200
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	9e a7       	std	Y+46, r25	; 0x2e
    3844:	8d a7       	std	Y+45, r24	; 0x2d
    3846:	8d a5       	ldd	r24, Y+45	; 0x2d
    3848:	9e a5       	ldd	r25, Y+46	; 0x2e
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	f1 f7       	brne	.-4      	; 0x384a <LCD_I2C_WriteInCGRAM+0x1da>
    384e:	9e a7       	std	Y+46, r25	; 0x2e
    3850:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3852:	8f a5       	ldd	r24, Y+47	; 0x2f
    3854:	98 a9       	ldd	r25, Y+48	; 0x30
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	98 ab       	std	Y+48, r25	; 0x30
    385a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    385c:	8f a5       	ldd	r24, Y+47	; 0x2f
    385e:	98 a9       	ldd	r25, Y+48	; 0x30
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	69 f7       	brne	.-38     	; 0x383e <LCD_I2C_WriteInCGRAM+0x1ce>
    3864:	14 c0       	rjmp	.+40     	; 0x388e <LCD_I2C_WriteInCGRAM+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3866:	69 a9       	ldd	r22, Y+49	; 0x31
    3868:	7a a9       	ldd	r23, Y+50	; 0x32
    386a:	8b a9       	ldd	r24, Y+51	; 0x33
    386c:	9c a9       	ldd	r25, Y+52	; 0x34
    386e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	98 ab       	std	Y+48, r25	; 0x30
    3878:	8f a7       	std	Y+47, r24	; 0x2f
    387a:	8f a5       	ldd	r24, Y+47	; 0x2f
    387c:	98 a9       	ldd	r25, Y+48	; 0x30
    387e:	9c a7       	std	Y+44, r25	; 0x2c
    3880:	8b a7       	std	Y+43, r24	; 0x2b
    3882:	8b a5       	ldd	r24, Y+43	; 0x2b
    3884:	9c a5       	ldd	r25, Y+44	; 0x2c
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <LCD_I2C_WriteInCGRAM+0x216>
    388a:	9c a7       	std	Y+44, r25	; 0x2c
    388c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(120);
	I2C_send_start();
    388e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_send_start>
	I2C_select_slave(LCD_I2C_Slave_Address,0);
    3892:	85 e0       	ldi	r24, 0x05	; 5
    3894:	60 e0       	ldi	r22, 0x00	; 0
    3896:	0e 94 91 0b 	call	0x1722	; 0x1722 <I2C_select_slave>
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	a8 ec       	ldi	r26, 0xC8	; 200
    38a0:	b2 e4       	ldi	r27, 0x42	; 66
    38a2:	8f a3       	std	Y+39, r24	; 0x27
    38a4:	98 a7       	std	Y+40, r25	; 0x28
    38a6:	a9 a7       	std	Y+41, r26	; 0x29
    38a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38aa:	6f a1       	ldd	r22, Y+39	; 0x27
    38ac:	78 a5       	ldd	r23, Y+40	; 0x28
    38ae:	89 a5       	ldd	r24, Y+41	; 0x29
    38b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	4a ef       	ldi	r20, 0xFA	; 250
    38b8:	54 e4       	ldi	r21, 0x44	; 68
    38ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	8b a3       	std	Y+35, r24	; 0x23
    38c4:	9c a3       	std	Y+36, r25	; 0x24
    38c6:	ad a3       	std	Y+37, r26	; 0x25
    38c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38ca:	6b a1       	ldd	r22, Y+35	; 0x23
    38cc:	7c a1       	ldd	r23, Y+36	; 0x24
    38ce:	8d a1       	ldd	r24, Y+37	; 0x25
    38d0:	9e a1       	ldd	r25, Y+38	; 0x26
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	40 e8       	ldi	r20, 0x80	; 128
    38d8:	5f e3       	ldi	r21, 0x3F	; 63
    38da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    38de:	88 23       	and	r24, r24
    38e0:	2c f4       	brge	.+10     	; 0x38ec <LCD_I2C_WriteInCGRAM+0x27c>
		__ticks = 1;
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	9a a3       	std	Y+34, r25	; 0x22
    38e8:	89 a3       	std	Y+33, r24	; 0x21
    38ea:	3f c0       	rjmp	.+126    	; 0x396a <LCD_I2C_WriteInCGRAM+0x2fa>
	else if (__tmp > 65535)
    38ec:	6b a1       	ldd	r22, Y+35	; 0x23
    38ee:	7c a1       	ldd	r23, Y+36	; 0x24
    38f0:	8d a1       	ldd	r24, Y+37	; 0x25
    38f2:	9e a1       	ldd	r25, Y+38	; 0x26
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	3f ef       	ldi	r19, 0xFF	; 255
    38f8:	4f e7       	ldi	r20, 0x7F	; 127
    38fa:	57 e4       	ldi	r21, 0x47	; 71
    38fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3900:	18 16       	cp	r1, r24
    3902:	4c f5       	brge	.+82     	; 0x3956 <LCD_I2C_WriteInCGRAM+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3904:	6f a1       	ldd	r22, Y+39	; 0x27
    3906:	78 a5       	ldd	r23, Y+40	; 0x28
    3908:	89 a5       	ldd	r24, Y+41	; 0x29
    390a:	9a a5       	ldd	r25, Y+42	; 0x2a
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	40 e2       	ldi	r20, 0x20	; 32
    3912:	51 e4       	ldi	r21, 0x41	; 65
    3914:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3918:	dc 01       	movw	r26, r24
    391a:	cb 01       	movw	r24, r22
    391c:	bc 01       	movw	r22, r24
    391e:	cd 01       	movw	r24, r26
    3920:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	9a a3       	std	Y+34, r25	; 0x22
    392a:	89 a3       	std	Y+33, r24	; 0x21
    392c:	0f c0       	rjmp	.+30     	; 0x394c <LCD_I2C_WriteInCGRAM+0x2dc>
    392e:	88 ec       	ldi	r24, 0xC8	; 200
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	98 a3       	std	Y+32, r25	; 0x20
    3934:	8f 8f       	std	Y+31, r24	; 0x1f
    3936:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3938:	98 a1       	ldd	r25, Y+32	; 0x20
    393a:	01 97       	sbiw	r24, 0x01	; 1
    393c:	f1 f7       	brne	.-4      	; 0x393a <LCD_I2C_WriteInCGRAM+0x2ca>
    393e:	98 a3       	std	Y+32, r25	; 0x20
    3940:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3942:	89 a1       	ldd	r24, Y+33	; 0x21
    3944:	9a a1       	ldd	r25, Y+34	; 0x22
    3946:	01 97       	sbiw	r24, 0x01	; 1
    3948:	9a a3       	std	Y+34, r25	; 0x22
    394a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    394c:	89 a1       	ldd	r24, Y+33	; 0x21
    394e:	9a a1       	ldd	r25, Y+34	; 0x22
    3950:	00 97       	sbiw	r24, 0x00	; 0
    3952:	69 f7       	brne	.-38     	; 0x392e <LCD_I2C_WriteInCGRAM+0x2be>
    3954:	14 c0       	rjmp	.+40     	; 0x397e <LCD_I2C_WriteInCGRAM+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3956:	6b a1       	ldd	r22, Y+35	; 0x23
    3958:	7c a1       	ldd	r23, Y+36	; 0x24
    395a:	8d a1       	ldd	r24, Y+37	; 0x25
    395c:	9e a1       	ldd	r25, Y+38	; 0x26
    395e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	9a a3       	std	Y+34, r25	; 0x22
    3968:	89 a3       	std	Y+33, r24	; 0x21
    396a:	89 a1       	ldd	r24, Y+33	; 0x21
    396c:	9a a1       	ldd	r25, Y+34	; 0x22
    396e:	9e 8f       	std	Y+30, r25	; 0x1e
    3970:	8d 8f       	std	Y+29, r24	; 0x1d
    3972:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3974:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	f1 f7       	brne	.-4      	; 0x3976 <LCD_I2C_WriteInCGRAM+0x306>
    397a:	9e 8f       	std	Y+30, r25	; 0x1e
    397c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	I2C_Master_send_data(LCD_I2C_CGRAMData);
    397e:	87 e0       	ldi	r24, 0x07	; 7
    3980:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>

	for(i = 0; i<8;i++){
    3984:	fe 01       	movw	r30, r28
    3986:	e9 5b       	subi	r30, 0xB9	; 185
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	10 82       	st	Z, r1
    398c:	8c c0       	rjmp	.+280    	; 0x3aa6 <LCD_I2C_WriteInCGRAM+0x436>
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	a8 ec       	ldi	r26, 0xC8	; 200
    3994:	b2 e4       	ldi	r27, 0x42	; 66
    3996:	89 8f       	std	Y+25, r24	; 0x19
    3998:	9a 8f       	std	Y+26, r25	; 0x1a
    399a:	ab 8f       	std	Y+27, r26	; 0x1b
    399c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    399e:	69 8d       	ldd	r22, Y+25	; 0x19
    39a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	4a ef       	ldi	r20, 0xFA	; 250
    39ac:	54 e4       	ldi	r21, 0x44	; 68
    39ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	8d 8b       	std	Y+21, r24	; 0x15
    39b8:	9e 8b       	std	Y+22, r25	; 0x16
    39ba:	af 8b       	std	Y+23, r26	; 0x17
    39bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39be:	6d 89       	ldd	r22, Y+21	; 0x15
    39c0:	7e 89       	ldd	r23, Y+22	; 0x16
    39c2:	8f 89       	ldd	r24, Y+23	; 0x17
    39c4:	98 8d       	ldd	r25, Y+24	; 0x18
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	40 e8       	ldi	r20, 0x80	; 128
    39cc:	5f e3       	ldi	r21, 0x3F	; 63
    39ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    39d2:	88 23       	and	r24, r24
    39d4:	2c f4       	brge	.+10     	; 0x39e0 <LCD_I2C_WriteInCGRAM+0x370>
		__ticks = 1;
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	9c 8b       	std	Y+20, r25	; 0x14
    39dc:	8b 8b       	std	Y+19, r24	; 0x13
    39de:	3f c0       	rjmp	.+126    	; 0x3a5e <LCD_I2C_WriteInCGRAM+0x3ee>
	else if (__tmp > 65535)
    39e0:	6d 89       	ldd	r22, Y+21	; 0x15
    39e2:	7e 89       	ldd	r23, Y+22	; 0x16
    39e4:	8f 89       	ldd	r24, Y+23	; 0x17
    39e6:	98 8d       	ldd	r25, Y+24	; 0x18
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	3f ef       	ldi	r19, 0xFF	; 255
    39ec:	4f e7       	ldi	r20, 0x7F	; 127
    39ee:	57 e4       	ldi	r21, 0x47	; 71
    39f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    39f4:	18 16       	cp	r1, r24
    39f6:	4c f5       	brge	.+82     	; 0x3a4a <LCD_I2C_WriteInCGRAM+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f8:	69 8d       	ldd	r22, Y+25	; 0x19
    39fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	40 e2       	ldi	r20, 0x20	; 32
    3a06:	51 e4       	ldi	r21, 0x41	; 65
    3a08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	bc 01       	movw	r22, r24
    3a12:	cd 01       	movw	r24, r26
    3a14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	9c 8b       	std	Y+20, r25	; 0x14
    3a1e:	8b 8b       	std	Y+19, r24	; 0x13
    3a20:	0f c0       	rjmp	.+30     	; 0x3a40 <LCD_I2C_WriteInCGRAM+0x3d0>
    3a22:	88 ec       	ldi	r24, 0xC8	; 200
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	9a 8b       	std	Y+18, r25	; 0x12
    3a28:	89 8b       	std	Y+17, r24	; 0x11
    3a2a:	89 89       	ldd	r24, Y+17	; 0x11
    3a2c:	9a 89       	ldd	r25, Y+18	; 0x12
    3a2e:	01 97       	sbiw	r24, 0x01	; 1
    3a30:	f1 f7       	brne	.-4      	; 0x3a2e <LCD_I2C_WriteInCGRAM+0x3be>
    3a32:	9a 8b       	std	Y+18, r25	; 0x12
    3a34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a36:	8b 89       	ldd	r24, Y+19	; 0x13
    3a38:	9c 89       	ldd	r25, Y+20	; 0x14
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	9c 8b       	std	Y+20, r25	; 0x14
    3a3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a40:	8b 89       	ldd	r24, Y+19	; 0x13
    3a42:	9c 89       	ldd	r25, Y+20	; 0x14
    3a44:	00 97       	sbiw	r24, 0x00	; 0
    3a46:	69 f7       	brne	.-38     	; 0x3a22 <LCD_I2C_WriteInCGRAM+0x3b2>
    3a48:	14 c0       	rjmp	.+40     	; 0x3a72 <LCD_I2C_WriteInCGRAM+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a4a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a4c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a50:	98 8d       	ldd	r25, Y+24	; 0x18
    3a52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a56:	dc 01       	movw	r26, r24
    3a58:	cb 01       	movw	r24, r22
    3a5a:	9c 8b       	std	Y+20, r25	; 0x14
    3a5c:	8b 8b       	std	Y+19, r24	; 0x13
    3a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a60:	9c 89       	ldd	r25, Y+20	; 0x14
    3a62:	98 8b       	std	Y+16, r25	; 0x10
    3a64:	8f 87       	std	Y+15, r24	; 0x0f
    3a66:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a68:	98 89       	ldd	r25, Y+16	; 0x10
    3a6a:	01 97       	sbiw	r24, 0x01	; 1
    3a6c:	f1 f7       	brne	.-4      	; 0x3a6a <LCD_I2C_WriteInCGRAM+0x3fa>
    3a6e:	98 8b       	std	Y+16, r25	; 0x10
    3a70:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		I2C_Master_send_data(Copy_U8ptr[i]);
    3a72:	fe 01       	movw	r30, r28
    3a74:	e9 5b       	subi	r30, 0xB9	; 185
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	80 81       	ld	r24, Z
    3a7a:	28 2f       	mov	r18, r24
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	fe 01       	movw	r30, r28
    3a80:	e8 5b       	subi	r30, 0xB8	; 184
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	80 81       	ld	r24, Z
    3a86:	91 81       	ldd	r25, Z+1	; 0x01
    3a88:	fc 01       	movw	r30, r24
    3a8a:	e2 0f       	add	r30, r18
    3a8c:	f3 1f       	adc	r31, r19
    3a8e:	80 81       	ld	r24, Z
    3a90:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <I2C_Master_send_data>
	I2C_send_start();
	I2C_select_slave(LCD_I2C_Slave_Address,0);
	_delay_ms(100);
	I2C_Master_send_data(LCD_I2C_CGRAMData);

	for(i = 0; i<8;i++){
    3a94:	de 01       	movw	r26, r28
    3a96:	a9 5b       	subi	r26, 0xB9	; 185
    3a98:	bf 4f       	sbci	r27, 0xFF	; 255
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e9 5b       	subi	r30, 0xB9	; 185
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	80 81       	ld	r24, Z
    3aa2:	8f 5f       	subi	r24, 0xFF	; 255
    3aa4:	8c 93       	st	X, r24
    3aa6:	fe 01       	movw	r30, r28
    3aa8:	e9 5b       	subi	r30, 0xB9	; 185
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	80 81       	ld	r24, Z
    3aae:	88 30       	cpi	r24, 0x08	; 8
    3ab0:	08 f4       	brcc	.+2      	; 0x3ab4 <LCD_I2C_WriteInCGRAM+0x444>
    3ab2:	6d cf       	rjmp	.-294    	; 0x398e <LCD_I2C_WriteInCGRAM+0x31e>
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	a0 e2       	ldi	r26, 0x20	; 32
    3aba:	b1 e4       	ldi	r27, 0x41	; 65
    3abc:	8b 87       	std	Y+11, r24	; 0x0b
    3abe:	9c 87       	std	Y+12, r25	; 0x0c
    3ac0:	ad 87       	std	Y+13, r26	; 0x0d
    3ac2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ac6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ac8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	4a ef       	ldi	r20, 0xFA	; 250
    3ad2:	54 e4       	ldi	r21, 0x44	; 68
    3ad4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	8f 83       	std	Y+7, r24	; 0x07
    3ade:	98 87       	std	Y+8, r25	; 0x08
    3ae0:	a9 87       	std	Y+9, r26	; 0x09
    3ae2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae6:	78 85       	ldd	r23, Y+8	; 0x08
    3ae8:	89 85       	ldd	r24, Y+9	; 0x09
    3aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	40 e8       	ldi	r20, 0x80	; 128
    3af2:	5f e3       	ldi	r21, 0x3F	; 63
    3af4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3af8:	88 23       	and	r24, r24
    3afa:	2c f4       	brge	.+10     	; 0x3b06 <LCD_I2C_WriteInCGRAM+0x496>
		__ticks = 1;
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	9e 83       	std	Y+6, r25	; 0x06
    3b02:	8d 83       	std	Y+5, r24	; 0x05
    3b04:	3f c0       	rjmp	.+126    	; 0x3b84 <LCD_I2C_WriteInCGRAM+0x514>
	else if (__tmp > 65535)
    3b06:	6f 81       	ldd	r22, Y+7	; 0x07
    3b08:	78 85       	ldd	r23, Y+8	; 0x08
    3b0a:	89 85       	ldd	r24, Y+9	; 0x09
    3b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	3f ef       	ldi	r19, 0xFF	; 255
    3b12:	4f e7       	ldi	r20, 0x7F	; 127
    3b14:	57 e4       	ldi	r21, 0x47	; 71
    3b16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3b1a:	18 16       	cp	r1, r24
    3b1c:	4c f5       	brge	.+82     	; 0x3b70 <LCD_I2C_WriteInCGRAM+0x500>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	40 e2       	ldi	r20, 0x20	; 32
    3b2c:	51 e4       	ldi	r21, 0x41	; 65
    3b2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b32:	dc 01       	movw	r26, r24
    3b34:	cb 01       	movw	r24, r22
    3b36:	bc 01       	movw	r22, r24
    3b38:	cd 01       	movw	r24, r26
    3b3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	9e 83       	std	Y+6, r25	; 0x06
    3b44:	8d 83       	std	Y+5, r24	; 0x05
    3b46:	0f c0       	rjmp	.+30     	; 0x3b66 <LCD_I2C_WriteInCGRAM+0x4f6>
    3b48:	88 ec       	ldi	r24, 0xC8	; 200
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	9c 83       	std	Y+4, r25	; 0x04
    3b4e:	8b 83       	std	Y+3, r24	; 0x03
    3b50:	8b 81       	ldd	r24, Y+3	; 0x03
    3b52:	9c 81       	ldd	r25, Y+4	; 0x04
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	f1 f7       	brne	.-4      	; 0x3b54 <LCD_I2C_WriteInCGRAM+0x4e4>
    3b58:	9c 83       	std	Y+4, r25	; 0x04
    3b5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	9e 83       	std	Y+6, r25	; 0x06
    3b64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b66:	8d 81       	ldd	r24, Y+5	; 0x05
    3b68:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6a:	00 97       	sbiw	r24, 0x00	; 0
    3b6c:	69 f7       	brne	.-38     	; 0x3b48 <LCD_I2C_WriteInCGRAM+0x4d8>
    3b6e:	14 c0       	rjmp	.+40     	; 0x3b98 <LCD_I2C_WriteInCGRAM+0x528>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b70:	6f 81       	ldd	r22, Y+7	; 0x07
    3b72:	78 85       	ldd	r23, Y+8	; 0x08
    3b74:	89 85       	ldd	r24, Y+9	; 0x09
    3b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	9e 83       	std	Y+6, r25	; 0x06
    3b82:	8d 83       	std	Y+5, r24	; 0x05
    3b84:	8d 81       	ldd	r24, Y+5	; 0x05
    3b86:	9e 81       	ldd	r25, Y+6	; 0x06
    3b88:	9a 83       	std	Y+2, r25	; 0x02
    3b8a:	89 83       	std	Y+1, r24	; 0x01
    3b8c:	89 81       	ldd	r24, Y+1	; 0x01
    3b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b90:	01 97       	sbiw	r24, 0x01	; 1
    3b92:	f1 f7       	brne	.-4      	; 0x3b90 <LCD_I2C_WriteInCGRAM+0x520>
    3b94:	9a 83       	std	Y+2, r25	; 0x02
    3b96:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		I2C_Master_send_data(Copy_U8ptr[i]);
	}
	_delay_ms(10);
	I2C_stop();
    3b98:	0e 94 42 0c 	call	0x1884	; 0x1884 <I2C_stop>
}
    3b9c:	c7 5b       	subi	r28, 0xB7	; 183
    3b9e:	df 4f       	sbci	r29, 0xFF	; 255
    3ba0:	0f b6       	in	r0, 0x3f	; 63
    3ba2:	f8 94       	cli
    3ba4:	de bf       	out	0x3e, r29	; 62
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	cd bf       	out	0x3d, r28	; 61
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	1f 91       	pop	r17
    3bb0:	0f 91       	pop	r16
    3bb2:	08 95       	ret

00003bb4 <LCD_VidSendData>:
#include"DIO_Interface.h"
#include"LCD_interface.h"
#include "LCD_cofig.h"

void LCD_VidSendData(u8 Copy_u8Data)
{
    3bb4:	df 93       	push	r29
    3bb6:	cf 93       	push	r28
    3bb8:	cd b7       	in	r28, 0x3d	; 61
    3bba:	de b7       	in	r29, 0x3e	; 62
    3bbc:	6d 97       	sbiw	r28, 0x1d	; 29
    3bbe:	0f b6       	in	r0, 0x3f	; 63
    3bc0:	f8 94       	cli
    3bc2:	de bf       	out	0x3e, r29	; 62
    3bc4:	0f be       	out	0x3f, r0	; 63
    3bc6:	cd bf       	out	0x3d, r28	; 61
    3bc8:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	60 e0       	ldi	r22, 0x00	; 0
    3bce:	41 e0       	ldi	r20, 0x01	; 1
    3bd0:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	61 e0       	ldi	r22, 0x01	; 1
    3bd8:	40 e0       	ldi	r20, 0x00	; 0
    3bda:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
	DIO_VidWriteOnPort(Data_Port,Copy_u8Data);
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3be2:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	62 e0       	ldi	r22, 0x02	; 2
    3bea:	41 e0       	ldi	r20, 0x01	; 1
    3bec:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	a0 e2       	ldi	r26, 0x20	; 32
    3bf6:	b1 e4       	ldi	r27, 0x41	; 65
    3bf8:	89 8f       	std	Y+25, r24	; 0x19
    3bfa:	9a 8f       	std	Y+26, r25	; 0x1a
    3bfc:	ab 8f       	std	Y+27, r26	; 0x1b
    3bfe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c00:	69 8d       	ldd	r22, Y+25	; 0x19
    3c02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	4a ef       	ldi	r20, 0xFA	; 250
    3c0e:	54 e4       	ldi	r21, 0x44	; 68
    3c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	8d 8b       	std	Y+21, r24	; 0x15
    3c1a:	9e 8b       	std	Y+22, r25	; 0x16
    3c1c:	af 8b       	std	Y+23, r26	; 0x17
    3c1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c20:	6d 89       	ldd	r22, Y+21	; 0x15
    3c22:	7e 89       	ldd	r23, Y+22	; 0x16
    3c24:	8f 89       	ldd	r24, Y+23	; 0x17
    3c26:	98 8d       	ldd	r25, Y+24	; 0x18
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	40 e8       	ldi	r20, 0x80	; 128
    3c2e:	5f e3       	ldi	r21, 0x3F	; 63
    3c30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3c34:	88 23       	and	r24, r24
    3c36:	2c f4       	brge	.+10     	; 0x3c42 <LCD_VidSendData+0x8e>
		__ticks = 1;
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	9c 8b       	std	Y+20, r25	; 0x14
    3c3e:	8b 8b       	std	Y+19, r24	; 0x13
    3c40:	3f c0       	rjmp	.+126    	; 0x3cc0 <LCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    3c42:	6d 89       	ldd	r22, Y+21	; 0x15
    3c44:	7e 89       	ldd	r23, Y+22	; 0x16
    3c46:	8f 89       	ldd	r24, Y+23	; 0x17
    3c48:	98 8d       	ldd	r25, Y+24	; 0x18
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	3f ef       	ldi	r19, 0xFF	; 255
    3c4e:	4f e7       	ldi	r20, 0x7F	; 127
    3c50:	57 e4       	ldi	r21, 0x47	; 71
    3c52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3c56:	18 16       	cp	r1, r24
    3c58:	4c f5       	brge	.+82     	; 0x3cac <LCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c5a:	69 8d       	ldd	r22, Y+25	; 0x19
    3c5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	40 e2       	ldi	r20, 0x20	; 32
    3c68:	51 e4       	ldi	r21, 0x41	; 65
    3c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	bc 01       	movw	r22, r24
    3c74:	cd 01       	movw	r24, r26
    3c76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	cb 01       	movw	r24, r22
    3c7e:	9c 8b       	std	Y+20, r25	; 0x14
    3c80:	8b 8b       	std	Y+19, r24	; 0x13
    3c82:	0f c0       	rjmp	.+30     	; 0x3ca2 <LCD_VidSendData+0xee>
    3c84:	88 ec       	ldi	r24, 0xC8	; 200
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	9a 8b       	std	Y+18, r25	; 0x12
    3c8a:	89 8b       	std	Y+17, r24	; 0x11
    3c8c:	89 89       	ldd	r24, Y+17	; 0x11
    3c8e:	9a 89       	ldd	r25, Y+18	; 0x12
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	f1 f7       	brne	.-4      	; 0x3c90 <LCD_VidSendData+0xdc>
    3c94:	9a 8b       	std	Y+18, r25	; 0x12
    3c96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c98:	8b 89       	ldd	r24, Y+19	; 0x13
    3c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c9c:	01 97       	sbiw	r24, 0x01	; 1
    3c9e:	9c 8b       	std	Y+20, r25	; 0x14
    3ca0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ca4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ca6:	00 97       	sbiw	r24, 0x00	; 0
    3ca8:	69 f7       	brne	.-38     	; 0x3c84 <LCD_VidSendData+0xd0>
    3caa:	14 c0       	rjmp	.+40     	; 0x3cd4 <LCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cac:	6d 89       	ldd	r22, Y+21	; 0x15
    3cae:	7e 89       	ldd	r23, Y+22	; 0x16
    3cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    3cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    3cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	9c 8b       	std	Y+20, r25	; 0x14
    3cbe:	8b 8b       	std	Y+19, r24	; 0x13
    3cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    3cc4:	98 8b       	std	Y+16, r25	; 0x10
    3cc6:	8f 87       	std	Y+15, r24	; 0x0f
    3cc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cca:	98 89       	ldd	r25, Y+16	; 0x10
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <LCD_VidSendData+0x118>
    3cd0:	98 8b       	std	Y+16, r25	; 0x10
    3cd2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	62 e0       	ldi	r22, 0x02	; 2
    3cd8:	40 e0       	ldi	r20, 0x00	; 0
    3cda:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	a0 e2       	ldi	r26, 0x20	; 32
    3ce4:	b1 e4       	ldi	r27, 0x41	; 65
    3ce6:	8b 87       	std	Y+11, r24	; 0x0b
    3ce8:	9c 87       	std	Y+12, r25	; 0x0c
    3cea:	ad 87       	std	Y+13, r26	; 0x0d
    3cec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	4a ef       	ldi	r20, 0xFA	; 250
    3cfc:	54 e4       	ldi	r21, 0x44	; 68
    3cfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	8f 83       	std	Y+7, r24	; 0x07
    3d08:	98 87       	std	Y+8, r25	; 0x08
    3d0a:	a9 87       	std	Y+9, r26	; 0x09
    3d0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d10:	78 85       	ldd	r23, Y+8	; 0x08
    3d12:	89 85       	ldd	r24, Y+9	; 0x09
    3d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	40 e8       	ldi	r20, 0x80	; 128
    3d1c:	5f e3       	ldi	r21, 0x3F	; 63
    3d1e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3d22:	88 23       	and	r24, r24
    3d24:	2c f4       	brge	.+10     	; 0x3d30 <LCD_VidSendData+0x17c>
		__ticks = 1;
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	9e 83       	std	Y+6, r25	; 0x06
    3d2c:	8d 83       	std	Y+5, r24	; 0x05
    3d2e:	3f c0       	rjmp	.+126    	; 0x3dae <LCD_VidSendData+0x1fa>
	else if (__tmp > 65535)
    3d30:	6f 81       	ldd	r22, Y+7	; 0x07
    3d32:	78 85       	ldd	r23, Y+8	; 0x08
    3d34:	89 85       	ldd	r24, Y+9	; 0x09
    3d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	3f ef       	ldi	r19, 0xFF	; 255
    3d3c:	4f e7       	ldi	r20, 0x7F	; 127
    3d3e:	57 e4       	ldi	r21, 0x47	; 71
    3d40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3d44:	18 16       	cp	r1, r24
    3d46:	4c f5       	brge	.+82     	; 0x3d9a <LCD_VidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	40 e2       	ldi	r20, 0x20	; 32
    3d56:	51 e4       	ldi	r21, 0x41	; 65
    3d58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	bc 01       	movw	r22, r24
    3d62:	cd 01       	movw	r24, r26
    3d64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d68:	dc 01       	movw	r26, r24
    3d6a:	cb 01       	movw	r24, r22
    3d6c:	9e 83       	std	Y+6, r25	; 0x06
    3d6e:	8d 83       	std	Y+5, r24	; 0x05
    3d70:	0f c0       	rjmp	.+30     	; 0x3d90 <LCD_VidSendData+0x1dc>
    3d72:	88 ec       	ldi	r24, 0xC8	; 200
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	9c 83       	std	Y+4, r25	; 0x04
    3d78:	8b 83       	std	Y+3, r24	; 0x03
    3d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <LCD_VidSendData+0x1ca>
    3d82:	9c 83       	std	Y+4, r25	; 0x04
    3d84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d86:	8d 81       	ldd	r24, Y+5	; 0x05
    3d88:	9e 81       	ldd	r25, Y+6	; 0x06
    3d8a:	01 97       	sbiw	r24, 0x01	; 1
    3d8c:	9e 83       	std	Y+6, r25	; 0x06
    3d8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d90:	8d 81       	ldd	r24, Y+5	; 0x05
    3d92:	9e 81       	ldd	r25, Y+6	; 0x06
    3d94:	00 97       	sbiw	r24, 0x00	; 0
    3d96:	69 f7       	brne	.-38     	; 0x3d72 <LCD_VidSendData+0x1be>
    3d98:	14 c0       	rjmp	.+40     	; 0x3dc2 <LCD_VidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d9c:	78 85       	ldd	r23, Y+8	; 0x08
    3d9e:	89 85       	ldd	r24, Y+9	; 0x09
    3da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3da2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	9e 83       	std	Y+6, r25	; 0x06
    3dac:	8d 83       	std	Y+5, r24	; 0x05
    3dae:	8d 81       	ldd	r24, Y+5	; 0x05
    3db0:	9e 81       	ldd	r25, Y+6	; 0x06
    3db2:	9a 83       	std	Y+2, r25	; 0x02
    3db4:	89 83       	std	Y+1, r24	; 0x01
    3db6:	89 81       	ldd	r24, Y+1	; 0x01
    3db8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dba:	01 97       	sbiw	r24, 0x01	; 1
    3dbc:	f1 f7       	brne	.-4      	; 0x3dba <LCD_VidSendData+0x206>
    3dbe:	9a 83       	std	Y+2, r25	; 0x02
    3dc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    3dc2:	6d 96       	adiw	r28, 0x1d	; 29
    3dc4:	0f b6       	in	r0, 0x3f	; 63
    3dc6:	f8 94       	cli
    3dc8:	de bf       	out	0x3e, r29	; 62
    3dca:	0f be       	out	0x3f, r0	; 63
    3dcc:	cd bf       	out	0x3d, r28	; 61
    3dce:	cf 91       	pop	r28
    3dd0:	df 91       	pop	r29
    3dd2:	08 95       	ret

00003dd4 <LCD_VidSendCommand>:
void LCD_VidSendCommand(u8 Copy_u8Data)
{
    3dd4:	df 93       	push	r29
    3dd6:	cf 93       	push	r28
    3dd8:	cd b7       	in	r28, 0x3d	; 61
    3dda:	de b7       	in	r29, 0x3e	; 62
    3ddc:	6d 97       	sbiw	r28, 0x1d	; 29
    3dde:	0f b6       	in	r0, 0x3f	; 63
    3de0:	f8 94       	cli
    3de2:	de bf       	out	0x3e, r29	; 62
    3de4:	0f be       	out	0x3f, r0	; 63
    3de6:	cd bf       	out	0x3d, r28	; 61
    3de8:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPin_Value(Control_Port,RS,0);   //rs=0   data
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	60 e0       	ldi	r22, 0x00	; 0
    3dee:	40 e0       	ldi	r20, 0x00	; 0
    3df0:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    3df4:	81 e0       	ldi	r24, 0x01	; 1
    3df6:	61 e0       	ldi	r22, 0x01	; 1
    3df8:	40 e0       	ldi	r20, 0x00	; 0
    3dfa:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
	DIO_VidWriteOnPort(Data_Port,Copy_u8Data);
    3dfe:	80 e0       	ldi	r24, 0x00	; 0
    3e00:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3e02:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    3e06:	81 e0       	ldi	r24, 0x01	; 1
    3e08:	62 e0       	ldi	r22, 0x02	; 2
    3e0a:	41 e0       	ldi	r20, 0x01	; 1
    3e0c:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	a0 e2       	ldi	r26, 0x20	; 32
    3e16:	b1 e4       	ldi	r27, 0x41	; 65
    3e18:	89 8f       	std	Y+25, r24	; 0x19
    3e1a:	9a 8f       	std	Y+26, r25	; 0x1a
    3e1c:	ab 8f       	std	Y+27, r26	; 0x1b
    3e1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e20:	69 8d       	ldd	r22, Y+25	; 0x19
    3e22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	4a ef       	ldi	r20, 0xFA	; 250
    3e2e:	54 e4       	ldi	r21, 0x44	; 68
    3e30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	8d 8b       	std	Y+21, r24	; 0x15
    3e3a:	9e 8b       	std	Y+22, r25	; 0x16
    3e3c:	af 8b       	std	Y+23, r26	; 0x17
    3e3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e40:	6d 89       	ldd	r22, Y+21	; 0x15
    3e42:	7e 89       	ldd	r23, Y+22	; 0x16
    3e44:	8f 89       	ldd	r24, Y+23	; 0x17
    3e46:	98 8d       	ldd	r25, Y+24	; 0x18
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	40 e8       	ldi	r20, 0x80	; 128
    3e4e:	5f e3       	ldi	r21, 0x3F	; 63
    3e50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3e54:	88 23       	and	r24, r24
    3e56:	2c f4       	brge	.+10     	; 0x3e62 <LCD_VidSendCommand+0x8e>
		__ticks = 1;
    3e58:	81 e0       	ldi	r24, 0x01	; 1
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	9c 8b       	std	Y+20, r25	; 0x14
    3e5e:	8b 8b       	std	Y+19, r24	; 0x13
    3e60:	3f c0       	rjmp	.+126    	; 0x3ee0 <LCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    3e62:	6d 89       	ldd	r22, Y+21	; 0x15
    3e64:	7e 89       	ldd	r23, Y+22	; 0x16
    3e66:	8f 89       	ldd	r24, Y+23	; 0x17
    3e68:	98 8d       	ldd	r25, Y+24	; 0x18
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	3f ef       	ldi	r19, 0xFF	; 255
    3e6e:	4f e7       	ldi	r20, 0x7F	; 127
    3e70:	57 e4       	ldi	r21, 0x47	; 71
    3e72:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3e76:	18 16       	cp	r1, r24
    3e78:	4c f5       	brge	.+82     	; 0x3ecc <LCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7a:	69 8d       	ldd	r22, Y+25	; 0x19
    3e7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	40 e2       	ldi	r20, 0x20	; 32
    3e88:	51 e4       	ldi	r21, 0x41	; 65
    3e8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	bc 01       	movw	r22, r24
    3e94:	cd 01       	movw	r24, r26
    3e96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	9c 8b       	std	Y+20, r25	; 0x14
    3ea0:	8b 8b       	std	Y+19, r24	; 0x13
    3ea2:	0f c0       	rjmp	.+30     	; 0x3ec2 <LCD_VidSendCommand+0xee>
    3ea4:	88 ec       	ldi	r24, 0xC8	; 200
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	9a 8b       	std	Y+18, r25	; 0x12
    3eaa:	89 8b       	std	Y+17, r24	; 0x11
    3eac:	89 89       	ldd	r24, Y+17	; 0x11
    3eae:	9a 89       	ldd	r25, Y+18	; 0x12
    3eb0:	01 97       	sbiw	r24, 0x01	; 1
    3eb2:	f1 f7       	brne	.-4      	; 0x3eb0 <LCD_VidSendCommand+0xdc>
    3eb4:	9a 8b       	std	Y+18, r25	; 0x12
    3eb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eb8:	8b 89       	ldd	r24, Y+19	; 0x13
    3eba:	9c 89       	ldd	r25, Y+20	; 0x14
    3ebc:	01 97       	sbiw	r24, 0x01	; 1
    3ebe:	9c 8b       	std	Y+20, r25	; 0x14
    3ec0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ec4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ec6:	00 97       	sbiw	r24, 0x00	; 0
    3ec8:	69 f7       	brne	.-38     	; 0x3ea4 <LCD_VidSendCommand+0xd0>
    3eca:	14 c0       	rjmp	.+40     	; 0x3ef4 <LCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ecc:	6d 89       	ldd	r22, Y+21	; 0x15
    3ece:	7e 89       	ldd	r23, Y+22	; 0x16
    3ed0:	8f 89       	ldd	r24, Y+23	; 0x17
    3ed2:	98 8d       	ldd	r25, Y+24	; 0x18
    3ed4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	9c 8b       	std	Y+20, r25	; 0x14
    3ede:	8b 8b       	std	Y+19, r24	; 0x13
    3ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ee4:	98 8b       	std	Y+16, r25	; 0x10
    3ee6:	8f 87       	std	Y+15, r24	; 0x0f
    3ee8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eea:	98 89       	ldd	r25, Y+16	; 0x10
    3eec:	01 97       	sbiw	r24, 0x01	; 1
    3eee:	f1 f7       	brne	.-4      	; 0x3eec <LCD_VidSendCommand+0x118>
    3ef0:	98 8b       	std	Y+16, r25	; 0x10
    3ef2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	62 e0       	ldi	r22, 0x02	; 2
    3ef8:	40 e0       	ldi	r20, 0x00	; 0
    3efa:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	a0 e2       	ldi	r26, 0x20	; 32
    3f04:	b1 e4       	ldi	r27, 0x41	; 65
    3f06:	8b 87       	std	Y+11, r24	; 0x0b
    3f08:	9c 87       	std	Y+12, r25	; 0x0c
    3f0a:	ad 87       	std	Y+13, r26	; 0x0d
    3f0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	4a ef       	ldi	r20, 0xFA	; 250
    3f1c:	54 e4       	ldi	r21, 0x44	; 68
    3f1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	8f 83       	std	Y+7, r24	; 0x07
    3f28:	98 87       	std	Y+8, r25	; 0x08
    3f2a:	a9 87       	std	Y+9, r26	; 0x09
    3f2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f30:	78 85       	ldd	r23, Y+8	; 0x08
    3f32:	89 85       	ldd	r24, Y+9	; 0x09
    3f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	40 e8       	ldi	r20, 0x80	; 128
    3f3c:	5f e3       	ldi	r21, 0x3F	; 63
    3f3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3f42:	88 23       	and	r24, r24
    3f44:	2c f4       	brge	.+10     	; 0x3f50 <LCD_VidSendCommand+0x17c>
		__ticks = 1;
    3f46:	81 e0       	ldi	r24, 0x01	; 1
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	9e 83       	std	Y+6, r25	; 0x06
    3f4c:	8d 83       	std	Y+5, r24	; 0x05
    3f4e:	3f c0       	rjmp	.+126    	; 0x3fce <LCD_VidSendCommand+0x1fa>
	else if (__tmp > 65535)
    3f50:	6f 81       	ldd	r22, Y+7	; 0x07
    3f52:	78 85       	ldd	r23, Y+8	; 0x08
    3f54:	89 85       	ldd	r24, Y+9	; 0x09
    3f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	3f ef       	ldi	r19, 0xFF	; 255
    3f5c:	4f e7       	ldi	r20, 0x7F	; 127
    3f5e:	57 e4       	ldi	r21, 0x47	; 71
    3f60:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3f64:	18 16       	cp	r1, r24
    3f66:	4c f5       	brge	.+82     	; 0x3fba <LCD_VidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f68:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	40 e2       	ldi	r20, 0x20	; 32
    3f76:	51 e4       	ldi	r21, 0x41	; 65
    3f78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	bc 01       	movw	r22, r24
    3f82:	cd 01       	movw	r24, r26
    3f84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f88:	dc 01       	movw	r26, r24
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	9e 83       	std	Y+6, r25	; 0x06
    3f8e:	8d 83       	std	Y+5, r24	; 0x05
    3f90:	0f c0       	rjmp	.+30     	; 0x3fb0 <LCD_VidSendCommand+0x1dc>
    3f92:	88 ec       	ldi	r24, 0xC8	; 200
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	9c 83       	std	Y+4, r25	; 0x04
    3f98:	8b 83       	std	Y+3, r24	; 0x03
    3f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f9e:	01 97       	sbiw	r24, 0x01	; 1
    3fa0:	f1 f7       	brne	.-4      	; 0x3f9e <LCD_VidSendCommand+0x1ca>
    3fa2:	9c 83       	std	Y+4, r25	; 0x04
    3fa4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    3faa:	01 97       	sbiw	r24, 0x01	; 1
    3fac:	9e 83       	std	Y+6, r25	; 0x06
    3fae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb4:	00 97       	sbiw	r24, 0x00	; 0
    3fb6:	69 f7       	brne	.-38     	; 0x3f92 <LCD_VidSendCommand+0x1be>
    3fb8:	14 c0       	rjmp	.+40     	; 0x3fe2 <LCD_VidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fba:	6f 81       	ldd	r22, Y+7	; 0x07
    3fbc:	78 85       	ldd	r23, Y+8	; 0x08
    3fbe:	89 85       	ldd	r24, Y+9	; 0x09
    3fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3fc6:	dc 01       	movw	r26, r24
    3fc8:	cb 01       	movw	r24, r22
    3fca:	9e 83       	std	Y+6, r25	; 0x06
    3fcc:	8d 83       	std	Y+5, r24	; 0x05
    3fce:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd2:	9a 83       	std	Y+2, r25	; 0x02
    3fd4:	89 83       	std	Y+1, r24	; 0x01
    3fd6:	89 81       	ldd	r24, Y+1	; 0x01
    3fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fda:	01 97       	sbiw	r24, 0x01	; 1
    3fdc:	f1 f7       	brne	.-4      	; 0x3fda <LCD_VidSendCommand+0x206>
    3fde:	9a 83       	std	Y+2, r25	; 0x02
    3fe0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    3fe2:	6d 96       	adiw	r28, 0x1d	; 29
    3fe4:	0f b6       	in	r0, 0x3f	; 63
    3fe6:	f8 94       	cli
    3fe8:	de bf       	out	0x3e, r29	; 62
    3fea:	0f be       	out	0x3f, r0	; 63
    3fec:	cd bf       	out	0x3d, r28	; 61
    3fee:	cf 91       	pop	r28
    3ff0:	df 91       	pop	r29
    3ff2:	08 95       	ret

00003ff4 <LCD_VidInt>:
void LCD_VidInt(void)
{	
    3ff4:	df 93       	push	r29
    3ff6:	cf 93       	push	r28
    3ff8:	cd b7       	in	r28, 0x3d	; 61
    3ffa:	de b7       	in	r29, 0x3e	; 62
    3ffc:	e8 97       	sbiw	r28, 0x38	; 56
    3ffe:	0f b6       	in	r0, 0x3f	; 63
    4000:	f8 94       	cli
    4002:	de bf       	out	0x3e, r29	; 62
    4004:	0f be       	out	0x3f, r0	; 63
    4006:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPort_Direction(Data_Port,1);
    4008:	80 e0       	ldi	r24, 0x00	; 0
    400a:	61 e0       	ldi	r22, 0x01	; 1
    400c:	0e 94 3e 09 	call	0x127c	; 0x127c <DIO_VidSetPort_Direction>
	DIO_VidSetPin_Direction(Control_Port,RS,1);
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	60 e0       	ldi	r22, 0x00	; 0
    4014:	41 e0       	ldi	r20, 0x01	; 1
    4016:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_VidSetPin_Direction>
	DIO_VidSetPin_Direction(Control_Port,RW,1);
    401a:	81 e0       	ldi	r24, 0x01	; 1
    401c:	61 e0       	ldi	r22, 0x01	; 1
    401e:	41 e0       	ldi	r20, 0x01	; 1
    4020:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_VidSetPin_Direction>
	DIO_VidSetPin_Direction(Control_Port,E,1);
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	62 e0       	ldi	r22, 0x02	; 2
    4028:	41 e0       	ldi	r20, 0x01	; 1
    402a:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_VidSetPin_Direction>
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	a0 e2       	ldi	r26, 0x20	; 32
    4034:	b2 e4       	ldi	r27, 0x42	; 66
    4036:	8d ab       	std	Y+53, r24	; 0x35
    4038:	9e ab       	std	Y+54, r25	; 0x36
    403a:	af ab       	std	Y+55, r26	; 0x37
    403c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    403e:	6d a9       	ldd	r22, Y+53	; 0x35
    4040:	7e a9       	ldd	r23, Y+54	; 0x36
    4042:	8f a9       	ldd	r24, Y+55	; 0x37
    4044:	98 ad       	ldd	r25, Y+56	; 0x38
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	4a ef       	ldi	r20, 0xFA	; 250
    404c:	54 e4       	ldi	r21, 0x44	; 68
    404e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4052:	dc 01       	movw	r26, r24
    4054:	cb 01       	movw	r24, r22
    4056:	89 ab       	std	Y+49, r24	; 0x31
    4058:	9a ab       	std	Y+50, r25	; 0x32
    405a:	ab ab       	std	Y+51, r26	; 0x33
    405c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    405e:	69 a9       	ldd	r22, Y+49	; 0x31
    4060:	7a a9       	ldd	r23, Y+50	; 0x32
    4062:	8b a9       	ldd	r24, Y+51	; 0x33
    4064:	9c a9       	ldd	r25, Y+52	; 0x34
    4066:	20 e0       	ldi	r18, 0x00	; 0
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	40 e8       	ldi	r20, 0x80	; 128
    406c:	5f e3       	ldi	r21, 0x3F	; 63
    406e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4072:	88 23       	and	r24, r24
    4074:	2c f4       	brge	.+10     	; 0x4080 <LCD_VidInt+0x8c>
		__ticks = 1;
    4076:	81 e0       	ldi	r24, 0x01	; 1
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	98 ab       	std	Y+48, r25	; 0x30
    407c:	8f a7       	std	Y+47, r24	; 0x2f
    407e:	3f c0       	rjmp	.+126    	; 0x40fe <LCD_VidInt+0x10a>
	else if (__tmp > 65535)
    4080:	69 a9       	ldd	r22, Y+49	; 0x31
    4082:	7a a9       	ldd	r23, Y+50	; 0x32
    4084:	8b a9       	ldd	r24, Y+51	; 0x33
    4086:	9c a9       	ldd	r25, Y+52	; 0x34
    4088:	20 e0       	ldi	r18, 0x00	; 0
    408a:	3f ef       	ldi	r19, 0xFF	; 255
    408c:	4f e7       	ldi	r20, 0x7F	; 127
    408e:	57 e4       	ldi	r21, 0x47	; 71
    4090:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4094:	18 16       	cp	r1, r24
    4096:	4c f5       	brge	.+82     	; 0x40ea <LCD_VidInt+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4098:	6d a9       	ldd	r22, Y+53	; 0x35
    409a:	7e a9       	ldd	r23, Y+54	; 0x36
    409c:	8f a9       	ldd	r24, Y+55	; 0x37
    409e:	98 ad       	ldd	r25, Y+56	; 0x38
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	40 e2       	ldi	r20, 0x20	; 32
    40a6:	51 e4       	ldi	r21, 0x41	; 65
    40a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	bc 01       	movw	r22, r24
    40b2:	cd 01       	movw	r24, r26
    40b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    40b8:	dc 01       	movw	r26, r24
    40ba:	cb 01       	movw	r24, r22
    40bc:	98 ab       	std	Y+48, r25	; 0x30
    40be:	8f a7       	std	Y+47, r24	; 0x2f
    40c0:	0f c0       	rjmp	.+30     	; 0x40e0 <LCD_VidInt+0xec>
    40c2:	88 ec       	ldi	r24, 0xC8	; 200
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	9e a7       	std	Y+46, r25	; 0x2e
    40c8:	8d a7       	std	Y+45, r24	; 0x2d
    40ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    40cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	f1 f7       	brne	.-4      	; 0x40ce <LCD_VidInt+0xda>
    40d2:	9e a7       	std	Y+46, r25	; 0x2e
    40d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    40d8:	98 a9       	ldd	r25, Y+48	; 0x30
    40da:	01 97       	sbiw	r24, 0x01	; 1
    40dc:	98 ab       	std	Y+48, r25	; 0x30
    40de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    40e2:	98 a9       	ldd	r25, Y+48	; 0x30
    40e4:	00 97       	sbiw	r24, 0x00	; 0
    40e6:	69 f7       	brne	.-38     	; 0x40c2 <LCD_VidInt+0xce>
    40e8:	14 c0       	rjmp	.+40     	; 0x4112 <LCD_VidInt+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ea:	69 a9       	ldd	r22, Y+49	; 0x31
    40ec:	7a a9       	ldd	r23, Y+50	; 0x32
    40ee:	8b a9       	ldd	r24, Y+51	; 0x33
    40f0:	9c a9       	ldd	r25, Y+52	; 0x34
    40f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	98 ab       	std	Y+48, r25	; 0x30
    40fc:	8f a7       	std	Y+47, r24	; 0x2f
    40fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    4100:	98 a9       	ldd	r25, Y+48	; 0x30
    4102:	9c a7       	std	Y+44, r25	; 0x2c
    4104:	8b a7       	std	Y+43, r24	; 0x2b
    4106:	8b a5       	ldd	r24, Y+43	; 0x2b
    4108:	9c a5       	ldd	r25, Y+44	; 0x2c
    410a:	01 97       	sbiw	r24, 0x01	; 1
    410c:	f1 f7       	brne	.-4      	; 0x410a <LCD_VidInt+0x116>
    410e:	9c a7       	std	Y+44, r25	; 0x2c
    4110:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(40);
	LCD_VidSendCommand(0b00111000);
    4112:	88 e3       	ldi	r24, 0x38	; 56
    4114:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <LCD_VidSendCommand>
    4118:	80 e0       	ldi	r24, 0x00	; 0
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	a0 e8       	ldi	r26, 0x80	; 128
    411e:	bf e3       	ldi	r27, 0x3F	; 63
    4120:	8f a3       	std	Y+39, r24	; 0x27
    4122:	98 a7       	std	Y+40, r25	; 0x28
    4124:	a9 a7       	std	Y+41, r26	; 0x29
    4126:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4128:	6f a1       	ldd	r22, Y+39	; 0x27
    412a:	78 a5       	ldd	r23, Y+40	; 0x28
    412c:	89 a5       	ldd	r24, Y+41	; 0x29
    412e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	4a ef       	ldi	r20, 0xFA	; 250
    4136:	54 e4       	ldi	r21, 0x44	; 68
    4138:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    413c:	dc 01       	movw	r26, r24
    413e:	cb 01       	movw	r24, r22
    4140:	8b a3       	std	Y+35, r24	; 0x23
    4142:	9c a3       	std	Y+36, r25	; 0x24
    4144:	ad a3       	std	Y+37, r26	; 0x25
    4146:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4148:	6b a1       	ldd	r22, Y+35	; 0x23
    414a:	7c a1       	ldd	r23, Y+36	; 0x24
    414c:	8d a1       	ldd	r24, Y+37	; 0x25
    414e:	9e a1       	ldd	r25, Y+38	; 0x26
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	40 e8       	ldi	r20, 0x80	; 128
    4156:	5f e3       	ldi	r21, 0x3F	; 63
    4158:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    415c:	88 23       	and	r24, r24
    415e:	2c f4       	brge	.+10     	; 0x416a <LCD_VidInt+0x176>
		__ticks = 1;
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	9a a3       	std	Y+34, r25	; 0x22
    4166:	89 a3       	std	Y+33, r24	; 0x21
    4168:	3f c0       	rjmp	.+126    	; 0x41e8 <LCD_VidInt+0x1f4>
	else if (__tmp > 65535)
    416a:	6b a1       	ldd	r22, Y+35	; 0x23
    416c:	7c a1       	ldd	r23, Y+36	; 0x24
    416e:	8d a1       	ldd	r24, Y+37	; 0x25
    4170:	9e a1       	ldd	r25, Y+38	; 0x26
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	3f ef       	ldi	r19, 0xFF	; 255
    4176:	4f e7       	ldi	r20, 0x7F	; 127
    4178:	57 e4       	ldi	r21, 0x47	; 71
    417a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    417e:	18 16       	cp	r1, r24
    4180:	4c f5       	brge	.+82     	; 0x41d4 <LCD_VidInt+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4182:	6f a1       	ldd	r22, Y+39	; 0x27
    4184:	78 a5       	ldd	r23, Y+40	; 0x28
    4186:	89 a5       	ldd	r24, Y+41	; 0x29
    4188:	9a a5       	ldd	r25, Y+42	; 0x2a
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	40 e2       	ldi	r20, 0x20	; 32
    4190:	51 e4       	ldi	r21, 0x41	; 65
    4192:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	bc 01       	movw	r22, r24
    419c:	cd 01       	movw	r24, r26
    419e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	9a a3       	std	Y+34, r25	; 0x22
    41a8:	89 a3       	std	Y+33, r24	; 0x21
    41aa:	0f c0       	rjmp	.+30     	; 0x41ca <LCD_VidInt+0x1d6>
    41ac:	88 ec       	ldi	r24, 0xC8	; 200
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	98 a3       	std	Y+32, r25	; 0x20
    41b2:	8f 8f       	std	Y+31, r24	; 0x1f
    41b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41b6:	98 a1       	ldd	r25, Y+32	; 0x20
    41b8:	01 97       	sbiw	r24, 0x01	; 1
    41ba:	f1 f7       	brne	.-4      	; 0x41b8 <LCD_VidInt+0x1c4>
    41bc:	98 a3       	std	Y+32, r25	; 0x20
    41be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c0:	89 a1       	ldd	r24, Y+33	; 0x21
    41c2:	9a a1       	ldd	r25, Y+34	; 0x22
    41c4:	01 97       	sbiw	r24, 0x01	; 1
    41c6:	9a a3       	std	Y+34, r25	; 0x22
    41c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ca:	89 a1       	ldd	r24, Y+33	; 0x21
    41cc:	9a a1       	ldd	r25, Y+34	; 0x22
    41ce:	00 97       	sbiw	r24, 0x00	; 0
    41d0:	69 f7       	brne	.-38     	; 0x41ac <LCD_VidInt+0x1b8>
    41d2:	14 c0       	rjmp	.+40     	; 0x41fc <LCD_VidInt+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d4:	6b a1       	ldd	r22, Y+35	; 0x23
    41d6:	7c a1       	ldd	r23, Y+36	; 0x24
    41d8:	8d a1       	ldd	r24, Y+37	; 0x25
    41da:	9e a1       	ldd	r25, Y+38	; 0x26
    41dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41e0:	dc 01       	movw	r26, r24
    41e2:	cb 01       	movw	r24, r22
    41e4:	9a a3       	std	Y+34, r25	; 0x22
    41e6:	89 a3       	std	Y+33, r24	; 0x21
    41e8:	89 a1       	ldd	r24, Y+33	; 0x21
    41ea:	9a a1       	ldd	r25, Y+34	; 0x22
    41ec:	9e 8f       	std	Y+30, r25	; 0x1e
    41ee:	8d 8f       	std	Y+29, r24	; 0x1d
    41f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41f4:	01 97       	sbiw	r24, 0x01	; 1
    41f6:	f1 f7       	brne	.-4      	; 0x41f4 <LCD_VidInt+0x200>
    41f8:	9e 8f       	std	Y+30, r25	; 0x1e
    41fa:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
	LCD_VidSendCommand(0b00001100);
    41fc:	8c e0       	ldi	r24, 0x0C	; 12
    41fe:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <LCD_VidSendCommand>
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	a0 e8       	ldi	r26, 0x80	; 128
    4208:	bf e3       	ldi	r27, 0x3F	; 63
    420a:	89 8f       	std	Y+25, r24	; 0x19
    420c:	9a 8f       	std	Y+26, r25	; 0x1a
    420e:	ab 8f       	std	Y+27, r26	; 0x1b
    4210:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4212:	69 8d       	ldd	r22, Y+25	; 0x19
    4214:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4216:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4218:	9c 8d       	ldd	r25, Y+28	; 0x1c
    421a:	20 e0       	ldi	r18, 0x00	; 0
    421c:	30 e0       	ldi	r19, 0x00	; 0
    421e:	4a ef       	ldi	r20, 0xFA	; 250
    4220:	54 e4       	ldi	r21, 0x44	; 68
    4222:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4226:	dc 01       	movw	r26, r24
    4228:	cb 01       	movw	r24, r22
    422a:	8d 8b       	std	Y+21, r24	; 0x15
    422c:	9e 8b       	std	Y+22, r25	; 0x16
    422e:	af 8b       	std	Y+23, r26	; 0x17
    4230:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4232:	6d 89       	ldd	r22, Y+21	; 0x15
    4234:	7e 89       	ldd	r23, Y+22	; 0x16
    4236:	8f 89       	ldd	r24, Y+23	; 0x17
    4238:	98 8d       	ldd	r25, Y+24	; 0x18
    423a:	20 e0       	ldi	r18, 0x00	; 0
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	40 e8       	ldi	r20, 0x80	; 128
    4240:	5f e3       	ldi	r21, 0x3F	; 63
    4242:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4246:	88 23       	and	r24, r24
    4248:	2c f4       	brge	.+10     	; 0x4254 <LCD_VidInt+0x260>
		__ticks = 1;
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	9c 8b       	std	Y+20, r25	; 0x14
    4250:	8b 8b       	std	Y+19, r24	; 0x13
    4252:	3f c0       	rjmp	.+126    	; 0x42d2 <LCD_VidInt+0x2de>
	else if (__tmp > 65535)
    4254:	6d 89       	ldd	r22, Y+21	; 0x15
    4256:	7e 89       	ldd	r23, Y+22	; 0x16
    4258:	8f 89       	ldd	r24, Y+23	; 0x17
    425a:	98 8d       	ldd	r25, Y+24	; 0x18
    425c:	20 e0       	ldi	r18, 0x00	; 0
    425e:	3f ef       	ldi	r19, 0xFF	; 255
    4260:	4f e7       	ldi	r20, 0x7F	; 127
    4262:	57 e4       	ldi	r21, 0x47	; 71
    4264:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4268:	18 16       	cp	r1, r24
    426a:	4c f5       	brge	.+82     	; 0x42be <LCD_VidInt+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    426c:	69 8d       	ldd	r22, Y+25	; 0x19
    426e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4270:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4272:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	40 e2       	ldi	r20, 0x20	; 32
    427a:	51 e4       	ldi	r21, 0x41	; 65
    427c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4280:	dc 01       	movw	r26, r24
    4282:	cb 01       	movw	r24, r22
    4284:	bc 01       	movw	r22, r24
    4286:	cd 01       	movw	r24, r26
    4288:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	9c 8b       	std	Y+20, r25	; 0x14
    4292:	8b 8b       	std	Y+19, r24	; 0x13
    4294:	0f c0       	rjmp	.+30     	; 0x42b4 <LCD_VidInt+0x2c0>
    4296:	88 ec       	ldi	r24, 0xC8	; 200
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	9a 8b       	std	Y+18, r25	; 0x12
    429c:	89 8b       	std	Y+17, r24	; 0x11
    429e:	89 89       	ldd	r24, Y+17	; 0x11
    42a0:	9a 89       	ldd	r25, Y+18	; 0x12
    42a2:	01 97       	sbiw	r24, 0x01	; 1
    42a4:	f1 f7       	brne	.-4      	; 0x42a2 <LCD_VidInt+0x2ae>
    42a6:	9a 8b       	std	Y+18, r25	; 0x12
    42a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42aa:	8b 89       	ldd	r24, Y+19	; 0x13
    42ac:	9c 89       	ldd	r25, Y+20	; 0x14
    42ae:	01 97       	sbiw	r24, 0x01	; 1
    42b0:	9c 8b       	std	Y+20, r25	; 0x14
    42b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b4:	8b 89       	ldd	r24, Y+19	; 0x13
    42b6:	9c 89       	ldd	r25, Y+20	; 0x14
    42b8:	00 97       	sbiw	r24, 0x00	; 0
    42ba:	69 f7       	brne	.-38     	; 0x4296 <LCD_VidInt+0x2a2>
    42bc:	14 c0       	rjmp	.+40     	; 0x42e6 <LCD_VidInt+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42be:	6d 89       	ldd	r22, Y+21	; 0x15
    42c0:	7e 89       	ldd	r23, Y+22	; 0x16
    42c2:	8f 89       	ldd	r24, Y+23	; 0x17
    42c4:	98 8d       	ldd	r25, Y+24	; 0x18
    42c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    42ca:	dc 01       	movw	r26, r24
    42cc:	cb 01       	movw	r24, r22
    42ce:	9c 8b       	std	Y+20, r25	; 0x14
    42d0:	8b 8b       	std	Y+19, r24	; 0x13
    42d2:	8b 89       	ldd	r24, Y+19	; 0x13
    42d4:	9c 89       	ldd	r25, Y+20	; 0x14
    42d6:	98 8b       	std	Y+16, r25	; 0x10
    42d8:	8f 87       	std	Y+15, r24	; 0x0f
    42da:	8f 85       	ldd	r24, Y+15	; 0x0f
    42dc:	98 89       	ldd	r25, Y+16	; 0x10
    42de:	01 97       	sbiw	r24, 0x01	; 1
    42e0:	f1 f7       	brne	.-4      	; 0x42de <LCD_VidInt+0x2ea>
    42e2:	98 8b       	std	Y+16, r25	; 0x10
    42e4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
	LCD_VidSendCommand(0b00000001);
    42e6:	81 e0       	ldi	r24, 0x01	; 1
    42e8:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <LCD_VidSendCommand>
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	a0 e8       	ldi	r26, 0x80	; 128
    42f2:	bf e3       	ldi	r27, 0x3F	; 63
    42f4:	8b 87       	std	Y+11, r24	; 0x0b
    42f6:	9c 87       	std	Y+12, r25	; 0x0c
    42f8:	ad 87       	std	Y+13, r26	; 0x0d
    42fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    42fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4300:	8d 85       	ldd	r24, Y+13	; 0x0d
    4302:	9e 85       	ldd	r25, Y+14	; 0x0e
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	4a ef       	ldi	r20, 0xFA	; 250
    430a:	54 e4       	ldi	r21, 0x44	; 68
    430c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4310:	dc 01       	movw	r26, r24
    4312:	cb 01       	movw	r24, r22
    4314:	8f 83       	std	Y+7, r24	; 0x07
    4316:	98 87       	std	Y+8, r25	; 0x08
    4318:	a9 87       	std	Y+9, r26	; 0x09
    431a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    431c:	6f 81       	ldd	r22, Y+7	; 0x07
    431e:	78 85       	ldd	r23, Y+8	; 0x08
    4320:	89 85       	ldd	r24, Y+9	; 0x09
    4322:	9a 85       	ldd	r25, Y+10	; 0x0a
    4324:	20 e0       	ldi	r18, 0x00	; 0
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	40 e8       	ldi	r20, 0x80	; 128
    432a:	5f e3       	ldi	r21, 0x3F	; 63
    432c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4330:	88 23       	and	r24, r24
    4332:	2c f4       	brge	.+10     	; 0x433e <LCD_VidInt+0x34a>
		__ticks = 1;
    4334:	81 e0       	ldi	r24, 0x01	; 1
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	9e 83       	std	Y+6, r25	; 0x06
    433a:	8d 83       	std	Y+5, r24	; 0x05
    433c:	3f c0       	rjmp	.+126    	; 0x43bc <LCD_VidInt+0x3c8>
	else if (__tmp > 65535)
    433e:	6f 81       	ldd	r22, Y+7	; 0x07
    4340:	78 85       	ldd	r23, Y+8	; 0x08
    4342:	89 85       	ldd	r24, Y+9	; 0x09
    4344:	9a 85       	ldd	r25, Y+10	; 0x0a
    4346:	20 e0       	ldi	r18, 0x00	; 0
    4348:	3f ef       	ldi	r19, 0xFF	; 255
    434a:	4f e7       	ldi	r20, 0x7F	; 127
    434c:	57 e4       	ldi	r21, 0x47	; 71
    434e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4352:	18 16       	cp	r1, r24
    4354:	4c f5       	brge	.+82     	; 0x43a8 <LCD_VidInt+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4356:	6b 85       	ldd	r22, Y+11	; 0x0b
    4358:	7c 85       	ldd	r23, Y+12	; 0x0c
    435a:	8d 85       	ldd	r24, Y+13	; 0x0d
    435c:	9e 85       	ldd	r25, Y+14	; 0x0e
    435e:	20 e0       	ldi	r18, 0x00	; 0
    4360:	30 e0       	ldi	r19, 0x00	; 0
    4362:	40 e2       	ldi	r20, 0x20	; 32
    4364:	51 e4       	ldi	r21, 0x41	; 65
    4366:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    436a:	dc 01       	movw	r26, r24
    436c:	cb 01       	movw	r24, r22
    436e:	bc 01       	movw	r22, r24
    4370:	cd 01       	movw	r24, r26
    4372:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4376:	dc 01       	movw	r26, r24
    4378:	cb 01       	movw	r24, r22
    437a:	9e 83       	std	Y+6, r25	; 0x06
    437c:	8d 83       	std	Y+5, r24	; 0x05
    437e:	0f c0       	rjmp	.+30     	; 0x439e <LCD_VidInt+0x3aa>
    4380:	88 ec       	ldi	r24, 0xC8	; 200
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	9c 83       	std	Y+4, r25	; 0x04
    4386:	8b 83       	std	Y+3, r24	; 0x03
    4388:	8b 81       	ldd	r24, Y+3	; 0x03
    438a:	9c 81       	ldd	r25, Y+4	; 0x04
    438c:	01 97       	sbiw	r24, 0x01	; 1
    438e:	f1 f7       	brne	.-4      	; 0x438c <LCD_VidInt+0x398>
    4390:	9c 83       	std	Y+4, r25	; 0x04
    4392:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4394:	8d 81       	ldd	r24, Y+5	; 0x05
    4396:	9e 81       	ldd	r25, Y+6	; 0x06
    4398:	01 97       	sbiw	r24, 0x01	; 1
    439a:	9e 83       	std	Y+6, r25	; 0x06
    439c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    439e:	8d 81       	ldd	r24, Y+5	; 0x05
    43a0:	9e 81       	ldd	r25, Y+6	; 0x06
    43a2:	00 97       	sbiw	r24, 0x00	; 0
    43a4:	69 f7       	brne	.-38     	; 0x4380 <LCD_VidInt+0x38c>
    43a6:	14 c0       	rjmp	.+40     	; 0x43d0 <LCD_VidInt+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a8:	6f 81       	ldd	r22, Y+7	; 0x07
    43aa:	78 85       	ldd	r23, Y+8	; 0x08
    43ac:	89 85       	ldd	r24, Y+9	; 0x09
    43ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    43b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43b4:	dc 01       	movw	r26, r24
    43b6:	cb 01       	movw	r24, r22
    43b8:	9e 83       	std	Y+6, r25	; 0x06
    43ba:	8d 83       	std	Y+5, r24	; 0x05
    43bc:	8d 81       	ldd	r24, Y+5	; 0x05
    43be:	9e 81       	ldd	r25, Y+6	; 0x06
    43c0:	9a 83       	std	Y+2, r25	; 0x02
    43c2:	89 83       	std	Y+1, r24	; 0x01
    43c4:	89 81       	ldd	r24, Y+1	; 0x01
    43c6:	9a 81       	ldd	r25, Y+2	; 0x02
    43c8:	01 97       	sbiw	r24, 0x01	; 1
    43ca:	f1 f7       	brne	.-4      	; 0x43c8 <LCD_VidInt+0x3d4>
    43cc:	9a 83       	std	Y+2, r25	; 0x02
    43ce:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

}
    43d0:	e8 96       	adiw	r28, 0x38	; 56
    43d2:	0f b6       	in	r0, 0x3f	; 63
    43d4:	f8 94       	cli
    43d6:	de bf       	out	0x3e, r29	; 62
    43d8:	0f be       	out	0x3f, r0	; 63
    43da:	cd bf       	out	0x3d, r28	; 61
    43dc:	cf 91       	pop	r28
    43de:	df 91       	pop	r29
    43e0:	08 95       	ret

000043e2 <LCD_VidSendStr>:
void LCD_VidSendStr(u8* Copy_u8string)
{
    43e2:	df 93       	push	r29
    43e4:	cf 93       	push	r28
    43e6:	cd b7       	in	r28, 0x3d	; 61
    43e8:	de b7       	in	r29, 0x3e	; 62
    43ea:	6e 97       	sbiw	r28, 0x1e	; 30
    43ec:	0f b6       	in	r0, 0x3f	; 63
    43ee:	f8 94       	cli
    43f0:	de bf       	out	0x3e, r29	; 62
    43f2:	0f be       	out	0x3f, r0	; 63
    43f4:	cd bf       	out	0x3d, r28	; 61
    43f6:	9e 8f       	std	Y+30, r25	; 0x1e
    43f8:	8d 8f       	std	Y+29, r24	; 0x1d
	

	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
    43fa:	81 e0       	ldi	r24, 0x01	; 1
    43fc:	60 e0       	ldi	r22, 0x00	; 0
    43fe:	41 e0       	ldi	r20, 0x01	; 1
    4400:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
    4404:	81 e0       	ldi	r24, 0x01	; 1
    4406:	61 e0       	ldi	r22, 0x01	; 1
    4408:	40 e0       	ldi	r20, 0x00	; 0
    440a:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
    440e:	fa c0       	rjmp	.+500    	; 0x4604 <LCD_VidSendStr+0x222>
	while(*Copy_u8string!='\0')
	{

	DIO_VidWriteOnPort(Data_Port,*Copy_u8string);
    4410:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4412:	fe 8d       	ldd	r31, Y+30	; 0x1e
    4414:	90 81       	ld	r25, Z
    4416:	80 e0       	ldi	r24, 0x00	; 0
    4418:	69 2f       	mov	r22, r25
    441a:	0e 94 b7 09 	call	0x136e	; 0x136e <DIO_VidWriteOnPort>
	DIO_VidSetPin_Value(Control_Port,E,1);
    441e:	81 e0       	ldi	r24, 0x01	; 1
    4420:	62 e0       	ldi	r22, 0x02	; 2
    4422:	41 e0       	ldi	r20, 0x01	; 1
    4424:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
    4428:	80 e0       	ldi	r24, 0x00	; 0
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	a0 e2       	ldi	r26, 0x20	; 32
    442e:	b1 e4       	ldi	r27, 0x41	; 65
    4430:	89 8f       	std	Y+25, r24	; 0x19
    4432:	9a 8f       	std	Y+26, r25	; 0x1a
    4434:	ab 8f       	std	Y+27, r26	; 0x1b
    4436:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4438:	69 8d       	ldd	r22, Y+25	; 0x19
    443a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    443c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    443e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	4a ef       	ldi	r20, 0xFA	; 250
    4446:	54 e4       	ldi	r21, 0x44	; 68
    4448:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    444c:	dc 01       	movw	r26, r24
    444e:	cb 01       	movw	r24, r22
    4450:	8d 8b       	std	Y+21, r24	; 0x15
    4452:	9e 8b       	std	Y+22, r25	; 0x16
    4454:	af 8b       	std	Y+23, r26	; 0x17
    4456:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4458:	6d 89       	ldd	r22, Y+21	; 0x15
    445a:	7e 89       	ldd	r23, Y+22	; 0x16
    445c:	8f 89       	ldd	r24, Y+23	; 0x17
    445e:	98 8d       	ldd	r25, Y+24	; 0x18
    4460:	20 e0       	ldi	r18, 0x00	; 0
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	40 e8       	ldi	r20, 0x80	; 128
    4466:	5f e3       	ldi	r21, 0x3F	; 63
    4468:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    446c:	88 23       	and	r24, r24
    446e:	2c f4       	brge	.+10     	; 0x447a <LCD_VidSendStr+0x98>
		__ticks = 1;
    4470:	81 e0       	ldi	r24, 0x01	; 1
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	9c 8b       	std	Y+20, r25	; 0x14
    4476:	8b 8b       	std	Y+19, r24	; 0x13
    4478:	3f c0       	rjmp	.+126    	; 0x44f8 <LCD_VidSendStr+0x116>
	else if (__tmp > 65535)
    447a:	6d 89       	ldd	r22, Y+21	; 0x15
    447c:	7e 89       	ldd	r23, Y+22	; 0x16
    447e:	8f 89       	ldd	r24, Y+23	; 0x17
    4480:	98 8d       	ldd	r25, Y+24	; 0x18
    4482:	20 e0       	ldi	r18, 0x00	; 0
    4484:	3f ef       	ldi	r19, 0xFF	; 255
    4486:	4f e7       	ldi	r20, 0x7F	; 127
    4488:	57 e4       	ldi	r21, 0x47	; 71
    448a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    448e:	18 16       	cp	r1, r24
    4490:	4c f5       	brge	.+82     	; 0x44e4 <LCD_VidSendStr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4492:	69 8d       	ldd	r22, Y+25	; 0x19
    4494:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4496:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4498:	9c 8d       	ldd	r25, Y+28	; 0x1c
    449a:	20 e0       	ldi	r18, 0x00	; 0
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	40 e2       	ldi	r20, 0x20	; 32
    44a0:	51 e4       	ldi	r21, 0x41	; 65
    44a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    44a6:	dc 01       	movw	r26, r24
    44a8:	cb 01       	movw	r24, r22
    44aa:	bc 01       	movw	r22, r24
    44ac:	cd 01       	movw	r24, r26
    44ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44b2:	dc 01       	movw	r26, r24
    44b4:	cb 01       	movw	r24, r22
    44b6:	9c 8b       	std	Y+20, r25	; 0x14
    44b8:	8b 8b       	std	Y+19, r24	; 0x13
    44ba:	0f c0       	rjmp	.+30     	; 0x44da <LCD_VidSendStr+0xf8>
    44bc:	88 ec       	ldi	r24, 0xC8	; 200
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	9a 8b       	std	Y+18, r25	; 0x12
    44c2:	89 8b       	std	Y+17, r24	; 0x11
    44c4:	89 89       	ldd	r24, Y+17	; 0x11
    44c6:	9a 89       	ldd	r25, Y+18	; 0x12
    44c8:	01 97       	sbiw	r24, 0x01	; 1
    44ca:	f1 f7       	brne	.-4      	; 0x44c8 <LCD_VidSendStr+0xe6>
    44cc:	9a 8b       	std	Y+18, r25	; 0x12
    44ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d0:	8b 89       	ldd	r24, Y+19	; 0x13
    44d2:	9c 89       	ldd	r25, Y+20	; 0x14
    44d4:	01 97       	sbiw	r24, 0x01	; 1
    44d6:	9c 8b       	std	Y+20, r25	; 0x14
    44d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44da:	8b 89       	ldd	r24, Y+19	; 0x13
    44dc:	9c 89       	ldd	r25, Y+20	; 0x14
    44de:	00 97       	sbiw	r24, 0x00	; 0
    44e0:	69 f7       	brne	.-38     	; 0x44bc <LCD_VidSendStr+0xda>
    44e2:	14 c0       	rjmp	.+40     	; 0x450c <LCD_VidSendStr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44e4:	6d 89       	ldd	r22, Y+21	; 0x15
    44e6:	7e 89       	ldd	r23, Y+22	; 0x16
    44e8:	8f 89       	ldd	r24, Y+23	; 0x17
    44ea:	98 8d       	ldd	r25, Y+24	; 0x18
    44ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44f0:	dc 01       	movw	r26, r24
    44f2:	cb 01       	movw	r24, r22
    44f4:	9c 8b       	std	Y+20, r25	; 0x14
    44f6:	8b 8b       	std	Y+19, r24	; 0x13
    44f8:	8b 89       	ldd	r24, Y+19	; 0x13
    44fa:	9c 89       	ldd	r25, Y+20	; 0x14
    44fc:	98 8b       	std	Y+16, r25	; 0x10
    44fe:	8f 87       	std	Y+15, r24	; 0x0f
    4500:	8f 85       	ldd	r24, Y+15	; 0x0f
    4502:	98 89       	ldd	r25, Y+16	; 0x10
    4504:	01 97       	sbiw	r24, 0x01	; 1
    4506:	f1 f7       	brne	.-4      	; 0x4504 <LCD_VidSendStr+0x122>
    4508:	98 8b       	std	Y+16, r25	; 0x10
    450a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	62 e0       	ldi	r22, 0x02	; 2
    4510:	40 e0       	ldi	r20, 0x00	; 0
    4512:	0e 94 48 07 	call	0xe90	; 0xe90 <DIO_VidSetPin_Value>
    4516:	80 e0       	ldi	r24, 0x00	; 0
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	a0 e2       	ldi	r26, 0x20	; 32
    451c:	b1 e4       	ldi	r27, 0x41	; 65
    451e:	8b 87       	std	Y+11, r24	; 0x0b
    4520:	9c 87       	std	Y+12, r25	; 0x0c
    4522:	ad 87       	std	Y+13, r26	; 0x0d
    4524:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4526:	6b 85       	ldd	r22, Y+11	; 0x0b
    4528:	7c 85       	ldd	r23, Y+12	; 0x0c
    452a:	8d 85       	ldd	r24, Y+13	; 0x0d
    452c:	9e 85       	ldd	r25, Y+14	; 0x0e
    452e:	20 e0       	ldi	r18, 0x00	; 0
    4530:	30 e0       	ldi	r19, 0x00	; 0
    4532:	4a ef       	ldi	r20, 0xFA	; 250
    4534:	54 e4       	ldi	r21, 0x44	; 68
    4536:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    453a:	dc 01       	movw	r26, r24
    453c:	cb 01       	movw	r24, r22
    453e:	8f 83       	std	Y+7, r24	; 0x07
    4540:	98 87       	std	Y+8, r25	; 0x08
    4542:	a9 87       	std	Y+9, r26	; 0x09
    4544:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4546:	6f 81       	ldd	r22, Y+7	; 0x07
    4548:	78 85       	ldd	r23, Y+8	; 0x08
    454a:	89 85       	ldd	r24, Y+9	; 0x09
    454c:	9a 85       	ldd	r25, Y+10	; 0x0a
    454e:	20 e0       	ldi	r18, 0x00	; 0
    4550:	30 e0       	ldi	r19, 0x00	; 0
    4552:	40 e8       	ldi	r20, 0x80	; 128
    4554:	5f e3       	ldi	r21, 0x3F	; 63
    4556:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    455a:	88 23       	and	r24, r24
    455c:	2c f4       	brge	.+10     	; 0x4568 <LCD_VidSendStr+0x186>
		__ticks = 1;
    455e:	81 e0       	ldi	r24, 0x01	; 1
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	9e 83       	std	Y+6, r25	; 0x06
    4564:	8d 83       	std	Y+5, r24	; 0x05
    4566:	3f c0       	rjmp	.+126    	; 0x45e6 <LCD_VidSendStr+0x204>
	else if (__tmp > 65535)
    4568:	6f 81       	ldd	r22, Y+7	; 0x07
    456a:	78 85       	ldd	r23, Y+8	; 0x08
    456c:	89 85       	ldd	r24, Y+9	; 0x09
    456e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	3f ef       	ldi	r19, 0xFF	; 255
    4574:	4f e7       	ldi	r20, 0x7F	; 127
    4576:	57 e4       	ldi	r21, 0x47	; 71
    4578:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    457c:	18 16       	cp	r1, r24
    457e:	4c f5       	brge	.+82     	; 0x45d2 <LCD_VidSendStr+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4580:	6b 85       	ldd	r22, Y+11	; 0x0b
    4582:	7c 85       	ldd	r23, Y+12	; 0x0c
    4584:	8d 85       	ldd	r24, Y+13	; 0x0d
    4586:	9e 85       	ldd	r25, Y+14	; 0x0e
    4588:	20 e0       	ldi	r18, 0x00	; 0
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	40 e2       	ldi	r20, 0x20	; 32
    458e:	51 e4       	ldi	r21, 0x41	; 65
    4590:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4594:	dc 01       	movw	r26, r24
    4596:	cb 01       	movw	r24, r22
    4598:	bc 01       	movw	r22, r24
    459a:	cd 01       	movw	r24, r26
    459c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    45a0:	dc 01       	movw	r26, r24
    45a2:	cb 01       	movw	r24, r22
    45a4:	9e 83       	std	Y+6, r25	; 0x06
    45a6:	8d 83       	std	Y+5, r24	; 0x05
    45a8:	0f c0       	rjmp	.+30     	; 0x45c8 <LCD_VidSendStr+0x1e6>
    45aa:	88 ec       	ldi	r24, 0xC8	; 200
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	9c 83       	std	Y+4, r25	; 0x04
    45b0:	8b 83       	std	Y+3, r24	; 0x03
    45b2:	8b 81       	ldd	r24, Y+3	; 0x03
    45b4:	9c 81       	ldd	r25, Y+4	; 0x04
    45b6:	01 97       	sbiw	r24, 0x01	; 1
    45b8:	f1 f7       	brne	.-4      	; 0x45b6 <LCD_VidSendStr+0x1d4>
    45ba:	9c 83       	std	Y+4, r25	; 0x04
    45bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45be:	8d 81       	ldd	r24, Y+5	; 0x05
    45c0:	9e 81       	ldd	r25, Y+6	; 0x06
    45c2:	01 97       	sbiw	r24, 0x01	; 1
    45c4:	9e 83       	std	Y+6, r25	; 0x06
    45c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c8:	8d 81       	ldd	r24, Y+5	; 0x05
    45ca:	9e 81       	ldd	r25, Y+6	; 0x06
    45cc:	00 97       	sbiw	r24, 0x00	; 0
    45ce:	69 f7       	brne	.-38     	; 0x45aa <LCD_VidSendStr+0x1c8>
    45d0:	14 c0       	rjmp	.+40     	; 0x45fa <LCD_VidSendStr+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45d2:	6f 81       	ldd	r22, Y+7	; 0x07
    45d4:	78 85       	ldd	r23, Y+8	; 0x08
    45d6:	89 85       	ldd	r24, Y+9	; 0x09
    45d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    45de:	dc 01       	movw	r26, r24
    45e0:	cb 01       	movw	r24, r22
    45e2:	9e 83       	std	Y+6, r25	; 0x06
    45e4:	8d 83       	std	Y+5, r24	; 0x05
    45e6:	8d 81       	ldd	r24, Y+5	; 0x05
    45e8:	9e 81       	ldd	r25, Y+6	; 0x06
    45ea:	9a 83       	std	Y+2, r25	; 0x02
    45ec:	89 83       	std	Y+1, r24	; 0x01
    45ee:	89 81       	ldd	r24, Y+1	; 0x01
    45f0:	9a 81       	ldd	r25, Y+2	; 0x02
    45f2:	01 97       	sbiw	r24, 0x01	; 1
    45f4:	f1 f7       	brne	.-4      	; 0x45f2 <LCD_VidSendStr+0x210>
    45f6:	9a 83       	std	Y+2, r25	; 0x02
    45f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	Copy_u8string++;
    45fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45fe:	01 96       	adiw	r24, 0x01	; 1
    4600:	9e 8f       	std	Y+30, r25	; 0x1e
    4602:	8d 8f       	std	Y+29, r24	; 0x1d
{
	

	DIO_VidSetPin_Value(Control_Port,RS,1);   //rs=1   data
	DIO_VidSetPin_Value(Control_Port,RW,0);		//rw=0 write
	while(*Copy_u8string!='\0')
    4604:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4606:	fe 8d       	ldd	r31, Y+30	; 0x1e
    4608:	80 81       	ld	r24, Z
    460a:	88 23       	and	r24, r24
    460c:	09 f0       	breq	.+2      	; 0x4610 <LCD_VidSendStr+0x22e>
    460e:	00 cf       	rjmp	.-512    	; 0x4410 <LCD_VidSendStr+0x2e>
	_delay_ms(10);
	DIO_VidSetPin_Value(Control_Port,E,0);
	_delay_ms(10);
	Copy_u8string++;
	}
}
    4610:	6e 96       	adiw	r28, 0x1e	; 30
    4612:	0f b6       	in	r0, 0x3f	; 63
    4614:	f8 94       	cli
    4616:	de bf       	out	0x3e, r29	; 62
    4618:	0f be       	out	0x3f, r0	; 63
    461a:	cd bf       	out	0x3d, r28	; 61
    461c:	cf 91       	pop	r28
    461e:	df 91       	pop	r29
    4620:	08 95       	ret

00004622 <LCD_VidSendNum>:
void LCD_VidSendNum(u16 Copy_u16Num)
{	u16 rev=0;
    4622:	df 93       	push	r29
    4624:	cf 93       	push	r28
    4626:	00 d0       	rcall	.+0      	; 0x4628 <LCD_VidSendNum+0x6>
    4628:	00 d0       	rcall	.+0      	; 0x462a <LCD_VidSendNum+0x8>
    462a:	00 d0       	rcall	.+0      	; 0x462c <LCD_VidSendNum+0xa>
    462c:	cd b7       	in	r28, 0x3d	; 61
    462e:	de b7       	in	r29, 0x3e	; 62
    4630:	9e 83       	std	Y+6, r25	; 0x06
    4632:	8d 83       	std	Y+5, r24	; 0x05
    4634:	1c 82       	std	Y+4, r1	; 0x04
    4636:	1b 82       	std	Y+3, r1	; 0x03
	u8 zeros=0;
    4638:	1a 82       	std	Y+2, r1	; 0x02
	if (Copy_u16Num!=0)
    463a:	8d 81       	ldd	r24, Y+5	; 0x05
    463c:	9e 81       	ldd	r25, Y+6	; 0x06
    463e:	00 97       	sbiw	r24, 0x00	; 0
    4640:	09 f4       	brne	.+2      	; 0x4644 <LCD_VidSendNum+0x22>
    4642:	53 c0       	rjmp	.+166    	; 0x46ea <LCD_VidSendNum+0xc8>
    4644:	25 c0       	rjmp	.+74     	; 0x4690 <LCD_VidSendNum+0x6e>
	{
	while(Copy_u16Num>0)
		{
		 rev=(rev*10)+(Copy_u16Num % 10);
    4646:	8b 81       	ldd	r24, Y+3	; 0x03
    4648:	9c 81       	ldd	r25, Y+4	; 0x04
    464a:	9c 01       	movw	r18, r24
    464c:	22 0f       	add	r18, r18
    464e:	33 1f       	adc	r19, r19
    4650:	c9 01       	movw	r24, r18
    4652:	88 0f       	add	r24, r24
    4654:	99 1f       	adc	r25, r25
    4656:	88 0f       	add	r24, r24
    4658:	99 1f       	adc	r25, r25
    465a:	f9 01       	movw	r30, r18
    465c:	e8 0f       	add	r30, r24
    465e:	f9 1f       	adc	r31, r25
    4660:	8d 81       	ldd	r24, Y+5	; 0x05
    4662:	9e 81       	ldd	r25, Y+6	; 0x06
    4664:	2a e0       	ldi	r18, 0x0A	; 10
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	b9 01       	movw	r22, r18
    466a:	0e 94 00 24 	call	0x4800	; 0x4800 <__udivmodhi4>
    466e:	8e 0f       	add	r24, r30
    4670:	9f 1f       	adc	r25, r31
    4672:	9c 83       	std	Y+4, r25	; 0x04
    4674:	8b 83       	std	Y+3, r24	; 0x03
		Copy_u16Num/=10;
    4676:	8d 81       	ldd	r24, Y+5	; 0x05
    4678:	9e 81       	ldd	r25, Y+6	; 0x06
    467a:	2a e0       	ldi	r18, 0x0A	; 10
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	b9 01       	movw	r22, r18
    4680:	0e 94 00 24 	call	0x4800	; 0x4800 <__udivmodhi4>
    4684:	cb 01       	movw	r24, r22
    4686:	9e 83       	std	Y+6, r25	; 0x06
    4688:	8d 83       	std	Y+5, r24	; 0x05
		zeros++;
    468a:	8a 81       	ldd	r24, Y+2	; 0x02
    468c:	8f 5f       	subi	r24, 0xFF	; 255
    468e:	8a 83       	std	Y+2, r24	; 0x02
void LCD_VidSendNum(u16 Copy_u16Num)
{	u16 rev=0;
	u8 zeros=0;
	if (Copy_u16Num!=0)
	{
	while(Copy_u16Num>0)
    4690:	8d 81       	ldd	r24, Y+5	; 0x05
    4692:	9e 81       	ldd	r25, Y+6	; 0x06
    4694:	00 97       	sbiw	r24, 0x00	; 0
    4696:	b9 f6       	brne	.-82     	; 0x4646 <LCD_VidSendNum+0x24>
    4698:	19 c0       	rjmp	.+50     	; 0x46cc <LCD_VidSendNum+0xaa>
		Copy_u16Num/=10;
		zeros++;
		};
	while(rev!=0)
	{
	u8 rem=rev%10;
    469a:	8b 81       	ldd	r24, Y+3	; 0x03
    469c:	9c 81       	ldd	r25, Y+4	; 0x04
    469e:	2a e0       	ldi	r18, 0x0A	; 10
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	b9 01       	movw	r22, r18
    46a4:	0e 94 00 24 	call	0x4800	; 0x4800 <__udivmodhi4>
    46a8:	89 83       	std	Y+1, r24	; 0x01
	rev/=10;
    46aa:	8b 81       	ldd	r24, Y+3	; 0x03
    46ac:	9c 81       	ldd	r25, Y+4	; 0x04
    46ae:	2a e0       	ldi	r18, 0x0A	; 10
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	b9 01       	movw	r22, r18
    46b4:	0e 94 00 24 	call	0x4800	; 0x4800 <__udivmodhi4>
    46b8:	cb 01       	movw	r24, r22
    46ba:	9c 83       	std	Y+4, r25	; 0x04
    46bc:	8b 83       	std	Y+3, r24	; 0x03
	LCD_VidSendData((48+rem));//+48 to have aski code
    46be:	89 81       	ldd	r24, Y+1	; 0x01
    46c0:	80 5d       	subi	r24, 0xD0	; 208
    46c2:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <LCD_VidSendData>
	zeros--;
    46c6:	8a 81       	ldd	r24, Y+2	; 0x02
    46c8:	81 50       	subi	r24, 0x01	; 1
    46ca:	8a 83       	std	Y+2, r24	; 0x02
		{
		 rev=(rev*10)+(Copy_u16Num % 10);
		Copy_u16Num/=10;
		zeros++;
		};
	while(rev!=0)
    46cc:	8b 81       	ldd	r24, Y+3	; 0x03
    46ce:	9c 81       	ldd	r25, Y+4	; 0x04
    46d0:	00 97       	sbiw	r24, 0x00	; 0
    46d2:	19 f7       	brne	.-58     	; 0x469a <LCD_VidSendNum+0x78>
    46d4:	06 c0       	rjmp	.+12     	; 0x46e2 <LCD_VidSendNum+0xc0>
	LCD_VidSendData((48+rem));//+48 to have aski code
	zeros--;
	}
	while(zeros>0)
	{
	LCD_VidSendData((48+0));
    46d6:	80 e3       	ldi	r24, 0x30	; 48
    46d8:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <LCD_VidSendData>
	zeros--;
    46dc:	8a 81       	ldd	r24, Y+2	; 0x02
    46de:	81 50       	subi	r24, 0x01	; 1
    46e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 rem=rev%10;
	rev/=10;
	LCD_VidSendData((48+rem));//+48 to have aski code
	zeros--;
	}
	while(zeros>0)
    46e2:	8a 81       	ldd	r24, Y+2	; 0x02
    46e4:	88 23       	and	r24, r24
    46e6:	b9 f7       	brne	.-18     	; 0x46d6 <LCD_VidSendNum+0xb4>
    46e8:	03 c0       	rjmp	.+6      	; 0x46f0 <LCD_VidSendNum+0xce>
	}
	}
	else
	{

		LCD_VidSendData((48+0));
    46ea:	80 e3       	ldi	r24, 0x30	; 48
    46ec:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <LCD_VidSendData>
	}
}
    46f0:	26 96       	adiw	r28, 0x06	; 6
    46f2:	0f b6       	in	r0, 0x3f	; 63
    46f4:	f8 94       	cli
    46f6:	de bf       	out	0x3e, r29	; 62
    46f8:	0f be       	out	0x3f, r0	; 63
    46fa:	cd bf       	out	0x3d, r28	; 61
    46fc:	cf 91       	pop	r28
    46fe:	df 91       	pop	r29
    4700:	08 95       	ret

00004702 <LCD_VidShiftDispaly>:

void LCD_VidShiftDispaly(u8 Copy_u8Line,u8 Copy_u8Column)
{u8 shift=0,offset=0;
    4702:	df 93       	push	r29
    4704:	cf 93       	push	r28
    4706:	00 d0       	rcall	.+0      	; 0x4708 <LCD_VidShiftDispaly+0x6>
    4708:	00 d0       	rcall	.+0      	; 0x470a <LCD_VidShiftDispaly+0x8>
    470a:	00 d0       	rcall	.+0      	; 0x470c <LCD_VidShiftDispaly+0xa>
    470c:	cd b7       	in	r28, 0x3d	; 61
    470e:	de b7       	in	r29, 0x3e	; 62
    4710:	8b 83       	std	Y+3, r24	; 0x03
    4712:	6c 83       	std	Y+4, r22	; 0x04
    4714:	1a 82       	std	Y+2, r1	; 0x02
    4716:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Line)
    4718:	8b 81       	ldd	r24, Y+3	; 0x03
    471a:	28 2f       	mov	r18, r24
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	3e 83       	std	Y+6, r19	; 0x06
    4720:	2d 83       	std	Y+5, r18	; 0x05
    4722:	8d 81       	ldd	r24, Y+5	; 0x05
    4724:	9e 81       	ldd	r25, Y+6	; 0x06
    4726:	81 30       	cpi	r24, 0x01	; 1
    4728:	91 05       	cpc	r25, r1
    472a:	31 f0       	breq	.+12     	; 0x4738 <LCD_VidShiftDispaly+0x36>
    472c:	2d 81       	ldd	r18, Y+5	; 0x05
    472e:	3e 81       	ldd	r19, Y+6	; 0x06
    4730:	22 30       	cpi	r18, 0x02	; 2
    4732:	31 05       	cpc	r19, r1
    4734:	21 f0       	breq	.+8      	; 0x473e <LCD_VidShiftDispaly+0x3c>
    4736:	05 c0       	rjmp	.+10     	; 0x4742 <LCD_VidShiftDispaly+0x40>
	{case 1:
		offset=128;
    4738:	80 e8       	ldi	r24, 0x80	; 128
    473a:	89 83       	std	Y+1, r24	; 0x01
    473c:	02 c0       	rjmp	.+4      	; 0x4742 <LCD_VidShiftDispaly+0x40>
	break;
	case 2:
		offset=128+64;
    473e:	80 ec       	ldi	r24, 0xC0	; 192
    4740:	89 83       	std	Y+1, r24	; 0x01
	}
	shift=offset+Copy_u8Column;
    4742:	89 81       	ldd	r24, Y+1	; 0x01
    4744:	9c 81       	ldd	r25, Y+4	; 0x04
    4746:	89 0f       	add	r24, r25
    4748:	8a 83       	std	Y+2, r24	; 0x02
	LCD_VidSendCommand(shift);
    474a:	8a 81       	ldd	r24, Y+2	; 0x02
    474c:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <LCD_VidSendCommand>
}
    4750:	26 96       	adiw	r28, 0x06	; 6
    4752:	0f b6       	in	r0, 0x3f	; 63
    4754:	f8 94       	cli
    4756:	de bf       	out	0x3e, r29	; 62
    4758:	0f be       	out	0x3f, r0	; 63
    475a:	cd bf       	out	0x3d, r28	; 61
    475c:	cf 91       	pop	r28
    475e:	df 91       	pop	r29
    4760:	08 95       	ret

00004762 <LCD_VidCLR>:


void LCD_VidCLR(void)
{
    4762:	df 93       	push	r29
    4764:	cf 93       	push	r28
    4766:	cd b7       	in	r28, 0x3d	; 61
    4768:	de b7       	in	r29, 0x3e	; 62

	LCD_VidSendCommand(0b00000001);
    476a:	81 e0       	ldi	r24, 0x01	; 1
    476c:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <LCD_VidSendCommand>

}
    4770:	cf 91       	pop	r28
    4772:	df 91       	pop	r29
    4774:	08 95       	ret

00004776 <LCD_SetCGRam>:

void LCD_SetCGRam(u8 Copy_u8location )  //start from 0:7
{	u8 offset=64+Copy_u8location;
    4776:	df 93       	push	r29
    4778:	cf 93       	push	r28
    477a:	00 d0       	rcall	.+0      	; 0x477c <LCD_SetCGRam+0x6>
    477c:	cd b7       	in	r28, 0x3d	; 61
    477e:	de b7       	in	r29, 0x3e	; 62
    4780:	8a 83       	std	Y+2, r24	; 0x02
    4782:	8a 81       	ldd	r24, Y+2	; 0x02
    4784:	80 5c       	subi	r24, 0xC0	; 192
    4786:	89 83       	std	Y+1, r24	; 0x01

	LCD_VidSendCommand(offset);
    4788:	89 81       	ldd	r24, Y+1	; 0x01
    478a:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <LCD_VidSendCommand>

}
    478e:	0f 90       	pop	r0
    4790:	0f 90       	pop	r0
    4792:	cf 91       	pop	r28
    4794:	df 91       	pop	r29
    4796:	08 95       	ret

00004798 <LCD_SetDDRam>:

void LCD_SetDDRam(void)
{	u8 offset=128;
    4798:	df 93       	push	r29
    479a:	cf 93       	push	r28
    479c:	0f 92       	push	r0
    479e:	cd b7       	in	r28, 0x3d	; 61
    47a0:	de b7       	in	r29, 0x3e	; 62
    47a2:	80 e8       	ldi	r24, 0x80	; 128
    47a4:	89 83       	std	Y+1, r24	; 0x01

	LCD_VidSendCommand(offset);
    47a6:	89 81       	ldd	r24, Y+1	; 0x01
    47a8:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <LCD_VidSendCommand>

}
    47ac:	0f 90       	pop	r0
    47ae:	cf 91       	pop	r28
    47b0:	df 91       	pop	r29
    47b2:	08 95       	ret

000047b4 <LCD_VidSendCharToCGRam>:


void LCD_VidSendCharToCGRam(u8* Copy_u8Ptr)
{
    47b4:	df 93       	push	r29
    47b6:	cf 93       	push	r28
    47b8:	00 d0       	rcall	.+0      	; 0x47ba <LCD_VidSendCharToCGRam+0x6>
    47ba:	00 d0       	rcall	.+0      	; 0x47bc <LCD_VidSendCharToCGRam+0x8>
    47bc:	cd b7       	in	r28, 0x3d	; 61
    47be:	de b7       	in	r29, 0x3e	; 62
    47c0:	9c 83       	std	Y+4, r25	; 0x04
    47c2:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;i<8;i++)
    47c4:	1a 82       	std	Y+2, r1	; 0x02
    47c6:	19 82       	std	Y+1, r1	; 0x01
    47c8:	0f c0       	rjmp	.+30     	; 0x47e8 <LCD_VidSendCharToCGRam+0x34>
	{
		LCD_VidSendData(*Copy_u8Ptr);
    47ca:	eb 81       	ldd	r30, Y+3	; 0x03
    47cc:	fc 81       	ldd	r31, Y+4	; 0x04
    47ce:	80 81       	ld	r24, Z
    47d0:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <LCD_VidSendData>
		Copy_u8Ptr++;
    47d4:	8b 81       	ldd	r24, Y+3	; 0x03
    47d6:	9c 81       	ldd	r25, Y+4	; 0x04
    47d8:	01 96       	adiw	r24, 0x01	; 1
    47da:	9c 83       	std	Y+4, r25	; 0x04
    47dc:	8b 83       	std	Y+3, r24	; 0x03
}


void LCD_VidSendCharToCGRam(u8* Copy_u8Ptr)
{
	for(int i=0;i<8;i++)
    47de:	89 81       	ldd	r24, Y+1	; 0x01
    47e0:	9a 81       	ldd	r25, Y+2	; 0x02
    47e2:	01 96       	adiw	r24, 0x01	; 1
    47e4:	9a 83       	std	Y+2, r25	; 0x02
    47e6:	89 83       	std	Y+1, r24	; 0x01
    47e8:	89 81       	ldd	r24, Y+1	; 0x01
    47ea:	9a 81       	ldd	r25, Y+2	; 0x02
    47ec:	88 30       	cpi	r24, 0x08	; 8
    47ee:	91 05       	cpc	r25, r1
    47f0:	64 f3       	brlt	.-40     	; 0x47ca <LCD_VidSendCharToCGRam+0x16>
		LCD_VidSendData(*Copy_u8Ptr);
		Copy_u8Ptr++;
	}


}
    47f2:	0f 90       	pop	r0
    47f4:	0f 90       	pop	r0
    47f6:	0f 90       	pop	r0
    47f8:	0f 90       	pop	r0
    47fa:	cf 91       	pop	r28
    47fc:	df 91       	pop	r29
    47fe:	08 95       	ret

00004800 <__udivmodhi4>:
    4800:	aa 1b       	sub	r26, r26
    4802:	bb 1b       	sub	r27, r27
    4804:	51 e1       	ldi	r21, 0x11	; 17
    4806:	07 c0       	rjmp	.+14     	; 0x4816 <__udivmodhi4_ep>

00004808 <__udivmodhi4_loop>:
    4808:	aa 1f       	adc	r26, r26
    480a:	bb 1f       	adc	r27, r27
    480c:	a6 17       	cp	r26, r22
    480e:	b7 07       	cpc	r27, r23
    4810:	10 f0       	brcs	.+4      	; 0x4816 <__udivmodhi4_ep>
    4812:	a6 1b       	sub	r26, r22
    4814:	b7 0b       	sbc	r27, r23

00004816 <__udivmodhi4_ep>:
    4816:	88 1f       	adc	r24, r24
    4818:	99 1f       	adc	r25, r25
    481a:	5a 95       	dec	r21
    481c:	a9 f7       	brne	.-22     	; 0x4808 <__udivmodhi4_loop>
    481e:	80 95       	com	r24
    4820:	90 95       	com	r25
    4822:	bc 01       	movw	r22, r24
    4824:	cd 01       	movw	r24, r26
    4826:	08 95       	ret

00004828 <__prologue_saves__>:
    4828:	2f 92       	push	r2
    482a:	3f 92       	push	r3
    482c:	4f 92       	push	r4
    482e:	5f 92       	push	r5
    4830:	6f 92       	push	r6
    4832:	7f 92       	push	r7
    4834:	8f 92       	push	r8
    4836:	9f 92       	push	r9
    4838:	af 92       	push	r10
    483a:	bf 92       	push	r11
    483c:	cf 92       	push	r12
    483e:	df 92       	push	r13
    4840:	ef 92       	push	r14
    4842:	ff 92       	push	r15
    4844:	0f 93       	push	r16
    4846:	1f 93       	push	r17
    4848:	cf 93       	push	r28
    484a:	df 93       	push	r29
    484c:	cd b7       	in	r28, 0x3d	; 61
    484e:	de b7       	in	r29, 0x3e	; 62
    4850:	ca 1b       	sub	r28, r26
    4852:	db 0b       	sbc	r29, r27
    4854:	0f b6       	in	r0, 0x3f	; 63
    4856:	f8 94       	cli
    4858:	de bf       	out	0x3e, r29	; 62
    485a:	0f be       	out	0x3f, r0	; 63
    485c:	cd bf       	out	0x3d, r28	; 61
    485e:	09 94       	ijmp

00004860 <__epilogue_restores__>:
    4860:	2a 88       	ldd	r2, Y+18	; 0x12
    4862:	39 88       	ldd	r3, Y+17	; 0x11
    4864:	48 88       	ldd	r4, Y+16	; 0x10
    4866:	5f 84       	ldd	r5, Y+15	; 0x0f
    4868:	6e 84       	ldd	r6, Y+14	; 0x0e
    486a:	7d 84       	ldd	r7, Y+13	; 0x0d
    486c:	8c 84       	ldd	r8, Y+12	; 0x0c
    486e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4870:	aa 84       	ldd	r10, Y+10	; 0x0a
    4872:	b9 84       	ldd	r11, Y+9	; 0x09
    4874:	c8 84       	ldd	r12, Y+8	; 0x08
    4876:	df 80       	ldd	r13, Y+7	; 0x07
    4878:	ee 80       	ldd	r14, Y+6	; 0x06
    487a:	fd 80       	ldd	r15, Y+5	; 0x05
    487c:	0c 81       	ldd	r16, Y+4	; 0x04
    487e:	1b 81       	ldd	r17, Y+3	; 0x03
    4880:	aa 81       	ldd	r26, Y+2	; 0x02
    4882:	b9 81       	ldd	r27, Y+1	; 0x01
    4884:	ce 0f       	add	r28, r30
    4886:	d1 1d       	adc	r29, r1
    4888:	0f b6       	in	r0, 0x3f	; 63
    488a:	f8 94       	cli
    488c:	de bf       	out	0x3e, r29	; 62
    488e:	0f be       	out	0x3f, r0	; 63
    4890:	cd bf       	out	0x3d, r28	; 61
    4892:	ed 01       	movw	r28, r26
    4894:	08 95       	ret

00004896 <_exit>:
    4896:	f8 94       	cli

00004898 <__stop_program>:
    4898:	ff cf       	rjmp	.-2      	; 0x4898 <__stop_program>
